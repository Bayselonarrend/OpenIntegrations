// OneScript: ./OInt/core/Modules/OPI_Ozon.os
// Lib: Ozon
// CLI: ozon

// MIT License

// Copyright (c) 2023 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:Typo-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:NumberOfOptionalParams-off
// BSLLS:UsingServiceTag-off
// BSLLS:LineLength-off

//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check wrong-string-literal-content
//@skip-check method-too-many-params

// Раскомментировать, если выполняется OneScript
// #Использовать "../../tools"

#Область ПрограммныйИнтерфейс

#Область АтрибутыИХарактеристики

// Получить дерево категорий и типов товаров
// Возвращает категории и типы для товаров в виде дерева
//
// Примечание:
// Создание товаров доступно только в категориях последнего уровня, сравните именно их с категориями на своей площадке. Категории не создаются по запросу пользователя
// Внимательно выбирайте категорию для товара: для разных категорий применяется разный размер комиссии.
// Метод в документации API: [post /v1/description-category/tree](@docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetTree)
//
// Параметры:
//  IDКлиента - Строка - Идентификатор клиента                                                        - clientid
//  КлючAPI   - Строка - API ключ                                                                     - apikey
//  Язык      - Строка - Язык ответа: DEFAULT (русский), RU, EN, TR (турецкий), ZH_HANS (китайский)   - lang
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьДеревоКатегорийИТиповТоваров(Знач IDКлиента, Знач КлючAPI, Знач Язык = "DEFAULT") Экспорт

    URL = "https://api-seller.ozon.ru/v1/description-category/tree";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("language", Язык, "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить характеристики категории
// Получает характеристики для указанной категории и типа товара
//
// Примечание:
// Если у dictionary_id значение 0, у атрибута нет вложенных справочников. Если значение другое, то справочники есть. Получить их можно методом ПолучитьЗначенияХарактеристик()
// Метод в документации API: [post /v1/description-category/attribute](@docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetAttributes)
//
// Параметры:
//  IDКлиента   - Строка        - Идентификатор клиента                                                      - clientid
//  КлючAPI     - Строка        - API ключ                                                                   - apikey
//  IDКатегории - Строка, Число - Идентификатор категории                                                    - categoryid
//  IDТипа      - Строка, Число - Идентификатор типа товара                                                  - typeid
//  Язык        - Строка        - Язык ответа: DEFAULT (русский), RU, EN, TR (турецкий), ZH_HANS (китайский) - lang
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьХарактеристикиКатегории(Знач IDКлиента
    , Знач КлючAPI
    , Знач IDКатегории
    , Знач IDТипа
    , Знач Язык = "DEFAULT") Экспорт

    Строка_ = "Строка";

    URL = "https://api-seller.ozon.ru/v1/description-category/attribute";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("description_category_id", IDКатегории, Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("type_id"                , IDТипа     , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("language"               , Язык       , Строка_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить значения характеристики
// Получает список доступных значений характеристики
//
// Примечание:
// Узнать, есть ли вложенный справочник, можно через метод ПолучитьХарактеристикиКатегории()
// Метод в документации API: [post /v1/description-category/attribute/values](@docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_GetAttributeValues)
//
// Параметры:
//  IDКлиента        - Строка        - Идентификатор клиента                                                      - clientid
//  КлючAPI          - Строка        - API ключ                                                                   - apikey
//  IDКатегории      - Строка, Число - Идентификатор категории                                                    - categoryid
//  IDТипа           - Строка, Число - Идентификатор типа товара                                                  - typeid
//  IDХарактеристики - Строка, Число - ID характеристики для получения значений                                   - attributeid
//  IDСправочника    - Строка, Число - ID первого справочника в ответе                                            - start
//  Язык             - Строка        - Язык ответа: DEFAULT (русский), RU, EN, TR (турецкий), ZH_HANS (китайский) - lang
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьЗначенияХарактеристики(Знач IDКлиента
    , Знач КлючAPI
    , Знач IDКатегории
    , Знач IDТипа
    , Знач IDХарактеристики
    , Знач IDСправочника = 1
    , Знач Язык = "DEFAULT") Экспорт

    Строка_ = "Строка";

    URL = "https://api-seller.ozon.ru/v1/description-category/attribute/values";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 200;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("description_category_id", IDКатегории      , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("type_id"                , IDТипа           , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("attribute_id"           , IDХарактеристики , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("language"               , Язык             , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"                  , Лимит            , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("last_value_id"          , IDСправочника - 1, Строка_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Найти значения характеристики
// Получает справочные значения характеристики по заданному значению в запросе
//
// Примечание:
// Узнать, есть ли вложенный справочник, можно через метод ПолучитьХарактеристикиКатегории()
// Метод в документации API: [post /v1/description-category/attribute/values/search](@docs.ozon.ru/api/seller/#operation/DescriptionCategoryAPI_SearchAttributeValues)
//
// Параметры:
//  IDКлиента        - Строка        - Идентификатор клиента                       - clientid
//  КлючAPI          - Строка        - API ключ                                    - apikey
//  IDКатегории      - Строка, Число - Идентификатор категории                     - categoryid
//  IDТипа           - Строка, Число - Идентификатор типа товара                   - typeid
//  IDХарактеристики - Строка, Число - ID характеристики для получения значений    - attributeid
//  Значение         - Строка        - Значение для поиска                         - value
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция НайтиЗначенияХарактеристики(Знач IDКлиента
    , Знач КлючAPI
    , Знач IDКатегории
    , Знач IDТипа
    , Знач IDХарактеристики
    , Знач Значение) Экспорт

    Строка_ = "Строка";

    URL = "https://api-seller.ozon.ru/v1/description-category/attribute/values/search";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 100;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("description_category_id", IDКатегории      , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("type_id"                , IDТипа           , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("attribute_id"           , IDХарактеристики , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"                  , Лимит            , Строка_, Параметры);
    OPI_Инструменты.ДобавитьПоле("value"                  , Значение         , Строка_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить лимиты работы с товарами
// Получает данные о лимитах на ассортимент, создание и обновление товаров
//
// Примечание:
// Метод в документации API: [post /v4/product/info/limit](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetUploadQuota)
//
// Параметры:
//  IDКлиента - Строка  - Идентификатор клиента - clientid
//  КлючAPI   - Строка  - API ключ              - apikey
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьЛимитыРаботыСТоварами(Знач IDКлиента, Знач КлючAPI) Экспорт

    URL = "https://api-seller.ozon.ru/v4/product/info/limit";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Ответ = OPI_Инструменты.Post(URL, , Заголовки);

    Возврат Ответ;

КонецФункции

#КонецОбласти

#Область ЗагрузкаИОбновлениеТоваров

// Получить список товаров
// Получает список товаров с фильтром или без
//
// Примечание:
// Метод в документации API: [post /v3/product/list](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductList)
//
// Параметры:
//  IDКлиента    - Строка                     - Идентификатор клиента                                       - clientid
//  КлючAPI      - Строка                     - API ключ                                                    - apikey
//  Фильтр       - Структура Из КлючИЗначение - Фильтр выборки товаров. См. ПолучитьСтруктуруФильтраТоваров - filter
//  IDПоследнего - Строка, Число              - ID последнего значения (last_id) из предыдущего запроса     - last
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокТоваров(Знач IDКлиента, Знач КлючAPI, Знач Фильтр = "", Знач IDПоследнего = 0) Экспорт

    Filter_ = "filter";

    URL = "https://api-seller.ozon.ru/v3/product/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 200;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле(Filter_  , Фильтр      , "Коллекция", Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"  , Лимит       , "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("last_id", IDПоследнего, "Строка"   , Параметры);

    Если Не Параметры.Свойство(Filter_) Тогда
        Параметры.Вставить(Filter_, Новый Структура);
    КонецЕсли;

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить описания харакетристик товаров
// Получает описания характеристик товаров с фильтром или без
//
// Примечание:
// Метод в документации API: [post /v4/products/info/attributes](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductAttributesV4)
//
// Параметры:
//  IDКлиента    - Строка                     - Идентификатор клиента                                       - clientid
//  КлючAPI      - Строка                     - API ключ                                                    - apikey
//  Фильтр       - Структура Из КлючИЗначение - Фильтр выборки товаров. См. ПолучитьСтруктуруФильтраТоваров - filter
//  IDПоследнего - Строка, Число              - ID последнего значения (last_id) из предыдущего запроса     - last
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьОписанияХарактеристикТоваров(Знач IDКлиента
    , Знач КлючAPI
    , Знач Фильтр = ""
    , Знач IDПоследнего = 0) Экспорт

    Filter_ = "filter";

    URL = "https://api-seller.ozon.ru/v4/product/info/attributes";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 200;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле(Filter_  , Фильтр      , "Коллекция", Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"  , Лимит       , "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("last_id", IDПоследнего, "Строка"   , Параметры);

    Если Не Параметры.Свойство(Filter_) Тогда
        Параметры.Вставить(Filter_, Новый Структура);
    КонецЕсли;

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить информацию о товарах
// Получает информацию о товарах по массиву идентификаторов
//
// Примечание:
// Уточняйте минимальную цену товара после применения всех акций в личном кабинете. Параметр min_price из ответа метода на доработке и возвращает 0
// Параметр active_product устарел, используйте значения параметра visible
// Параметры fbs_sku и fbo_sku из ответа метода были отключены 15 августа 2023 года
// В теле запроса должен быть один идентификатор или массив однотипных идентификаторов, в ответе будет массив items
// Метод в документации API: [post /v3/product/info/list](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoList)
//
// Параметры:
//  IDКлиента  - Строка                   - Идентификатор клиента                               - clientid
//  КлючAPI    - Строка                   - API ключ                                            - apikey
//  IDТоваров  - Число, Массив Из Число   - Идентификаторы товаров                              - productid
//  SKU        - Число, Массив Из Число   - Идентификаторы товаров в системе Ozon (SKU)         - sku
//  Артикулы   - Строка, Массив Из Строка - Идентификаторы товаров в системе продавца (Артикул) - offerid
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьИнформациюОТоварах(Знач IDКлиента
    , Знач КлючAPI
    , Знач IDТоваров = 0
    , Знач SKU = 0
    , Знач Артикулы = "") Экспорт

    Массив_ = "Массив";

    URL = "https://api-seller.ozon.ru/v3/product/info/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("offer_id"  , Артикулы , Массив_, Параметры);
    OPI_Инструменты.ДобавитьПоле("product_id", IDТоваров, Массив_, Параметры);
    OPI_Инструменты.ДобавитьПоле("sku"       , SKU      , Массив_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить описание товара
// Получает описание товара по идентификаторам
//
// Примечание:
// Метод в документации API: [post /v1/product/info/description](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoDescription)
//
// Параметры:
//  IDКлиента - Строка        - Идентификатор клиента                             - clientid
//  КлючAPI   - Строка        - API ключ                                          - apikey
//  IDТовара  - Строка, Число - Идентификатор товара                              - productid
//  Артикул   - Строка, Число - Идентификатор товара в системе продавца (Артикул) - offerid
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьОписаниеТовара(Знач IDКлиента, Знач КлючAPI, Знач IDТовара = 0, Знач Артикул = "") Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/info/description";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("offer_id"  , Артикул , "Строка", Параметры);
    OPI_Инструменты.ДобавитьПоле("product_id", IDТовара, "Число" , Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить контент рейтинг товаров
// Получает контент рейтинг товаров по SKU
//
// Примечание:
// Метод в документации API: [post /v1/product/rating-by-sku](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductRatingBySku)
//
// Параметры:
//  IDКлиента  - Строка                   - Идентификатор клиента                       - clientid
//  КлючAPI    - Строка                   - API ключ                                    - apikey
//  SKU        - Число, Массив Из Число   - Идентификаторы товаров в системе Ozon (SKU) - sku
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьКонтентРейтингТоваров(Знач IDКлиента, Знач КлючAPI, Знач SKU) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/rating-by-sku";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("skus", SKU, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Создать обновить товары
// Создает новые или обновляет существующие товары по структурам полей
//
// Примечание:
// Методы формирования структуры товара: ПолучитьСтруктуруТовара(), ДобавитьВидеоТовара(), ДобавитьВидеообложкуТовара()
// Метод проверки статуса добавления - ПолучитьСтатусДобавленияТовара()
// Метод в документации API: [post /v3/product/import](@docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsV3)
//
// Параметры:
//  IDКлиента     - Строка           - Идентификатор клиента                            - clientid
//  КлючAPI       - Строка           - API ключ                                         - apikey
//  МассивТоваров - Массив Из Строка - Массив или одна структура полей описания товара  - items
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция СоздатьОбновитьТовары(Знач IDКлиента, Знач КлючAPI, Знач МассивТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v3/product/import";

    Ответ = ОтправитьОписанияОбъектов(IDКлиента, КлючAPI, МассивТоваров, URL);

    Возврат Ответ;

КонецФункции

// Создать товары по Ozon ID
// Создаёт товар по указанному Ozon ID
//
// Примечание:
// Получить пустую структуру можно при помощи метода ПолучитьСокращеннуюСтруктуруТовара()
// Обновить товар по Ozon ID нельзя
// Метод в документации API: [post /v1/product/import-by-sku](@docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsBySKU)
//
// Параметры:
//  IDКлиента     - Строка           - Идентификатор клиента                                        - clientid
//  КлючAPI       - Строка           - API ключ                                                     - apikey
//  МассивТоваров - Массив Из Строка - Массив или одна сокращенная структура полей описания товара  - items
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция СоздатьТоварыПоOzonID(Знач IDКлиента, Знач КлючAPI, Знач МассивТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/import-by-sku";

    Ответ = ОтправитьОписанияОбъектов(IDКлиента, КлючAPI, МассивТоваров, URL);

    Возврат Ответ;

КонецФункции

// Обновить характеристики товаров
// Обновляет характеристики выбранных товаров
//
// Примечание:
// Получить пустую структуру можно при помощи метода ПолучитьСтруктуруОбновленияХарактеристик()
// Метод в документации API: [post /v1/product/attributes/update](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUpdateAttributes)
//
// Параметры:
//  IDКлиента           - Строка           - Идентификатор клиента                             - clientid
//  КлючAPI             - Строка           - API ключ                                          - apikey
//  МассивХарактеристик - Массив Из Строка - Массив или одна структура полей атрибутов товара  - items
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ОбновитьХарактеристикиТоваров(Знач IDКлиента, Знач КлючAPI, Знач МассивХарактеристик) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/attributes/update";

    Ответ = ОтправитьОписанияОбъектов(IDКлиента, КлючAPI, МассивХарактеристик, URL);

    Возврат Ответ;

КонецФункции

// Обновить изображения товара
// Обновляет изображения и маркетинговый цвет товара
//
// Примечание:
// При каждом вызове метода передавайте все изображения, которые должны быть на карточке товара
// Для загрузки передайте адрес ссылки на изображение в общедоступном облачном хранилище. Формат изображения по ссылке: JPG или PNG
// Если вы хотите изменить состав или порядок изображений, получите информацию с помощью метода ПолучитьИнформациюОТоваре(), скопируйте данные полей images, images360, color_image, измените и дополните состав или порядок в соответствии с необходимостью
// Метод в документации API: [post /v1/product/pictures/import](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductImportPictures)
//
// Параметры:
//  IDКлиента         - Строка           - Идентификатор клиента  - clientid
//  КлючAPI           - Строка           - API ключ               - apikey
//  IDТовара          - Строка, Число    - Идентификатор товара   - productid
//  МассивИзображений - Массив Из Строка - Массив URL изображений - images
//  Массив360         - Массив Из Строка - Массив изображений 360 - images360
//  МаркетинговыйЦвет - Строка           - Маркетинговый цвет     - color
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ОбновитьИзображенияТовара(Знач IDКлиента
    , Знач КлючAPI
    , Знач IDТовара
    , Знач МассивИзображений = ""
    , Знач Массив360 = ""
    , Знач МаркетинговыйЦвет = "") Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/pictures/import";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_id" , IDТовара         , "Число" , Параметры);
    OPI_Инструменты.ДобавитьПоле("color_image", МаркетинговыйЦвет, "Строка", Параметры);
    OPI_Инструменты.ДобавитьПоле("images"     , МассивИзображений, "Массив", Параметры);
    OPI_Инструменты.ДобавитьПоле("images360"  , Массив360        , "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Проверить загрузку изображений товаров
// Проверяет загрузку изображений по массиву ID товаров
//
// Примечание:
// Метод в документации API: [post /v2/product/pictures/info](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductInfoPictures)
//
// Параметры:
//  IDКлиента - Строка                                 - Идентификатор клиента   - clientid
//  КлючAPI   - Строка                                 - API ключ                - apikey
//  IDТоваров - Строка, Число, Массив Из Строка, Число - ID товаров для проверки - products
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПроверитьЗагрузкуИзображенийТоваров(Знач IDКлиента, Знач КлючAPI, Знач IDТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v2/product/pictures/info";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_id", IDТоваров, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Изменить артикулы товаров
// Изменяет артикулы существующих товаров
//
// Примечание:
// Метод в документации API: [post /v1/product/update/offer-id](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUpdateOfferID)
//
// Параметры:
//  IDКлиента             - Строка                        - Идентификатор клиента                     - clientid
//  КлючAPI               - Строка                        - API ключ                                  - apikey
//  СоответствиеАртикулов - Соответствие Из КлючИЗначение - Артикулы: Ключ > старый, Значение > новый - offers
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ИзменитьАртикулыТоваров(Знач IDКлиента, Знач КлючAPI, Знач СоответствиеАртикулов) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(СоответствиеАртикулов);

    Если ТипЗнч(СоответствиеАртикулов) = Тип("Массив") Тогда
        ВызватьИсключение "Ошибка типа значения соответствия артикулов";
    КонецЕсли;

    МассивОбъектов = Новый Массив;

    Для Каждого ПараАртикулов Из СоответствиеАртикулов Цикл
        МассивОбъектов.Добавить(Новый Структура("offer_id,new_offer_id", ПараАртикулов.Ключ, ПараАртикулов.Значение));
    КонецЦикла;

    URL = "https://api-seller.ozon.ru/v1/product/update/offer-id";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("update_offer_id", МассивОбъектов, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Архивировать товары
// Переносит выбранные товары в архив
//
// Примечание:
// Вы можете передать до 100 идентификаторов за раз
// Метод в документации API: [post /v1/product/archive](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductArchive)
//
// Параметры:
//  IDКлиента - Строка                                 - Идентификатор клиента    - clientid
//  КлючAPI   - Строка                                 - API ключ                 - apikey
//  IDТоваров - Строка, Число, Массив Из Строка, Число - ID товаров для архивации - products
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция АрхивироватьТовары(Знач IDКлиента, Знач КлючAPI, Знач IDТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/archive";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_id", IDТоваров, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Разархивировать товары
// Возвращает выбранные товары из архива
//
// Примечание:
// В сутки можно восстановить из архива не больше 10 товаров, которые были архивированы автоматически. На разархивацию товаров, перенесённых в архив вручную, ограничений нет.
// Метод в документации API: [post /v1/product/unarchive](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUnarchive)
//
// Параметры:
//  IDКлиента - Строка                                 - Идентификатор клиента         - clientid
//  КлючAPI   - Строка                                 - API ключ                      - apikey
//  IDТоваров - Строка, Число, Массив Из Строка, Число - ID товаров для восстановления - products
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция РазархивироватьТовары(Знач IDКлиента, Знач КлючAPI, Знач IDТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/unarchive";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_id", IDТоваров, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Удалить товары без SKU
// Удаляет товары без SKU из архива
//
// Примечание:
// Товар должен быть предварительно архивирован (см. АрхивироватьТовары)
// В одном запросе можно передать до 500 идентификаторов
// Метод в документации API: [post /v2/products/delete](@docs.ozon.ru/api/seller/#operation/ProductAPI_DeleteProducts)
//
// Параметры:
//  IDКлиента - Строка                                 - Идентификатор клиента  - clientid
//  КлючAPI   - Строка                                 - API ключ               - apikey
//  Артикулы  - Строка, Число, Массив Из Строка, Число - Артикулы товаров       - articles
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция УдалитьТоварыБезSKU(Знач IDКлиента, Знач КлючAPI, Знач Артикулы) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьМассив(Артикулы);

    URL = "https://api-seller.ozon.ru/v2/products/delete";

    Заголовки     = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    МассивТоваров = Новый Массив;

    Для Каждого Артикул Из Артикулы Цикл

        ТекущийАртикул = OPI_Инструменты.ЧислоВСтроку(Артикул);
        МассивТоваров.Добавить(Новый Структура("offer_id", ТекущийАртикул));

    КонецЦикла;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("products", МассивТоваров, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Загрузить коды активации товара
// Загружает коды активации для цифрового товара или услуги
//
// Примечание:
// Код активации привязывается к карточке цифрового товара
// Метод проверки статуса добавления - ПолучитьСтатусДобавленияКодов()
// Метод в документации API: [post /v1/product/upload_digital_codes](@docs.ozon.ru/api/seller/#operation/ProductAPI_UploadDigitalCode)
//
// Параметры:
//  IDКлиента - Строка                   - Идентификатор клиента           - clientid
//  КлючAPI   - Строка                   - API ключ                        - apikey
//  IDТовара  - Число                    - ID товара                       - productid
//  Коды      - Строка, Массив Из Строка - Коды активации цифрового товара - codes
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ЗагрузитьКодыАктивацииТовара(Знач IDКлиента, Знач КлючAPI, Знач IDТовара, Знач Коды) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/upload_digital_codes";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_id"   , IDТовара, "Число" , Параметры);
    OPI_Инструменты.ДобавитьПоле("digital_codes", Коды    , "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить количество подписчиков товаров
// Получает количество пользователей, которые нажали Узнать о поступлении на странице товара
//
// Примечание:
// Метод в документации API: [post /v1/product/info/subscription](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoSubscription)
//
// Параметры:
//  IDКлиента - Строка                   - Идентификатор клиента                       - clientid
//  КлючAPI   - Строка                   - API ключ                                    - apikey
//  SKU       - Число, Массив Из Число   - Идентификаторы товаров в системе Ozon (SKU) - sku
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьКоличествоПодписчиковТоваров(Знач IDКлиента, Знач КлючAPI, Знач SKU) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/info/subscription";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("skus", SKU, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить связанные SKU
// Получает единый SKU по старым идентификаторам SKU FBS и SKU FBO
//
// Примечание:
// В ответе будут все SKU, связанные с переданными. Метод может обработать любые SKU, даже скрытые или удалённые.
// Передавайте до 200 SKU в одном запросе.
// Метод в документации API: [post /v1/product/related-sku/get](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductGetRelatedSKU)
//
// Параметры:
//  IDКлиента - Строка                   - Идентификатор клиента                       - clientid
//  КлючAPI   - Строка                   - API ключ                                    - apikey
//  SKU       - Число, Массив Из Число   - Идентификаторы товаров в системе Ozon (SKU) - sku
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСвязанныеSKU(Знач IDКлиента, Знач КлючAPI, Знач SKU) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/related-sku/get";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("sku", SKU, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить статус добавления товара
// Получает статус добавления нового товара по ID задачи
//
// Примечание:
// Метод в документации API: [post /v1/product/import/info](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetImportProductsInfo)
//
// Параметры:
//  IDКлиента - Строка        - Идентификатор клиента       - clientid
//  КлючAPI   - Строка        - API ключ                    - apikey
//  IDЗадачи  - Строка, Число - ID задачи добавления товара - taskid
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСтатусДобавленияТовара(Знач IDКлиента, Знач КлючAPI, Знач IDЗадачи) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/import/info";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("task_id", IDЗадачи, "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить статус добавления кодов
// Получает статус добавления кодов цифрового товара по ID задачи
//
// Примечание:
// Метод в документации API: [post /v1/product/upload_digital_codes/info](@docs.ozon.ru/api/seller/#operation/ProductAPI_UploadDigitalCodeInfo)
//
// Параметры:
//  IDКлиента - Строка        - Идентификатор клиента       - clientid
//  КлючAPI   - Строка        - API ключ                    - apikey
//  IDЗадачи  - Строка, Число - ID задачи добавления товара - taskid
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСтатусДобавленияКодов(Знач IDКлиента, Знач КлючAPI, Знач IDЗадачи) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/upload_digital_codes/info";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("task_id", IDЗадачи, "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить структуру товара
// Получает структуру стандартных полей товара
//
// Примечание:
// Эту структуру необходимо дополнить полями, зависящими от категории товара из ПолучитьХарактеристикиКатегории()
// Первая картинка в массиве картинок (поле images) будет основной
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей товара
Функция ПолучитьСтруктуруТовара(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", "<ID категории товара>");
    СтруктураТовара.Вставить("name"                   , "<имя товара>");
    СтруктураТовара.Вставить("offer_id"               , "<артикул>");
    СтруктураТовара.Вставить("barcode"                , "<штрихкод>");
    СтруктураТовара.Вставить("price"                  , "<цена>");
    СтруктураТовара.Вставить("old_price"              , "<старая цена>");
    СтруктураТовара.Вставить("vat"                    , "<ставка ндс, например 0.2>");
    СтруктураТовара.Вставить("height"                 , "<высота>");
    СтруктураТовара.Вставить("width"                  , "<ширина>");
    СтруктураТовара.Вставить("depth"                  , "<глубина>");
    СтруктураТовара.Вставить("dimension_unit"         , "<единица измерения для размеров, например mm>");
    СтруктураТовара.Вставить("weight"                 , "<вес>");
    СтруктураТовара.Вставить("weight_unit"            , "<единица измерения для веса, например g>");
    СтруктураТовара.Вставить("images"                 , "<массив URL картинок товара>");
    СтруктураТовара.Вставить("images360"              , "<массив URL картинок 360>");
    СтруктураТовара.Вставить("color_image"            , "<маркетинговый цвет для картинок>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураТовара Цикл
            СтруктураТовара.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Получить сокращенную структуру товара
// Получает структуру для создания товара на основе Ozon ID в функции СоздатьТоварыПоOzonID()
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей товара
Функция ПолучитьСокращеннуюСтруктуруТовара(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураТовара = Новый Структура;

    СтруктураТовара.Вставить("name"         , "<наименование>");
    СтруктураТовара.Вставить("sku"          , "<идентификатор товара в системе Ozon>");
    СтруктураТовара.Вставить("offer_id"     , "<артикул>");
    СтруктураТовара.Вставить("price"        , "<цена>");
    СтруктураТовара.Вставить("old_price"    , "<старая цена>");
    СтруктураТовара.Вставить("vat"          , "<ставка ндс, например 0.2>");
    СтруктураТовара.Вставить("currency_code", "<валюта>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураТовара Цикл
            СтруктураТовара.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Получить структуру обновления характеристик
// Получает структуру для обновления характеристик товара в функции ОбновитьХарактеристикиТоваров()
//
// Примечание:
// Характеристики представляют из себя структуры с полями complex_id, id и массивом values. Для их быстрого создания есть метод ДополнитьКомплексныйАтрибут()
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей товара
Функция ПолучитьСтруктуруОбновленияХарактеристик(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураТовара = Новый Структура;

    СтруктураТовара.Вставить("offer_id"  , "<артикул>");
    СтруктураТовара.Вставить("attributes", "<массив обновляемых атрибутов>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураТовара Цикл
            СтруктураТовара.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Получить структуру фильтра товаров
// Получает структуру для отбора списка товаров
//
// Примечание:
// Связанные функции: ПолучитьСписокТоваров, ПолучитьКоличествоТоваров, ПолучитьЦеныТоваров
// Описание полей фильтра можно найти на странице документации по получению списка товаров: [post /v2/product/list](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductList)
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей фильра
Функция ПолучитьСтруктуруФильтраТоваров(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураТовара = Новый Структура;

    СтруктураТовара.Вставить("offer_id"  , "<массив артикулов>");
    СтруктураТовара.Вставить("product_id", "<массив ID товаров>");
    СтруктураТовара.Вставить("visibility", "<видимость>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураТовара Цикл
            СтруктураТовара.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Добавить видео товара
// Добавляет видео к атрибутам товара
//
// Примечание:
// В 1С метод может использоваться как процедура, без получения возвращаемого значения. Возвращаемое значение необходимо для CLI версии
//
// Параметры:
//  СтруктураТовара - Структура Из Строка - Основная структура полей товара. См. ПолучитьСтруктуруТовара - item
//  URL             - Строка              - URL к видео для добавления                                   - url
//  Наименование    - Строка              - Техническое наименование видео                               - title
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей товара с добавленным видео
Функция ДобавитьВидеоТовара(СтруктураТовара, Знач URL, Знач Наименование) Экспорт

    Complex_attributes_ = "complex_attributes";

    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(СтруктураТовара);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(URL);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Наименование);

    ОбъектВидео           = Новый Структура();
    СтруктураURL          = Новый Структура("value", URL);
    СтруктураНаименования = Новый Структура("value", Наименование);

    ДополнитьКомплексныйАтрибут(ОбъектВидео, 21841, 100001, СтруктураURL);
    ДополнитьКомплексныйАтрибут(ОбъектВидео, 21837, 100001, СтруктураНаименования);

    Если Не OPI_Инструменты.ПолеКоллекцииСуществует(СтруктураТовара, Complex_attributes_) Тогда
        СтруктураТовара.Вставить(Complex_attributes_, Новый Массив);
    КонецЕсли;

    СтруктураТовара[Complex_attributes_].Добавить(ОбъектВидео);

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Добавить видеообложку товара
// Добавляет видеообложку к атрибутам товара
//
// Примечание:
// В 1С метод может использоваться как процедура, без получения возвращаемого значения. Возвращаемое значение необходимо для CLI версии
//
// Параметры:
//  СтруктураТовара - Структура Из Строка - Основная структура полей товара. См. ПолучитьСтруктуруТовара - item
//  URL             - Строка              - URL к видеообложке для добавления                            - url
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей товара с добавленным видео
Функция ДобавитьВидеообложкуТовара(СтруктураТовара, Знач URL) Экспорт

    Complex_attributes_ = "complex_attributes";

    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(СтруктураТовара);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(URL);

    ОбъектОбложка = Новый Структура();
    СтруктураURL  = Новый Структура("dictionary_value_id,value", 0, URL);

    ДополнитьКомплексныйАтрибут(ОбъектОбложка, 21845, 100002, СтруктураURL);

    Если Не OPI_Инструменты.ПолеКоллекцииСуществует(СтруктураТовара, Complex_attributes_) Тогда
        СтруктураТовара.Вставить(Complex_attributes_, Новый Массив);
    КонецЕсли;

    СтруктураТовара[Complex_attributes_].Добавить(ОбъектОбложка);

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

// Дополнить комплексный атрибут
// Оформляет значение в формате атрибута и добавляет его в массив attributes переданной коллекции
//
// Примечание:
// В 1С метод может использоваться как процедура, без получения возвращаемого значения. Возвращаемое значение необходимо для CLI версии
//
// Параметры:
//  Коллекция     - Структура Из Строка - Структура комплексного атрибута или структура товара - object
//  IDАтрибута    - Строка, Число       - ID атрибута                                          - attributeid
//  КомплексныйID - Строка, Число       - Комплексный ID                                       - complexid
//  Значения      - Произвольный        - Значение или массив значений для добавления в values - values
//
// Возвращаемое значение:
//  Структура - Коллекция, дополненная атрибутом
Функция ДополнитьКомплексныйАтрибут(Коллекция, Знач IDАтрибута, Знач КомплексныйID, Знач Значения) Экспорт

    Attributes_ = "attributes";

    OPI_ПреобразованиеТипов.ПолучитьМассив(Значения);
    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(Коллекция);

    СтруктураАтрибута = Новый Структура("id,complex_id,values", IDАтрибута, КомплексныйID, Значения);

    Если Не OPI_Инструменты.ПолеКоллекцииСуществует(Коллекция, Attributes_) Тогда
        Коллекция.Вставить(Attributes_, Новый Массив);
    КонецЕсли;

    Коллекция[Attributes_].Добавить(СтруктураАтрибута);

    //@skip-check constructor-function-return-section
    Возврат Коллекция;

КонецФункции

#КонецОбласти

#Область Штрихкоды

// Привязать штрихкоды
// Привязывает штрихкоды к товарам
//
// Примечание:
// Метод в документации API: [post /v1/barcode/add](@docs.ozon.ru/api/seller/#operation/add-barcode)
//
// Параметры:
//  IDКлиента              - Строка                        - Идентификатор клиента                  - clientid
//  КлючAPI                - Строка                        - API ключ                               - apikey
//  СоответствиеШтрихкодов - Соответствие Из КлючИЗначение - Ключ > SKU товара, Значение > Штрихкод - barcodes
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПривязатьШтрихкоды(Знач IDКлиента, Знач КлючAPI, Знач СоответствиеШтрихкодов) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(СоответствиеШтрихкодов);

    URL = "https://api-seller.ozon.ru/v1/barcode/add";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    МассивШтрихкодов = Новый Массив;

    Для Каждого Штрихкод Из СоответствиеШтрихкодов Цикл

        СтруктураШтрихкода = Новый Структура;
        OPI_Инструменты.ДобавитьПоле("sku"    , Штрихкод.Ключ    , "Число" , СтруктураШтрихкода);
        OPI_Инструменты.ДобавитьПоле("barcode", Штрихкод.Значение, "Строка", СтруктураШтрихкода);

        МассивШтрихкодов.Добавить(СтруктураШтрихкода);

    КонецЦикла;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("barcodes", МассивШтрихкодов, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Создать штрихкоды
// Генерирует новые штрихкоды для товаров
//
// Примечание:
// За один запрос вы можете создать штрихкоды не больше чем для 100 товаров
// С одного аккаунта продавца можно использовать метод не больше 20 раз в минуту
// Метод в документации API: [post /v1/barcode/generate](@docs.ozon.ru/api/seller/#operation/generate-barcode)
//
// Параметры:
//  IDКлиента - Строка                   - Идентификатор клиента               - clientid
//  КлючAPI   - Строка                   - API ключ                            - apikey
//  IDТоваров - Строка, Массив Из Строка - ID товаров для создания штрихкодов  - productids
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция СоздатьШтрихкоды(Знач IDКлиента, Знач КлючAPI, Знач IDТоваров) Экспорт

    URL = "https://api-seller.ozon.ru/v1/barcode/generate";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("product_ids", IDТоваров, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

#КонецОбласти

#Область ЦеныИОстаткиТоваров

// Получить количество товаров
// Получает количество товаров в остатке с фильтром или без
//
// Примечание:
// Метод в документации API: [post /v4/product/info/stocks](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoStocks)
//
// Параметры:
//  IDКлиента    - Строка                     - Идентификатор клиента                                       - clientid
//  КлючAPI      - Строка                     - API ключ                                                    - apikey
//  Фильтр       - Структура Из КлючИЗначение - Фильтр выборки товаров. См. ПолучитьСтруктуруФильтраТоваров - filter
//  IDПоследнего - Строка, Число              - ID последнего значения (last_id) из предыдущего запроса     - last
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьКоличествоТоваров(Знач IDКлиента, Знач КлючAPI, Знач Фильтр = "", Знач IDПоследнего = 0) Экспорт

    Filter_ = "filter";

    URL = "https://api-seller.ozon.ru/v4/product/info/stocks";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 100;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле(Filter_  , Фильтр      , "Коллекция", Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"  , Лимит       , "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("last_id", IDПоследнего, "Строка"   , Параметры);

    Если Не Параметры.Свойство(Filter_) Тогда
        Параметры.Вставить(Filter_, Новый Структура);
    КонецЕсли;

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить цены товаров
// Получает цены товаров с фильтром или без
//
// Примечание:
// Метод в документации API: [post /v5/product/info/prices](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoPrices)
//
// Параметры:
//  IDКлиента    - Строка                     - Идентификатор клиента                                       - clientid
//  КлючAPI      - Строка                     - API ключ                                                    - apikey
//  Фильтр       - Структура Из КлючИЗначение - Фильтр выборки товаров. См. ПолучитьСтруктуруФильтраТоваров - filter
//  IDПоследнего - Строка, Число              - ID последнего значения (last_id) из предыдущего запроса     - last
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьЦеныТоваров(Знач IDКлиента, Знач КлючAPI, Знач Фильтр = "", Знач IDПоследнего = 0) Экспорт

    Filter_ = "filter";

    URL = "https://api-seller.ozon.ru/v5/product/info/prices";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 300;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле(Filter_  , Фильтр      , "Коллекция", Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"  , Лимит       , "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("last_id", IDПоследнего, "Строка"   , Параметры);

    Если Не Параметры.Свойство(Filter_) Тогда
        Параметры.Вставить(Filter_, Новый Структура);
    КонецЕсли;

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить информацию об уценке
// Получает информацию об уценке и основном товаре по SKU уценённых товаров
//
// Примечание:
// Метод в документации API: [post /v1/product/info/discounted](@docs.ozon.ru/api/seller/#operation/ProductAPI_GetProductInfoDiscounted)
//
// Параметры:
//  IDКлиента  - Строка                 - Идентификатор клиента - clientid
//  КлючAPI    - Строка                 - API ключ              - apikey
//  SKU        - Число, Массив Из Число - SKU уцененных товаров - sku
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьИнформациюОбУценке(Знач IDКлиента, Знач КлючAPI, Знач SKU) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/info/discounted";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("discounted_skus", SKU, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Обновить количество товаров
// Изменяет информацию о количестве товара в наличии
//
// Примечание:
// За один запрос можно изменить наличие для 100 товаров. С одного аккаунта продавца можно отправить до 80 запросов в минуту.
// Обновлять остатки товара на одном складе можно только 1 раз в 2 минуты. Вы можете задать наличие товара только после того, как его статус сменится на price_sent
// Остатки крупногабаритных товаров можно обновлять только на предназначенных для них складах
// Метод в документации API: [post /v2/products/stocks](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductsStocksV2)
//
// Параметры:
//  IDКлиента - Строка              - Идентификатор клиента                                         - clientid
//  КлючAPI   - Строка              - API ключ                                                      - apikey
//  Остатки   - Массив Из Структура - Массив описаний остатков. См. ПолучитьСтруктуруОстатковТовара - stocks
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ОбновитьКоличествоТоваров(Знач IDКлиента, Знач КлючAPI, Знач Остатки) Экспорт

    URL = "https://api-seller.ozon.ru/v2/products/stocks";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("stocks", Остатки, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Обновить цены товаров
// Изменяет цены однного или нескольких товаров
//
// Примечание:
// Метод в документации API: [post /v1/product/import/prices](@docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsPrices)
//
// Параметры:
//  IDКлиента - Строка              - Идентификатор клиента                         - clientid
//  КлючAPI   - Строка              - API ключ                                      - apikey
//  Цены      - Массив из Структура - Цены товаров. См. ПолучитьСтруктуруЦеныТовара - prices
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ОбновитьЦеныТоваров(Знач IDКлиента, Знач КлючAPI, Знач Цены) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/import/prices";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("prices", Цены, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Установить скидку на уцененный товар
// Устанавливает размер скидки на уценённые товары, продающиеся по схеме FBS
//
// Примечание:
// Метод в документации API: [post /v1/product/update/discount](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductUpdateDiscount)
//
// Параметры:
//  IDКлиента - Строка        - Идентификатор клиента  - clientid
//  КлючAPI   - Строка        - API ключ               - apikey
//  IDТовара  - Строка, Число - Идентификатор товара   - productid
//  Скидка    - Строка, Число - Размер скидки          - discount
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция УстановитьСкидкуНаУцененныйТовар(Знач IDКлиента, Знач КлючAPI, Знач IDТовара, Знач Скидка) Экспорт

    URL = "https://api-seller.ozon.ru/v1/product/update/discount";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("discount"  , Скидка  , "Число", Параметры);
    OPI_Инструменты.ДобавитьПоле("product_id", IDТовара, "Число", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить структуру остатков товара
// Получает структуру для внесения остатков товара в функции ОбновитьКоличествоТоваров
//
// Примечание:
// Описание полей фильтра можно найти на странице документации по получению списка товаров: [post /v2/products/stocks](@docs.ozon.ru/api/seller/#operation/ProductAPI_ProductsStocksV2)
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей фильра
Функция ПолучитьСтруктуруОстатковТовара(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураОстатков = Новый Структура;

    СтруктураОстатков.Вставить("offer_id"    , "<артикул>");
    СтруктураОстатков.Вставить("product_id"  , "<ID товара>");
    СтруктураОстатков.Вставить("stock"       , "<количество>");
    СтруктураОстатков.Вставить("warehouse_id", "<ID склада>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураОстатков Цикл
            СтруктураОстатков.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураОстатков;

КонецФункции

// Получить структуру цены товара
// Получает структуру цены товара для функции ОбновитьЦеныТоваров
//
// Примечание:
// Описание полей фильтра можно найти на странице документации по получению списка товаров: [post /v1/product/import/prices](@docs.ozon.ru/api/seller/#operation/ProductAPI_ImportProductsPrices)
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей фильра
Функция ПолучитьСтруктуруЦеныТовара(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураТовара = Новый Структура;

    СтруктураТовара.Вставить("auto_action_enabled"   , "<включение автоприменения акций: ENABLED или DISABLED>");
    СтруктураТовара.Вставить("currency_code"         , "<валюта>");
    СтруктураТовара.Вставить("min_price"             , "<минимальная цена товара после применения акций>");
    СтруктураТовара.Вставить("offer_id"              , "<идентификатор товара в системе продавца>");
    СтруктураТовара.Вставить("old_price"             , "<цена до скидок; укажите значение 0, если скидок нет>");
    СтруктураТовара.Вставить("price"                 , "<цена товара с учётом скидок>");
    СтруктураТовара.Вставить("price_strategy_enabled", "<автоприменения стратегий цены: ENABLED или DISABLED>");
    СтруктураТовара.Вставить("product_id"            , "<ID товара>");

    Если Пустая Тогда
        Для Каждого Поле Из СтруктураТовара Цикл
            СтруктураТовара.Вставить(Поле.Ключ, "");
        КонецЦикла;
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураТовара;

КонецФункции

#КонецОбласти

#Область РаботаСАкциями

// Получить список акций
// Получает список акций, доступных для участия
//
// Примечание:
// Метод в документации API: [post /v1/actions](@docs.ozon.ru/api/seller/#operation/Promos)
//
// Параметры:
//  IDКлиента - Строка - Идентификатор клиента - clientid
//  КлючAPI   - Строка - API ключ              - apikey
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокАкций(Знач IDКлиента, Знач КлючAPI) Экспорт

    URL = "https://api-seller.ozon.ru/v1/actions";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Ответ = OPI_Инструменты.Get(URL, , Заголовки);

    Возврат Ответ;

КонецФункции

// Получить доступные товары акции
// Получает товары, доступные в выбранной акции
//
// Примечание:
// Метод в документации API: [post /v1/actions/candidates](@docs.ozon.ru/api/seller/#operation/PromosCandidates)
//
// Параметры:
//  IDКлиента - Строка - Идентификатор клиента             - clientid
//  КлючAPI   - Строка - API ключ                          - apikey
//  IDАкции   - Число  - ID акции                          - actionid
//  Отступ    - Число  - Отступ получения элементов списка - offset
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьДоступныеТоварыАкции(Знач IDКлиента, Знач КлючAPI, Знач IDАкции, Знач Отступ = 0) Экспорт

    Число_ = "Число";

    URL = "https://api-seller.ozon.ru/v1/actions/candidates";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 100;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("action_id", IDАкции, Число_, Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"    , Лимит  , Число_, Параметры);
    OPI_Инструменты.ДобавитьПоле("offset"   , Отступ , Число_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить участвующие товары акции
// Получает товары, участвующие в выбранной акции
//
// Примечание:
// Метод в документации API: [post /v1/actions/products](@docs.ozon.ru/api/seller/#operation/PromosProducts)
//
// Параметры:
//  IDКлиента - Строка - Идентификатор клиента             - clientid
//  КлючAPI   - Строка - API ключ                          - apikey
//  IDАкции   - Число  - ID акции                          - actionid
//  Отступ    - Число  - Отступ получения элементов списка - offset
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьУчаствующиеТоварыАкции(Знач IDКлиента, Знач КлючAPI, Знач IDАкции, Знач Отступ = 0) Экспорт

    Число_ = "Число";

    URL = "https://api-seller.ozon.ru/v1/actions/products";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);
    Лимит     = 100;

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("action_id", IDАкции, Число_, Параметры);
    OPI_Инструменты.ДобавитьПоле("limit"    , Лимит  , Число_, Параметры);
    OPI_Инструменты.ДобавитьПоле("offset"   , Отступ , Число_, Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

#КонецОбласти

#Область РаботаСоСкладами

// Получить список складов
// Получает список складов компании
//
// Примечание:
// Метод в документации API: [post /v1/warehouse/list](@docs.ozon.ru/api/seller/#operation/WarehouseAPI_WarehouseList)
//
// Параметры:
//  IDКлиента - Строка - Идентификатор клиента - clientid
//  КлючAPI   - Строка - API ключ              - apikey
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокСкладов(Знач IDКлиента, Знач КлючAPI) Экспорт

    URL = "https://api-seller.ozon.ru/v1/warehouse/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Ответ = OPI_Инструменты.Post(URL, , Заголовки);

    Возврат Ответ;

КонецФункции

#КонецОбласти

#Область СхемаFBO

// Получить список кластеров
// Получает информацию о кластерах и складах
//
// Примечание:
// Метод в документации API: [post /v1/cluster/list](@docs.ozon.ru/api/seller/#operation/SupplyDraftAPI_DraftClusterList)
//
// Параметры:
//  IDКлиента   - Строка - Идентификатор клиента                                            - clientid
//  КлючAPI     - Строка - API ключ                                                         - apikey
//  ТипКластера - Строка - Тип кластера: CLUSTER_TYPE_OZON (Россия), CLUSTER_TYPE_CIS (СНГ) - type
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокКластеров(Знач IDКлиента, Знач КлючAPI, Знач ТипКластера = "CLUSTER_TYPE_OZON") Экспорт

    URL = "https://api-seller.ozon.ru/v1/cluster/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("cluster_type", ТипКластера, "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить список складов отгрузки
// Получает список складов, сортировочных центров и пунктов выдачи
//
// Примечание:
// Метод в документации API: [post /v1/warehouse/fbo/list](@docs.ozon.ru/api/seller/#operation/SupplyDraftAPI_DraftGetWarehouseFboList)
//
// Параметры:
//  IDКлиента   - Строка                   - Идентификатор клиента                                                       - clientid
//  КлючAPI     - Строка                   - API ключ                                                                    - apikey
//  Поиск       - Строка                   - Поиск по названию (4 симв. мин). Для пунктов выдачи укажите полное название - search
//  ТипПоставки - Строка, Массив Из Строка - Типы поставки: CREATE_TYPE_CROSSDOCK, CREATE_TYPE_DIRECT                    - type
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокСкладовОтгрузки(Знач IDКлиента
    , Знач КлючAPI
    , Знач Поиск
    , Знач ТипПоставки = "CREATE_TYPE_DIRECT") Экспорт

    URL = "https://api-seller.ozon.ru/v1/warehouse/fbo/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("filter_by_supply_type", ТипПоставки, "Массив", Параметры);
    OPI_Инструменты.ДобавитьПоле("search"               , Поиск      , "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить список отправлений FBO
// Получает список активных отправлений с фильтром или без
//
// Примечание:
// Метод в документации API: [post /v2/posting/fbo/list](@docs.ozon.ru/api/seller/#operation/PostingAPI_GetFboPostingList)
//
// Параметры:
//  IDКлиента - Строка                     - Идентификатор клиента                                                  - clientid
//  КлючAPI   - Строка                     - API ключ                                                               - apikey
//  Фильтр    - Структура Из КлючИЗначение - Фильтр отправлений. См. ПолучитьСтруктуруФильтраОтправлений            - filter
//  ДопПоля   - Структура Из КлючИЗначение - Включение доп. полей в ответ. См. ПолучитьСтруктуруДопПолейОтправления - with
//  Отступ    - Число                      - Количество элементов, которое будет пропущено в ответе                 - offset
//  Транслит  - Булево                     - Если включена транслитерация адреса из кириллицы в латиницу > Истина   - trlt
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьСписокОтправленийFBO(Знач IDКлиента
    , Знач КлючAPI
    , Знач Фильтр = Неопределено
    , Знач ДопПоля = Неопределено
    , Знач Отступ = 0
    , Знач Транслит = Ложь) Экспорт

    URL = "https://api-seller.ozon.ru/v2/posting/fbo/list";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("limit"   , 1000    , "Число"    , Параметры);
    OPI_Инструменты.ДобавитьПоле("offset"  , Отступ  , "Число"    , Параметры);
    OPI_Инструменты.ДобавитьПоле("translit", Транслит, "Булево"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("filter"  , Фильтр  , "Коллекция", Параметры);
    OPI_Инструменты.ДобавитьПоле("with"    , ДопПоля , "Коллекция", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Создать черновик заявки FBO
// Создает черновик заявки на поставку
//
// Примечание:
// Метод в документации API: [post /v1/draft/create](@docs.ozon.ru/api/seller/#operation/SupplyDraftAPI_DraftCreate)
//
// Параметры:
//  IDКлиента     - Строка                        - Идентификатор клиента                                    - clientid
//  КлючAPI       - Строка                        - API ключ                                                 - apikey
//  Кластеры      - Строка, Массив Из Строка      - Идентификаторы кластеров                                 - clusters
//  Позиции       - Соответствие Из КлючИЗначение - Список позиций: Ключ > SKU, Значение > Количество        - items
//  ТипПоставки   - Строка                        - Тип поставки: CREATE_TYPE_CROSSDOCK, CREATE_TYPE_DIRECT  - type
//  ТочкаОтгрузки - Строка                        - Идентификатор точки отгрузки для CREATE_TYPE_CROSSDOCK   - point
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция СоздатьЧерновикЗаявкиFBO(Знач IDКлиента
    , Знач КлючAPI
    , Знач Кластеры
    , Знач Позиции
    , Знач ТипПоставки = "CREATE_TYPE_DIRECT"
    , Знач ТочкаОтгрузки = "") Экспорт

    Кластеры_ = OPI_Инструменты.КопироватьКоллекцию(Кластеры);
    Позиции_  = OPI_Инструменты.КопироватьКоллекцию(Позиции);

    URL = "https://api-seller.ozon.ru/v1/draft/create";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    ОбработатьСписокКластеров(Кластеры_);
    ОбработатьСписокПозиций(Позиции_);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("cluster_ids"                , Кластеры_    , "Массив", Параметры);
    OPI_Инструменты.ДобавитьПоле("drop_off_point_warehouse_id", ТочкаОтгрузки, "Число" , Параметры);
    OPI_Инструменты.ДобавитьПоле("items"                      , Позиции_     , "Массив", Параметры);
    OPI_Инструменты.ДобавитьПоле("type"                       , ТипПоставки  , "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить черновик заявки FBO
// Получает черновик заявки FBO по ID
//
// Примечание:
// Метод в документации API: [post /v1/draft/create/info](@docs.ozon.ru/api/seller/#operation/SupplyDraftAPI_DraftCreateInfo)
//
// Параметры:
//  IDКлиента     - Строка - Идентификатор клиента   - clientid
//  КлючAPI       - Строка - API ключ                - apikey
//  IDОперации    - Строка - ID черновика (операции) - oper
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьЧерновикЗаявкиFBO(Знач IDКлиента, Знач КлючAPI, Знач IDОперации) Экспорт

    URL = "https://api-seller.ozon.ru/v1/draft/create/info";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("operation_id", IDОперации, "Строка", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить таймслоты FBO
// Получить доступные таймслоты на конечных складах отгрузки
//
// Примечание:
// Метод в документации API: [post /v1/draft/timeslot/info](@docs.ozon.ru/api/seller/#operation/SupplyDraftAPI_DraftTimeslotInfo)
//
// Параметры:
//  IDКлиента - Строка          - Идентификатор клиента                                                          - clientid
//  КлючAPI   - Строка          - API ключ                                                                       - apikey
//  ДатаОт    - Дата            - Дата начала нужного периода доступных таймслотов                               - from
//  ДатаПо    - Дата            - Дата окончания нужного периода доступных таймслотов (28 дней от тек. максимум) - to
//  Черновик  - Число, Строка   - Идентификатор черновика заявки на поставку                                     - draft
//  Склады    - Массив Из Число - Склад или несколько складов для получения таймслотов                           - whs
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - сериализованный JSON ответа от Ozon Seller API
Функция ПолучитьТаймслотыFBO(Знач IDКлиента, Знач КлючAPI, Знач ДатаОт, Знач ДатаПо, Знач Черновик, Знач Склады) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьДату(ДатаОт);
    OPI_ПреобразованиеТипов.ПолучитьДату(ДатаПо);
    OPI_ПреобразованиеТипов.ПолучитьМассив(Склады);

    Для Н = 0 По Склады.ВГраница() Цикл

        ТекущееЗначение = Склады[Н];

        OPI_ПреобразованиеТипов.ПолучитьЧисло(ТекущееЗначение);

        Склады[Н] = ТекущееЗначение;

    КонецЦикла;

    URL = "https://api-seller.ozon.ru/v1/draft/timeslot/info";

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("date_from"    , XMLСтрока(ДатаОт) + "Z", "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("date_to"      , XMLСтрока(ДатаПо) + "Z", "Строка"   , Параметры);
    OPI_Инструменты.ДобавитьПоле("draft_id"     , Черновик               , "Число"    , Параметры);
    OPI_Инструменты.ДобавитьПоле("warehouse_ids", Склады                 , "Коллекция", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

// Получить структуру доп. полей отправления
// Возвращает структуру включения доп. полей ответа для метода ПолучитьСписокОтправленийFBO
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура полей
Функция ПолучитьСтруктуруДопПолейОтправления(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураПолей = Новый Структура;

    СтруктураПолей.Вставить("analytics_data", "<передайте Истина, чтобы добавить в ответ данные аналитики>");
    СтруктураПолей.Вставить("financial_data", "<передайте Истина, чтобы добавить в ответ финансовые данные>");

    Если Пустая Тогда
        СтруктураПолей = OPI_Инструменты.ОчиститьКоллекциюРекурсивно(СтруктураПолей);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураПолей;

КонецФункции

// Получить структуру фильтра отправлений
// Возвращает структуру фильтров для метода ПолучитьСписокОтправленийFBO
//
// Параметры:
//  Пустая - Булево - Истина > структура с пустыми значениями, Ложь > в значениях будут описания полей - empty
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура фильтра
Функция ПолучитьСтруктуруФильтраОтправлений(Знач Пустая = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("since" , "Начало периода в формате ISO");
    СтруктураФильтра.Вставить("status", "Статус отправления");
    СтруктураФильтра.Вставить("to"    , "Конец периода в формате ISO");

    Если Пустая Тогда
        СтруктураФильтра = OPI_Инструменты.ОчиститьКоллекциюРекурсивно(СтруктураФильтра);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураФильтра;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьЗаголовкиЗапроса(Знач IDКлиента, Знач КлючAPI)

    Заголовки = Новый Соответствие;

    OPI_Инструменты.ДобавитьПоле("Client-Id", IDКлиента, "Строка", Заголовки);
    OPI_Инструменты.ДобавитьПоле("Api-Key"  , КлючAPI  , "Строка", Заголовки);

    Возврат Заголовки;

КонецФункции

Функция ОтправитьОписанияОбъектов(Знач IDКлиента, Знач КлючAPI, Знач МассивОбъектов, Знач URL)

    Заголовки = СоздатьЗаголовкиЗапроса(IDКлиента, КлючAPI);

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("items", МассивОбъектов, "Массив", Параметры);

    Ответ = OPI_Инструменты.Post(URL, Параметры, Заголовки);

    Возврат Ответ;

КонецФункции

Процедура ОбработатьСписокКластеров(Кластеры)

    OPI_ПреобразованиеТипов.ПолучитьМассив(Кластеры);

    Для Н = 0 По Кластеры.ВГраница() Цикл

        ТекущееЗначение = Кластеры[Н];

        OPI_ПреобразованиеТипов.ПолучитьЧисло(ТекущееЗначение);

        Кластеры[Н] = ТекущееЗначение;

    КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСписокПозиций(Позиции)

    ТекстОшибки = "Список позиций имеет некорректный формат";
    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Позиции, ТекстОшибки);

    ОбработанныеПозиции = Новый Массив;

    Для Каждого Позиция Из Позиции Цикл

        ТекущийКлюч     = Позиция.Ключ;
        ТекущееЗначение = Позиция.Значение;

        OPI_ПреобразованиеТипов.ПолучитьЧисло(ТекущийКлюч);
        OPI_ПреобразованиеТипов.ПолучитьЧисло(ТекущееЗначение);

        Если ТекущийКлюч = 0 Или ТекущееЗначение = 0 Тогда
            ВызватьИсключение ("Ошибка в позиции " + Строка(ТекущийКлюч));
        КонецЕсли;

        ОбработанныеПозиции.Добавить(Новый Структура("quantity,sku", ТекущееЗначение, ТекущийКлюч));

    КонецЦикла;

    Позиции = ОбработанныеПозиции;

КонецПроцедуры

#КонецОбласти
