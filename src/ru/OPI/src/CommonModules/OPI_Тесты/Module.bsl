// OneScript: ./OInt/tests/Modules/internal/OPI_Тесты.os

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// Набор тестов для YAxUnit

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingServiceTag-off
// BSLLS:UnusedParameters-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:UsingHardcodePath-off
// BSLLS:UnusedLocalVariable-off
// BSLLS:DeprecatedMessage-off
// BSLLS:LineLength-off
// BSLLS:MagicNumber-off
// BSLLS:CommentedCode-off
// BSLLS:AssignAliasFieldsInQuery-off
// BSLLS:UsingHardcodeNetworkAddress-off
// BSLLS:UnreachableCode-off
// BSLLS:UnusedLocalMethod-off
// BSLLS:NestedFunctionInParameters-off
// BSLLS:MissingTemporaryFileDeletion-off
// BSLLS:UsingSynchronousCalls-off
// BSLLS:MagicNumber-off
// BSLLS:MagicDate-off

//@skip-check undefined-variable
//@skip-check wrong-string-literal-content
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content
//@skip-check module-unused-local-variable

// Раскомментировать, если выполняется OneScript
// #Использовать oint
// #Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

// Для YaxUnit

Процедура ИсполняемыеСценарии() Экспорт

    OPI_ПолучениеДанныхТестов.СформироватьТестыЯкс();

КонецПроцедуры

// Для Asserts

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

    Возврат OPI_ПолучениеДанныхТестов.СформироватьТестыАссертс();

КонецФункции

#Область ЗапускаемыеТесты

#Область Telegram

Процедура Телеграм_ПолучитьИнформациюБота() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_ПолучитьИнформациюБота(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьОбновления() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_УдалитьWebhook(ПараметрыТеста);
    Telegram_ПолучитьОбновления(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_УстановитьWebhook() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_URL"  , ПараметрыТеста);

    Telegram_УстановитьWebhook(ПараметрыТеста);
    Telegram_УдалитьWebhook(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьТекстовоеСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);

    Telegram_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    Telegram_ЗаменитьТекстСообщения(ПараметрыТеста);
    Telegram_ЗаменитьКлавиатуруСообщения(ПараметрыТеста);
    Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);

    Telegram_ОтправитьКартинку(ПараметрыТеста);
    Telegram_ЗаменитьОписаниеСообщения(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);

    Telegram_ОтправитьВидео(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьАудио() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio"             , ПараметрыТеста);

    Telegram_ОтправитьАудио(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьДокумент() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    Telegram_ОтправитьДокумент(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьГифку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"               , ПараметрыТеста);

    Telegram_ОтправитьГифку(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьМедиагруппу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    Telegram_ОтправитьМедиагруппу(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьМестоположение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Long"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Lat"               , ПараметрыТеста);

    Telegram_ОтправитьМестоположение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьКонтакт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Name"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Surname"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Phone"             , ПараметрыТеста);

    Telegram_ОтправитьКонтакт(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьОпрос() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_ОтправитьОпрос(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПереслатьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    Telegram_ПереслатьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_БанРазбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_Бан(ПараметрыТеста);
    Telegram_Разбан(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СоздатьСсылкуПриглашение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_СоздатьСсылкуПриглашение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ЗакрепитьОткрепитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    Telegram_ЗакрепитьСообщение(ПараметрыТеста);
    Telegram_ОткрепитьСообщение(ПараметрыТеста);
    Telegram_УдалитьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьЧислоУчастников() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_ПолучитьЧислоУчастников(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьСписокАватаровФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_ПолучитьСписокИконокАватаров(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СоздатьУдалитьТемуФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"          , ПараметрыТеста);

    Telegram_СоздатьТемуФорума(ПараметрыТеста);
    Telegram_ИзменитьТемуФорума(ПараметрыТеста);
    Telegram_ЗакрытьТемуФорума(ПараметрыТеста);
    Telegram_ОткрытьТемуФорума(ПараметрыТеста);
    Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыТеста);
    Telegram_УдалитьТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СкрытьПоказатьГлавнуюТему() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    Telegram_СкрытьГлавнуюТемуФорума(ПараметрыТеста);
    Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ИзменитьИмяГлавнойТемы() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура ВК_СоздатьСсылкуТокена() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AppID", ПараметрыТеста);

    VK_СоздатьСсылкуПолученияТокена(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьУдалитьПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_СоздатьПост(ПараметрыТеста);
    VK_УдалитьПост(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьСоставнойПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"  , ПараметрыТеста);

    VK_СоздатьСоставнойПост(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьОпрос() Экспорт

    VK_СоздатьОпрос();

КонецПроцедуры

Процедура ВК_СохранитьУдалитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);

    VK_СоздатьАльбом(ПараметрыТеста);
    VK_СохранитьКартинкуВАльбом(ПараметрыТеста);
    VK_УдалитьКартинку(ПараметрыТеста);
    VK_УдалитьАльбом(ПараметрыТеста);
    VK_ЗагрузитьФотоНаСервер(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьИсторию() Экспорт

    ПараметрыТеста = Новый Соответствие;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);

    VK_СоздатьИсторию(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_МетодыОбсуждений() Экспорт

    ПараметрыТеста = Новый Структура;
    Параметры      = ПолучитьПараметрыВК();

    VK_СоздатьОбсуждение(ПараметрыТеста);
    VK_ЗакрытьОбсуждение(ПараметрыТеста);
    VK_ОткрытьОбсуждение(ПараметрыТеста);
    VK_НаписатьВОбсуждение(ПараметрыТеста);

    OPI_VK.ЗакрытьОбсуждение(ПараметрыТеста["VK_ConvID"], Истина, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ЛайкРепостКоммент() Экспорт

    ПараметрыТеста = Новый Структура;
    Параметры      = ПолучитьПараметрыВК();
    Текст          = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID", ПараметрыТеста);

    VK_ПоставитьЛайк(ПараметрыТеста);
    VK_СделатьРепост(ПараметрыТеста);
    VK_НаписатьКомментарий(ПараметрыТеста);
    VK_СократитьСсылку(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста                 , Параметры);
    OPI_VK.УдалитьПост(ПараметрыТеста["Repost"], Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьСтатистику() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСтатистику(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьСтатистикуПостов() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСтатистикуПостов(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьРекламнуюКампанию() Экспорт

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AdsCabinetID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID"      , ПараметрыТеста);

    VK_СоздатьРекламнуюКампанию(ПараметрыТеста);
    VK_СоздатьРекламноеОбъявление(ПараметрыТеста);
    VK_ПриостановитьРекламноеОбъявление(ПараметрыТеста);
    VK_ПолучитьСписокРекламныхКатегорий(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ОтправитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_CommunityToken", ПараметрыТеста);

    VK_СформироватьКлавиатуру(ПараметрыТеста);
    VK_НаписатьСообщение(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьКатегорииТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокКатегорийТоваров(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьТоварПодборку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_СоздатьПодборкуТоваров(ПараметрыТеста);
    VK_ИзменитьПодборкуТоваров(ПараметрыТеста);
    VK_ПолучитьПодборкиПоИД(ПараметрыТеста);
    VK_ДобавитьТовар(ПараметрыТеста);
    VK_ИзменитьТовар(ПараметрыТеста);
    VK_ДобавитьТоварВПодборку(ПараметрыТеста);
    VK_УдалитьТоварИзПодборки(ПараметрыТеста);
    VK_УдалитьТовар(ПараметрыТеста);
    VK_УдалитьПодборку(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьТоварСоСвойствами() Экспорт

    Параметры = ПолучитьПараметрыВК();

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_ПолучитьОписаниеТовара(ПараметрыТеста);
    VK_СоздатьСвойствоТовара(ПараметрыТеста);
    VK_ИзменитьСвойствоТовара(ПараметрыТеста);
    VK_ДобавитьВариантСвойстваТовара(ПараметрыТеста);
    VK_ИзменитьВариантСвойстваТовара(ПараметрыТеста);
    VK_СоздатьТоварСоСвойством(ПараметрыТеста);
    VK_ПолучитьТоварыПоИД(ПараметрыТеста);
    VK_СгруппироватьТовары(ПараметрыТеста);

    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID2"], Параметры);
    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID3"], Параметры);

    VK_УдалитьВариантСвойстваТовара(ПараметрыТеста);
    VK_УдалитьСвойствоТовара(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокТоваров(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокПодборок() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокПодборок(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокСвойств() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокСвойств(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокЗаказов() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокЗаказов(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ЗагрузитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video", ПараметрыТеста);

    VK_ЗагрузитьВидеоНаСервер(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура ЯДиск_ПолучитьИнформациюОДиске() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьИнформациюОДиске(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_СоздатьПапку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    YandexDisk_ЗагрузитьФайлПоURL(ПараметрыТеста);
    YandexDisk_ПолучитьОбъект(ПараметрыТеста);
    YandexDisk_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    YandexDisk_ЗагрузитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_СоздатьКопиюОбъекта() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_СоздатьКопиюОбъекта(ПараметрыТеста);

    ПутьКопии = ПараметрыТеста["YandexDisk_CopyFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьКопии    , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСсылкуНаСкачивание() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    Путь = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, Путь, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PathForLink", Путь);
    ПараметрыТеста.Вставить("YandexDisk_PathForLink", Путь);

    YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыТеста);
    YandexDisk_СкачатьФайл(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСписокФайлов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьСписокФайлов(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ПереместитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_ПереместитьОбъект(ПараметрыТеста);

    ПутьНового = ПараметрыТеста["YandexDisk_NewFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьНового   , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ДействияПубличныхОбъектов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_ОпубликоватьОбъект(ПараметрыТеста);
    YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыТеста);
    YandexDisk_ПолучитьПубличныйОбъект(ПараметрыТеста);
    YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыТеста);
    YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСписокОпубликованных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура Вайбер_ПолучениеИнформации() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);

    Возврат;

    //@skip-check unreachable-statements
    // BSLLS:UnreachableCode-off

    Viber_ПолучитьИнформациюОКанале(ПараметрыТеста);
    Viber_ПолучитьДанныеПользователя(ПараметрыТеста);
    Viber_ПолучитьОнлайнПользователей(ПараметрыТеста);
    Viber_УстановитьWebhook(ПараметрыТеста);

    // BSLLS:UnreachableCode-on

КонецПроцедуры

Процедура Вайбер_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_Token"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"            , ПараметрыТеста);

    Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыТеста);

    Возврат;

    //@skip-check unreachable-statement
    // BSLLS:UnreachableCode-off

    Viber_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    Viber_ОтправитьКартинку(ПараметрыТеста);
    Viber_ОтправитьФайл(ПараметрыТеста);
    Viber_ОтправитьКонтакт(ПараметрыТеста);
    Viber_ОтправитьЛокацию(ПараметрыТеста);
    Viber_ОтправитьСсылку(ПараметрыТеста);

    // BSLLS:UnreachableCode-on

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура ГВ_Авторизация() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientSecret", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Code"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Refresh"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ServiceData" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Access_Token"       , ПараметрыТеста);

    GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыТеста);
    GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыТеста);
    GoogleWorkspace_ОбновитьТокен(ПараметрыТеста);
    GoogleWorkspace_ПолучитьТокенServiceАккаунта(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура ГК_ПолучитьСписокКалендарей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыТеста);

КонецПроцедуры

Процедура ГК_СоздатьУдалитьКалендарь() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыТеста);
    GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыТеста);
    GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыТеста);
    GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыТеста);
    GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыТеста);
    GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ГК_СоздатьУдалитьСобытие() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_NewCalendarID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_CalendarID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"            , ПараметрыТеста);

    GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    GoogleCalendar_СоздатьСобытие(ПараметрыТеста);
    GoogleCalendar_ИзменитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПолучитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПереместитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПолучитьСписокСобытий(ПараметрыТеста);
    GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыТеста);
    GoogleCalendar_УдалитьСобытие(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура ГД_ПолучитьСписокКаталогов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleDrive_ПолучитьСписокКаталогов(ПараметрыТеста);
    GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);

КонецПроцедуры

Процедура ГД_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Big"         , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);
    GoogleDrive_СкопироватьОбъект(ПараметрыТеста);
    GoogleDrive_СкачатьФайл(ПараметрыТеста);
    GoogleDrive_ОбновитьФайл(ПараметрыТеста);
    GoogleDrive_ПолучитьСписокФайлов(ПараметрыТеста);
    GoogleDrive_УдалитьОбъект(ПараметрыТеста);
    GoogleDrive_ПолучитьОписаниеФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ГД_СоздатьУдалитьКомментарий() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);

    GoogleDrive_СоздатьКомментарий(ПараметрыТеста);
    GoogleDrive_ПолучитьКомментарий(ПараметрыТеста);
    GoogleDrive_ПолучитьСписокКомментариев(ПараметрыТеста);
    GoogleDrive_УдалитьКомментарий(ПараметрыТеста);

    GoogleDrive_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ГД_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);

    GoogleDrive_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура ГТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    GoogleSheets_ПолучитьКнигу(ПараметрыТеста);
    GoogleSheets_КопироватьЛист(ПараметрыТеста);
    GoogleSheets_ДобавитьЛист(ПараметрыТеста);
    GoogleSheets_УдалитьЛист(ПараметрыТеста);
    GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыТеста);
    GoogleSheets_ПолучитьТаблицу(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

Процедура ГТ_ЗаполнитьОчиститьЯчейки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыТеста);
    GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыТеста);
    GoogleSheets_ОчиститьЯчейки(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура Твиттер_ДанныеАккаунта() Экспорт

    ПараметрыТеста = Новый Структура;

    Twitter_ПолучитьТокен(ПараметрыТеста);
    Twitter_ПолучитьСсылкуАвторизации(ПараметрыТеста);
    Twitter_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура Твиттер_Твиты() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"   , ПараметрыТеста);

    Twitter_СоздатьТекстовыйТвит(ПараметрыТеста);
    Twitter_ЗагрузитьМассивВложений(ПараметрыТеста);
    Twitter_СоздатьТвитВидео(ПараметрыТеста);
    Twitter_СоздатьТвитКартинки(ПараметрыТеста);
    Twitter_СоздатьТвитГифки(ПараметрыТеста);
    Twitter_СоздатьТвитОпрос(ПараметрыТеста);
    Twitter_СоздатьПроизвольныйТвит(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура НоушнАпи_СоздатьСтраницу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"     , ПараметрыТеста);

    Notion_СоздатьСтраницу(ПараметрыТеста);
    Notion_ПолучитьСтраницу(ПараметрыТеста);
    Notion_ИзменитьСвойстваСтраницы(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_СоздатьИзменитьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);

    Notion_СоздатьБазуДанных(ПараметрыТеста);
    Notion_ИзменитьСвойстваБазы(ПараметрыТеста);
    Notion_ПолучитьБазуДанных(ПараметрыТеста);
    Notion_СоздатьСтраницуВБазу(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_СоздатьУдалитьБлок() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Block" , ПараметрыТеста);

    Notion_ВернутьБлок(ПараметрыТеста);
    Notion_СоздатьБлок(ПараметрыТеста);
    Notion_ВернутьДочерниеБлоки(ПараметрыТеста);
    Notion_УдалитьБлок(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_ПолучитьПользователей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_User" , ПараметрыТеста);

    Notion_СписокПользователей(ПараметрыТеста);
    Notion_ПолучитьДанныеПользователя(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура Слак_ПолучитьИнформацию() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token", ПараметрыТеста);

    Slack_ПолучитьИнформациюОБоте(ПараметрыТеста);
    Slack_ПолучитьСписокПользователей(ПараметрыТеста);
    Slack_ПолучитьСписокРабочихОбластей(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ОтправитьУдалитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    Slack_ОтправитьСообщение(ПараметрыТеста);
    Slack_ИзменитьСообщение(ПараметрыТеста);
    Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыТеста);
    Slack_ПолучитьСсылкуНаСообщение(ПараметрыТеста);
    Slack_УдалитьСообщение(ПараметрыТеста);
    Slack_ОтправитьЭфемерноеСообщение(ПараметрыТеста);
    Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыТеста);
    Slack_СформироватьБлокКартинку(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_СоздатьАрхивироватьКанал() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User" , ПараметрыТеста);

    Slack_СоздатьКанал(ПараметрыТеста);
    Slack_УстановитьТемуКанала(ПараметрыТеста);
    Slack_УстановитьЦельКанала(ПараметрыТеста);
    Slack_ПолучитьКанал(ПараметрыТеста);
    Slack_ПригласитьПользователейВКанал(ПараметрыТеста);
    Slack_ВыгнатьПользователяИзКанала(ПараметрыТеста);
    Slack_ПолучитьИсториюКанала(ПараметрыТеста);
    Slack_ПолучитьСписокПользователейКанала(ПараметрыТеста);
    Slack_ПокинутьКанал(ПараметрыТеста);
    Slack_ВступитьВКанал(ПараметрыТеста);
    Slack_ПереименоватьКанал(ПараметрыТеста);
    Slack_АрхивироватьКанал(ПараметрыТеста);
    Slack_ПолучитьСписокКаналов(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ОткрытьЗакрытьДиалог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User" , ПараметрыТеста);

    Slack_ОткрытьДиалог(ПараметрыТеста);
    Slack_ЗакрытьДиалог(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Slack_ПолучитьСписокФайлов(ПараметрыТеста);
    Slack_ЗагрузитьФайл(ПараметрыТеста);
    Slack_СделатьФайлПубличным(ПараметрыТеста);
    Slack_СделатьФайлПриватным(ПараметрыТеста);
    Slack_ПолучитьДанныеФайла(ПараметрыТеста);
    Slack_УдалитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ЗагрузитьУдалитьВФ() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Slack_ПолучитьСписокВнешнихФайлов(ПараметрыТеста);
    Slack_ДобавитьВнешнийФайл(ПараметрыТеста);
    Slack_ПолучитьВнешнийФайл(ПараметрыТеста);
    Slack_ОтправитьВнешнийФайл(ПараметрыТеста);
    Slack_УдалитьВнешнийФайл(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура АТ_СоздатьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Workspace", ПараметрыТеста);

    Airtable_СоздатьБазу(ПараметрыТеста);
    Airtable_ПолучитьТаблицыБазы(ПараметрыТеста);
    Airtable_ПолучитьСписокБаз(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);

    Airtable_ПолучитьПолеНомера(ПараметрыТеста);
    Airtable_ПолучитьПолеСтроковое(ПараметрыТеста);
    Airtable_ПолучитьПолеВложения(ПараметрыТеста);
    Airtable_ПолучитьПолеФлажка(ПараметрыТеста);
    Airtable_ПолучитьПолеДаты(ПараметрыТеста);
    Airtable_ПолучитьПолеТелефона(ПараметрыТеста);
    Airtable_ПолучитьПолеПочты(ПараметрыТеста);
    Airtable_ПолучитьПолеСсылки(ПараметрыТеста);
    Airtable_СоздатьТаблицу(ПараметрыТеста);
    Airtable_ИзменитьТаблицу(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьПоле() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    Airtable_СоздатьПоле(ПараметрыТеста);
    Airtable_ИзменитьПоле(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьУдалитьЗаписи() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    Airtable_СоздатьЗаписи(ПараметрыТеста);
    Airtable_ПолучитьЗапись(ПараметрыТеста);
    Airtable_СоздатьКомментарий(ПараметрыТеста);
    Airtable_ИзменитьКомментарий(ПараметрыТеста);
    Airtable_ПолучитьКомментарии(ПараметрыТеста);
    Airtable_УдалитьКомментарий(ПараметрыТеста);
    Airtable_ПолучитьСписокЗаписей(ПараметрыТеста);
    Airtable_УдалитьЗаписи(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура ДропБокс_ПолучитьОбновитьТокен() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appkey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appsecret", ПараметрыТеста);

    Dropbox_ПолучитьСсылкуАвторизации(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Code", ПараметрыТеста);

    Dropbox_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Refresh", ПараметрыТеста);

    Dropbox_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ЗагрузитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Big"          , ПараметрыТеста);

    Dropbox_ЗагрузитьФайл(ПараметрыТеста);
    Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);
    Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыТеста);
    Dropbox_ВосстановитьОбъектКВерсии(ПараметрыТеста);
    Dropbox_ПолучитьПревью(ПараметрыТеста);
    Dropbox_СкачатьФайл(ПараметрыТеста);
    Dropbox_ПереместитьОбъект(ПараметрыТеста);
    Dropbox_КопироватьОбъект(ПараметрыТеста);
    Dropbox_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_СоздатьПапку(ПараметрыТеста);
    Dropbox_СкачатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ПолучитьСписокФайловПапки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ПолучитьСписокФайловПапки(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ЗагрузитьФайлПоURL() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Dropbox_ЗагрузитьФайлПоURL(ПараметрыТеста);
    Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_СоздатьУдалитьТег() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ДобавитьТег(ПараметрыТеста);
    Dropbox_ПолучитьСписокТегов(ПараметрыТеста);
    Dropbox_УдалитьТег(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ПолучитьАккаунт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыТеста);
    Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_РаботаСДоступами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_OtherUser", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_FileID"   , ПараметрыТеста);

    Dropbox_ДобавитьПользователейКФайлу(ПараметрыТеста);
    Dropbox_ОпубликоватьПапку(ПараметрыТеста);
    Dropbox_ДобавитьПользователейКПапке(ПараметрыТеста);
    Dropbox_ОтменитьПубликациюПапки(ПараметрыТеста);
    Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыТеста);
    Dropbox_ОтменитьПубликациюФайла(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура Б24_РаботаСТокеном() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientSecret", ПараметрыТеста);

    Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Code", ПараметрыТеста);

    Bitrix24_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Refresh", ПараметрыТеста);

    Bitrix24_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_СерверноеВремя() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_СерверноеВремя(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСНовостями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    Bitrix24_СоздатьНовость(ПараметрыТеста);
    Bitrix24_ИзменитьНовость(ПараметрыТеста);
    Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыТеста);
    Bitrix24_ПолучитьНовости(ПараметрыТеста);
    Bitrix24_ДобавитьКомментарийНовости(ПараметрыТеста);
    Bitrix24_ДобавитьПолучателейКНовости(ПараметрыТеста);
    Bitrix24_УдалитьНовость(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЗадачами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_UserID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыТеста);
    Bitrix24_СоздатьЗадачу(ПараметрыТеста);
    Bitrix24_СоздатьЗависимостьЗадач(ПараметрыТеста);
    Bitrix24_УдалитьЗависимостьЗадач(ПараметрыТеста);
    Bitrix24_ИзменитьЗадачу(ПараметрыТеста);
    Bitrix24_ПолучитьЗадачу(ПараметрыТеста);
    Bitrix24_ОтключитьЗвукЗадачи(ПараметрыТеста);
    Bitrix24_ВключитьЗвукЗадачи(ПараметрыТеста);
    Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыТеста);
    Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыТеста);
    Bitrix24_ДелегироватьЗадачу(ПараметрыТеста);
    Bitrix24_ОтложитьЗадачу(ПараметрыТеста);
    Bitrix24_ЗавершитьЗадачу(ПараметрыТеста);
    Bitrix24_ОтклонитьЗадачу(ПараметрыТеста);
    Bitrix24_ПринятьЗадачу(ПараметрыТеста);
    Bitrix24_ВозобновитьЗадачу(ПараметрыТеста);
    Bitrix24_НачатьВыполнениеЗадачи(ПараметрыТеста);
    Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыТеста);
    Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыТеста);
    Bitrix24_ПриостановитьЗадачу(ПараметрыТеста);
    Bitrix24_ПолучитьИсториюЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокЗадач(ПараметрыТеста);
    Bitrix24_ПроверитьДоступКЗадаче(ПараметрыТеста);
    Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыТеста);

    Наименование = "Картинка задачи.jpg";
    Картинка     = ПараметрыТеста["Picture"];
    IDПриемника  = 3;

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование, Картинка, IDПриемника);
    IDФайла   = Результат["result"]["ID"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskFileID", IDФайла);
    ПараметрыТеста.Вставить("Bitrix24_TaskFileID", IDФайла);

    Bitrix24_ДобавитьФайлВЗадачу(ПараметрыТеста);

    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    Bitrix24_УдалитьЗадачу(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСДиском() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    Bitrix24_ПолучитьСписокХранилищ(ПараметрыТеста);
    Bitrix24_ПолучитьХранилищеПриложения(ПараметрыТеста);
    Bitrix24_ПереименоватьХранилище(ПараметрыТеста);
    Bitrix24_ПолучитьХранилище(ПараметрыТеста);
    Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыТеста);
    Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыТеста);
    Bitrix24_ПолучитьИнформациюОФайле(ПараметрыТеста);
    Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыТеста);
    Bitrix24_ПереименоватьФайл(ПараметрыТеста);
    Bitrix24_ПоместитьФайлВКорзину(ПараметрыТеста);
    Bitrix24_ВосстановитьФайл(ПараметрыТеста);
    Bitrix24_СоздатьКаталогВХранилище(ПараметрыТеста);
    Bitrix24_ПереименоватьКаталог(ПараметрыТеста);
    Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыТеста);
    Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыТеста);
    Bitrix24_СоздатьПодкаталог(ПараметрыТеста);
    Bitrix24_ПереместитьФайлВКаталог(ПараметрыТеста);
    Bitrix24_СкопироватьКаталог(ПараметрыТеста);
    Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыТеста);
    Bitrix24_СкопироватьФайл(ПараметрыТеста);
    Bitrix24_УдалитьФайл(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыТеста);
    Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыТеста);
    Bitrix24_ПереместитьКаталог(ПараметрыТеста);
    Bitrix24_ПоместитьКаталогВКорзину(ПараметрыТеста);
    Bitrix24_ВосстановитьКаталог(ПараметрыТеста);
    Bitrix24_УдалитьКаталог(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСКомментариями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentsTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_CommentsTaskID", IDЗадачи);

    Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_СоздатьРезультатИзКомментария(ПараметрыТеста);
    Bitrix24_ПолучитьСписокРезультатов(ПараметрыТеста);
    Bitrix24_УдалитьРезультатИзКомментария(ПараметрыТеста);
    Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура Б24_УчетРабочегоВремени() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ElapsedTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_ElapsedTaskID", IDЗадачи);

    Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_НачатьУчетВремени(ПараметрыТеста);
    Bitrix24_ПриостановитьУчетВремени(ПараметрыТеста);
    Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыТеста);
    Bitrix24_ЗавершитьУчетВремени(ПараметрыТеста);
    Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура Б24_Канбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_KanbanTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_KanbanTaskID", IDЗадачи);

    Bitrix24_ДобавитьСтадиюКанбана(ПараметрыТеста);
    Bitrix24_ПолучитьСтадииКанбана(ПараметрыТеста);
    Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыТеста);
    Bitrix24_ИзменитьСтадиюКанбана(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

    Bitrix24_УдалитьСтадиюКанбана(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    Bitrix24_ПолучитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_УстановитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьПользователей(ПараметрыТеста);
    Bitrix24_СоздатьЧат(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыТеста);
    Bitrix24_ИсключитьПользователяИзЧата(ПараметрыТеста);
    Bitrix24_ДобавитьПользователейВЧат(ПараметрыТеста);
    Bitrix24_ИзменитьЗаголовокЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ИзменитьЦветЧата(ПараметрыТеста);
    Bitrix24_ИзменитьКартинкуЧата(ПараметрыТеста);
    Bitrix24_ОтключитьУведомленияЧата(ПараметрыТеста);
    Bitrix24_ВключитьУведомленияЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыТеста);
    Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыТеста);
    Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыТеста);
    Bitrix24_ПолучитьДиалог(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыТеста);
    Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыТеста);
    Bitrix24_ОтправитьСообщение(ПараметрыТеста);
    Bitrix24_ИзменитьСообщение(ПараметрыТеста);
    Bitrix24_ПолучитьБлокКартинки(ПараметрыТеста);
    Bitrix24_ПолучитьБлокФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыТеста);
    Bitrix24_УдалитьСообщение(ПараметрыТеста);
    Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыТеста);
    Bitrix24_ОтправитьФайл(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПрочитатьВсе(ПараметрыТеста);
    Bitrix24_СменитьВладельцаЧата(ПараметрыТеста);
    Bitrix24_ПокинутьЧат(ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруЧата(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСУведомлениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    Bitrix24_СоздатьПерсональноеУведомление(ПараметрыТеста);
    Bitrix24_СоздатьСистемноеУведомление(ПараметрыТеста);
    Bitrix24_УдалитьУведомление(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСПолямиЗадач() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_HookTaskFieldID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_TaskFieldID"    , ПараметрыТеста);

    Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_УправлениеПодразделениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_СоздатьПодразделение(ПараметрыТеста);
    Bitrix24_ПолучитьПодразделения(ПараметрыТеста);
    Bitrix24_ИзменитьПодразделение(ПараметрыТеста);
    Bitrix24_УдалитьПодразделение(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_УправлениеПользователями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьТекущегоПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыТеста);
    Bitrix24_СоздатьПользователя(ПараметрыТеста);
    Bitrix24_НайтиПользователей(ПараметрыТеста);
    Bitrix24_ИзменитьПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьПользователя(ПараметрыТеста);
    Bitrix24_ИзменитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЛидами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьСписокЛидов(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруЛида(ПараметрыТеста);
    Bitrix24_СоздатьЛид(ПараметрыТеста);
    Bitrix24_ПолучитьЛид(ПараметрыТеста);
    Bitrix24_ИзменитьЛид(ПараметрыТеста);
    Bitrix24_УдалитьЛид(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСоСделками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруСделки(ПараметрыТеста);
    Bitrix24_СоздатьСделку(ПараметрыТеста);
    Bitrix24_ПолучитьСделку(ПараметрыТеста);
    Bitrix24_ИзменитьСделку(ПараметрыТеста);
    Bitrix24_УдалитьСделку(ПараметрыТеста);
    Bitrix24_ПолучитьСписокСделок(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСКалендарями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_СоздатьКалендарь(ПараметрыТеста);
    Bitrix24_ИзменитьКалендарь(ПараметрыТеста);
    Bitrix24_ПолучитьСписокКалендарей(ПараметрыТеста);
    Bitrix24_СоздатьСобытиеКалендаря(ПараметрыТеста);
    Bitrix24_УстановитьСтатусУчастияПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСтатусУчастияПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСобытиеКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьСобытияКалендарей(ПараметрыТеста);
    Bitrix24_ИзменитьСобытиеКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьЗанятостьПользователей(ПараметрыТеста);
    Bitrix24_УдалитьСобытиеКалендаря(ПараметрыТеста);
    Bitrix24_УдалитьКалендарь(ПараметрыТеста);
    Bitrix24_ПолучитьПользовательскиеНастройкиКалендаря(ПараметрыТеста);
    Bitrix24_УстановитьПользовательскиеНастройкиКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруНастроекКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруПользовательскихНастроекКаледнаря(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруСобытияКалендаря(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраСобытийКалендарей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VkTeams

Процедура ВКТ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_FileID", ПараметрыТеста);

    VkTeams_ПроверитьТокен(ПараметрыТеста);
    VkTeams_ПолучитьСобытия(ПараметрыТеста);
    VKTeams_ПолучитьИнформациюОФайле(ПараметрыТеста);

КонецПроцедуры

Процедура ВКТ_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_MessageID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio2"           , ПараметрыТеста);

    VkTeams_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    OPI_Инструменты.Пауза(60);

    VKTeams_ОтветитьНаСобытиеКлавиатуры(ПараметрыТеста);
    VKTeams_ПереслатьСообщение(ПараметрыТеста);
    VKTeams_ОтправитьФайл(ПараметрыТеста);
    VKTeams_ПереслатьФайл(ПараметрыТеста);
    VKTeams_ИзменитьТекстСообщения(ПараметрыТеста);
    VKTeams_ЗакрепитьСообщение(ПараметрыТеста);
    VKTeams_ОткрепитьСообщение(ПараметрыТеста);
    VKTeams_УдалитьСообщение(ПараметрыТеста);
    VKTeams_ОтправитьГолосовоеСообщение(ПараметрыТеста);
    VKTeams_ПереслатьГолосовоеСообщение(ПараметрыТеста);
    VKTeams_СформироватьКнопкуДействия(ПараметрыТеста);

КонецПроцедуры

Процедура ВКТ_УправлениеЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture3"       , ПараметрыТеста);

    VKTeams_ИсключитьПользователейЧата(ПараметрыТеста);
    VKTeams_ИзменитьАватарЧата(ПараметрыТеста);
    VKTeams_ПолучитьИнформациюОЧате(ПараметрыТеста);
    VKTeams_ПолучитьАдминистраторовЧата(ПараметрыТеста);
    VKTeams_ПолучитьПользователейЧата(ПараметрыТеста);
    VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыТеста);
    VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыТеста);
    VKTeams_ЗаблокироватьПользователяЧата(ПараметрыТеста);
    VKTeams_РазблокироватьПользователяЧата(ПараметрыТеста);
    VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыТеста);
    VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыТеста);
    VKTeams_УстановитьЗаголовокЧата(ПараметрыТеста);
    VKTeams_УстановитьОписаниеЧата(ПараметрыТеста);
    VKTeams_УстановитьПравилаЧата(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область OzonSeller

Процедура ОзонАПИ_АтрибутыИХарактеристики() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"  , ПараметрыТеста);

    Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыТеста);
    Ozon_ПолучитьХарактеристикиКатегории(ПараметрыТеста);
    Ozon_ПолучитьЗначенияХарактеристики(ПараметрыТеста);
    Ozon_НайтиЗначенияХарактеристики(ПараметрыТеста);
    Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_ЗагрузкаИОбновлениеТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"     , ПараметрыТеста);

    Ozon_ПолучитьСтруктуруТовара(ПараметрыТеста);
    Ozon_СоздатьОбновитьТовары(ПараметрыТеста);
    Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыТеста);
    Ozon_ДобавитьВидеоТовара(ПараметрыТеста);
    Ozon_ДобавитьВидеообложкуТовара(ПараметрыТеста);
    Ozon_ДополнитьКомплексныйАтрибут(ПараметрыТеста);
    Ozon_СоздатьТоварыПоOzonID(ПараметрыТеста);
    Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыТеста);
    Ozon_ОбновитьХарактеристикиТоваров(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыТеста);
    Ozon_ПолучитьСписокТоваров(ПараметрыТеста);
    Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыТеста);
    Ozon_ПолучитьИнформациюОТоварах(ПараметрыТеста);
    Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыТеста);
    Ozon_ПолучитьОписаниеТовара(ПараметрыТеста);
    Ozon_ОбновитьИзображенияТовара(ПараметрыТеста);
    Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыТеста);
    Ozon_ИзменитьАртикулыТоваров(ПараметрыТеста);
    Ozon_АрхивироватьТовары(ПараметрыТеста);
    Ozon_РазархивироватьТовары(ПараметрыТеста);
    Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыТеста);
    Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыТеста);
    Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыТеста);
    Ozon_ПолучитьСвязанныеSKU(ПараметрыТеста);
    Ozon_УдалитьТоварыБезSKU(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_Штрихкоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    Ozon_ПривязатьШтрихкоды(ПараметрыТеста);
    Ozon_СоздатьШтрихкоды(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_ЦеныИОстаткиТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    Ozon_ПолучитьКоличествоТоваров(ПараметрыТеста);
    Ozon_ОбновитьЦеныТоваров(ПараметрыТеста);
    Ozon_ОбновитьКоличествоТоваров(ПараметрыТеста);
    Ozon_ПолучитьЦеныТоваров(ПараметрыТеста);
    Ozon_ПолучитьИнформациюОбУценке(ПараметрыТеста);
    // Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_РаботаСоСкладами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"  , ПараметрыТеста);

    Ozon_ПолучитьСписокСкладов(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_РаботаСАкциями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"  , ПараметрыТеста);

    Ozon_ПолучитьСписокАкций(ПараметрыТеста);
    Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыТеста);
    Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_СхемаFBO() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"  , ПараметрыТеста);

    Ozon_ПолучитьСписокКластеров(ПараметрыТеста);
    Ozon_ПолучитьСписокСкладовОтгрузки(ПараметрыТеста);
    Ozon_СоздатьЧерновикЗаявкиFBO(ПараметрыТеста);
    Ozon_ПолучитьЧерновикЗаявкиFBO(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруДопПолейОтправления(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруФильтраОтправлений(ПараметрыТеста);
    Ozon_ПолучитьСписокОтправленийFBO(ПараметрыТеста);
    Ozon_ПолучитьТаймслотыFBO(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура НС_РаботаСФайлами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Gif"     , ПараметрыТеста);

    Neocities_ЗагрузитьФайл(ПараметрыТеста);
    Neocities_ЗагрузитьФайлы(ПараметрыТеста);
    Neocities_ПолучитьСписокФайлов(ПараметрыТеста);
    Neocities_УдалитьВыбранныеФайлы(ПараметрыТеста);
    Neocities_СинхронизироватьКаталоги(ПараметрыТеста);

КонецПроцедуры

Процедура НС_ПолучениеДанных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Login"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Password", ПараметрыТеста);

    Neocities_ПолучитьДанныеОСайте(ПараметрыТеста);
    Neocities_ПолучитьТокен(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура СдэкАПИ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Account" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Password", ПараметрыТеста);

    CDEK_ПолучитьТокен(ПараметрыТеста);
    CDEK_ПолучитьЧекиНаДату(ПараметрыТеста);
    CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыТеста);
    CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыТеста);
    CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыТеста);
    CDEK_ПолучитьСписокОфисов(ПараметрыТеста);
    CDEK_ПолучитьСписокРегионов(ПараметрыТеста);

КонецПроцедуры

Процедура СдэкАПИ_РаботаСЗаказами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token", ПараметрыТеста);

    CDEK_ПолучитьОписаниеЗаказа(ПараметрыТеста);
    CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьЗаказ(ПараметрыТеста);
    CDEK_ПолучитьЗаказПоНомеру(ПараметрыТеста);
    CDEK_СформироватьКвитанцию(ПараметрыТеста);
    CDEK_СформироватьШтрихкод(ПараметрыТеста);
    CDEK_СоздатьПреалерт(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьКвитанцию(ПараметрыТеста);
    CDEK_ПолучитьШтрихкод(ПараметрыТеста);
    CDEK_ПолучитьПреалерт(ПараметрыТеста);
    CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыТеста);
    CDEK_ПолучитьЧекЗаказа(ПараметрыТеста);
    CDEK_ИзменитьЗаказ(ПараметрыТеста);
    CDEK_ОформитьКлиентскийВозврат(ПараметрыТеста);
    CDEK_СоздатьОтказ(ПараметрыТеста);
    CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

Процедура СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token", ПараметрыТеста);

    CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыТеста);
    CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_ПолучитьОписаниеДоговоренности(ПараметрыТеста);

    CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыТеста);
    CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыТеста);
    CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура ЯМетрика_УправлениеМетками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    YandexMetrika_СоздатьМетку(ПараметрыТеста);
    YandexMetrika_ПолучитьСписокМеток(ПараметрыТеста);
    YandexMetrika_ИзменитьМетку(ПараметрыТеста);
    YandexMetrika_ПолучитьМетку(ПараметрыТеста);
    YandexMetrika_УдалитьМетку(ПараметрыТеста);

КонецПроцедуры

Процедура ЯМетрика_УправлениеСчетчиками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыТеста);
    YandexMetrika_СоздатьСчетчик(ПараметрыТеста);
    YandexMetrika_ПолучитьСчетчик(ПараметрыТеста);
    YandexMetrika_ИзменитьСчетчик(ПараметрыТеста);
    YandexMetrika_УдалитьСчетчик(ПараметрыТеста);
    YandexMetrika_ВосстановитьСчетчик(ПараметрыТеста);
    YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыТеста);
    YandexMetrika_УдалитьСчетчик(ПараметрыТеста);

КонецПроцедуры

Процедура ЯМетрика_УправлениеОперациями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    YandexMetrika_СоздатьСчетчик(ПараметрыТеста);
    YandexMetrika_ПолучитьСписокОпераций(ПараметрыТеста);
    YandexMetrika_УдалитьСчетчик(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура AWS_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);

    S3_ПолучитьСтруктуруДанных(ПараметрыТеста);
    S3_ОтправитьЗапросБезТела(ПараметрыТеста);
    S3_ОтправитьЗапросСТелом(ПараметрыТеста);

КонецПроцедуры

Процедура AWS_РаботаСБакетами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);

    S3_СоздатьБакет(ПараметрыТеста);
    S3_ПолучитьСписокБакетов(ПараметрыТеста);
    S3_ПроверитьДоступностьБакета(ПараметрыТеста);
    S3_УстановитьТегиБакета(ПараметрыТеста);
    S3_ПолучитьТегиБакета(ПараметрыТеста);
    S3_УдалитьТегиБакета(ПараметрыТеста);
    S3_УстановитьШифрованиеБакета(ПараметрыТеста);
    S3_ПолучитьШифрованиеБакета(ПараметрыТеста);
    S3_УдалитьШифрованиеБакета(ПараметрыТеста);
    S3_УстановитьНастройкиВерсионированияБакета(ПараметрыТеста);
    S3_ПолучитьНастройкийВерсионированияБакета(ПараметрыТеста);
    S3_УдалитьБакет(ПараметрыТеста);

КонецПроцедуры

Процедура AWS_РаботаСОбъектами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio"       , ПараметрыТеста);

    S3_СоздатьБакет(ПараметрыТеста);
    S3_ЗагрузитьОбъект(ПараметрыТеста);
    S3_ЗагрузитьОбъектЦеликом(ПараметрыТеста);
    S3_ИнициализироватьЗагрузкуЧастями(ПараметрыТеста);
    S3_ЗагрузитьЧастьОбъекта(ПараметрыТеста);
    S3_ЗавершитьЗагрузкуЧастями(ПараметрыТеста);
    S3_ОтменитьЗагрузкуЧастями(ПараметрыТеста);
    S3_ПолучитьОписаниеОбъекта(ПараметрыТеста);
    S3_КопироватьОбъект(ПараметрыТеста);
    S3_УстановитьТегиОбъекта(ПараметрыТеста);
    S3_ПолучитьТегиОбъекта(ПараметрыТеста);
    S3_УдалитьТегиОбъекта(ПараметрыТеста);
    S3_ПолучитьСписокОбъектов(ПараметрыТеста);
    S3_ПолучитьСписокВерсийОбъектов(ПараметрыТеста);
    S3_ПолучитьОбъект(ПараметрыТеста);
    S3_ПолучитьСсылкуСкачиванияОбъекта(ПараметрыТеста);
    S3_УдалитьОбъект(ПараметрыТеста);
    S3_УдалитьБакет(ПараметрыТеста);
    S3_ПолучитьСсылкуЗагрузкиОбъекта(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область TCP

Процедура TC_Клиент() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("TCP_Address"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("TCP_AddressTLS", ПараметрыТеста);

    TCP_ОткрытьСоединение(ПараметрыТеста);
    TCP_ЗакрытьСоединение(ПараметрыТеста);
    TCP_ПрочитатьДвоичныеДанные(ПараметрыТеста);
    TCP_ОтправитьДвоичныеДанные(ПараметрыТеста);
    TCP_ПрочитатьСтроку(ПараметрыТеста);
    TCP_ОтправитьСтроку(ПараметрыТеста);
    TCP_ОбработатьЗапрос(ПараметрыТеста);
    TCP_ПолучитьНастройкиTls(ПараметрыТеста);
    TCP_ПолучитьПоследнююОшибку(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область SQLite

Процедура SQLL_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;

    База = ПолучитьИмяВременногоФайла("sqlite");
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("SQLite_DB", База);
    OPI_Инструменты.ДобавитьПоле("SQLite_DB", База, "Строка", ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQLite_Ext"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQLite_ExtLinux", ПараметрыТеста);

    SQLite_ОткрытьСоединение(ПараметрыТеста);
    SQLite_ЗакрытьСоединение(ПараметрыТеста);
    SQLite_ВыполнитьЗапросSQL(ПараметрыТеста);
    SQLite_ЭтоКоннектор(ПараметрыТеста);
    SQLite_ПодключитьРасширение(ПараметрыТеста);

    Попытка
        УдалитьФайлы(База);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLL_ORM() Экспорт

    ПараметрыТеста = Новый Структура;

    База = ПолучитьИмяВременногоФайла("sqlite");

    Соединение = OPI_SQLite.ОткрытьСоединение(База);
    ПараметрыТеста.Вставить("SQLite_DB", Соединение);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);

    SQLite_СоздатьТаблицу(ПараметрыТеста);
    SQLite_ДобавитьЗаписи(ПараметрыТеста);
    SQLite_ПолучитьЗаписи(ПараметрыТеста);
    SQLite_ОбновитьЗаписи(ПараметрыТеста);
    SQLite_УдалитьЗаписи(ПараметрыТеста);
    SQLite_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    SQLite_ДобавитьКолонкуТаблицы(ПараметрыТеста);
    SQLite_УдалитьКолонкуТаблицы(ПараметрыТеста);
    SQLite_ГарантироватьТаблицу(ПараметрыТеста);
    SQLite_ОчиститьТаблицу(ПараметрыТеста);
    SQLite_УдалитьТаблицу(ПараметрыТеста);
    SQLite_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("SQLite_DB", База);
    OPI_Инструменты.ДобавитьПоле("SQLite_DB", База, "Строка", ПараметрыТеста);

    SQLite_СоздатьТаблицу(ПараметрыТеста);
    SQLite_ДобавитьЗаписи(ПараметрыТеста);
    SQLite_ПолучитьЗаписи(ПараметрыТеста);
    SQLite_ОбновитьЗаписи(ПараметрыТеста);
    SQLite_УдалитьЗаписи(ПараметрыТеста);
    SQLite_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    SQLite_ДобавитьКолонкуТаблицы(ПараметрыТеста);
    SQLite_УдалитьКолонкуТаблицы(ПараметрыТеста);
    SQLite_ГарантироватьТаблицу(ПараметрыТеста);
    SQLite_ОчиститьТаблицу(ПараметрыТеста);
    SQLite_УдалитьТаблицу(ПараметрыТеста);
    SQLite_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

    Попытка
        УдалитьФайлы(База);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

Процедура Postgres_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQL"        , ПараметрыТеста);

    PostgreSQL_СформироватьСтрокуПодключения(ПараметрыТеста);
    PostgreSQL_ОткрытьСоединение(ПараметрыТеста);
    PostgreSQL_ЗакрытьСоединение(ПараметрыТеста);
    PostgreSQL_ЭтоКоннектор(ПараметрыТеста);
    PostgreSQL_ВыполнитьЗапросSQL(ПараметрыТеста);
    PostgreSQL_ПолучитьНастройкиTls(ПараметрыТеста);

КонецПроцедуры

Процедура Postgres_ORM() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);

    PostgreSQL_СоздатьБазуДанных(ПараметрыТеста);
    PostgreSQL_СоздатьТаблицу(ПараметрыТеста);
    PostgreSQL_ДобавитьЗаписи(ПараметрыТеста);
    PostgreSQL_ПолучитьЗаписи(ПараметрыТеста);
    PostgreSQL_ОбновитьЗаписи(ПараметрыТеста);
    PostgreSQL_УдалитьЗаписи(ПараметрыТеста);
    PostgreSQL_ОчиститьТаблицу(ПараметрыТеста);
    PostgreSQL_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    PostgreSQL_ДобавитьКолонкуТаблицы(ПараметрыТеста);
    PostgreSQL_УдалитьКолонкуТаблицы(ПараметрыТеста);
    PostgreSQL_ГарантироватьТаблицу(ПараметрыТеста);
    PostgreSQL_УдалитьТаблицу(ПараметрыТеста);
    PostgreSQL_ОтключитьВсеСоединенияБазыДанных(ПараметрыТеста);
    PostgreSQL_УдалитьБазуДанных(ПараметрыТеста);
    PostgreSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область MySQL

Процедура MYS_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQL2"       , ПараметрыТеста);

    MySQL_СформироватьСтрокуПодключения(ПараметрыТеста);
    MySQL_ОткрытьСоединение(ПараметрыТеста);
    MySQL_ЗакрытьСоединение(ПараметрыТеста);
    MySQL_ЭтоКоннектор(ПараметрыТеста);
    MySQL_ВыполнитьЗапросSQL(ПараметрыТеста);
    MySQL_ПолучитьНастройкиTls(ПараметрыТеста);

КонецПроцедуры

Процедура MYS_ORM() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);

    MySQL_СоздатьБазуДанных(ПараметрыТеста);
    MySQL_СоздатьТаблицу(ПараметрыТеста);
    MySQL_ДобавитьЗаписи(ПараметрыТеста);
    MySQL_ПолучитьЗаписи(ПараметрыТеста);
    MySQL_ОбновитьЗаписи(ПараметрыТеста);
    MySQL_УдалитьЗаписи(ПараметрыТеста);
    MySQL_ОчиститьТаблицу(ПараметрыТеста);
    MySQL_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    MySQL_ДобавитьКолонкуТаблицы(ПараметрыТеста);
    MySQL_УдалитьКолонкуТаблицы(ПараметрыТеста);
    MySQL_ГарантироватьТаблицу(ПараметрыТеста);
    MySQL_УдалитьТаблицу(ПараметрыТеста);
    MySQL_УдалитьБазуДанных(ПараметрыТеста);
    MySQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GreenAPI

Процедура GAPI_Аккаунт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_TestGroupID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);

    GreenAPI_АрхивироватьЧат(ПараметрыТеста);
    GreenAPI_РазархивироватьЧат(ПараметрыТеста);
    GreenAPI_СформироватьПараметрыДоступа(ПараметрыТеста);
    GreenAPI_ПолучитьНастройкиИнстанса(ПараметрыТеста);
    GreenAPI_ПолучитьИнформациюОбАккаунте(ПараметрыТеста);
    GreenAPI_ПолучитьСтруктуруНастроекИнстанса(ПараметрыТеста);
    GreenAPI_УстановитьНастройкиИнстанса(ПараметрыТеста);
    GreenAPI_ПолучитьСостояниеИнстанса(ПараметрыТеста);
    GreenAPI_УстановитьКартинкуПрофиля(ПараметрыТеста);
    GreenAPI_ПерезапуститьИнстанс(ПараметрыТеста);
    // GreenAPI_ПолучитьКодАвторизации(ПараметрыТеста);
    // GreenAPI_РазлогинитьИнстанс(ПараметрыТеста);
    // GreenAPI_ПолучитьQR(ПараметрыТеста);

КонецПроцедуры

Процедура GAPI_УправлениеГруппами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"            , ПараметрыТеста);

    GreenAPI_СоздатьГруппу(ПараметрыТеста);
    GreenAPI_ПолучитьИнформациюОГруппе(ПараметрыТеста);
    GreenAPI_ИзменитьИмяГруппы(ПараметрыТеста);
    GreenAPI_УстановитьКартинкуГруппы(ПараметрыТеста);
    GreenAPI_ДобавитьУчастникаВГруппу(ПараметрыТеста);
    GreenAPI_ИсключитьУчастникаГруппы(ПараметрыТеста);
    GreenAPI_НазначитьПраваАдминистратора(ПараметрыТеста);
    GreenAPI_ОтозватьПраваАдминистратора(ПараметрыТеста);
    GreenAPI_ПокинутьГруппу(ПараметрыТеста);

КонецПроцедуры

Процедура GAPI_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_TestGroupID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"               , ПараметрыТеста);

    GreenAPI_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    GreenAPI_ОтправитьФайл(ПараметрыТеста);
    GreenAPI_ОтправитьФайлПоURL(ПараметрыТеста);
    GreenAPI_ОтправитьОпрос(ПараметрыТеста);
    GreenAPI_ОтправитьЛокацию(ПараметрыТеста);
    GreenAPI_ОтправитьКонтакт(ПараметрыТеста);
    GreenAPI_ПереслатьСообщения(ПараметрыТеста);
    GreenAPI_ПолучитьОписаниеЛокации(ПараметрыТеста);
    GreenAPI_ПолучитьОписаниеКонтакта(ПараметрыТеста);
    GreenAPI_ИзменитьТекстСообщения(ПараметрыТеста);
    GreenAPI_УдалитьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура GAPI_ПолучениеУведомлений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_FileMessageID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_TestGroupID"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_DownloadMessageID", ПараметрыТеста);

    GreenAPI_ПолучитьУведомление(ПараметрыТеста);
    GreenAPI_УстановитьОтметкуПрочтения(ПараметрыТеста);
    //GreenAPI_СкачатьФайлСообщения(ПараметрыТеста);
    GreenAPI_УдалитьУведомлениеИзОчереди(ПараметрыТеста);

КонецПроцедуры

Процедура GAPI_ОчередьСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID"  , ПараметрыТеста);

    GreenAPI_ПолучитьОчередьСообщений(ПараметрыТеста);
    GreenAPI_ОчиститьОчередьСообщений(ПараметрыТеста);

КонецПроцедуры

Процедура GAPI_ЖурналыСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_ApiURL"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MediaURL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_IdInstance" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_Token"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_TestGroupID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_AccountID"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GreenAPI_MessageID"  , ПараметрыТеста);

    GreenAPI_ПолучитьИсториюЧата(ПараметрыТеста);
    GreenAPI_ПолучитьСообщение(ПараметрыТеста);
    GreenAPI_ПолучитьЖурналВходящихСообщений(ПараметрыТеста);
    GreenAPI_ПолучитьЖурналИсходящихСообщений(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область RCON

Процедура RC_ВыполнениеКоманд() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("RCON_URL"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("RCON_Password", ПараметрыТеста);

    RCON_СформироватьПараметрыСоединения(ПараметрыТеста);
    RCON_ОткрытьСоединение(ПараметрыТеста);
    RCON_ВыполнитьКоманду(ПараметрыТеста);
    RCON_ЭтоКоннектор(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Ollama

Процедура OLLM_ОбработкаЗапросов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_URL"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_Token", ПараметрыТеста);

    Ollama_СкачатьМодель(ПараметрыТеста);
    Ollama_ПолучитьВерсию(ПараметрыТеста);
    Ollama_ПолучитьОтвет(ПараметрыТеста);
    Ollama_ПолучитьОтветВКонтексте(ПараметрыТеста);
    Ollama_ПолучитьПредставления(ПараметрыТеста);
    Ollama_ПолучитьСтруктуруПараметровЗапроса(ПараметрыТеста);
    Ollama_ПолучитьСтруктуруПараметровВКонтексте(ПараметрыТеста);
    Ollama_ПолучитьСтруктуруСообщенияКонтекста(ПараметрыТеста);
    Ollama_ПолучитьСтруктуруПараметровПредставлений(ПараметрыТеста);

КонецПроцедуры

Процедура OLLM_РаботаСМоделями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_URL"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_Token", ПараметрыТеста);

    Ollama_СкачатьМодель(ПараметрыТеста);
    Ollama_ЗагрузитьМодельВПамять(ПараметрыТеста);
    Ollama_ВыгрузитьМодельИзПамяти(ПараметрыТеста);
    Ollama_СоздатьМодель(ПараметрыТеста);
    Ollama_ПолучитьИнформациюОМодели(ПараметрыТеста);
    Ollama_ПолучитьСписокМоделей(ПараметрыТеста);
    Ollama_ПолучитьСписокЗапущенныхМоделей(ПараметрыТеста);
    Ollama_КопироватьМодель(ПараметрыТеста);
    Ollama_ОтправитьМодель(ПараметрыТеста);
    Ollama_ПолучитьСтруктуруНастроекМодели(ПараметрыТеста);
    Ollama_УдалитьМодель(ПараметрыТеста);

КонецПроцедуры

Процедура OLLM_РаботаСBlob() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_URL"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ollama_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);

    Ollama_ОтправитьBlob(ПараметрыТеста);
    Ollama_ПроверитьBlob(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область HTTP

Процедура HTTP_Инициализация() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL"  , ПараметрыТеста);

    HTTPКлиент_Инициализировать(ПараметрыТеста);
    HTTPКлиент_УстановитьURL(ПараметрыТеста);
    HTTPКлиент_УстановитьПараметрыURL(ПараметрыТеста);
    HTTPКлиент_УстановитьФайлОтвета(ПараметрыТеста);
    HTTPКлиент_УстановитьТипДанных(ПараметрыТеста);
    HTTPКлиент_ПолучитьЛог(ПараметрыТеста);
    HTTPКлиент_УстановитьПрокси(ПараметрыТеста);
    HTTPКлиент_УстановитьТаймаут(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_УстановкаТела() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    HTTPКлиент_УстановитьДвоичноеТело(ПараметрыТеста);
    HTTPКлиент_УстановитьСтроковоеТело(ПараметрыТеста);
    HTTPКлиент_УстановитьJsonТело(ПараметрыТеста);
    HTTPКлиент_УстановитьFormТело(ПараметрыТеста);
    HTTPКлиент_НачатьЗаписьТелаMultipart(ПараметрыТеста);
    HTTPКлиент_ДобавитьПолеMultipartFormData(ПараметрыТеста);
    HTTPКлиент_ДобавитьФайлMultipartFormData(ПараметрыТеста);
    HTTPКлиент_ДобавитьДанныеRelated(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_Настройки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    HTTPКлиент_ИспользоватьКодировку(ПараметрыТеста);
    HTTPКлиент_ИспользоватьСжатиеGzip(ПараметрыТеста);
    HTTPКлиент_ИспользоватьПоляТелаВOAuth(ПараметрыТеста);
    HTTPКлиент_ИспользоватьКодированиеURL(ПараметрыТеста);
    HTTPКлиент_РазделятьМассивыВURL(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_УстановкаЗаголовков() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);

    HTTPКлиент_УстановитьЗаголовки(ПараметрыТеста);
    HTTPКлиент_ДобавитьЗаголовок(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_Авторизация() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);

    HTTPКлиент_ДобавитьBasicАвторизацию(ПараметрыТеста);
    HTTPКлиент_ДобавитьBearerАвторизацию(ПараметрыТеста);
    HTTPКлиент_ДобавитьAWS4Авторизацию(ПараметрыТеста);
    HTTPКлиент_ДобавитьOAuthV1Авторизацию(ПараметрыТеста);
    HTTPКлиент_УстановитьАлгоритмOAuthV1(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_ОбработкаЗапроса() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);

    HTTPКлиент_ОбработатьЗапрос(ПараметрыТеста);
    HTTPКлиент_ВыполнитьЗапрос(ПараметрыТеста);
    HTTPКлиент_ВернутьЗапрос(ПараметрыТеста);
    HTTPКлиент_ВернутьСоединение(ПараметрыТеста);

КонецПроцедуры

Процедура HTTP_ПолучениеОтвета() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("HTTP_URL", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    HTTPКлиент_ВернутьОтвет(ПараметрыТеста);
    HTTPКлиент_ВернутьОтветКакJSONКоллекцию(ПараметрыТеста);
    HTTPКлиент_ВернутьОтветКакДвоичныеДанные(ПараметрыТеста);
    HTTPКлиент_ВернутьОтветКакСтроку(ПараметрыТеста);
    HTTPКлиент_ВернутьИмяФайлаТелаОтвета(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область OpenAI

Процедура OAI_ОбработкаЗапросов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token2" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL2"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_File"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"       , ПараметрыТеста);

    OpenAI_ПолучитьОтвет(ПараметрыТеста);
    OpenAI_ПолучитьПредставления(ПараметрыТеста);
    OpenAI_ПолучитьСтруктуруСообщения(ПараметрыТеста);
    OpenAI_ПолучитьСтруктуруСообщенияКартинки(ПараметрыТеста);
    OpenAI_ПолучитьКартинки(ПараметрыТеста);
    OpenAI_ПолучитьСообщениеАссистента(ПараметрыТеста);
    OpenAI_ПолучитьСообщениеПользователя(ПараметрыТеста);
    OpenAI_ПолучитьСообщениеСистемы(ПараметрыТеста);

КонецПроцедуры

Процедура OAI_Ассистенты() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL"    , ПараметрыТеста);

    OpenAI_СоздатьАссистента(ПараметрыТеста);
    OpenAI_ПолучитьАссистента(ПараметрыТеста);
    OpenAI_ПолучитьСписокАссистентов(ПараметрыТеста);
    OpenAI_УдалитьАссистента(ПараметрыТеста);

КонецПроцедуры

Процедура OAI_РаботаСФайлами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"       , ПараметрыТеста);

    OpenAI_ЗагрузитьФайл(ПараметрыТеста);
    OpenAI_ПолучитьИнформациюОФайле(ПараметрыТеста);
    OpenAI_ПолучитьСписокФайлов(ПараметрыТеста);
    OpenAI_СкачатьФайл(ПараметрыТеста);
    OpenAI_УдалитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура OAI_РаботаСАудио() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL"    , ПараметрыТеста);

    OpenAI_СгенерироватьРечь(ПараметрыТеста);
    OpenAI_СоздатьТранскрипцию(ПараметрыТеста);

КонецПроцедуры

Процедура OAI_РаботаСМоделями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("OpenAI_URL"    , ПараметрыТеста);

    OpenAI_ПолучитьСписокМоделей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область MSSQL

Процедура MSS_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQL2"       , ПараметрыТеста);

    MSSQL_СформироватьСтрокуПодключения(ПараметрыТеста);
    MSSQL_ОткрытьСоединение(ПараметрыТеста);
    MSSQL_ЗакрытьСоединение(ПараметрыТеста);
    MSSQL_ЭтоКоннектор(ПараметрыТеста);
    MSSQL_ВыполнитьЗапросSQL(ПараметрыТеста);
    MSSQL_ПолучитьНастройкиTls(ПараметрыТеста);

КонецПроцедуры

Процедура MSS_ORM() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);

    MSSQL_СоздатьБазуДанных(ПараметрыТеста);
    MSSQL_СоздатьТаблицу(ПараметрыТеста);
    MSSQL_ДобавитьЗаписи(ПараметрыТеста);
    MSSQL_ПолучитьЗаписи(ПараметрыТеста);
    MSSQL_ОбновитьЗаписи(ПараметрыТеста);
    MSSQL_УдалитьЗаписи(ПараметрыТеста);
    MSSQL_ОчиститьТаблицу(ПараметрыТеста);
    MSSQL_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    MSSQL_ДобавитьКолонкуТаблицы(ПараметрыТеста);
    MSSQL_УдалитьКолонкуТаблицы(ПараметрыТеста);
    MSSQL_ГарантироватьТаблицу(ПараметрыТеста);
    MSSQL_УдалитьТаблицу(ПараметрыТеста);
    MSSQL_УдалитьБазуДанных(ПараметрыТеста);
    MSSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыВК()

    Параметры   = Новый Структура;
    НомерГруппы = OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_GroupID");

    Параметры.Вставить("access_token", OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_Token"));
    Параметры.Вставить("owner_id"    , "-" + НомерГруппы);
    Параметры.Вставить("app_id"      , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_AppID"));
    Параметры.Вставить("group_id"    , НомерГруппы);

    Возврат Параметры;

КонецФункции

Функция ПолучитьПараметрыАвторизацииТвиттер()

    Параметры = Новый Соответствие;

    Параметры.Вставить("redirect_uri"      , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Redirect"));
    Параметры.Вставить("client_id"         , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClinetID"));
    Параметры.Вставить("client_secret"     , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClientSecret"));
    Параметры.Вставить("access_token"      , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Token"));
    Параметры.Вставить("refresh_token"     , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Refresh"));
    Параметры.Вставить("oauth_token"       , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthToken"));
    Параметры.Вставить("oauth_token_secret", OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthSecret"));

    Параметры.Вставить("oauth_consumer_key"   , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthConsumerKey"));
    Параметры.Вставить("oauth_consumer_secret", OPI_ПолучениеДанныхТестов.ПолучитьПараметр(
        "Twitter_OAuthConsumerSecret"));

    Возврат Параметры;

КонецФункции

#Область АтомарныеТесты

#Область Telegram

Процедура Telegram_ПолучитьИнформациюБота(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Результат = OPI_Telegram.ПолучитьИнформациюБота(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюБота", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИнформацияБота(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьОбновления(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Результат = OPI_Telegram.ПолучитьОбновления(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбновления", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УстановитьWebhook(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    URL   = ПараметрыФункции["Telegram_URL"];

    Результат = OPI_Telegram.УстановитьWebhook(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУстановкаВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УдалитьWebhook(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Результат = OPI_Telegram.УдалитьWebhook(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУдалениеВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];

    МассивКнопокКлавиатуры = Новый Массив;
    МассивКнопокКлавиатуры.Добавить("Кнопка1");
    МассивКнопокКлавиатуры.Добавить("Кнопка2");

    Клавиатура = OPI_Telegram.СформироватьКлавиатуруПоМассивуКнопок(МассивКнопокКлавиатуры, Истина);
    Результат  = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "Telegram"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);                      // SKIP

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_MessageID", IDСообщения);               // SKIP
    OPI_Инструменты.ДобавитьПоле("Telegram_MessageID", IDСообщения, "Строка", ПараметрыФункции); // SKIP

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (канал)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_ChannelMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("Telegram_ChannelMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Текст = "<b>Текст html %F0%9F%93%9E 10%</b>";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст, , "HTML");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (HTML)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    Текст = "%F0%9F%A4%BC";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (emoji)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    Текст = "Текст %F0%9F%A5%9D и emoji \(10%\)";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст, , "MarkdownV2");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (текст и emoji)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    Клавиатура = OPI_Инструменты.JsonВСтруктуру(Клавиатура, Ложь);
    Результат  = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (клавиатура структура)", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка1");
    МассивКнопок.Добавить("Кнопка2");
    МассивКнопок.Добавить("Кнопка3");

    Результат = OPI_Telegram.СформироватьКлавиатуруПоМассивуКнопок(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКлавиатуруПоМассивуКнопок", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура Telegram_ОтправитьКартинку(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Картинка = ПараметрыФункции["Picture"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    КартинкаДД = Новый ДвоичныеДанные(КартинкаПуть);

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDЧата, Текст, Картинка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку", "Telegram"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);             // SKIP

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);                  // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_PicMessageID", IDСообщения);               // SKIP
    OPI_Инструменты.ДобавитьПоле("Telegram_PicMessageID", IDСообщения, "Строка", ПараметрыФункции); // SKIP

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDКанала, Текст, КартинкаПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (Путь)"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);        // SKIP

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDКанала, Текст, КартинкаДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (ДД)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка1");
    МассивКнопок.Добавить("Кнопка2");
    МассивКнопок.Добавить("Кнопка3");

    Клавиатура = OPI_Telegram.СформироватьКлавиатуруПоМассивуКнопок(МассивКнопок, Истина);
    Результат  = OPI_Telegram.ОтправитьКартинку(Токен, IDЧата, Текст, Картинка, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (клавиатура)", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    Клавиатура = OPI_Инструменты.JsonВСтруктуру(Клавиатура);
    Результат  = OPI_Telegram.ОтправитьКартинку(Токен, IDКанала, Текст, Картинка, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (клавиатура, коллекция)", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    УдалитьФайлы(КартинкаПуть);

    IDФайла = Результат["result"]["photo"][0]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьВидео(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Видео    = ПараметрыФункции["Video"];

    ВидеоПуть = ПолучитьИмяВременногоФайла("mp4");
    КопироватьФайл(Видео, ВидеоПуть);

    ВидеоДД = Новый ДвоичныеДанные(ВидеоПуть);

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDЧата, Текст, Видео);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDКанала, Текст, ВидеоПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDКанала, Текст, ВидеоДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст);

    УдалитьФайлы(ВидеоПуть);

    IDФайла = Результат["result"]["video"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьАудио(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Аудио    = ПараметрыФункции["Audio"];

    АудиоПуть = ПолучитьИмяВременногоФайла("mp3");
    КопироватьФайл(Аудио, АудиоПуть);

    АудиоДД = Новый ДвоичныеДанные(АудиоПуть);

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDЧата, Текст, Аудио);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDКанала, Текст, АудиоПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDКанала, Текст, АудиоДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст);

    УдалитьФайлы(АудиоПуть);

    IDФайла = Результат["result"]["audio"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьДокумент(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Документ = ПараметрыФункции["Document"];

    ДокументПуть = ПолучитьИмяВременногоФайла("docx");
    КопироватьФайл(Документ, ДокументПуть);

    ДокументДД = Новый ДвоичныеДанные(ДокументПуть);

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDЧата, Текст, Документ);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDЧата, Текст, Документ, , , "customname.docx");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (с именем)", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDКанала, Текст, ДокументПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDКанала, Текст, ДокументДД, , , "customname.docx");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст);

    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьГифку(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Гифка    = ПараметрыФункции["GIF"];

    ГифкаПуть = ПолучитьИмяВременногоФайла("gif");
    КопироватьФайл(Гифка, ГифкаПуть);

    ГифкаДД = Новый ДвоичныеДанные(ГифкаПуть);

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDЧата, Текст, Гифка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDКанала, Текст, ГифкаПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDКанала, Текст, ГифкаДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст);

    УдалитьФайлы(ГифкаПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьМедиагруппу(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    Текст    = ПараметрыФункции["String"];
    Картинка = ПараметрыФункции["Picture"];
    Видео    = ПараметрыФункции["Video"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    ВидеоПуть = ПолучитьИмяВременногоФайла("mp4");
    КопироватьФайл(Видео, ВидеоПуть);

    ВидеоДД = Новый ДвоичныеДанные(ВидеоПуть);

    Медиагруппа = Новый Соответствие;
    Медиагруппа.Вставить(КартинкаПуть, "photo");
    Медиагруппа.Вставить(ВидеоДД     , "video");

    Результат = OPI_Telegram.ОтправитьМедиагруппу(Токен, IDЧата, Текст, Медиагруппа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМедиагруппу", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    ДокументURL  = ПараметрыФункции["Document"];
    ДокументПуть = ПолучитьИмяВременногоФайла("docx");
    IDКанала     = ПараметрыФункции["Telegram_ChannelID"];

    КопироватьФайл(ДокументURL, ДокументПуть);

    МедиаГруппа = Новый Соответствие;
    Медиагруппа.Вставить(ДокументURL , "document");
    Медиагруппа.Вставить(ДокументПуть, "document");

    Результат = OPI_Telegram.ОтправитьМедиагруппу(Токен, IDКанала, Текст, Медиагруппа);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМедиагруппу (доки)", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    УдалитьФайлы(ВидеоПуть);
    УдалитьФайлы(КартинкаПуть);
    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьМестоположение(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Ширина   = ПараметрыФункции["Lat"];
    Долгота  = ПараметрыФункции["Long"];

    Результат = OPI_Telegram.ОтправитьМестоположение(Токен, IDЧата, Ширина, Долгота);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМестоположение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат); // SKIP

    Результат = OPI_Telegram.ОтправитьМестоположение(Токен, IDКанала, Ширина, Долгота);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМестоположение (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьКонтакт(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Имя      = ПараметрыФункции["Name"];
    Фамилия  = ПараметрыФункции["Surname"];
    Телефон  = ПараметрыФункции["Phone"];

    Результат = OPI_Telegram.ОтправитьКонтакт(Токен, IDЧата, Имя, Фамилия, Телефон);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя); // SKIP
    OPI_Инструменты.Пауза(20);                // SKIP

    Результат = OPI_Telegram.ОтправитьКонтакт(Токен, IDКанала, Имя, Фамилия, Телефон);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьОпрос(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Вопрос   = "Какой ваш любимый цвет?";

    МассивОтветов = Новый Массив;
    МассивОтветов.Добавить("Красный");
    МассивОтветов.Добавить("Желтый");
    МассивОтветов.Добавить("Зеленый");
    МассивОтветов.Добавить("Синий");

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDЧата, Вопрос, МассивОтветов, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос); // SKIP

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDКанала, Вопрос, МассивОтветов, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос); // SKIP

    // END

    СтрочныйМассив = "['Красный', 'Желтый','Зеленый' ,'Синий']";

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDКанала, Вопрос, СтрочныйМассив, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос (строчный массив)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СкачатьФайл(ПараметрыФункции)

    IDФайла = ПараметрыФункции["Telegram_FileID"];
    Токен   = ПараметрыФункции["Telegram_Token"];

    Результат = OPI_Telegram.СкачатьФайл(Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "Telegram");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

КонецПроцедуры

Процедура Telegram_ПереслатьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ПереслатьСообщение(Токен, IDСообщения, IDКанала, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПереслать(Результат, IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_Бан(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    IDПользователя = ПараметрыФункции["Telegram_ChatID"];
    IDКанала       = ПараметрыФункции["Telegram_ChannelID"];

    Результат = OPI_Telegram.Бан(Токен, IDКанала, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Бан", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_Разбан(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    IDПользователя = ПараметрыФункции["Telegram_ChatID"];
    IDКанала       = ПараметрыФункции["Telegram_ChannelID"];

    Результат = OPI_Telegram.Разбан(Токен, IDКанала, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Разбан", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СоздатьСсылкуПриглашение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    Сутки       = 86400;
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    Заголовок     = "Ссылка " + Строка(ТекущаяДата);
    Истечение     = ТекущаяДата + Сутки;
    UnixИстечение = OPI_Инструменты.UNIXTime(Истечение);

    Результат = OPI_Telegram.СоздатьСсылкуПриглашение(Токен, IDКанала, Заголовок, Истечение, 200);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСсылкуПриглашение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПриглашение(Результат, Заголовок, UnixИстечение);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ЗакрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ЗакрепитьСообщение(Токен, IDКанала, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрепитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОткрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ОткрепитьСообщение(Токен, IDКанала, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрепитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьЧислоУчастников(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];

    Результат = OPI_Telegram.ПолучитьЧислоУчастников(Токен, IDКанала);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧислоУчастников", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьСписокИконокАватаров(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Результат = OPI_Telegram.ПолучитьСписокИконокАватаров(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокИконокАватаров", "Telegram");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СоздатьТемуФорума(ПараметрыФункции)

    Токен  = ПараметрыФункции["Telegram_Token"];
    Чат    = ПараметрыФункции["Telegram_ForumID"];
    Иконка = "5357419403325481346";
    Имя    = "Тестовая тема " + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Telegram.СоздатьТемуФорума(Токен, Чат, Имя, Иконка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТемуФорума", "Telegram");

    Тема = Результат["result"]["message_thread_id"];

    ПараметрыФункции.Вставить("Telegram_TopicID", Тема);
    OPI_Инструменты.ДобавитьПоле("Telegram_TopicID", Тема, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_TopicID", ПараметрыФункции["Telegram_TopicID"]);

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСозданиеТемы(Результат, Имя, Иконка);

    ЧатТема   = Чат + "*" + Тема;
    Текст     = ПараметрыФункции["String"];
    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, ЧатТема, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (форум)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

КонецПроцедуры

Процедура Telegram_ИзменитьТемуФорума(ПараметрыФункции)

    Токен      = ПараметрыФункции["Telegram_Token"];
    Чат        = ПараметрыФункции["Telegram_ForumID"];
    Тема       = ПараметрыФункции["Telegram_TopicID"];
    НовоеИмя   = "Новый тестовый заголовок";
    НовяИконка = "5310132165583840589";

    Результат = OPI_Telegram.ИзменитьТемуФорума(Токен, Чат, Тема, НовоеИмя, НовяИконка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ЗакрытьТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];
    Тема  = ПараметрыФункции["Telegram_TopicID"];

    OPI_Telegram.ОткрытьТемуФорума(Токен, Чат); // SKIP

    Результат = OPI_Telegram.ЗакрытьТемуФорума(Токен, Чат);       // Закрывает главную тему

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьТемуФорума (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ЗакрытьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_ОткрытьТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];
    Тема  = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.ОткрытьТемуФорума(Токен, Чат);       // Открывает главную тему

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьТемуФорума (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ОткрытьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_УдалитьТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];
    Тема  = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.УдалитьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];
    Тема  = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.ОчиститьСписокЗакрепленныхСообщенийТемы(Токен, Чат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ОчиститьСписокЗакрепленныхСообщенийТемы(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СкрытьГлавнуюТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.СкрытьГлавнуюТемуФорума(Токен, Чат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкрытьГлавнуюТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.ПоказатьГлавнуюТемуФорума(Токен, Чат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоказатьГлавнуюТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыФункции)

    Заголовок = "Новое имя главной темы " + Строка(Новый УникальныйИдентификатор);
    Токен     = ПараметрыФункции["Telegram_Token"];
    Чат       = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.ИзменитьИмяГлавнойТемыФорума(Токен, Чат, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьИмяГлавнойТемыФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УдалитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.УдалитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ЗаменитьТекстСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];
    Текст       = "Новый текст сообщения";

    Результат = OPI_Telegram.ЗаменитьТекстСообщения(Токен, IDЧата, IDСообщения, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаменитьТекстСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

    Результат = OPI_Telegram.ЗаменитьТекстСообщения(Токен, IDЧата, IDСообщения, "<b>Полужирный текст</b>", "HTML");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаменитьТекстСообщения (разметка)", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, "Полужирный текст");

КонецПроцедуры

Процедура Telegram_ЗаменитьКлавиатуруСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDСообщения = ПараметрыФункции["Telegram_MessageID"];

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Новая кнопка 1");
    МассивКнопок.Добавить("Новая кнопка 2");
    МассивКнопок.Добавить("Новая кнопка 3");

    Клавиатура = OPI_Telegram.СформироватьКлавиатуруПоМассивуКнопок(МассивКнопок, Истина, Ложь);

    Результат = OPI_Telegram.ЗаменитьКлавиатуруСообщения(Токен, IDЧата, IDСообщения, Клавиатура);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаменитьКлавиатуруСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКлавиатураСообщения(Результат, Клавиатура);

КонецПроцедуры

Процедура Telegram_ЗаменитьОписаниеСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDСообщения = ПараметрыФункции["Telegram_PicMessageID"];

    Описание  = "Новое описание картинки";
    Результат = OPI_Telegram.ЗаменитьОписаниеСообщения(Токен, IDЧата, IDСообщения, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаменитьОписаниеСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Описание);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура VK_СоздатьСсылкуПолученияТокена(ПараметрыФункции)

    Приложение = ПараметрыФункции["VK_AppID"];
    Результат  = OPI_VK.СоздатьСсылкуПолученияТокена(Приложение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСсылкуПолученияТокена", "VK");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка  = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка2, ИВФ);

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(ИВФ);

    Результат = OPI_VK.СоздатьПост(Текст, МассивКартинок, Истина, URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);                         // SKIP
    ИДПоста   = Результат["response"]["post_id"];       // SKIP
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры); // SKIP

    Результат = OPI_VK.СоздатьПост(Текст, Картинка, Ложь, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост (одна картинка)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста   = Результат["response"]["post_id"];
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

    Результат = OPI_VK.СоздатьПост(Текст, ИВФ, Истина, URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост (один путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста = Результат["response"]["post_id"];
    OPI_Инструменты.ДобавитьПоле("VK_PostID", ИДПоста, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ПараметрыФункции["VK_PostID"]);

    УдалитьФайлы(ИВФ);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДПоста   = ПараметрыФункции["VK_PostID"];

    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_СоздатьСоставнойПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Видео    = ПараметрыФункции["Video"];   // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);

    ЗагрузкаКартинки = OPI_VK.ЗагрузитьФотоНаСервер(ИВФ, Параметры)["response"][0];
    ЗагрузкаВидео    = OPI_VK.ЗагрузитьВидеоНаСервер(Видео, "Новое видео", , , Параметры);

    ВладелецКартинки = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["owner_id"]);
    ВладелецВидео    = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["owner_id"]);

    IDКартинки = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["id"]);
    IDВидео    = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["video_id"]);

    МассивВложений = Новый Массив;
    МассивВложений.Добавить("photo" + ВладелецКартинки + "_" + IDКартинки);
    МассивВложений.Добавить("video" + ВладелецВидео + "_" + IDВидео);

    Результат = OPI_VK.СоздатьСоставнойПост(Текст, МассивВложений, Ложь, URL, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСоставнойПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);
    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьОпрос()

    Параметры = ПолучитьПараметрыВК();
    Вопрос    = "Какой ваш любимый цвет?";

    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Красный");
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Зеленый");

    Результат = OPI_VK.СоздатьОпрос(Вопрос, МассивВариантов, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОпрос", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста = Результат["response"]["post_id"];
    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(10);

КонецПроцедуры

Процедура VK_СоздатьАльбом(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Имя       = "Альбом из автотеста";
    Описание  = "Новый альбом из автотеста";

    Результат = OPI_VK.СоздатьАльбом(Имя, Описание, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКАльбом(Результат, Описание);

    ИДАльбома = Результат["response"]["id"];
    ПараметрыФункции.Вставить("VK_AlbumID", ИДАльбома);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AlbumID", ИДАльбома);

КонецПроцедуры

Процедура VK_СохранитьКартинкуВАльбом(ПараметрыФункции)

    Параметры        = ПолучитьПараметрыВК();
    ОписаниеКартинки = "Картинка автотест";
    ИДАльбома        = ПараметрыФункции["VK_AlbumID"];

    Картинка = ПараметрыФункции["Picture"];       // URL, Путь к файлу или Двоичные данные
    ИВФ      = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);

    Картинка = Новый ДвоичныеДанные(ИВФ);

    Результат = OPI_VK.СохранитьКартинкуВАльбом(ИДАльбома, Картинка, ОписаниеКартинки, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьКартинкуВАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, ОписаниеКартинки, ИДАльбома); // SKIP

    ИДКартинки = Результат["response"][0]["id"];                       // SKIP
    Результат  = OPI_VK.УдалитьКартинку(ИДКартинки, Параметры);       // SKIP

    Результат = OPI_VK.СохранитьКартинкуВАльбом(ИДАльбома, ИВФ, ОписаниеКартинки, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьКартинкуВАльбом (путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, ОписаниеКартинки, ИДАльбома); // SKIP

    ИДКартинки = Результат["response"][0]["id"];
    ПараметрыФункции.Вставить("VK_PictureID", ИДКартинки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PictureID", ИДКартинки);

    УдалитьФайлы(ИВФ);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьКартинку(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    ИДКартинки = ПараметрыФункции["VK_PictureID"];

    Результат = OPI_VK.УдалитьКартинку(ИДКартинки, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКартинку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьАльбом(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДАльбома = ПараметрыФункции["VK_AlbumID"];

    Результат = OPI_VK.УдалитьАльбом(ИДАльбома, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьИсторию(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка = ПараметрыФункции["Picture"];       // URL, Путь к файлу или Двоичные данные
    ИВФ      = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);
    Картинка = Новый ДвоичныеДанные(ИВФ);

    Результат = OPI_VK.СоздатьИсторию(Картинка, URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьИсторию", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат); // SKIP

    Результат = OPI_VK.СоздатьИсторию(ИВФ, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьИсторию (путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьОбсуждение(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Название  = "Обсуждаем: какой цвет лучше?";
    Сообщение = "Красный, желтый, синий или какой-то другой?";

    Результат = OPI_VK.СоздатьОбсуждение(Название, Сообщение, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

    ИДОбсуждения = Результат["response"];
    ПараметрыФункции.Вставить("VK_ConvID", ИДОбсуждения);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_ConvID", ИДОбсуждения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗакрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Результат    = OPI_VK.ЗакрытьОбсуждение(ИДОбсуждения, Ложь, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ОткрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Результат    = OPI_VK.ОткрытьОбсуждение(ИДОбсуждения, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_НаписатьВОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Сообщение    = "Мне больше нравится желтый";

    Результат = OPI_VK.НаписатьВОбсуждение(ИДОбсуждения, Сообщение, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьВОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

КонецПроцедуры

Процедура VK_ПоставитьЛайк(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    IDПоста   = ПараметрыФункции["VK_PostID"];

    Результат = OPI_VK.ПоставитьЛайк(IDПоста, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоставитьЛайк", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЛайк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СделатьРепост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    IDПоста   = 2571;
    IDСтены   = -218704372;

    Результат = OPI_VK.СделатьРепост(IDПоста, IDСтены, , , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьРепост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКРепост(Результат);

    ПараметрыФункции.Вставить("Repost", Результат["response"]["post_id"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_НаписатьКомментарий(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Новый комментарий";
    IDПоста   = ПараметрыФункции["VK_PostID"];
    IDСтены   = Параметры["owner_id"];

    Результат = OPI_VK.НаписатьКомментарий(IDПоста, IDСтены, Текст, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьКомментарий", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВККомментарий(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСтатистику(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();
    ДатаНачала    = НачалоДня(ТекущаяДата);
    ДатаОкончания = КонецДня(ДатаНачала);

    Результат = OPI_VK.ПолучитьСтатистику(ДатаНачала, ДатаОкончания, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатистику", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистика(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСтатистикуПостов(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    МассивПостов = Новый Массив;
    МассивПостов.Добавить(214);
    МассивПостов.Добавить(215);

    Результат = OPI_VK.ПолучитьСтатистикуПостов(МассивПостов, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатистикуПостов", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистикаПостов(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьРекламнуюКампанию(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    IDКабинета   = ПараметрыФункции["VK_AdsCabinetID"];
    Наименование = "Новая кампания";

    Результат = OPI_VK.СоздатьРекламнуюКампанию(IDКабинета, Наименование, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРекламнуюКампанию", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДКампании = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsCampaignID", ИДКампании);
    ПараметрыФункции.Вставить("VK_AdsCampaignID", ИДКампании);

КонецПроцедуры

Процедура VK_СоздатьРекламноеОбъявление(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    НомерКампании  = ПараметрыФункции["VK_AdsCampaignID"];
    ДневнойЛимит   = 150;
    НомерКатегории = 126;
    IDПоста        = ПараметрыФункции["VK_PostID"];
    IDКабинета     = ПараметрыФункции["VK_AdsCabinetID"];

    Результат = OPI_VK.СоздатьРекламноеОбъявление(НомерКампании, ДневнойЛимит, НомерКатегории, IDПоста, IDКабинета,
        Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРекламноеОбъявление", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДОбъявления = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsPostID", ИДОбъявления);
    ПараметрыФункции.Вставить("VK_AdsPostID", ИДОбъявления);

КонецПроцедуры

Процедура VK_ПриостановитьРекламноеОбъявление(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    IDКабинета   = ПараметрыФункции["VK_AdsCabinetID"];
    IDОбъявления = ПараметрыФункции["VK_AdsPostID"];

    Результат = OPI_VK.ПриостановитьРекламноеОбъявление(IDКабинета, IDОбъявления, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьРекламноеОбъявление", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура VK_СформироватьКлавиатуру(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Клавиатура = OPI_VK.СформироватьКлавиатуру(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Клавиатура);

КонецПроцедуры

Процедура VK_НаписатьСообщение(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Текст          = "Сообщение из автотеста";
    IDПользователя = ПараметрыФункции["VK_UserID"];
    Communitytoken = ПараметрыФункции["VK_CommunityToken"];

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Клавиатура = OPI_VK.СформироватьКлавиатуру(МассивКнопок);
    Результат  = OPI_VK.НаписатьСообщение(Текст, IDПользователя, Communitytoken, Клавиатура, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьСообщение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокКатегорийТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.ПолучитьСписокКатегорийТоваров(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКатегорийТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура VK_СоздатьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Тестовая подборка";
    Картинка = ПараметрыФункции["Picture"];
    Основная = Истина;
    Скрытая  = Ложь;

    Результат = OPI_VK.СоздатьПодборкуТоваров(Название, Картинка, Основная, Скрытая, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодборкуТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПодборка(Результат);

    OPI_Инструменты.Пауза(5);

    ИДПодборки = Результат["response"]["market_album_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketAlbumID", ИДПодборки);
    ПараметрыФункции.Вставить("VK_MarketAlbumID", ИДПодборки);

КонецПроцедуры

Процедура VK_ИзменитьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Измененная подборка";
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.ИзменитьПодборкуТоваров(Название, Подборка, , , , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодборкуТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьПодборкиПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.ПолучитьПодборкиПоИД(Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодборкиПоИД", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЭлементы(Результат);

КонецПроцедуры

Процедура VK_ДобавитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    ОписаниеТовара = Новый Соответствие;
    ОписаниеТовара.Вставить("Имя"               , "Тестовый товар");
    ОписаниеТовара.Вставить("Описание"          , "Описание товара");
    ОписаниеТовара.Вставить("Категория"         , "20173");
    ОписаниеТовара.Вставить("Цена"              , 1);
    ОписаниеТовара.Вставить("СтараяЦена"        , 15);
    ОписаниеТовара.Вставить("ОсновноеФото"      , Картинка1);
    ОписаниеТовара.Вставить("URL"               , "https://github.com/Bayselonarrend/OpenIntegrations");
    ОписаниеТовара.Вставить("ДополнительныеФото", МассивКартинок);
    ОписаниеТовара.Вставить("ГлавныйВГруппе"    , Истина);
    ОписаниеТовара.Вставить("Ширина"            , 20);
    ОписаниеТовара.Вставить("Высота"            , 30);
    ОписаниеТовара.Вставить("Глубина"           , 40);
    ОписаниеТовара.Вставить("Вес"               , 100);
    ОписаниеТовара.Вставить("SKU"               , "12345");
    ОписаниеТовара.Вставить("ДоступныйОстаток"  , "10");

    Результат = OPI_VK.ДобавитьТовар(ОписаниеТовара, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID", ИДТовара);

КонецПроцедуры

Процедура VK_ИзменитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар = ПараметрыФункции["VK_MarketItemID"];

    ОписаниеТовара = Новый Соответствие;
    ОписаниеТовара.Вставить("Имя", "Тестовый товар измененный");

    Результат = OPI_VK.ИзменитьТовар(Товар, ОписаниеТовара, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ДобавитьТоварВПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар    = ПараметрыФункции["VK_MarketItemID"];
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.ДобавитьТоварВПодборку(Товар, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТоварВПодборку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьТоварИзПодборки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар    = ПараметрыФункции["VK_MarketItemID"];
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.УдалитьТоварИзПодборки(Товар, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТоварИзПодборки", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар = ПараметрыФункции["VK_MarketItemID"];

    Результат = OPI_VK.УдалитьТовар(Товар, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.УдалитьПодборку(Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодборку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Цвет";

    Результат = OPI_VK.СоздатьСвойствоТовара(Название, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСвойствоТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСвойство(Результат);

    OPI_Инструменты.Пауза(5);

    Свойство = Результат["response"]["property_id"];
    Свойство = OPI_Инструменты.ЧислоВСтроку(Свойство);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PropID", Свойство);
    ПараметрыФункции.Вставить("VK_PropID", Свойство);

КонецПроцедуры

Процедура VK_ИзменитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Цвет (изм.)";
    Свойство = ПараметрыФункции["VK_PropID"];

    Результат = OPI_VK.ИзменитьСвойствоТовара(Название, Свойство, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойствоТовара", "VK");

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ДобавитьВариантСвойстваТовара(ПараметрыФункции)

    Счетчик   = 1; // SKIP
    Параметры = ПолучитьПараметрыВК();

    Свойство        = ПараметрыФункции["VK_PropID"];
    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Синий");
    МассивВариантов.Добавить("Красный");

    Для Каждого Значение Из МассивВариантов Цикл

        Результат = OPI_VK.ДобавитьВариантСвойстваТовара(Значение, Свойство, Параметры);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьВариантСвойстваТовара", "VK");

        OPI_ПолучениеДанныхТестов.Проверка_ВКВариантСвойства(Результат);                                // SKIP
        OPI_Инструменты.Пауза(5);                                             // SKIP

        ИДВарианта   = Результат["response"]["variant_id"];                   // SKIP
        ИмяПараметра = "VK_PropVarID" + Строка(Счетчик);                      // SKIP

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПараметра, ИДВарианта); // SKIP
        ПараметрыФункции.Вставить(ИмяПараметра, ИДВарианта);
        Счетчик = Счетчик + 1;                                                // SKIP

    КонецЦикла;

    // END

КонецПроцедуры

Процедура VK_ИзменитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство = ПараметрыФункции["VK_PropID"];
    Вариант  = ПараметрыФункции["VK_PropVarID1"];
    Значение = "Новое имя варианта";

    Результат = OPI_VK.ИзменитьВариантСвойстваТовара(Значение, Свойство, Вариант, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьВариантСвойстваТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_СоздатьТоварСоСвойством(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1        = ПараметрыФункции["Picture"];
    Картинка2        = ПараметрыФункции["Picture2"];
    ВариантСвойства1 = ПараметрыФункции["VK_PropVarID1"];
    ВариантСвойства2 = ПараметрыФункции["VK_PropVarID2"];

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Товар = Новый Соответствие;
    Товар.Вставить("Имя"               , "Тестовый товар (со свойством)");
    Товар.Вставить("Описание"          , "Описание товара");
    Товар.Вставить("Категория"         , "20173");
    Товар.Вставить("Цена"              , 1);
    Товар.Вставить("СтараяЦена"        , 15);
    Товар.Вставить("ОсновноеФото"      , Картинка1);
    Товар.Вставить("URL"               , "https://github.com/Bayselonarrend/OpenIntegrations");
    Товар.Вставить("ДополнительныеФото", МассивКартинок);
    Товар.Вставить("ГлавныйВГруппе"    , Истина);
    Товар.Вставить("НомерГруппы"       , Неопределено);
    Товар.Вставить("Ширина"            , 20);
    Товар.Вставить("Высота"            , 30);
    Товар.Вставить("Глубина"           , 40);
    Товар.Вставить("Вес"               , 100);
    Товар.Вставить("SKU"               , 12345);
    Товар.Вставить("ДоступныйОстаток"  , "10");
    Товар.Вставить("ЗначенияСвойств"   , ВариантСвойства1);

    Результат = OPI_VK.ДобавитьТовар(Товар, , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ТоварСоСвойством1");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID2", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID2", ИДТовара);

    Товар.Вставить("Имя"            , "Тестовый товар (другой)");
    Товар.Вставить("ЗначенияСвойств", ВариантСвойства2);

    Результат = OPI_VK.ДобавитьТовар(Товар, , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ТоварСоСвойством2");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID3", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID3", ИДТовара);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьТоварыПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Результат = OPI_VK.ПолучитьТоварыПоИД(МассивТоваров, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТоварыПоИД", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИнформацияОТоварах(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СгруппироватьТовары(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Результат = OPI_VK.СгруппироватьТовары(МассивТоваров, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СгруппироватьТовары", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКГруппаТоваров(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Вариант = ПараметрыФункции["VK_PropVarID1"];

    Результат = OPI_VK.УдалитьВариантСвойстваТовара(Вариант, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВариантСвойстваТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство = ПараметрыФункции["VK_PropID"];

    Результат = OPI_VK.УдалитьСвойствоТовара(Свойство, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСвойствоТовара");

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокТоваров( , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокПодборок(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокПодборок(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПодборок", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокСвойств(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокСвойств(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСвойств", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокЗаказов(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокЗаказов(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗаказов", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗагрузитьВидеоНаСервер(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Видео        = ПараметрыФункции["Video"]; // URL, Двоичные данные или Путь к файлу
    Наименование = "Новое видео";
    Описание     = "Описание видео";

    Результат = OPI_VK.ЗагрузитьВидеоНаСервер(Видео, Наименование, Описание, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКВидео(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗагрузитьФотоНаСервер(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу
    Вид      = "Пост";

    Результат = OPI_VK.ЗагрузитьФотоНаСервер(Картинка, Параметры, Вид);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, "");

КонецПроцедуры

Процедура VK_СократитьСсылку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.СократитьСсылку("https://github.com/Bayselonarrend/OpenIntegrations", Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СократитьСсылку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокРекламныхКатегорий(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.ПолучитьСписокРекламныхКатегорий(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРекламныхКатегорий", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККатегории(Результат);

КонецПроцедуры

Процедура VK_ПолучитьОписаниеТовара(ПараметрыФункции)

    Результат = OPI_VK.ПолучитьОписаниеТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура YandexDisk_ПолучитьИнформациюОДиске(ПараметрыФункции)

    Токен     = ПараметрыФункции["YandexDisk_Token"];
    Результат = OPI_YandexDisk.ПолучитьИнформациюОДиске(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОДиске", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискДиск(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СоздатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = "/" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_YandexDisk.СоздатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискКаталог(Результат, Путь);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Адрес = ПараметрыФункции["Picture"];
    Путь  = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, Путь, Адрес);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлПоURL", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПроцедура(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_FileByURLPath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_FileByURLPath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Результат = OPI_YandexDisk.ПолучитьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

КонецПроцедуры

Процедура YandexDisk_УдалитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    // END

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура YandexDisk_ЗагрузитьФайл(ПараметрыФункции)

    Путь1 = "/" + Строка(Новый УникальныйИдентификатор) + ".png";
    Путь2 = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Картинка = ПараметрыФункции["Picture"]; // URL

    ИВФ = ПолучитьИмяВременногоФайла("png"); // Путь
    КопироватьФайл(Картинка, ИВФ);

    Результат = OPI_YandexDisk.ЗагрузитьФайл(Токен, Путь1, Картинка, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (URL)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат); // SKIP

    OPI_Инструменты.Пауза(5);  // SKIP

    Результат = OPI_YandexDisk.ЗагрузитьФайл(Токен, Путь2, ИВФ, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь1, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект (URL)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь2, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект (Путь)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СоздатьКопиюОбъекта(ПараметрыФункции)

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Оригинал = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.СоздатьКопиюОбъекта(Токен, Оригинал, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКопиюОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_CopyFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_CopyFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_PathForLink"];

    Результат = OPI_YandexDisk.ПолучитьСсылкуДляСкачивания(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуДляСкачивания", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СкачатьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_PathForLink"];

    Результат = OPI_YandexDisk.СкачатьФайл(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен            = ПараметрыФункции["YandexDisk_Token"];
    Количество       = 2;
    СмещениеОтНачала = 1;
    ОтборПоТипу      = "image";

    Результат = OPI_YandexDisk.ПолучитьСписокФайлов(Токен, Количество, СмещениеОтНачала, ОтборПоТипу);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПереместитьОбъект(ПараметрыФункции)

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Оригинал = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.ПереместитьОбъект(Токен, Оригинал, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_NewFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_NewFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыФункции)

    Токен            = ПараметрыФункции["YandexDisk_Token"];
    Количество       = 2;
    СмещениеОтНачала = 1;

    Результат = OPI_YandexDisk.ПолучитьСписокОпубликованныхОбъектов(Токен, Количество, СмещениеОтНачала);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОпубликованныхОбъектов", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ОпубликоватьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Результат = OPI_YandexDisk.ОпубликоватьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОпубликоватьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Истина);

    URL = Результат["public_url"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PublicURL", URL);
    ПараметрыФункции.Вставить("YandexDisk_PublicURL", URL);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат = OPI_YandexDisk.ПолучитьСсылкуСкачиванияПубличногоОбъекта(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуСкачиванияПубличногоОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

КонецПроцедуры

Процедура YandexDisk_ПолучитьПубличныйОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат = OPI_YandexDisk.ПолучитьПубличныйОбъект(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПубличныйОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Истина);

КонецПроцедуры

Процедура YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат = OPI_YandexDisk.СохранитьПубличныйОбъектНаДиск(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьПубличныйОбъектНаДиск", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Ложь);

КонецПроцедуры

Процедура YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Результат = OPI_YandexDisk.ОтменитьПубликациюОбъекта(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Ложь);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура Viber_УстановитьWebhook(ПараметрыФункции)

    Токен = ПараметрыФункции["Viber_ChannelToken"];
    URL   = "http://api.athenaeum.digital/hs/viber";

    Результат = OPI_Viber.УстановитьWebhook(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьWebhook", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Viber_ПолучитьИнформациюОКанале(ПараметрыФункции)

    Токен     = ПараметрыФункции["Viber_ChannelToken"];
    Результат = OPI_Viber.ПолучитьИнформациюОКанале(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКанале", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Результат = OPI_Viber.ПолучитьДанныеПользователя(Токен, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеПользователя", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ПолучитьОнлайнПользователей(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Результат = OPI_Viber.ПолучитьОнлайнПользователей(Токен, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОнлайнПользователей", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберОнлайн(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Результат = OPI_Viber.СформироватьКлавиатуруИзМассиваКнопок(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКлавиатуруИзМассиваКнопок", "Viber");

КонецПроцедуры

Процедура Viber_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Текст = "Тестовое сообщение";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Клавиатура = OPI_Viber.СформироватьКлавиатуруИзМассиваКнопок(МассивКнопок);

    Результат = OPI_Viber.ОтправитьТекстовоеСообщение(Токен, Текст, IDПользователя, ОтправкаВКанал, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                                      // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьТекстовоеСообщение(Токен, Текст, IDПользователя, ОтправкаВКанал, Клавиатура);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьКартинку(ПараметрыФункции)

    Описание = "Тестовое сообщение";
    URL      = ПараметрыФункции["Picture"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат = OPI_Viber.ОтправитьКартинку(Токен, URL, IDПользователя, ОтправкаВКанал, Описание);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                            // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьКартинку(Токен, URL, IDПользователя, ОтправкаВКанал, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьФайл(ПараметрыФункции)

    Расширение = "docx";
    URL        = ПараметрыФункции["Document"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат = OPI_Viber.ОтправитьФайл(Токен, URL, IDПользователя, ОтправкаВКанал, Расширение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                        // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьФайл(Токен, URL, IDПользователя, ОтправкаВКанал, Расширение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьКонтакт(ПараметрыФункции)

    Имя     = "Петр Петров";
    Телефон = "+123456789";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат = OPI_Viber.ОтправитьКонтакт(Токен, Имя, Телефон, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                           // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьКонтакт(Токен, Имя, Телефон, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьЛокацию(ПараметрыФункции)

    Широта  = "48.87373649724122";
    Долгота = "2.2954639195323967";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат = OPI_Viber.ОтправитьЛокацию(Токен, Широта, Долгота, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                           // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьЛокацию(Токен, Широта, Долгота, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьСсылку(ПараметрыФункции)

    URL = "https://github.com/Bayselonarrend/OpenIntegrations";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат = OPI_Viber.ОтправитьСсылку(Токен, URL, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСсылку", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                          // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат = OPI_Viber.ОтправитьСсылку(Токен, URL, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСсылку (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыФункции)

    ClientID  = ПараметрыФункции["Google_ClientID"];
    Результат = OPI_GoogleWorkspace.СформироватьСсылкуПолученияКода(ClientID);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Link", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Google_ClientID"];
    ClientSecret = ПараметрыФункции["Google_ClientSecret"];
    Code         = ПараметрыФункции["Google_Code"];

    Результат = OPI_GoogleWorkspace.ПолучитьТокенПоКоду(ClientID, ClientSecret, Code);

    // END

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleWorkspace_ОбновитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Google_ClientID"];
    ClientSecret = ПараметрыФункции["Google_ClientSecret"];
    RefreshToken = ПараметрыФункции["Google_Refresh"];

    Результат = OPI_GoogleWorkspace.ОбновитьТокен(ClientID, ClientSecret, RefreshToken);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_ГуглТокен(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleWorkspace_ПолучитьТокенServiceАккаунта(ПараметрыФункции)

    Данные = ПараметрыФункции["Google_ServiceData"]; // URL, двоичные данные, файл или коллекция

    Токен  = ПараметрыФункции["Access_Token"];  // SKIP
    Данные = OPI_ЗапросыHTTP                    // SKIP
        .НовыйЗапрос()                          // SKIP
        .Инициализировать(Данные)               // SKIP
        .ДобавитьBearerАвторизацию(Токен)       // SKIP
        .ОбработатьЗапрос("GET")                // SKIP
        .ВернутьОтветКакДвоичныеДанные();       // SKIP

    ОбластиДействия = Новый Массив;
    ОбластиДействия.Добавить("https://www.googleapis.com/auth/calendar");
    ОбластиДействия.Добавить("https://www.googleapis.com/auth/drive");
    ОбластиДействия.Добавить("https://www.googleapis.com/auth/spreadsheets");

    Результат = OPI_GoogleWorkspace.ПолучитьТокенServiceАккаунта(Данные, ОбластиДействия);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_ГуглТокен(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_ServiceToken", Результат["access_token"]);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Результат = OPI_GoogleCalendar.ПолучитьСписокКалендарей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКалендарей", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleCalendar_СоздатьКалендарь(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовый календарь";

    Результат = OPI_GoogleCalendar.СоздатьКалендарь(Токен, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКалендарь", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКалендарь(Результат, Наименование);

    Календарь = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_NewCalendarID", Календарь);
    OPI_Инструменты.ДобавитьПоле("Google_NewCalendarID", Календарь, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];
    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    Результат = OPI_GoogleCalendar.ИзменитьМетаданныеКалендаря(Токен, Календарь, Наименование, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьМетаданныеКалендаря", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьМетаданныеКалендаря(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьМетаданныеКалендаря", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ДобавитьКалендарьВСписок(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКалендарьВСписок", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыФункции)

    Токен              = ПараметрыФункции["Google_Token"];
    Календарь          = ПараметрыФункции["Google_NewCalendarID"];
    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";
    Скрытый            = Ложь;

    Результат = OPI_GoogleCalendar.ИзменитьКалендарьСписка(Токен, Календарь, ОсновнойЦвет, ДополнительныйЦвет, Скрытый);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКалендарьСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьКалендарьСписка(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКалендарьСписка", "GoogleCalendar");

    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";

    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];

    Результат = OPI_GoogleCalendar.ОчиститьОсновнойКалендарь(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьОсновнойКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.УдалитьКалендарьИзСписка(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКалендарьИзСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьКалендарь(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.УдалитьКалендарь(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_СоздатьСобытие(ПараметрыФункции)

    ТекущаяДата  = OPI_Инструменты.ПолучитьТекущуюДату();
    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];
    Наименование = "Новое событие";
    Описание     = "Описание тестового события";
    Час          = 3600;

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Вложения  = Новый Соответствие;

    Вложения.Вставить("Картинка1", Картинка1);
    Вложения.Вставить("Картинка2", Картинка2);

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание"               , Описание);
    ОписаниеСобытия.Вставить("Заголовок"              , Наименование);
    ОписаниеСобытия.Вставить("МестоПроведения"        , "В офисе");
    ОписаниеСобытия.Вставить("ДатаНачала"             , ТекущаяДата);
    ОписаниеСобытия.Вставить("ДатаОкончания"          , ОписаниеСобытия["ДатаНачала"] + Час);
    ОписаниеСобытия.Вставить("МассивURLФайловВложений", Вложения);
    ОписаниеСобытия.Вставить("ОтправлятьУведомления"  , Истина);

    Результат = OPI_GoogleCalendar.СоздатьСобытие(Токен, Календарь, ОписаниеСобытия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСобытие", "GoogleCalendar");

    Событие = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_EventID", Событие);
    OPI_Инструменты.ДобавитьПоле("Google_EventID", Событие, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];
    Описание  = "Новое описание события";

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание", Описание);

    Результат = OPI_GoogleCalendar.ИзменитьСобытие(Токен, Календарь, ОписаниеСобытия, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Результат = OPI_GoogleCalendar.ПолучитьСобытие(Токен, Календарь, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПереместитьСобытие(ПараметрыФункции)

    Токен   = ПараметрыФункции["Google_Token"];
    Событие = ПараметрыФункции["Google_EventID"];

    КалендарьИсточник = ПараметрыФункции["Google_NewCalendarID"];
    КалендарьПриемник = ПараметрыФункции["Google_CalendarID"];

    Результат = OPI_GoogleCalendar.ПереместитьСобытие(Токен, КалендарьИсточник, КалендарьПриемник, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

    OPI_GoogleCalendar.ПереместитьСобытие(Токен, КалендарьПриемник, КалендарьИсточник, Событие);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Результат = OPI_GoogleCalendar.УдалитьСобытие(Токен, Календарь, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСобытие", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьСписокСобытий(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьСписокСобытий(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСобытий", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыФункции)

    Результат = OPI_GoogleCalendar.ПолучитьОписаниеСобытия();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеСобытия", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура GoogleDrive_ПолучитьСписокКаталогов(ПараметрыФункции)

    Имя   = "Тестовая папка";
    Токен = ПараметрыФункции["Google_Token"];

    Результат = OPI_GoogleDrive.ПолучитьСписокКаталогов(Токен, Имя, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКаталогов", "GoogleDrive");

    Результат = Результат[0];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталоги(Результат);

    Идентификатор = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Catalog", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Catalog", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_Catalog"];

    Результат = OPI_GoogleDrive.ПолучитьИнформациюОбОбъекте(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбОбъекте", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ЗагрузитьФайл(ПараметрыФункции)

    Токен    = ПараметрыФункции["Google_Token"];
    Картинка = ПараметрыФункции["Picture"];
    Каталог  = ПараметрыФункции["GD_Catalog"];

    Описание = OPI_GoogleDrive.ПолучитьОписаниеФайла();
    Описание.Вставить("Родитель", Каталог);

    Результат = OPI_GoogleDrive.ЗагрузитьФайл(Токен, Картинка, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_File", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_File", Идентификатор, "Строка", ПараметрыФункции);

    Если Не OPI_Инструменты.ЭтоOneScript() И ПараметрыФункции.Свойство("Big")  Тогда

        БольшойФайл = ПараметрыФункции["Big"];
        Описание.Вставить("Имя", "big.rar");

        Результат = OPI_GoogleDrive.ЗагрузитьФайл(Токен, БольшойФайл, Описание);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (большой)", "GoogleDrive");
        OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

        Идентификатор = Результат["id"];

        МассивУдаляемых = ПараметрыФункции["МассивУдаляемых"];
        МассивУдаляемых.Добавить(Идентификатор);
        ПараметрыФункции.Вставить("МассивУдаляемых", МассивУдаляемых);

    КонецЕсли;

КонецПроцедуры

Процедура GoogleDrive_СкопироватьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    НовоеИмя      = "Скопированный файл.jpeg";
    НовыйРодитель = "root";

    Результат = OPI_GoogleDrive.СкопироватьОбъект(Токен, Идентификатор, НовоеИмя, НовыйРодитель);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьОбъект", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор = Результат["id"];

    МассивУдаляемых = ПараметрыФункции["МассивУдаляемых"];
    МассивУдаляемых.Добавить(Идентификатор);
    ПараметрыФункции.Вставить("МассивУдаляемых", МассивУдаляемых);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_СкачатьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.СкачатьФайл(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "GoogleDrive");

    Размер      = OPI_ЗапросыHTTP.Get(ПараметрыФункции["Picture"]).Размер();
    ЛишниеБайты = 2;

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, Размер + ЛишниеБайты);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ОбновитьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    НовоеИмя      = "Обновленный файл.jpg";
    Идентификатор = ПараметрыФункции["GD_File"];
    Файл          = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    Результат = OPI_GoogleDrive.ОбновитьФайл(Токен, Идентификатор, Файл, НовоеИмя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьФайл", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен       = ПараметрыФункции["Google_Token"];
    Каталог     = "root";
    ИмяСодержит = "data";

    Результат = OPI_GoogleDrive.ПолучитьСписокФайлов(Токен, ИмяСодержит, Каталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GoogleDrive_УдалитьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.УдалитьОбъект(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Для Каждого Удаляемый Из ПараметрыФункции["МассивУдаляемых"] Цикл

        Результат = OPI_GoogleDrive.УдалитьОбъект(Токен, Удаляемый);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект");

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);
        OPI_Инструменты.Пауза(2);

    КонецЦикла;

КонецПроцедуры

Процедура GoogleDrive_ПолучитьОписаниеФайла(ПараметрыФункции)

    Результат = OPI_GoogleDrive.ПолучитьОписаниеФайла();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФайла", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура GoogleDrive_СоздатьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    Комментарий   = "Текст комментария";

    Результат = OPI_GoogleDrive.СоздатьКомментарий(Токен, Идентификатор, Комментарий);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, Комментарий);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Comment", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Comment", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Результат = OPI_GoogleDrive.ПолучитьКомментарий(Токен, Идентификатор, ИДКомментария);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, "Текст комментария");

КонецПроцедуры

Процедура GoogleDrive_ПолучитьСписокКомментариев(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.ПолучитьСписокКомментариев(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариев", "GoogleDrive");

    Комментарии       = Результат["comments"];
    ОбъектКомментарий = Комментарии[Комментарии.ВГраница()];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(ОбъектКомментарий, "Текст комментария");

КонецПроцедуры

Процедура GoogleDrive_УдалитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Результат = OPI_GoogleDrive.УдалитьКомментарий(Токен, Идентификатор, ИДКомментария);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleDrive_СоздатьПапку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Google_Token"];
    Каталог = ПараметрыФункции["GD_Catalog"];
    Имя     = "Тестовая папка";

    Результат = OPI_GoogleDrive.СоздатьПапку(Токен, Имя, Каталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

    Результат = OPI_GoogleDrive.СоздатьПапку(Токен, Имя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку (корень)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура GoogleSheets_СоздатьКнигу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    Результат = OPI_GoogleSheets.СоздатьКнигу(Токен, Наименование, МассивЛистов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

    Книга = Результат["spreadsheetId"];
    Лист  = Результат["sheets"][0]["properties"]["sheetId"];
    Лист  = OPI_Инструменты.ЧислоВСтроку(Лист);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet", Книга);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Sheet"      , Лист);

    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet", Книга, "Строка", ПараметрыФункции);
    OPI_Инструменты.ДобавитьПоле("GS_Sheet"      , Лист , "Строка", ПараметрыФункции);

    Наименование = "Тестовая таблица (доп.)";
    Результат    = OPI_GoogleSheets.СоздатьКнигу(Токен, Наименование, МассивЛистов);

    Книга = Результат["spreadsheetId"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet2", Книга);
    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet2", Книга, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GoogleSheets_ПолучитьКнигу(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GS_Spreadsheet"];

    Результат = OPI_GoogleSheets.ПолучитьКнигу(Токен, Идентификатор);

    // END

    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

КонецПроцедуры

Процедура GoogleSheets_КопироватьЛист(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Откуда = ПараметрыФункции["GS_Spreadsheet"];
    Куда   = ПараметрыФункции["GS_Spreadsheet2"];
    Лист   = ПараметрыФункции["GS_Sheet"];

    Результат = OPI_GoogleSheets.КопироватьЛист(Токен, Откуда, Куда, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(Результат);

КонецПроцедуры

Процедура GoogleSheets_ДобавитьЛист(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовый лист";

    Результат = OPI_GoogleSheets.ДобавитьЛист(Токен, Книга, Наименование);

    // END

    НовыйЛист = Результат["replies"][0]["addSheet"]["properties"];

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(НовыйЛист);

КонецПроцедуры

Процедура GoogleSheets_УдалитьЛист(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = ПараметрыФункции["GS_Sheet"];

    Результат = OPI_GoogleSheets.УдалитьЛист(Токен, Книга, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовая таблица (изм.)";

    Результат = OPI_GoogleSheets.ИзменитьНаименованиеКниги(Токен, Книга, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНаименованиеКниги", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ПолучитьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];

    Результат = OPI_GoogleSheets.ПолучитьКнигу(Токен, Книга);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТаблицу", "GoogleSheets");

    Наименование = "Тестовая таблица (изм.)";
    OPI_ПолучениеДанныхТестов.Проверка_ГуглИмяТаблицы(Результат, Наименование);

КонецПроцедуры

Процедура GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    СоответствиеЗначений = Новый Соответствие;
    СоответствиеЗначений.Вставить("A1", "Это A1");
    СоответствиеЗначений.Вставить("A2", "Это A2");
    СоответствиеЗначений.Вставить("B2", "Это B2");
    СоответствиеЗначений.Вставить("B3", "Это B3");
    СоответствиеЗначений.Вставить("A3", "Это A3");
    СоответствиеЗначений.Вставить("A4", "Это A4");
    СоответствиеЗначений.Вставить("B1", "Это B1");
    СоответствиеЗначений.Вставить("B4", "Это B4");

    Результат = OPI_GoogleSheets.УстановитьЗначенияЯчеек(Токен, Книга, СоответствиеЗначений, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбновлениеЯчеек(Результат, СоответствиеЗначений.Количество());

КонецПроцедуры

Процедура GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Результат = OPI_GoogleSheets.ПолучитьЗначенияЯчеек(Токен, Книга, МассивЯчеек, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЗначенияЯчеек(Результат, МассивЯчеек.Количество());

    Результат = OPI_GoogleSheets.ПолучитьЗначенияЯчеек(Токен, Книга, , Лист);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияЯчеек (все)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ОчиститьЯчейки(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Результат = OPI_GoogleSheets.ОчиститьЯчейки(Токен, Книга, МассивЯчеек, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьЯчейки", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОчисткаЯчеек(Результат, МассивЯчеек.Количество());

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура Slack_ПолучитьИнформациюОБоте(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьИнформациюОБоте(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОБоте", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакБот(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокПользователей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьСписокПользователей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователи(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокРабочихОбластей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьСписокРабочихОбластей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРабочихОбластей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОбласти(Результат);

КонецПроцедуры

Процедура Slack_ОтправитьСообщение(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    // Текстовое

    Текст     = "Тестовое сообщение 1";
    Результат = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение", "Slack");        // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);              // SKIP

    Отметка = Результат["ts"];                                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_MessageTS", Отметка);                 // SKIP
    OPI_Инструменты.ДобавитьПоле("Slack_MessageTS", Отметка, "Строка", ПараметрыФункции);   // SKIP

    // С вложениями (в примере: блок с картинкой)

    Текст        = "Сообщение с картинкой";
    Картинка     = ПараметрыФункции["Picture"];
    МассивБлоков = Новый Массив;

    Блок = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");
    МассивБлоков.Добавить(Блок);

    Результат = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст, , МассивБлоков);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (картинка)");      // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);              // SKIP

    // Отложенное

    Текст = "Отложенное сообщение";
    Час   = 3600;
    Сутки = 24;

    ДатаОтправки = OPI_Инструменты.ПолучитьТекущуюДату() + (Сутки * Час);
    Результат    = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст, ДатаОтправки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенноеСообщение(Результат, Канал);

    Отметка   = Результат["scheduled_message_id"];
    Результат = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_СформироватьБлокКартинку(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];

    Результат = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьБлокКартинку", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_ИзменитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Текст = "Тестовое сообщение 2";

    Результат = OPI_Slack.ИзменитьСообщение(Токен, Канал, Отметка, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);

КонецПроцедуры

Процедура Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.ПолучитьСписокОтветовНаСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОтветовНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщения(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСсылкуНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.ПолучитьСсылкуНаСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСсылкаСообщения(Результат, Канал);

КонецПроцедуры

Процедура Slack_УдалитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ОтправитьЭфемерноеСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_Channel"];
    Пользователь = ПараметрыФункции["Slack_User"];
    Картинка     = ПараметрыФункции["Picture"];
    Текст        = "Эфимерное сообщение";

    Блок      = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");
    Результат = OPI_Slack.ОтправитьЭфемерноеСообщение(Токен, Канал, Текст, Пользователь, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЭфемерноеСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакЭфемерное(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокОтложенныхСообщений(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОтложенныхСообщений", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенные(Результат);

КонецПроцедуры

Процедура Slack_СоздатьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Имя   = "testconv" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Slack.СоздатьКанал(Токен, Имя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Имя);

    Канал = Результат["channel"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannel", Канал);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannel", Канал, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannelName", Имя);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannelName", Имя, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Slack_УстановитьТемуКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Тема  = "Тестовая тема";

    Результат = OPI_Slack.УстановитьТемуКанала(Токен, Канал, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТемуКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакТемаКанала(Результат, Тема);

КонецПроцедуры

Процедура Slack_УстановитьЦельКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Цель  = "Тестовая цель";

    Результат = OPI_Slack.УстановитьЦельКанала(Токен, Канал, Цель);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЦельКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ПригласитьПользователейВКанал(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ПригласитьПользователейВКанал(Токен, Канал, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПригласитьПользователейВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ВыгнатьПользователяИзКанала(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ВыгнатьПользователяИзКанала(Токен, Канал, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыгнатьПользователяИзКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьИсториюКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьИсториюКанала(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакИсторияКанала(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокПользователейКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьСписокПользователейКанала(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователиКанала(Результат);

КонецПроцедуры

Процедура Slack_ПокинутьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПокинутьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ВступитьВКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ВступитьВКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВступитьВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ПереименоватьКанал(ПараметрыФункции)

    Токен    = ПараметрыФункции["Slack_Token"];
    Канал    = ПараметрыФункции["Slack_NewChannel"];
    Название = "testconv" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Slack.ПереименоватьКанал(Токен, Канал, Название);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Название);

КонецПроцедуры

Процедура Slack_АрхивироватьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.АрхивироватьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокКаналов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Результат = OPI_Slack.ПолучитьСписокКаналов(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКаналов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокКаналов(Результат);

КонецПроцедуры

Процедура Slack_ОткрытьДиалог(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ОткрытьДиалог(Токен, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакДиалог(Результат);

    Диалог = Результат["channel"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_Dialog", Диалог);
    OPI_Инструменты.ДобавитьПоле("Slack_Dialog", Диалог, "Строка", ПараметрыФункции);

    Результат = OPI_Slack.ОтправитьСообщение(Токен, Диалог, "Тест диалог");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (диалог)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ЗакрытьДиалог(ПараметрыФункции)

    Токен  = ПараметрыФункции["Slack_Token"];
    Диалог = ПараметрыФункции["Slack_Dialog"];

    Результат = OPI_Slack.ЗакрытьДиалог(Токен, Диалог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокФайлов(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Результат = OPI_Slack.ПолучитьСписокФайлов(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура Slack_ЗагрузитьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];
    Файл  = ПараметрыФункции["Document"]; // URL, Двоичные данные или Путь к файлу

    ИмяФайла  = "megadoc.docx";
    Заголовок = "Новый файл";

    Результат = OPI_Slack.ЗагрузитьФайл(Токен, Файл, ИмяФайла, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл"       , "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьФайлПубличным", "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьФайлПриватным", "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);                           // SKIP

    ЗагруженныйФайл = Результат["files"][0]["id"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_FileID", ЗагруженныйФайл);                // SKIP
    OPI_Инструменты.ДобавитьПоле("Slack_FileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);  // SKIP

    Результат = OPI_Slack.ЗагрузитьФайл(Токен, Файл, ИмяФайла, Заголовок, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (в канал)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);
    OPI_Slack.УдалитьФайл(Токен, Результат["files"][0]["id"]);

КонецПроцедуры

Процедура Slack_СделатьФайлПубличным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.СделатьФайлПубличным(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_СделатьФайлПриватным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.СделатьФайлПриватным(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьДанныеФайла(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.ПолучитьДанныеФайла(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеФайла", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, "megadoc.docx");

КонецПроцедуры

Процедура Slack_УдалитьФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.УдалитьФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокВнешнихФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокВнешнихФайлов(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВнешнихФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Результат = OPI_Slack.ПолучитьСписокВнешнихФайлов(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВнешнихФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура Slack_ДобавитьВнешнийФайл(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Заголовок = "Новый файл";
    Файл      = ПараметрыФункции["Document"];

    Результат = OPI_Slack.ДобавитьВнешнийФайл(Токен, Файл, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, Заголовок);

    ЗагруженныйФайл = Результат["file"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_ExtFileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_ExtFileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Slack_ПолучитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.ПолучитьВнешнийФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, "Новый файл");

КонецПроцедуры

Процедура Slack_ОтправитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    Канал              = ПараметрыФункции["Slack_Channel"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.ОтправитьВнешнийФайл(Токен, ИдентификаторФайла, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_УдалитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.УдалитьВнешнийФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура Airtable_СоздатьБазу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    Область      = ПараметрыФункции["Airtable_Workspace"];
    Наименование = "Тестовая база";

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));

    ИмяТаблицы = "Тестовая таблица";

    СоответствиеТаблиц = Новый Соответствие;
    СоответствиеТаблиц.Вставить(ИмяТаблицы, МассивПолей);

    Результат = OPI_Airtable.СоздатьБазу(Токен, Область, Наименование, СоответствиеТаблиц);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТБазаСТаблицей(Результат, ИмяТаблицы);

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Base", База);
    OPI_Инструменты.ДобавитьПоле("Airtable_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ПолучитьТаблицыБазы(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    Результат = OPI_Airtable.ПолучитьТаблицыБазы(Токен, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТаблицыБазы", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокТаблиц(Результат);

КонецПроцедуры

Процедура Airtable_ПолучитьСписокБаз(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];

    Результат = OPI_Airtable.ПолучитьСписокБаз(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокБаз", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокБаз(Результат);

КонецПроцедуры

Процедура Airtable_ПолучитьПолеНомера(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеНомера("Номер");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеНомера", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеСтроковое(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеСтроковое("Строковое");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеСтроковое", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеВложения(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеВложения("Вложение");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеВложения", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеФлажка(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеФлажка("Флажок");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеФлажка", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеДаты(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеДаты("Дата");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеДаты", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеТелефона(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеТелефона("Телефон");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеТелефона", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеПочты(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеПочты("Почта");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеПочты", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеСсылки(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеСсылки("Ссылка");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеСсылки", "Airtable");

КонецПроцедуры

Процедура Airtable_СоздатьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеВложения("Вложение"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеФлажка("Флажок"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеДаты("Дата"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеТелефона("Телефон"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеПочты("Почта"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСсылки("Ссылка"));

    Наименование = "Тестовая таблица 2";
    Описание     = "Новая таблица";

    Результат = OPI_Airtable.СоздатьТаблицу(Токен, База, Наименование, МассивПолей, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

    Таблица = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Table", Таблица);
    OPI_Инструменты.ДобавитьПоле("Airtable_Table", Таблица, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьТаблицу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    База         = ПараметрыФункции["Airtable_Base"];
    Таблица      = ПараметрыФункции["Airtable_Table"];
    Наименование = "Тестовая таблица 2 (изм.)";
    Описание     = "Новая таблица (изм.)";

    Результат = OPI_Airtable.ИзменитьТаблицу(Токен, База, Таблица, Наименование, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

КонецПроцедуры

Процедура Airtable_СоздатьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Имя     = Строка(Новый УникальныйИдентификатор);

    Поле      = OPI_Airtable.ПолучитьПолеНомера(Имя);
    Результат = OPI_Airtable.СоздатьПоле(Токен, База, Таблица, Поле);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТПоле(Результат, Имя);

    Поле = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Field", Поле);
    OPI_Инструменты.ДобавитьПоле("Airtable_Field", Поле, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Поле    = ПараметрыФункции["Airtable_Field"];

    Имя      = Строка(Новый УникальныйИдентификатор) + "(изм.)";
    Описание = "Новое описание";

    Результат = OPI_Airtable.ИзменитьПоле(Токен, База, Таблица, Поле, Имя, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Имя, Описание);

КонецПроцедуры

Процедура Airtable_СоздатьЗаписи(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];

    Номер     = 10;
    Строковое = "Привет";

    ОписаниеСтроки1 = Новый Структура("Номер,Строковое", Номер, Строковое);
    ОписаниеСтроки2 = Новый Структура("Номер,Строковое", Номер, Строковое);

    МассивОписаний = Новый Массив;
    МассивОписаний.Добавить(ОписаниеСтроки1);
    МассивОписаний.Добавить(ОписаниеСтроки2);

    Результат = OPI_Airtable.СоздатьЗаписи(Токен, База, Таблица, МассивОписаний);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

    МассивУдаляемых = Новый Массив;

    Для Каждого Запись Из Результат["records"] Цикл

        ТекущаяЗапись = Запись["id"];
        МассивУдаляемых.Добавить(ТекущаяЗапись);

    КонецЦикла;

    OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, МассивУдаляемых);

    // Одиночное

    Результат = OPI_Airtable.СоздатьЗаписи(Токен, База, Таблица, ОписаниеСтроки1);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаписи (одна)");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписьНомерСтрока(Результат, Номер, Строковое);

    Запись = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Record", Запись);
    OPI_Инструменты.ДобавитьПоле("Airtable_Record", Запись, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ПолучитьЗапись(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.ПолучитьЗапись(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗапись", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗапись(Результат, Запись);

КонецПроцедуры

Процедура Airtable_СоздатьКомментарий(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];
    Текст   = "Тестовый комментарий";

    Результат = OPI_Airtable.СоздатьКомментарий(Токен, База, Таблица, Запись, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

    Комментарий = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Comment", Комментарий);
    OPI_Инструменты.ДобавитьПоле("Airtable_Comment", Комментарий, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Текст     = "Тестовый комментарий (изм.)";
    Результат = OPI_Airtable.ИзменитьКомментарий(Токен, База, Таблица, Запись, Комментарий, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

КонецПроцедуры

Процедура Airtable_ПолучитьКомментарии(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.ПолучитьКомментарии(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомментарии", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТКомментарии(Результат);

КонецПроцедуры

Процедура Airtable_УдалитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Результат = OPI_Airtable.УдалитьКомментарий(Токен, База, Таблица, Запись, Комментарий);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТУдалениеКомментария(Результат, Комментарий);

КонецПроцедуры

Процедура Airtable_ПолучитьСписокЗаписей(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];

    Результат = OPI_Airtable.ПолучитьСписокЗаписей(Токен, База, Таблица);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗаписей", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

Процедура Airtable_УдалитьЗаписи(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура Twitter_ПолучитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Код       = "123456";

    Результат = OPI_Twitter.ПолучитьТокен(Код, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Twitter_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Результат = OPI_Twitter.ПолучитьСсылкуАвторизации(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизации", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_URL", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_ОбновитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Результат = OPI_Twitter.ОбновитьТокен(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТокен(Результат);

    Рефреш = Результат["refresh_token"];
    Токен  = Результат["access_token"];

    Если ЗначениеЗаполнено(Рефреш) И Не Рефреш = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Refresh", Рефреш);
    КонецЕсли;

    Если ЗначениеЗаполнено(Токен) И Не Токен = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Token", Токен);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_СоздатьТекстовыйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Twitter.СоздатьТекстовыйТвит(Текст, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТекстовыйТвит", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_СоздатьТвитКартинки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка  = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(Картинка2);

    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, МассивКартинок, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                            // SKIP
    OPI_Инструменты.Пауза(15);                                                          // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, Картинка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Картинка = OPI_ЗапросыHTTP.Get(Картинка);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, Картинка, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитВидео(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Видео  = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу
    Видео2 = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу

    МассивВидео = Новый Массив;
    МассивВидео.Добавить(Видео);
    МассивВидео.Добавить(Видео2);

    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, МассивВидео, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                         // SKIP
    OPI_Инструменты.Пауза(15);                                                       // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, Видео, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Видео = OPI_ЗапросыHTTP.Get(Видео);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, Видео, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитГифки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Гифка  = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу
    Гифка2 = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу

    МассивГифок = Новый Массив;
    МассивГифок.Добавить(Гифка);
    МассивГифок.Добавить(Гифка2);

    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, МассивГифок, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                         // SKIP
    OPI_Инструменты.Пауза(15);                                                       // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, Гифка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Гифка = OPI_ЗапросыHTTP.Get(Гифка);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, Гифка, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитОпрос(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    МассивОтветов = Новый Массив;
    МассивОтветов.Добавить("Вариант 1");
    МассивОтветов.Добавить("Вариант 2");

    Результат = OPI_Twitter.СоздатьТвитОпрос(Текст, МассивОтветов, 60, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитОпрос", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьПроизвольныйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    МассивМедиа = OPI_Twitter.ЗагрузитьМассивВложений(МассивКартинок, "tweet_image", Параметры);
    Результат   = OPI_Twitter.СоздатьПроизвольныйТвит(Текст, МассивМедиа, , , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПроизвольныйТвит", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_ЗагрузитьМассивВложений(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Результат = OPI_Twitter.ЗагрузитьМассивВложений(МассивКартинок, "tweet_image", Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьМассивВложений", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерМассив(Результат);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура Notion_СоздатьСтраницу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Результат = OPI_Notion.СоздатьСтраницу(Токен, Родитель, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

    Страница = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Page", Страница);
    OPI_Инструменты.ДобавитьПоле("Notion_Page", Страница, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_СоздатьБазуДанных(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"          , "title");
    Свойства.Вставить("Описание"     , "rich_text");
    Свойства.Вставить("Номер"        , "number");
    Свойства.Вставить("Дата создания", "date");
    Свойства.Вставить("Картинка"     , "files");
    Свойства.Вставить("Активен"      , "checkbox");
    Свойства.Вставить("Сайт"         , "url");
    Свойства.Вставить("Почта"        , "email");
    Свойства.Вставить("Телефон"      , "phone_number");
    Свойства.Вставить("Пользователь" , "people");

    ВыборЗначения = Новый Соответствие;
    ВыборЗначения.Вставить("Новый"    , "green");
    ВыборЗначения.Вставить("В работе" , "yellow");
    ВыборЗначения.Вставить("Удаленный", "red");

    Свойства.Вставить("Статус", ВыборЗначения);

    Результат = OPI_Notion.СоздатьБазуДанных(Токен, Родитель, Заголовок, Свойства);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Base", База);
    OPI_Инструменты.ДобавитьПоле("Notion_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_ИзменитьСвойстваБазы(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    База  = ПараметрыФункции["Notion_Base"];

    Заголовок = "Тестовый заголовок";
    Описание  = "Тестовое описание";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Почта", "rich_text"); // Тип поля "Почта" будет изменен с email на текст
    Свойства.Вставить("Сайт");               // Поле "Сайт" будет удалено

    Результат = OPI_Notion.ИзменитьСвойстваБазы(Токен, База, Свойства, Заголовок, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойстваБазы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура Notion_ПолучитьСтраницу(ПараметрыФункции)

    Токен    = ПараметрыФункции["Notion_Token"];
    Страница = ПараметрыФункции["Notion_Page"];

    Результат = OPI_Notion.ПолучитьСтраницу(Токен, Страница);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура Notion_ПолучитьБазуДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    База  = ПараметрыФункции["Notion_Base"];

    Результат = OPI_Notion.ПолучитьБазуДанных(Токен, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура Notion_СоздатьСтраницуВБазу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    База      = ПараметрыФункции["Notion_Base"];
    Картинка_ = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу

    Картинка = Новый Соответствие;
    Картинка.Вставить("Лого", Картинка_);

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"          , "ООО Вектор");
    Свойства.Вставить("Описание"     , "Наш первый клиент");
    Свойства.Вставить("Номер"        , 1);
    Свойства.Вставить("Дата создания", OPI_Инструменты.ПолучитьТекущуюДату());
    Свойства.Вставить("Картинка"     , Картинка);
    Свойства.Вставить("Активен"      , Истина);
    Свойства.Вставить("Сайт"         , "https://vector.ru");
    Свойства.Вставить("Почта"        , "mail@vector.ru");
    Свойства.Вставить("Телефон"      , "88005553535");
    Свойства.Вставить("Статус"       , "Новый");

    Результат = OPI_Notion.СоздатьСтраницуВБазу(Токен, База, Свойства);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСтраницуВБазу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнСтраницаБазы(Результат, База);

КонецПроцедуры

Процедура Notion_ИзменитьСвойстваСтраницы(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Страница     = ПараметрыФункции["Notion_Page"];
    Иконка       = ПараметрыФункции["Picture"];
    Обложка      = ПараметрыФункции["Picture2"];
    Архивировать = Ложь;

    Свойства = Новый Соответствие;
    Свойства.Вставить("Активен", Ложь);
    Свойства.Вставить("Почта"  , "vector@mail.ru");

    Результат = OPI_Notion.ИзменитьСвойстваСтраницы(Токен, Страница, Свойства, Иконка, Обложка, Архивировать);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойстваСтраницы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура Notion_ВернутьБлок(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_Block"];

    Результат = OPI_Notion.ВернутьБлок(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура Notion_СоздатьБлок(ПараметрыФункции)

    Токен    = ПараметрыФункции["Notion_Token"];
    Родитель = ПараметрыФункции["Notion_Parent"];
    Блок     = ПараметрыФункции["Notion_Block"];

    ДанныеБлока = OPI_Notion.ВернутьБлок(Токен, Блок);
    Результат   = OPI_Notion.СоздатьБлок(Токен, Родитель, ДанныеБлока);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

    Блок = Результат["results"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_NewBlock", Блок);
    OPI_Инструменты.ДобавитьПоле("Notion_NewBlock", Блок, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_ВернутьДочерниеБлоки(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_NewBlock"];

    Результат = OPI_Notion.ВернутьДочерниеБлоки(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьДочерниеБлоки", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура Notion_УдалитьБлок(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_NewBlock"];

    Результат = OPI_Notion.УдалитьБлок(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура Notion_СписокПользователей(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];

    Результат = OPI_Notion.СписокПользователей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СписокПользователей", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура Notion_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Пользователь = ПараметрыФункции["Notion_User"];

    Результат = OPI_Notion.ПолучитьДанныеПользователя(Токен, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеПользователя", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "user");

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура Dropbox_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    КлючПриложения = ПараметрыФункции["Dropbox_Appkey"];
    Результат      = OPI_Dropbox.ПолучитьСсылкуАвторизации(КлючПриложения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизации", "Dropbox");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка");

КонецПроцедуры

Процедура Dropbox_ПолучитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    Код              = ПараметрыФункции["Dropbox_Code"];

    Результат = OPI_Dropbox.ПолучитьТокен(КлючПриложения, СекретПриложения, Код);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен");

    Токен  = Результат["access_token"];
    Рефреш = Результат["refresh_token"];

    Если ЗначениеЗаполнено(Токен) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);
    КонецЕсли;

    Если ЗначениеЗаполнено(Рефреш) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Refresh", Рефреш);
    КонецЕсли;

КонецПроцедуры

Процедура Dropbox_ОбновитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    РефрешТокен      = ПараметрыФункции["Dropbox_Refresh"];

    Результат = OPI_Dropbox.ОбновитьТокен(КлючПриложения, СекретПриложения, РефрешТокен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен");

    Токен = Результат["access_token"];

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Токен).Заполнено();

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);

КонецПроцедуры

Процедура Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Путь  = "/New/pic.png";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьИнформациюОбОбъекте(Токен, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбОбъекте", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьПревью(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Результат = OPI_Dropbox.ПолучитьПревью(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПревью", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 120000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ЗагрузитьФайл(ПараметрыФункции)

    Путь     = "/New/pic.png";
    Токен    = ПараметрыФункции["Dropbox_Token"];
    Картинка = ПараметрыФункции["Picture"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    Результат = OPI_Dropbox.ЗагрузитьФайл(Токен, КартинкаПуть, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);
    УдалитьФайлы(КартинкаПуть);

    Если Не OPI_Инструменты.ЭтоOneScript() И ПараметрыФункции.Свойство("Big")  Тогда

        БольшойФайл = ПараметрыФункции["Big"];

        Результат = OPI_Dropbox.ЗагрузитьФайл(Токен, БольшойФайл, "/giant.tmp", Истина);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (большой)", "Dropbox");
        OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, "/giant.tmp");

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Путь  = "/New/url_doc.docx";
    Токен = ПараметрыФункции["Dropbox_Token"];
    URL   = ПараметрыФункции["Document"];

    Результат = OPI_Dropbox.ЗагрузитьФайлПоURL(Токен, URL, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлПоURL", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксРабота(Результат);

    Работа = Результат["async_job_id"];

    ПараметрыФункции.Вставить("Dropbox_Job", Работа);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Job", Работа);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    ИДРаботы = ПараметрыФункции["Dropbox_Job"];
    Статус   = "in_progress";

    Пока Статус = "in_progress" Цикл

        Результат = OPI_Dropbox.ПолучитьСтатусЗагрузкиПоURL(Токен, ИДРаботы);
        Статус    = Результат[".tag"];

        OPI_Инструменты.Пауза(5);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусЗагрузкиПоURL", "Dropbox");

    КонецЦикла;

    // END

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    Путь      = "/New/url_doc.docx";
    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_УдалитьОбъект(ПараметрыФункции)

    Путь  = "/New/pic.png";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_КопироватьОбъект(ПараметрыФункции)

    Оригинал = "/New/pic.png";
    Копия    = "/New/pic_copy.png";
    Токен    = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.КопироватьОбъект(Токен, Оригинал, Копия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Копия);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПереместитьОбъект(ПараметрыФункции)

    ОригиналныйПуть = "/New/pic.png";
    ЦелевойПуть     = "/pic.png";
    Токен           = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПереместитьОбъект(Токен, ОригиналныйПуть, ЦелевойПуть);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ЦелевойПуть);

    Результат = OPI_Dropbox.ПереместитьОбъект(Токен, ЦелевойПуть, ОригиналныйПуть);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ОригиналныйПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СоздатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/Новый каталог";

    Результат = OPI_Dropbox.СоздатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СкачатьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/pic.png";

    Результат = OPI_Dropbox.СкачатьФайл(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 2000000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СкачатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New";

    Результат = OPI_Dropbox.СкачатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокФайловПапки(ПараметрыФункции)

    Путь  = "/New";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьСписокФайловПапки(Токен, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайловПапки", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/pic.png";

    Результат = OPI_Dropbox.ПолучитьСписокВерсийОбъекта(Токен, Путь, 1);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВерсийОбъекта", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат, 1);

    Ревизия = Результат["entries"][0]["rev"];

    ПараметрыФункции.Вставить("Dropbox_FileRevision", Ревизия);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_FileRevision", Ревизия);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ВосстановитьОбъектКВерсии(ПараметрыФункции)

    Версия = ПараметрыФункции["Dropbox_FileRevision"];
    Токен  = ПараметрыФункции["Dropbox_Token"];
    Путь   = "/New/pic.png";

    Результат = OPI_Dropbox.ВосстановитьОбъектКВерсии(Токен, Путь, Версия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьОбъектКВерсии", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокТегов(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    МассивПутей = Новый Массив;
    МассивПутей.Добавить("/New/Dogs.mp3");
    МассивПутей.Добавить("/New/mydoc.docx");

    Результат = OPI_Dropbox.ПолучитьСписокТегов(Токен, МассивПутей);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТегов", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, МассивПутей.Количество());

    Результат = OPI_Dropbox.ПолучитьСписокТегов(Токен, "/New/mydoc.docx");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТегов (одиночный)");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, 1);

    ЕстьТег = Ложь;

    Для Каждого Тег Из Результат["paths_to_tags"][0]["tags"] Цикл
        Если Тег["tag_text"] = "важное" Тогда
            ЕстьТег = Истина;
        КонецЕсли;
    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ЕстьТег).Равно(Истина);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ДобавитьТег(ПараметрыФункции)

    Тег   = "Важное";
    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Результат = OPI_Dropbox.ДобавитьТег(Токен, Путь, Тег);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТег", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_УдалитьТег(ПараметрыФункции)

    Тег   = "Важное";
    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Результат = OPI_Dropbox.УдалитьТег(Токен, Путь, Тег);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТег", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьИнформациюОбАккаунте(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбАккаунте", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    Результат = OPI_Dropbox.ПолучитьИнформациюОбАккаунте(Токен, Результат["account_id"]);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбАккаунте (сторонний)");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьДанныеИспользованияПространства(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеИспользованияПространства", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксПространство(Результат);

КонецПроцедуры

Процедура Dropbox_ДобавитьПользователейКФайлу(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Почта = ПараметрыФункции["Dropbox_OtherUser"];
    Файл  = ПараметрыФункции["Dropbox_FileID"];

    Результат = OPI_Dropbox.ДобавитьПользователейКФайлу(Токен, Файл, Почта, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКФайлу", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Ложь);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Результат = OPI_Dropbox.ДобавитьПользователейКФайлу(Токен, Файл, Почты, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКФайлу (доп.) ");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Истина);

КонецПроцедуры

Процедура Dropbox_ОпубликоватьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New";

    Результат = OPI_Dropbox.ОпубликоватьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОпубликоватьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксПубличнаяПапка(Результат);

    IDПапки = Результат["shared_folder_id"];

    ПараметрыФункции.Вставить("Dropbox_SharedFolder", IDПапки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_SharedFolder", IDПапки);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ОтменитьПубликациюПапки(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Папка = ПараметрыФункции["Dropbox_SharedFolder"];

    Результат = OPI_Dropbox.ОтменитьПубликациюПапки(Токен, Папка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюПапки", "Dropbox");

    ТекущийСтатус = "in_progress";
    IDРаботы      = Результат["async_job_id"];

    Пока ТекущийСтатус = "in_progress" Цикл
        Результат     = OPI_Dropbox.ПолучитьСтатусАсинхронногоИзменения(Токен, IDРаботы);
        ТекущийСтатус = Результат[".tag"];
        OPI_Инструменты.Пауза(3);
    КонецЦикла;

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусАсинхронногоИзменения", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    ПараметрыФункции.Вставить("Dropbox_NewJobID", IDРаботы);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_NewJobID", IDРаботы);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    IDРаботы = ПараметрыФункции["Dropbox_NewJobID"];

    Результат = OPI_Dropbox.ПолучитьСтатусАсинхронногоИзменения(Токен, IDРаботы);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Dropbox_ДобавитьПользователейКПапке(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Почта = ПараметрыФункции["Dropbox_OtherUser"];
    Папка = ПараметрыФункции["Dropbox_SharedFolder"]; // shared_folder_id

    Результат = OPI_Dropbox.ДобавитьПользователейКПапке(Токен, Папка, Почта, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКПапке", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Результат = OPI_Dropbox.ДобавитьПользователейКПапке(Токен, Папка, Почты, Истина);

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура Dropbox_ОтменитьПубликациюФайла(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Файл  = ПараметрыФункции["Dropbox_FileID"];

    Результат = OPI_Dropbox.ОтменитьПубликациюФайла(Токен, Файл);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюФайла", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыФункции)

    Домен    = ПараметрыФункции["Bitrix24_Domain"];
    ClientID = ПараметрыФункции["Bitrix24_ClientID"];

    Результат = OPI_Bitrix24.ПолучитьСсылкуАвторизацииПриложения(Домен, ClientID);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизацииПриложения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_AuthURL", Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Code         = ПараметрыФункции["Bitrix24_Code"];

    Результат = OPI_Bitrix24.ПолучитьТокен(ClientID, ClientSecret, Code);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Bitrix24");

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура Bitrix24_ОбновитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Refresh      = ПараметрыФункции["Bitrix24_Refresh"];

    Результат = OPI_Bitrix24.ОбновитьТокен(ClientID, ClientSecret, Refresh);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксАвторизация(Результат);

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура Bitrix24_СерверноеВремя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СерверноеВремя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СерверноеВремя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СерверноеВремя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СерверноеВремя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьНовость(ПараметрыФункции)

    Текст     = "Текст новости";
    Заголовок = "Заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    Файлы = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);
    Файлы.Вставить("2.png", Картинка2);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьНовость(URL, Текст, , Файлы, Заголовок, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                             // SKIP

    IDНовости = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookPostID", IDНовости); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookPostID", IDНовости);                  // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьНовость(URL, Текст, , Файлы, Заголовок, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDНовости = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PostID", IDНовости);
    ПараметрыФункции.Вставить("Bitrix24_PostID", IDНовости);

КонецПроцедуры

Процедура Bitrix24_ИзменитьНовость(ПараметрыФункции)

    Текст     = "Новый текст новости";
    Заголовок = "Новый заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];

    Файлы = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ИзменитьНовость(URL, IDНовости, Текст, , Файлы, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];

    Результат = OPI_Bitrix24.ИзменитьНовость(URL, IDНовости, Текст, , Файлы, Заголовок, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьНовость(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.УдалитьНовость(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьНовость(URL, IDНовости, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокПросмотревшихВажное(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПросмотревшихВажное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокПросмотревшихВажное(URL, IDНовости, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПросмотревшихВажное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьНовости(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьНовости(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьНовости(URL, IDНовости, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьКомментарийНовости(ПараметрыФункции)

    Текст     = "Комментарий к новости";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьКомментарийНовости(URL, IDНовости, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    Текст = "Другой комментарий к новости";
    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьКомментарийНовости(URL, IDНовости, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПолучателейКНовости(ПараметрыФункции)

    Видимость = "UA";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьПолучателейКНовости(URL, IDНовости, Видимость);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПолучателейКНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьПолучателейКНовости(URL, IDНовости, Видимость, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПолучателейКНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЗадачи(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЗадачи(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);                                           // SKIP

    IDЗадачи = Результат["result"]["task"]["id"];                                // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTaskID", IDЗадачи); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookTaskID", IDЗадачи);                  // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    IDЗадачи = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Bitrix24_TaskID", IDЗадачи);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"      , "Другой заголовок задачи");
    СтруктураЗадачи.Вставить("DESCRIPTION", "Другое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"   , "1");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ИзменитьЗадачу(URL, IDЗадачи, СтруктураЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ИзменитьЗадачу(URL, IDЗадачи, СтруктураЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПринятьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПринятьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПринятьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПринятьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПринятьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтклонитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтклонитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат); // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗадачу (хук)", "Bitrix24");

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтклонитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗадачу", "Bitrix24");

КонецПроцедуры

Процедура Bitrix24_ЗавершитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ЗавершитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ЗавершитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ВозобновитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ВозобновитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ВозобновитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтложитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтложитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтложитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтложитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтложитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьВыполнениеЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.НачатьВыполнениеЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьВыполнениеЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.НачатьВыполнениеЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьВыполнениеЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.НачатьНаблюдатьЗаЗадачей(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьНаблюдатьЗаЗадачей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.НачатьНаблюдатьЗаЗадачей(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьНаблюдатьЗаЗадачей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПрекратитьНаблюдатьЗаЗадачей(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрекратитьНаблюдатьЗаЗадачей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПрекратитьНаблюдатьЗаЗадачей(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрекратитьНаблюдатьЗаЗадачей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПриостановитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПриостановитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПриостановитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДелегироватьЗадачу(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи       = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ДелегироватьЗадачу(URL, IDЗадачи, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДелегироватьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДелегироватьЗадачу(URL, IDЗадачи, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДелегироватьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ДобавитьЗадачуВИзбранное(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗадачуВИзбранное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьЗадачуВИзбранное(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗадачуВИзбранное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.УбратьЗадачуИзИзбранного(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УбратьЗадачуИзИзбранного (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.УбратьЗадачуИзИзбранного(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УбратьЗадачуИзИзбранного", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИсториюЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьИсториюЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьИсториюЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокЗадач(ПараметрыФункции)

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    // Полную структуру фильтра можно найти в функции ПолучитьСтруктуруФильтраЗадач
    Фильтр = Новый Соответствие;
    Фильтр.Вставить("CREATED_BY", 1);                            // Постановщик с ID 1
    Фильтр.Вставить("!RESPONSIBLE_ID", 10);                           // Исполнители с ID не равным 10
    Фильтр.Вставить(">=CREATED_DATE ", ТекущаяДата - 60 * 60 * 24);   // Дата создания >= вчера

    Поля = Новый Массив;
    Поля.Добавить("UF_CRM_TASK");
    Поля.Добавить("CREATED_BY");

    Отступ = 1;
    URL    = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокЗадач(URL, Фильтр, , , Поля);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗадач (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокЗадач(URL, , Отступ, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокХранилищ(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    Результат = OPI_Bitrix24.ПолучитьСписокХранилищ(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокХранилищ (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокХранилищ(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокХранилищ", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьХранилищеПриложения(ПараметрыФункции)

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьХранилищеПриложения(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилищеПриложения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDХранилища = Результат["result"]["ID"];                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StorageID", IDХранилища); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_StorageID", IDХранилища);                  // SKIP

КонецПроцедуры

Процедура Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыФункции)

    Наименование2 = "Картинка2.jpg";
    Наименование  = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = 3;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование2, Картинка2, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                            // SKIP

    IDФайла = Результат["result"]["ID"];                                        // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFileID", IDФайла); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookFileID", IDФайла);                  // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование, Картинка, IDПриемника, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FileID", IDФайла);
    ПараметрыФункции.Вставить("Bitrix24_FileID", IDФайла);

КонецПроцедуры

Процедура Bitrix24_УдалитьФайл(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_HookFileID"];

    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL     = ПараметрыФункции["Bitrix24_Domain"];
    Токен   = ПараметрыФункции["Bitrix24_Token"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьКаталогВХранилище(ПараметрыФункции)

    IDХранилища   = 3;
    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьКаталогВХранилище(URL, IDХранилища, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКаталогВХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                                  // SKIP

    IDКаталога = Результат["result"]["ID"];                                           // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFolderID", IDКаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookFolderID", IDКаталога);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьКаталогВХранилище(URL, IDХранилища, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКаталогВХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = Результат["result"]["ID"];                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FolderID", IDКаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_FolderID", IDКаталога);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_УдалитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];

    Результат = OPI_Bitrix24.УдалитьКаталог(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.УдалитьКаталог(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьХранилище(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища = 3;

    Результат = OPI_Bitrix24.ПолучитьХранилище(URL, IDХранилища);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьХранилище(URL, IDХранилища, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища = 3;

    Результат = OPI_Bitrix24.ПолучитьСодержимоеХранилища(URL, IDХранилища);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСодержимоеХранилища (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСодержимоеХранилища(URL, IDХранилища, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСодержимоеХранилища", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьХранилище(ПараметрыФункции)

    Наименование = "Новое имя хранилища";
    URL          = ПараметрыФункции["Bitrix24_Domain"];
    Токен        = ПараметрыФункции["Bitrix24_Token"];
    IDХранилища  = ПараметрыФункции["Bitrix24_StorageID"];

    Результат = OPI_Bitrix24.ПереименоватьХранилище(URL, IDХранилища, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОКаталоге(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКаталоге (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОКаталоге(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКаталоге", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПодкаталог(ПараметрыФункции)

    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];
    Наименование  = "Новый подкаталог";
    Наименование2 = "Новый подкаталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьПодкаталог(URL, IDКаталога, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодкаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                                        // SKIP

    IDПодкаталога = Результат["result"]["ID"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookSubfolderID", IDПодкаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookSubfolderID", IDПодкаталога);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьПодкаталог(URL, IDКаталога, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодкаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDПодкаталога = Результат["result"]["ID"];                                          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SubfolderID", IDПодкаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_SubfolderID", IDПодкаталога);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_СкопироватьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookSubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СкопироватьКаталог(URL, IDКаталога, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDПриемника = ПараметрыФункции["Bitrix24_SubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СкопироватьКаталог(URL, IDКаталога, IDПриемника, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуКаталога(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуКаталога(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраКаталога(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраКаталога(URL, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДочерниеЭлементыКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(URL, IDКаталога, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДочерниеЭлементыКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПоместитьКаталогВКорзину(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.ПоместитьКаталогВКорзину(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьКаталогВКорзину (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПоместитьКаталогВКорзину(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьКаталогВКорзину", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВосстановитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.ВосстановитьКаталог(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВосстановитьКаталог(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереместитьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереместитьКаталог(URL, IDКаталога, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереместитьКаталог(URL, IDКаталога, IDПриемника, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьКаталог(ПараметрыФункции)

    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    IDКаталога2 = ПараметрыФункции["Bitrix24_HookFolderID"];
    URL         = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереименоватьКаталог(URL, IDКаталога2, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];
    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереименоватьКаталог(URL, IDКаталога, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыФункции)

    Наименование2 = "Картинка2.jpg";
    Наименование  = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = ПараметрыФункции["Bitrix24_FolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, Наименование2, Картинка2, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                            // SKIP

    IDФайла = Результат["result"]["ID"];                                        // SKIP
    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);                                     // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, Наименование, Картинка, IDПриемника, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла   = Результат["result"]["ID"];
    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла, Токен);

КонецПроцедуры

Процедура Bitrix24_СкопироватьФайл(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СкопироватьФайл(URL, IDФайла, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СкопироватьФайл(URL, IDФайла, IDКаталога, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИнформациюОФайле(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОФайле(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОФайле(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыФункции)

    OPI_Инструменты.Пауза(20); // SKIP

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуФайла(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуФайла (хук)", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуФайла(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуФайла", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_ПоместитьФайлВКорзину(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.ПоместитьФайлВКорзину(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьФайлВКорзину (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПоместитьФайлВКорзину(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьФайлВКорзину", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВосстановитьФайл(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.ВосстановитьФайл(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВосстановитьФайл(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьФайл(ПараметрыФункции)

    Наименование  = "Новое имя файла.jpg";
    Наименование2 = "Новое имя файла 2.jpg";

    IDФайла2 = ПараметрыФункции["Bitrix24_HookFileID"];
    URL      = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереименоватьФайл(URL, IDФайла2, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDФайла = ПараметрыФункции["Bitrix24_FileID"];
    URL     = ПараметрыФункции["Bitrix24_Domain"];
    Токен   = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереименоватьФайл(URL, IDФайла, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереместитьФайлВКаталог(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookSubFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереместитьФайлВКаталог(URL, IDФайла, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьФайлВКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_SubFolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереместитьФайлВКаталог(URL, IDФайла, IDКаталога, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьФайлВКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьФайлВЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDФайла  = ПараметрыФункции["Bitrix24_TaskFileID"];

    Результат = OPI_Bitrix24.ДобавитьФайлВЗадачу(URL, IDЗадачи, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьФайлВЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьФайлВЗадачу(URL, IDЗадачи, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьФайлВЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПроверитьДоступКЗадаче(ПараметрыФункции)

    МассивПользователей = Новый Массив;
    МассивПользователей.Добавить("1");
    МассивПользователей.Добавить("10");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПроверитьДоступКЗадаче(URL, IDЗадачи, МассивПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступКЗадаче (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество()); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПроверитьДоступКЗадаче(URL, IDЗадачи, МассивПользователей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступКЗадаче", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество());

КонецПроцедуры

Процедура Bitrix24_ОтключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтключитьЗвукЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьЗвукЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтключитьЗвукЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьЗвукЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ВключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ВключитьЗвукЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьЗвукЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ВключитьЗвукЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьЗвукЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Текст = "Задача невыполнима, расходимся";

    Результат = OPI_Bitrix24.ДобавитьКомментарийЗадачи(URL, IDЗадачи, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDКомментария = Результат["result"];                                                  // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCommentID", IDКомментария);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCommentID", IDКомментария);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Текст = "Задача выполнима, не расходимся";

    Результат = OPI_Bitrix24.ДобавитьКомментарийЗадачи(URL, IDЗадачи, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКомментария = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentID", IDКомментария);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_CommentID", IDКомментария);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_УдалитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.УдалитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.УдалитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьРезультатИзКомментария(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.СоздатьРезультатИзКомментария(URL, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРезультатИзКомментария (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.СоздатьРезультатИзКомментария(URL, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРезультатИзКомментария", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьРезультатИзКомментария(ПараметрыФункции) Экспорт

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.УдалитьРезультатИзКомментария(URL, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьРезультатИзКомментария (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.УдалитьРезультатИзКомментария(URL, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьРезультатИзКомментария", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокРезультатов(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокРезультатов(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРезультатов (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокРезультатов(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРезультатов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокКомментариевЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариевЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокКомментариевЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариевЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьКомменатрийЗадачи(URL, IDЗадачи, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомменатрийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.ПолучитьКомменатрийЗадачи(URL, IDЗадачи, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомменатрийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Текст = "Задача изменена, не расходимся";

    Результат = OPI_Bitrix24.ИзменитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Текст = "Задача изменена, расходимся";

    Результат = OPI_Bitrix24.ИзменитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗависимостьЗадач (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                   // SKIP

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);     // SKIP

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

КонецПроцедуры

Процедура Bitrix24_УдалитьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);     // SKIP
    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗависимостьЗадач (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                   // SKIP

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен); // SKIP
    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новая стадия";
    Цвет         = "0026FF";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьСтадиюКанбана(URL, Наименование, Цвет, 6);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПредыдущей = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookStageID", IDПредыдущей);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookStageID", IDПредыдущей);                   // SKIP

    Наименование = "Новая стадия 2";
    Цвет         = "0026FF";

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьСтадиюКанбана(URL, Наименование, Цвет, IDПредыдущей, , Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСтадии = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StageID", IDСтадии);
    ПараметрыФункции.Вставить("Bitrix24_StageID", IDСтадии);

КонецПроцедуры

Процедура Bitrix24_УдалитьСтадиюКанбана(ПараметрыФункции)

    IDСтадии = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.УдалитьСтадиюКанбана(URL, IDСтадии, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDСтадии = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьСтадиюКанбана(URL, IDСтадии, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтадииКанбана(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтадииКанбана(URL, , Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтадииКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтадииКанбана(URL, , , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтадииКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыФункции)

    IDЗадачи = ПараметрыФункции["Bitrix24_KanbanTaskID"];
    IDСтадии = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, IDСтадии);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПеренестиЗадачуВСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDСтадии = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, IDСтадии, , , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПеренестиЗадачуВСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, 2, , , Токен);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новое имя стадии стадии";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ИзменитьСтадиюКанбана(URL, Наименование, IDСтадии, Цвет);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    Наименование = "Новое имя стадии стадии 2";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ИзменитьСтадиюКанбана(URL, Наименование, IDСтадии, Цвет, 6, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Текст = "Пункт чек-листа";

    Результат = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(URL, IDЗадачи, Текст, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЭлемента = Результат["result"];                                                       // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCheckElementID", IDЭлемента);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCheckElementID", IDЭлемента);                   // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(URL, IDЗадачи, Текст, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЭлемента = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CheckElementID", IDЭлемента);
    ПараметрыФункции.Вставить("Bitrix24_CheckElementID", IDЭлемента);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Текст = "Новый текст пункта чек-листа";

    Результат = OPI_Bitrix24.ИзменитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    Результат = OPI_Bitrix24.ИзменитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьЧеклистЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧеклистЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьЧеклистЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧеклистЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ПолучитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ВыполнитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВыполнитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ВозобновитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВозобновитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Время = 3600;

    Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(URL, IDЗадачи, Время);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЗатрат = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTimeID", IDЗатрат);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookTimeID", IDЗатрат);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Текст          = "Трудозатраты по обработке";
    IDПользователя = 10;
    Время          = 7200;
    ДатаУстановки  = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(URL, IDЗадачи, Время, IDПользователя, Текст, ДатаУстановки,
        Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЗатрат = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TimeID", IDЗатрат);
    ПараметрыФункции.Вставить("Bitrix24_TimeID", IDЗатрат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Текст = "Забытый в прошлый раз текст";
    Время = 4800;

    Результат = OPI_Bitrix24.ИзменитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Время, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Текст         = "Новые трудозатраты по обработке";
    Время         = 4800;
    ДатаУстановки = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Результат = OPI_Bitrix24.ИзменитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Время, Текст, ДатаУстановки, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Результат = OPI_Bitrix24.УдалитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Результат = OPI_Bitrix24.УдалитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Результат = OPI_Bitrix24.ПолучитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Результат = OPI_Bitrix24.ПолучитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТрудозатратЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТрудозатратЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьПланЗадачНаДень(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПланЗадачНаДень (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьПланЗадачНаДень(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПланЗадачНаДень", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЧат(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);

    B64Картинка = ПолучитьBase64СтрокуИзДвоичныхДанных(Картинка);

    МассивУчастников = Новый Массив;
    МассивУчастников.Добавить(10);
    МассивУчастников.Добавить(1);

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE"       , "OPEN");
    СтруктураЧата.Вставить("TITLE"      , "Новый чат");
    СтруктураЧата.Вставить("DESCRIPTION", "Это новый чат");
    СтруктураЧата.Вставить("COLOR"      , "GREEN");
    СтруктураЧата.Вставить("MESSAGE"    , "Добро пожаловать в новый чат");
    СтруктураЧата.Вставить("USERS"      , МассивУчастников);
    СтруктураЧата.Вставить("AVATAR"     , B64Картинка);
    СтруктураЧата.Вставить("OWNER_ID"   , 1);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЧат(URL, СтруктураЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЧата = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookChatID", IDЧата);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookChatID", IDЧата);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE" , "CHAT");
    СтруктураЧата.Вставить("TITLE", "Закрытый чат");
    СтруктураЧата.Вставить("USERS", МассивУчастников);

    Результат = OPI_Bitrix24.СоздатьЧат(URL, СтруктураЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЧата = Результат["result"];                                           // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatID", IDЧата);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatID", IDЧата);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПокинутьЧат(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПокинутьЧат(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПокинутьЧат(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИсключитьПользователяИзЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Результат = OPI_Bitrix24.ИсключитьПользователяИзЧата(URL, IDЧата, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователяИзЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ИсключитьПользователяИзЧата(URL, IDЧата, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователяИзЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПользователейВЧат(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователей = Новый Массив;
    IDПользователей.Добавить(10);
    IDПользователей.Добавить(12);

    Результат = OPI_Bitrix24.ДобавитьПользователейВЧат(URL, IDЧата, IDПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейВЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ДобавитьПользователейВЧат(URL, IDЧата, IDПользователя, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейВЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЗаголовокЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Заголовок = "Новый заголовок чата";

    Результат = OPI_Bitrix24.ИзменитьЗаголовокЧата(URL, IDЧата, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаголовокЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Заголовок = "Другой заголовок чата";

    Результат = OPI_Bitrix24.ИзменитьЗаголовокЧата(URL, IDЧата, Заголовок, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаголовокЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЦветЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Цвет = "AZURE";

    Результат = OPI_Bitrix24.ИзменитьЦветЧата(URL, IDЧата, Цвет);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЦветЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    OPI_Инструменты.Пауза(10); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Цвет = "PURPLE";

    Результат = OPI_Bitrix24.ИзменитьЦветЧата(URL, IDЧата, Цвет, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЦветЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьКартинкуЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Картинка = ПараметрыФункции["Picture2"];

    Результат = OPI_Bitrix24.ИзменитьКартинкуЧата(URL, IDЧата, Картинка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКартинкуЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ИзменитьКартинкуЧата(URL, IDЧата, Картинка, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКартинкуЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтключитьУведомленияЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ОтключитьУведомленияЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьУведомленияЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ОтключитьУведомленияЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьУведомленияЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ВключитьУведомленияЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ВключитьУведомленияЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьУведомленияЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ВключитьУведомленияЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьУведомленияЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СменитьВладельцаЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Результат = OPI_Bitrix24.СменитьВладельцаЧата(URL, IDЧата, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СменитьВладельцаЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.СменитьВладельцаЧата(URL, IDЧата, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СменитьВладельцаЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat4";

    Результат = OPI_Bitrix24.ПолучитьСписокСообщенийЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСообщенийЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат); // SKIP

    IDСообщения = Результат["result"]["messages"][0]["id"];                             // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьСписокСообщенийЧата(URL, IDПользователя, , 0, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСообщенийЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат);

    IDСообщения = Результат["result"]["messages"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = ПараметрыФункции["Bitrix24_HookChatID"];
    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDЧата);
    СтрокаЧата  = "chat" + IDЧата;
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакПрочитанное(URL, IDЧата, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакПрочитанное (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакПрочитанное(URL, IDПользователя, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакПрочитанное", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакНепрочитанное(URL, IDЧата, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакНепрочитанное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакНепрочитанное(URL, IDПользователя, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакНепрочитанное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьДиалог(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьДиалог(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДиалог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьДиалог(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДиалог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейДиалога(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейДиалога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейДиалога(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейДиалога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ОтправитьУведомлениеОВводе(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьУведомлениеОВводе (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ОтправитьУведомлениеОВводе(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьУведомлениеОВводе", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПрочитатьВсе(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПрочитатьВсе(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьВсе (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПрочитатьВсе(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьВсе", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьСообщение(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЧата   = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.ОтправитьСообщение(URL, IDЧата, Текст, Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                  // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ОтправитьСообщение(URL, IDПользователя, Текст, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Текст = "Новый текст сообщения";

    Результат = OPI_Bitrix24.ИзменитьСообщение(URL, IDСообщения, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.ИзменитьСообщение(URL, IDСообщения, Текст, Вложения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.УдалитьСообщение(URL, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.УдалитьСообщение(URL, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.УстановитьРеакциюНаСообщение(URL, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьРеакциюНаСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.УстановитьРеакциюНаСообщение(URL, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьРеакциюНаСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКаталогФайловЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКаталогФайловЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьФайл(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЧата   = ПараметрыФункции["Bitrix24_HookChatID"];
    Файл     = ПараметрыФункции["Document"]; // Двоичные данные, URL или путь к файлу
    Описание = "Очень важный файл";

    Каталог    = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата);
    IDКаталога = Каталог["result"]["ID"];

    ЗагруженныйФайл = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, "Важный документ.docx", Файл, IDКаталога);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Результат = OPI_Bitrix24.ОтправитьФайл(URL, IDЧата, IDФайла, Описание);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Каталог    = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата, Токен);
    IDКаталога = Каталог["result"]["ID"];

    ЗагруженныйФайл = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, "Важный документ.docx", Файл, IDКаталога, Токен);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Результат = OPI_Bitrix24.ОтправитьФайл(URL, IDЧата, IDФайла, Описание, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользователей(ПараметрыФункции)

    URL                 = ПараметрыФункции["Bitrix24_URL"];
    МассивПользователей = Новый Массив;

    МассивПользователей.Добавить(1);
    МассивПользователей.Добавить(10);

    Результат = OPI_Bitrix24.ПолучитьПользователей(URL, МассивПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDПользователей = 10;

    Результат = OPI_Bitrix24.ПолучитьПользователей(URL, IDПользователей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтатусПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтатусПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтатусПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьСтатусПользователя(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    Статус = "dnd";

    Результат = OPI_Bitrix24.УстановитьСтатусПользователя(URL, Статус);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    Статус = "away";

    Результат = OPI_Bitrix24.УстановитьСтатусПользователя(URL, Статус, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПерсональноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.СоздатьПерсональноеУведомление(URL, IDПользователя, Текст, , Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПерсональноеУведомление (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                        // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalHookNotifyID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_PersoalHookNotifyID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Результат = OPI_Bitrix24.СоздатьПерсональноеУведомление(URL, IDПользователя, Текст, Тег, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПерсональноеУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_PersoalNotifyID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_СоздатьСистемноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.СоздатьСистемноеУведомление(URL, IDПользователя, Текст, , Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСистемноеУведомление (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemHookNotifyID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_SystemHookNotifyID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Результат = OPI_Bitrix24.СоздатьСистемноеУведомление(URL, IDПользователя, Текст, Тег, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСистемноеУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_SystemNotifyID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_УдалитьУведомление(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalHookNotifyID"];

    Результат = OPI_Bitrix24.УдалитьУведомление(URL, IDУведомления);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalNotifyID"];

    Результат = OPI_Bitrix24.УдалитьУведомление(URL, IDУведомления, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьУведомление (приложение)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксБулево(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Тип = "date";
    Имя = "BIRTHDAY_FIELD";

    Результат = OPI_Bitrix24.ДобавитьПользовательскоеПолеЗадачи(URL, Тип, Имя);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Тип        = "string";
    Имя        = "TEXT_FIELD";
    ВнешнийКод = "BITRIX_TEXT_FIELD";
    Заголовок  = "Поле для текста";
    Подпись    = Новый Структура("en,ru", "Some field", "Некоторое поле");

    Результат = OPI_Bitrix24.ДобавитьПользовательскоеПолеЗадачи(URL, Тип, Имя, ВнешнийКод, Заголовок, Подпись, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПоля    = ПараметрыФункции["Bitrix24_HookTaskFieldID"];
    Заголовок = "Новый заголовок";

    Результат = OPI_Bitrix24.ИзменитьПользовательскоеПолеЗадачи(URL, IDПоля, , Заголовок);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    IDПоля     = ПараметрыФункции["Bitrix24_TaskFieldID"];
    ВнешнийКод = "NEW_TEXT_FIELD";
    Подпись    = Новый Структура("en,ru", "Updated field", "Измененное поле");

    Результат = OPI_Bitrix24.ИзменитьПользовательскоеПолеЗадачи(URL, IDПоля, ВнешнийКод, , Подпись, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDПоля = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскоеПолеЗадачи(URL, IDПоля);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDПоля = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскоеПолеЗадачи(URL, IDПоля, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользовательскихПолейЗадачи(URL);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользовательскихПолейЗадачи(URL, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDПоля = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Результат = OPI_Bitrix24.УдалитьПользовательскоеПолеЗадачи(URL, IDПоля);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDПоля = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Результат = OPI_Bitrix24.УдалитьПользовательскоеПолеЗадачи(URL, IDПоля, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_СоздатьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Наименование = "Главное подразделение";
    IDРодителя   = 1;

    Результат = OPI_Bitrix24.СоздатьПодразделение(URL, Наименование, IDРодителя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПодразделения = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDepID", IDПодразделения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookDepID", IDПодразделения);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Наименование   = "Подчиненное подразделение";
    IDРодителя     = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРуководителя = 1;

    Результат = OPI_Bitrix24.СоздатьПодразделение(URL, Наименование, IDРодителя, IDРуководителя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПодразделения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DepID", IDПодразделения);
    ПараметрыФункции.Вставить("Bitrix24_DepID", IDПодразделения);

КонецПроцедуры

Процедура Bitrix24_ИзменитьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРодителя      = 7;

    Результат = OPI_Bitrix24.ИзменитьПодразделение(URL, IDПодразделения, , IDРодителя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];
    Наименование    = "Новое подразделение";
    IDРодителя      = 1;
    IDРуководителя  = 10;

    Результат = OPI_Bitrix24.ИзменитьПодразделение(URL, IDПодразделения, Наименование, IDРодителя, IDРуководителя,
        Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьПодразделение(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Результат = OPI_Bitrix24.УдалитьПодразделение(URL, IDПодразделения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];

    Результат = OPI_Bitrix24.УдалитьПодразделение(URL, IDПодразделения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПодразделения(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Результат = OPI_Bitrix24.ПолучитьПодразделения(URL, IDПодразделения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодразделения (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDРуководителя = 1;

    Результат = OPI_Bitrix24.ПолучитьПодразделения(URL, , , , IDРуководителя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодразделения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТекущегоПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьТекущегоПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТекущегоПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьТекущегоПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТекущегоПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтурктуруПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтурктуруПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтурктуруПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтурктуруПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПользователя(ПараметрыФункции)

    URL   = ПараметрыФункции["Bitrix24_URL"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";
    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 7);

    Результат = OPI_Bitrix24.СоздатьПользователя(URL, СтруктураПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПользователя = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookUserID", IDПользователя);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookUserID", IDПользователя);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"          , Почта);
    СтруктураПользователя.Вставить("NAME"           , "Виталий");
    СтруктураПользователя.Вставить("LAST_NAME"      , "Альпака");
    СтруктураПользователя.Вставить("PERSONAL_MOBILE", "88003553535");
    СтруктураПользователя.Вставить("UF_DEPARTMENT"  , 1);

    Результат = OPI_Bitrix24.СоздатьПользователя(URL, СтруктураПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПользователя = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserID", IDПользователя);
    ПараметрыФункции.Вставить("Bitrix24_UserID", IDПользователя);

КонецПроцедуры

Процедура Bitrix24_ИзменитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 1);

    Результат = OPI_Bitrix24.ИзменитьПользователя(URL, IDПользователя, СтруктураПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("NAME"         , "Олег");
    СтруктураПользователя.Вставить("LAST_NAME"    , "Лама");
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 7);

    Результат = OPI_Bitrix24.ИзменитьПользователя(URL, IDПользователя, СтруктураПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСтатусПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Результат = OPI_Bitrix24.ИзменитьСтатусПользователя(URL, IDПользователя, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ИзменитьСтатусПользователя(URL, IDПользователя, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Результат = OPI_Bitrix24.ПолучитьПользователя(URL, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ПолучитьПользователя(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_НайтиПользователей(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("NAME"              , "Виталий");
    СтруктураФильтра.Вставить("LAST_NAME"         , "Альпака");
    СтруктураФильтра.Вставить("WORK_POSITION"     , "DevOps инженер");
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Отдел маркетинга");
    СтруктураФильтра.Вставить("USER_TYPE"         , "employee");

    Результат = OPI_Bitrix24.НайтиПользователей(URL, СтруктураФильтра);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиПользователей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Битрикс");

    Результат = OPI_Bitrix24.НайтиПользователей(URL, СтруктураФильтра, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиПользователей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.НачатьУчетВремени(URL);

    Час = 3600;

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату() - Час;
    Отчет          = "Опоздание";

    Результат = OPI_Bitrix24.НачатьУчетВремени(URL, IDПользователя, Время, Отчет, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ЗавершитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗавершитьУчетВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату();
    Отчет          = "Отгул";

    Результат = OPI_Bitrix24.ЗавершитьУчетВремени(URL, IDПользователя, Время, Отчет, Токен);

КонецПроцедуры

Процедура Bitrix24_ПриостановитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПриостановитьУчетВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПриостановитьУчетВремени(URL, IDПользователя, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтатусУчетаВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПолучитьСтатусУчетаВремени(URL, IDПользователя, Токен);

КонецПроцедуры

Процедура Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьНастройкиУчетаВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПолучитьНастройкиУчетаВремени(URL, IDПользователя, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраЛидов();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЛидов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЛида(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЛида(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЛида (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЛида(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЛида", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЛид(ПараметрыФункции)

    МассивПочт = Новый Массив;
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "yo@example.com", "HOME"));
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "hi@example.com", "WORK"));

    МассивНомеров = Новый Массив;
    МассивНомеров.Добавить(Новый Структура("VALUE,VALUE_TYPE", "88005553535", "WORK"));

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Пушкина, д. 10");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Россия");
    СтруктураПолей.Вставить("EMAIL"          , МассивПочт);
    СтруктураПолей.Вставить("NAME"           , "Петр");
    СтруктураПолей.Вставить("LAST_NAME"      , "Петров");
    СтруктураПолей.Вставить("PHONE"          , МассивНомеров);
    СтруктураПолей.Вставить("TITLE"          , "Мегаклиент");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЛид(URL, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЛида = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookLeadID", IDЛида);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookLeadID", IDЛида);                   // SKIP

    СтруктураПолей.Вставить("NAME"     , "Иван");
    СтруктураПолей.Вставить("LAST_NAME", "Иванов");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЛид(URL, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_LeadID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_LeadID", IDЛида);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЛид(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Лермонтова, д. 20");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Беларусь");
    СтруктураПолей.Вставить("TITLE"          , "Суперклиент");

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.ИзменитьЛид(URL, IDЛида, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    СтруктураПолей.Вставить("NAME"     , "Евгений");
    СтруктураПолей.Вставить("LAST_NAME", "Евгеньев");

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.ИзменитьЛид(URL, IDЛида, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.УдалитьЛид(URL, IDЛида);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.УдалитьЛид(URL, IDЛида, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.ПолучитьЛид(URL, IDЛида);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.ПолучитьЛид(URL, IDЛида, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокЛидов(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокЛидов(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЛидов (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"    , "Мегаклиент");
    Фильтр.Вставить("HAS_EMAIL", "Y");

    Результат = OPI_Bitrix24.ПолучитьСписокЛидов(URL, Фильтр, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЛидов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраСделок();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраСделок", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруСделки(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСделки(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСделки (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСделки(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСделки", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"         , "Плановая продажа");
    СтруктураПолей.Вставить("TYPE_ID"       , "GOODS");
    СтруктураПолей.Вставить("STAGE_ID"      , "NEW");
    СтруктураПолей.Вставить("COMPANY_ID"    , 1);
    СтруктураПолей.Вставить("CONTACT_ID"    , 3);
    СтруктураПолей.Вставить("OPENED"        , "Y");
    СтруктураПолей.Вставить("ASSIGNED_BY_ID", 1);
    СтруктураПолей.Вставить("PROBABILITY"   , 30);
    СтруктураПолей.Вставить("CURRENCY_ID"   , "USD");
    СтруктураПолей.Вставить("OPPORTUNITY"   , 5000);
    СтруктураПолей.Вставить("CATEGORY_ID"   , 5);
    СтруктураПолей.Вставить("BEGINDATE"     , "2024-01-01");
    СтруктураПолей.Вставить("CLOSEDATE"     , "2030-01-01");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьСделку(URL, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЛида = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDealID", IDЛида);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookDealID", IDЛида);                   // SKIP

    СтруктураПолей.Вставить("TITLE"    , "Другая сделка");
    СтруктураПолей.Вставить("CLOSEDATE", "2031-01-01");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьСделку(URL, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DealID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_DealID", IDЛида);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"      , "Продажа в RUB");
    СтруктураПолей.Вставить("CURRENCY_ID", "RUB");
    СтруктураПолей.Вставить("OPPORTUNITY", 50000);

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ИзменитьСделку(URL, IDСделки, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    СтруктураПолей.Вставить("TITLE"    , "Будущая сделка в RUB");
    СтруктураПолей.Вставить("BEGINDATE", "2025-01-01");

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_DealID"];

    Результат = OPI_Bitrix24.ИзменитьСделку(URL, IDСделки, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ПолучитьСделку(URL, IDСделки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ПолучитьСделку(URL, IDСделки, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.УдалитьСделку(URL, IDСделки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_DealID"];

    Результат = OPI_Bitrix24.УдалитьСделку(URL, IDСделки, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокСделок(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокСделок(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСделок (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"      , "Продажа в RUB");
    Фильтр.Вставить("CURRENCY_ID", "RUB");

    Результат = OPI_Bitrix24.ПолучитьСписокСделок(URL, Фильтр, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСделок", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраЗадач();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруКомментария();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруКомментария", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЧата(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЧата();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьБлокКартинки(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Picture"];

    Результат = OPI_Bitrix24.ПолучитьБлокКартинки(Наименование, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБлокКартинки", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьБлокФайла(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Document"];

    Результат = OPI_Bitrix24.ПолучитьБлокФайла(Наименование, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБлокФайла", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраПользователей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьКалендарь(ПараметрыФункции)

    IDПользователя = 1;

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("type"       , "user");
    СтруктураКалендаря.Вставить("ownerId"    , IDПользователя);
    СтруктураКалендаря.Вставить("name"       , "Новый календарь");
    СтруктураКалендаря.Вставить("description", "Мой новый календарь");
    СтруктураКалендаря.Вставить("color"      , "#FFFFFF");
    СтруктураКалендаря.Вставить("text_color" , "#000000");

    СтруктураЭкспорта = Новый Структура;
    СтруктураЭкспорта.Вставить("ALLOW", "Истина");
    СтруктураЭкспорта.Вставить("SET"  , "all");

    СтруктураКалендаря.Вставить("export", СтруктураЭкспорта);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьКалендарь(URL, СтруктураКалендаря);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКалендарь (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                             // SKIP

    IDКалендаря = Результат["result"];                                                   // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCalendarID", IDКалендаря);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCalendarID", IDКалендаря);                   // SKIP

    СтруктураКалендаря.Вставить("name"       , "Другой календарь");
    СтруктураКалендаря.Вставить("description", "Мой другой новый календарь");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьКалендарь(URL, СтруктураКалендаря, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКалендаря = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CalendarID", IDКалендаря);
    ПараметрыФункции.Вставить("Bitrix24_CalendarID", IDКалендаря);

КонецПроцедуры

Процедура Bitrix24_ИзменитьКалендарь(ПараметрыФункции)

    IDПользователя = 1;

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("type"       , "user");
    СтруктураКалендаря.Вставить("ownerId"    , IDПользователя);
    СтруктураКалендаря.Вставить("name"       , "Новое имя календаря");
    СтруктураКалендаря.Вставить("description", "Этот календарь был изменен");

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Результат = OPI_Bitrix24.ИзменитьКалендарь(URL, IDКалендаря, СтруктураКалендаря);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКалендарь (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                             // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Результат = OPI_Bitrix24.ИзменитьКалендарь(URL, IDКалендаря, СтруктураКалендаря, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьКалендарь(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];
    IDВладельца = 1;
    Тип         = "user";

    Результат = OPI_Bitrix24.УдалитьКалендарь(URL, IDКалендаря, IDВладельца, Тип);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСделку (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                         // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Результат = OPI_Bitrix24.УдалитьКалендарь(URL, IDКалендаря, IDВладельца, Тип, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруКалендаря(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруКалендаря();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Bitrix24.ПолучитьСтруктуруКалендаря(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруКалендаря (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокКалендарей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDВладельца = 1;
    Тип         = "user";

    Результат = OPI_Bitrix24.ПолучитьСписокКалендарей(URL, IDВладельца, Тип);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКалендарей (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                    // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокКалендарей(URL, IDВладельца, Тип, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруНастроекКалендаря(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруНастроекКалендаря(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                        // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруНастроекКалендаря(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруПользовательскихНастроекКаледнаря(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруПользовательскихНастроекКаледнаря();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПользовательскихНастроекКаледнаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Bitrix24.ПолучитьСтруктуруПользовательскихНастроекКаледнаря(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПользовательскихНастроекКаледнаря (пустая)",
        "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользовательскиеНастройкиКалендаря(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскиеНастройкиКалендаря(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользовательскиеНастройкиКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                                // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскиеНастройкиКалендаря(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользовательскиеНастройкиКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьПользовательскиеНастройкиКалендаря(ПараметрыФункции)

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("view"              , "month");
    СтруктураКалендаря.Вставить("showDeclined"      , "Y");
    СтруктураКалендаря.Вставить("collapseOffHours"  , "N");
    СтруктураКалендаря.Вставить("showCompletedTasks", "N");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.УстановитьПользовательскиеНастройкиКалендаря(URL, СтруктураКалендаря);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПользовательскиеНастройкиКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                                                         // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УстановитьПользовательскиеНастройкиКалендаря(URL, СтруктураКалендаря, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПользовательскиеНастройкиКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЗанятостьПользователей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Пользователь = 1;

    Неделя      = 604800;
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    ДатаНачала    = ТекущаяДата;
    ДатаОкончания = ТекущаяДата + Неделя;

    Результат = OPI_Bitrix24.ПолучитьЗанятостьПользователей(URL, Пользователь, ДатаНачала, ДатаОкончания);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗанятостьПользователей (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                    // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Результат = OPI_Bitrix24.ПолучитьЗанятостьПользователей(URL, Пользователь, ДатаНачала, ДатаОкончания, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗанятостьПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьСобытиеКалендаря(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Завтра = OPI_Инструменты.ПолучитьТекущуюДату() + 86400;
    Час    = 3600;

    СтруктураСобытия = Новый Структура;

    СтруктураСобытия.Вставить("type"         , "user");
    СтруктураСобытия.Вставить("ownerId"      , 1);
    СтруктураСобытия.Вставить("from"         , XMLСтрока(Завтра));
    СтруктураСобытия.Вставить("to"           , XMLСтрока(Завтра + Час));
    СтруктураСобытия.Вставить("section"      , IDКалендаря);
    СтруктураСобытия.Вставить("name"         , "Новое событие");
    СтруктураСобытия.Вставить("skip_time"    , "N");
    СтруктураСобытия.Вставить("timezone_from", "Europe/Minsk");
    СтруктураСобытия.Вставить("timezone_to"  , "Europe/Minsk");
    СтруктураСобытия.Вставить("description"  , "Описание события");
    СтруктураСобытия.Вставить("color"        , "%23000000>");
    СтруктураСобытия.Вставить("text_color"   , "%23FFFFFF");
    СтруктураСобытия.Вставить("accessibility", "quest");
    СтруктураСобытия.Вставить("importance"   , "normal");
    СтруктураСобытия.Вставить("private_event", "Y");

    СтруктураПовторяемости = Новый Структура;
    СтруктураПовторяемости.Вставить("FREQ"    , "DAILY");
    СтруктураПовторяемости.Вставить("COUNT"   , 3);
    СтруктураПовторяемости.Вставить("INTERVAL", 10);

    МассивДней = Новый Массив;
    МассивДней.Добавить("SA");
    МассивДней.Добавить("MO");

    СтруктураПовторяемости.Вставить("BYDAY", МассивДней);
    СтруктураПовторяемости.Вставить("UNTIL", XMLСтрока(Завтра + Час * 24 * 10));

    СтруктураСобытия.Вставить("rrule"     , СтруктураПовторяемости);
    СтруктураСобытия.Вставить("is_meeting", "Y");
    СтруктураСобытия.Вставить("location"  , "Офис");

    МассивНапоминаний = Новый Массив;

    СтруктураНапоминания = Новый Структура;
    СтруктураНапоминания.Вставить("type" , "day");
    СтруктураНапоминания.Вставить("count", 1);

    МассивНапоминаний.Добавить(СтруктураНапоминания);

    СтруктураСобытия.Вставить("remind"   , МассивНапоминаний);
    СтруктураСобытия.Вставить("attendees", СтрРазделить("1,10", ","));
    СтруктураСобытия.Вставить("host"     , 1);

    СтруктураВстречи = Новый Структура;
    СтруктураВстречи.Вставить("notify"      , "Y");
    СтруктураВстречи.Вставить("reinvite"    , "Y");
    СтруктураВстречи.Вставить("allow_invite", "N");
    СтруктураВстречи.Вставить("hide_guests" , "N");

    СтруктураСобытия.Вставить("meeting", СтруктураВстречи);

    Результат = OPI_Bitrix24.СоздатьСобытиеКалендаря(URL, СтруктураСобытия);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                    // SKIP

    IDСобытия = Результат["result"];                                                // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCEventID", IDСобытия); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCEventID", IDСобытия);                  // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    СтруктураСобытия.Вставить("section", IDКалендаря);

    Результат = OPI_Bitrix24.СоздатьСобытиеКалендаря(URL, СтруктураСобытия, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСобытия = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CEventID", IDСобытия);
    ПараметрыФункции.Вставить("Bitrix24_CEventID", IDСобытия);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    СтруктураСобытия = Новый Структура;

    СтруктураСобытия.Вставить("ownerId"      , 1);
    СтруктураСобытия.Вставить("type"         , "user");
    СтруктураСобытия.Вставить("name"         , "Измененное событие");
    СтруктураСобытия.Вставить("description"  , "Новое описание события");
    СтруктураСобытия.Вставить("importance"   , "low");
    СтруктураСобытия.Вставить("private_event", "Y");

    Результат = OPI_Bitrix24.ИзменитьСобытиеКалендаря(URL, IDСобытия, СтруктураСобытия);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                      // SKIP

    IDСобытия = Результат["result"];                                                // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCEventID", IDСобытия); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCEventID", IDСобытия);                  // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия   = ПараметрыФункции["Bitrix24_CEventID"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Результат = OPI_Bitrix24.ИзменитьСобытиеКалендаря(URL, IDСобытия, СтруктураСобытия, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСобытия = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CEventID", IDСобытия);
    ПараметрыФункции.Вставить("Bitrix24_CEventID", IDСобытия);

КонецПроцедуры

Процедура Bitrix24_УдалитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Результат = OPI_Bitrix24.УдалитьСобытиеКалендаря(URL, IDСобытия);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Результат = OPI_Bitrix24.УдалитьСобытиеКалендаря(URL, IDСобытия, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Результат = OPI_Bitrix24.ПолучитьСобытиеКалендаря(URL, IDСобытия);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                              // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Результат = OPI_Bitrix24.ПолучитьСобытиеКалендаря(URL, IDСобытия, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСобытияКалендарей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDВладельца = 1;
    Тип         = "user";

    Результат = OPI_Bitrix24.ПолучитьСобытияКалендарей(URL, IDВладельца, Тип);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытияКалендарей (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                               // SKIP

    URL          = ПараметрыФункции["Bitrix24_Domain"];
    Токен        = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия    = ПараметрыФункции["Bitrix24_CEventID"];
    IDКалендаря1 = ПараметрыФункции["Bitrix24_HookCalendarID"];
    IDКалендаря2 = ПараметрыФункции["Bitrix24_CalendarID"];

    Завтра      = OPI_Инструменты.ПолучитьТекущуюДату() + 86400;
    Послезавтра = Завтра + 86400;

    МассивКалендарей = Новый Массив;
    МассивКалендарей.Добавить(IDКалендаря1);
    МассивКалендарей.Добавить(IDКалендаря2);

    Фильтр = Новый Структура;
    Фильтр.Вставить("from"   , Завтра);
    Фильтр.Вставить("to"     , Послезавтра);
    Фильтр.Вставить("section", МассивКалендарей);

    Результат = OPI_Bitrix24.ПолучитьСобытияКалендарей(URL, IDВладельца, Тип, Фильтр, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытияКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьСтатусУчастияПользователя(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];
    Статус    = "Y";

    Результат = OPI_Bitrix24.УстановитьСтатусУчастияПользователя(URL, IDСобытия, Статус);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусУчастияПользователя (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                                               // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Результат = OPI_Bitrix24.УстановитьСтатусУчастияПользователя(URL, IDСобытия, Статус, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусУчастияПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтатусУчастияПользователя(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Результат = OPI_Bitrix24.ПолучитьСтатусУчастияПользователя(URL, IDСобытия);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусУчастияПользователя (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);                                        // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Результат = OPI_Bitrix24.ПолучитьСтатусУчастияПользователя(URL, IDСобытия, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусУчастияПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруСобытияКалендаря(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСобытияКалендаря();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСобытияКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСобытияКалендаря(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСобытияКалендаря (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраСобытийКалендарей(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраСобытийКалендарей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраСобытийКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраСобытийКалендарей(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраСобытийКалендарей (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область VKTeams

Процедура VKTeams_ПроверитьТокен(ПараметрыФункции)

    Токен     = ПараметрыФункции["VkTeams_Token"];
    Результат = OPI_VKTeams.ПроверитьТокен(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьТокен", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПолучитьСобытия(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDПоследнего = 0;

    Для Н = 1 По 5 Цикл // В реальной работе - бесконечный цикл

        Результат = OPI_VKTeams.ПолучитьСобытия(Токен, IDПоследнего, 3);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытия", "VkTeams");
        OPI_ПолучениеДанныхТестов.Проверка_ВКТСобытия(Результат); // SKIP

        События = Результат["events"];

        // Обработка событий...

        Если Не События.Количество() = 0 Тогда

            IDПоследнего = События[События.ВГраница()]["eventId"];

        КонецЕсли;

    КонецЦикла;

    // END

    OPI_Инструменты.Пауза(3);

КонецПроцедуры

Процедура VKTeams_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];
    Текст  = "Текст сообщения";

    Результат = OPI_VKTeams.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];
    Текст         = "<b>Полужирный текст сообщения</b>";
    Разметка      = "HTML";

    Клавиатура         = Новый Массив;
    МассивСтрокиКнопок = Новый Массив;

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка1", "НажатиеКнопки1", , "attention"));

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка2", , "https://openintegrations.dev"));

    // BSLLS:DuplicatedInsertionIntoCollection-off // SKIP
    Клавиатура.Добавить(МассивСтрокиКнопок);
    Клавиатура.Добавить(МассивСтрокиКнопок);
    // BSLLS:DuplicatedInsertionIntoCollection-on // SKIP

    Результат = OPI_VKTeams.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст, IDЦитируемого, Клавиатура, Разметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    IDСообщения = Результат["msgId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_MessageID", IDСообщения);
    ПараметрыФункции.Вставить("VkTeams_MessageID", IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьСообщение(ПараметрыФункции)

    Токен           = ПараметрыФункции["VkTeams_Token"];
    IDЧата          = ПараметрыФункции["VkTeams_ChatID"];
    IDЧатаИсточника = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения     = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ПереслатьСообщение(Токен, IDСообщения, IDЧатаИсточника, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Текст = "Дополнительный текст";

    Результат = OPI_VKTeams.ПереслатьСообщение(Токен, IDСообщения, IDЧатаИсточника, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ОтправитьФайл(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];
    Текст  = "Подпись к файлу";

    Файл     = ПараметрыФункции["Document"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("docx");  // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, ФайлПуть, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, ФайлДД, Текст, "ВажныйДокумент.docx");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_FileID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьФайл(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла = ПараметрыФункции["VkTeams_FileID"];
    Текст   = "Подпись к файлу";

    Результат = OPI_VKTeams.ПереслатьФайл(Токен, IDЧата, IDФайла, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьФайл", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ПолучитьИнформациюОФайле(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDФайла = ПараметрыФункции["VkTeams_FileID"];

    Результат = OPI_VKTeams.ПолучитьИнформациюОФайле(Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТФайл(Результат);

КонецПроцедуры

Процедура VKTeams_ИзменитьТекстСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];
    Текст       = "Новый текст сообщения";

    Результат = OPI_VKTeams.ИзменитьТекстСообщения(Токен, IDЧата, IDСообщения, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТекстСообщения (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Текст    = "<b>Новый полужирный текст сообщения</b>";
    Разметка = "HTML";

    Результат = OPI_VKTeams.ИзменитьТекстСообщения(Токен, IDЧата, IDСообщения, Текст, Разметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТекстСообщения", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_УдалитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.УдалитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ОтправитьГолосовоеСообщение(ПараметрыФункции)

    Токен         = ПараметрыФункции["VkTeams_Token"];
    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];

    Файл     = ПараметрыФункции["Audio2"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("m4a");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, ФайлПуть, , IDЦитируемого);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, ФайлДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_VoiceID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_VoiceID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьГолосовоеСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла = ПараметрыФункции["VkTeams_VoiceID"];

    Результат = OPI_VKTeams.ПереслатьГолосовоеСообщение(Токен, IDЧата, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьГолосовоеСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ИсключитьПользователейЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ИсключитьПользователейЧата(Токен, IDЧата, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ИзменитьАватарЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Файл     = ПараметрыФункции["Picture3"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("png");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, ФайлПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, ФайлДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    УдалитьФайлы(ФайлПуть);

КонецПроцедуры

Процедура VKTeams_ПолучитьИнформациюОЧате(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьИнформациюОЧате(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОЧате", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЧат(Результат);

КонецПроцедуры

Процедура VKTeams_ПолучитьАдминистраторовЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьАдминистраторовЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьАдминистраторовЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "admins");

КонецПроцедуры

Процедура VKTeams_ПолучитьПользователейЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьПользователейЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "members");

КонецПроцедуры

Процедура VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьЗаблокированныхПользователейЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаблокированныхПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьЗапросыВступленияЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗапросыВступленияЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура VKTeams_ЗаблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ЗаблокироватьПользователяЧата(Токен, IDЧата, Пользователь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаблокироватьПользователяЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_РазблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.РазблокироватьПользователяЧата(Токен, IDЧата, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазблокироватьПользователяЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ЗакрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ЗакрепитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрепитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОткрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ОткрепитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрепитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ОдобритьЗаявкуНаВступление(Токен, IDЧата, Пользователь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОдобритьЗаявкуНаВступление (один)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат); // SKIP

    Результат = OPI_VKTeams.ОдобритьЗаявкуНаВступление(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОдобритьЗаявкуНаВступление", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ОтклонитьЗаявкуНаВступление(Токен, IDЧата, Пользователь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗаявкуНаВступление (один)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат); // SKIP

    Результат = OPI_VKTeams.ОтклонитьЗаявкуНаВступление(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗаявкуНаВступление", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьЗаголовокЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Новый заголовок";

    Результат = OPI_VKTeams.УстановитьЗаголовокЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗаголовокЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьОписаниеЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Новое описание";

    Результат = OPI_VKTeams.УстановитьОписаниеЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьОписаниеЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьПравилаЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Текст новых правил";

    Результат = OPI_VKTeams.УстановитьПравилаЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПравилаЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОтветитьНаСобытиеКлавиатуры(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDПоследнего = 0;

    Для Н = 1 По 5 Цикл

        Результат = OPI_VKTeams.ПолучитьСобытия(Токен, IDПоследнего, 3);
        События   = Результат["events"];

        Если Не События.Количество() = 0 Тогда

            Для Каждого Событие Из События Цикл

                ДанныеСобытия = Событие["payload"];

                Если ДанныеСобытия["callbackData"] = "НажатиеКнопки1" Тогда

                    IDСобытия = ДанныеСобытия["queryId"];
                    Результат = OPI_VKTeams.ОтветитьНаСобытиеКлавиатуры(Токен, IDСобытия, "Получено!");

                    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтветитьНаСобытиеКлавиатуры", "VkTeams");

                    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

                КонецЕсли;

            КонецЦикла;

            IDПоследнего = События[События.ВГраница()]["eventId"];

        КонецЕсли;

    КонецЦикла;

    // END

    OPI_Инструменты.Пауза(3);

КонецПроцедуры

Процедура VKTeams_СформироватьКнопкуДействия(ПараметрыФункции)

    Клавиатура         = Новый Массив;
    МассивСтрокиКнопок = Новый Массив;

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка1", "НажатиеКнопки1", , "attention"));

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка2", , "https://openintegrations.dev"));

    // BSLLS:DuplicatedInsertionIntoCollection-off // SKIP
    Клавиатура.Добавить(МассивСтрокиКнопок);
    Клавиатура.Добавить(МассивСтрокиКнопок);
    // BSLLS:DuplicatedInsertionIntoCollection-on // SKIP

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Клавиатура, "СформироватьКнопкуДействия", "VkTeams");

КонецПроцедуры

#КонецОбласти

#Область Ozon

Процедура Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьДеревоКатегорийИТиповТоваров(IDКлиента, КлючAPI, "EN");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДеревоКатегорийИТиповТоваров (EN)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат); // SKIP

    Результат = OPI_Ozon.ПолучитьДеревоКатегорийИТиповТоваров(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДеревоКатегорийИТиповТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьХарактеристикиКатегории(ПараметрыФункции)

    IDКлиента   = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI     = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории = 17029016;
    IDТипа      = 970778135;

    Результат = OPI_Ozon.ПолучитьХарактеристикиКатегории(IDКлиента, КлючAPI, IDКатегории, IDТипа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХарактеристикиКатегории", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокХарактеристик(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;

    Результат = OPI_Ozon.ПолучитьЗначенияХарактеристики(IDКлиента, КлючAPI, IDКатегории, IDТипа, IDХарактеристики);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияХарактеристики", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура Ozon_НайтиЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;
    Значение         = "Sunshine";

    Результат = OPI_Ozon.НайтиЗначенияХарактеристики(IDКлиента, КлючAPI, IDКатегории, IDТипа, IDХарактеристики,
        Значение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиЗначенияХарактеристики", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_СоздатьОбновитьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];
    Видео     = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    // Стандартные реквизиты

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210609");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1300");
    СтруктураТовара.Вставить("old_price"              , "1300");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");
    СтруктураТовара.Вставить("images"                 , МассивКартинок);
    СтруктураТовара.Вставить("type_id"                , 91565);

    // Видео

    OPI_Ozon.ДобавитьВидеоТовара(СтруктураТовара, Видео, "viedo1");

    // Атрибуты, индивидуальные для разных категорий

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050, "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576, "серый");
    АтрибутКатегории4 = Новый Структура("dictionary_value_id,value", 95911,
        "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    АтрибутКатегории5 = Новый Структура("value", "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 10096, 0, АтрибутКатегории3);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 8229 , 0, АтрибутКатегории4);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 9048 , 0, АтрибутКатегории5);

    Результат = OPI_Ozon.СоздатьОбновитьТовары(IDКлиента, КлючAPI, СтруктураТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОбновитьТовары", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадания = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_TaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_TaskID", IDЗадания);

    СтруктураТовара.Вставить("offer_id", "1432106010");
    OPI_Ozon.СоздатьОбновитьТовары(IDКлиента, КлючAPI, СтруктураТовара);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура Ozon_ДобавитьВидеоТовара(ПараметрыФункции)

    Видео = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видео

    OPI_Ozon.ДобавитьВидеоТовара(СтруктураТовара, Видео, "viedo1");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДобавитьВидеоТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ДобавитьВидеообложкуТовара(ПараметрыФункции)

    Видео = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видеообложка

    OPI_Ozon.ДобавитьВидеообложкуТовара(СтруктураТовара, Видео);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДобавитьВидеообложкуТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ДополнитьКомплексныйАтрибут(ПараметрыФункции)

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");

    АтрибутКатегории2 = Новый Структура("value", "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 5076, 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 9048, 0, АтрибутКатегории2);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДополнитьКомплексныйАтрибут", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи  = ПараметрыФункции["Ozon_TaskID"];

    Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара", "Ozon");

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура Ozon_СоздатьТоварыПоOzonID(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("name"         , "Новый импортированный товар");
    СтруктураТовара.Вставить("sku"          , 1626044001);
    СтруктураТовара.Вставить("offer_id"     , "91132");
    СтруктураТовара.Вставить("price"        , "1100");
    СтруктураТовара.Вставить("old_price"    , "1100");
    СтруктураТовара.Вставить("vat"          , "0.1");
    СтруктураТовара.Вставить("currency_code", "RUB");

    Результат = OPI_Ozon.СоздатьТоварыПоOzonID(IDКлиента, КлючAPI, СтруктураТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТоварыПоOzonID", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадачи = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_SkuTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_SkuTaskID", IDЗадачи);

    Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара (SKU)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСокращеннуюСтруктуруТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСокращеннуюСтруктуруТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруОбновленияХарактеристик();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруОбновленияХарактеристик", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьХарактеристикиТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураХаракетристик = Новый Структура("offer_id", "143210609");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050, "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576, "красный");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 10096, 0, АтрибутКатегории3);

    Результат = OPI_Ozon.ОбновитьХарактеристикиТоваров(IDКлиента, КлючAPI, СтруктураХаракетристик);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьХарактеристикиТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат, Ложь);

    IDЗадачи = Результат["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_AttUpdateTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_AttUpdateTaskID", IDЗадачи);

    Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьХарактеристикиТоваров (статус)", "Ozon");

    Если Результат["result"]["items"].Количество() > 0 Тогда

        Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

            OPI_Инструменты.Пауза(30);
            Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

        КонецЦикла;

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара (хар.)", "Ozon");
        OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

    КонецЕсли;

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруФильтраТоваров();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");
    МассивID.Добавить("1432106010");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility", "ALL");
    Фильтр.Вставить("offer_id"  , МассивID);

    Результат = OPI_Ozon.ПолучитьСписокТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбъектов(Результат);

    IDТовара = Результат["result"]["items"][0]["product_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_ProductID", IDТовара);
    ПараметрыФункции.Вставить("Ozon_ProductID", IDТовара);

    IDТовара = Результат["result"]["items"][1]["product_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_ProductID2", IDТовара);
    ПараметрыФункции.Вставить("Ozon_ProductID2", IDТовара);

КонецПроцедуры

Процедура Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility", "ALL");
    Фильтр.Вставить("offer_id"  , МассивID);

    Результат = OPI_Ozon.ПолучитьОписанияХарактеристикТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписанияХарактеристикТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Результат = OPI_Ozon.ПолучитьКонтентРейтингТоваров(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКонтентРейтингТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивРейтингов(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьИнформациюОТоварах(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Артикул   = "143210609";

    Результат = OPI_Ozon.ПолучитьИнформациюОТоварах(IDКлиента, КлючAPI, , , Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТоварах", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовары(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьОписаниеТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Артикул   = "143210609";

    Результат = OPI_Ozon.ПолучитьОписаниеТовара(IDКлиента, КлючAPI, , Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовар(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьЛимитыРаботыСТоварами(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛимитыРаботыСТоварами", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЛимиты(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьИзображенияТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];

    МаркетинговыйЦвет = "GREEN";

    МассивИзображений = Новый Массив;
    МассивИзображений.Добавить(Картинка1);
    МассивИзображений.Добавить(Картинка2);

    Результат = OPI_Ozon.ОбновитьИзображенияТовара(IDКлиента, КлючAPI, IDТовара, МассивИзображений, , МаркетинговыйЦвет);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьИзображенияТовара", "Ozon");

    // TODO: Вернуть проверку позже
    //OPI_ПолучениеДанныхТестов.Проверка_ОзонКартинки(Результат);

КонецПроцедуры

Процедура Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.ПроверитьЗагрузкуИзображенийТоваров(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьЗагрузкуИзображенийТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура Ozon_ИзменитьАртикулыТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210609", "143210612");

    Результат = OPI_Ozon.ИзменитьАртикулыТоваров(IDКлиента, КлючAPI, СоответствиеАртикулов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАртикулыТоваров", "Ozon");

    // TODO: Вернуть проверку позже
    // OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210612", "143210609");

    Результат = OPI_Ozon.ИзменитьАртикулыТоваров(IDКлиента, КлючAPI, СоответствиеАртикулов);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАртикулыТоваров (обратный)", "Ozon");

    // TODO: Вернуть проверку позже
    // OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура Ozon_АрхивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьТовары", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

    IDТовара = ПараметрыФункции["Ozon_ProductID2"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьТовары (2)", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура Ozon_РазархивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.РазархивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазархивироватьТовары", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура Ozon_УдалитьТоварыБезSKU(ПараметрыФункции)

    OPI_Инструменты.Пауза(30);

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьТовары (для удаления)", "Ozon");  // SKIP
    OPI_Инструменты.Пауза(15);                                                                      // SKIP

    Артикул = "143210609";

    Результат = OPI_Ozon.УдалитьТоварыБезSKU(IDКлиента, КлючAPI, Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТоварыБезSKU", "Ozon");

    Артикул = "1432106010";

    Результат = OPI_Ozon.УдалитьТоварыБезSKU(IDКлиента, КлючAPI, Артикул);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТоварыБезSKU (2)", "Ozon");

КонецПроцедуры

Процедура Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Коды = Новый Массив;
    Коды.Добавить("11111111");
    Коды.Добавить("22222222");

    Результат = OPI_Ozon.ЗагрузитьКодыАктивацииТовара(IDКлиента, КлючAPI, IDТовара, Коды);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьКодыАктивацииТовара", "Ozon");

    // OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    // IDЗадания = Результат["result"]["task_id"];

    IDЗадания = 1;
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_CodesTaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_CodesTaskID", IDЗадания);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи  = ПараметрыФункции["Ozon_CodesTaskID"];

    Результат = OPI_Ozon.ПолучитьСтатусДобавленияКодов(IDКлиента, КлючAPI, IDЗадачи);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияКодов", "Ozon");

    Если ЗначениеЗаполнено(Результат["result"]) Тогда
        Пока Результат["result"]["status"] = "pending" Цикл

            OPI_Инструменты.Пауза(30);
            Результат = OPI_Ozon.ПолучитьСтатусДобавленияКодов(IDКлиента, КлючAPI, IDЗадачи);

        КонецЦикла;
    КонецЕсли;

    //OPI_ПолучениеДанныхТестов.Проверка_ОзонДобавлениеКодов(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Результат = OPI_Ozon.ПолучитьКоличествоПодписчиковТоваров(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКоличествоПодписчиковТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонПодписчики(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСвязанныеSKU(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Результат = OPI_Ozon.ПолучитьСвязанныеSKU(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСвязанныеSKU", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонSKU(Результат);

КонецПроцедуры

Процедура Ozon_ПривязатьШтрихкоды(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеШтрихкодов = Новый Соответствие;
    СоответствиеШтрихкодов.Вставить(1626044001, "112233");

    Результат = OPI_Ozon.ПривязатьШтрихкоды(IDКлиента, КлючAPI, СоответствиеШтрихкодов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПривязатьШтрихкоды", "Ozon");

КонецПроцедуры

Процедура Ozon_СоздатьШтрихкоды(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.СоздатьШтрихкоды(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьШтрихкоды", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокСкладов(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьСписокСкладов(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСкладов", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210608");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility", "ALL");
    Фильтр.Вставить("offer_id"  , МассивID);

    Результат = OPI_Ozon.ПолучитьКоличествоТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКоличествоТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьЦеныТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Цены = Новый Структура;
    Цены.Вставить("auto_action_enabled"   , "DISABLED");
    Цены.Вставить("currency_code"         , "RUB");
    Цены.Вставить("min_price"             , "1300");
    Цены.Вставить("offer_id"              , "143210610");
    Цены.Вставить("old_price"             , "1400");
    Цены.Вставить("price"                 , "1300");
    Цены.Вставить("price_strategy_enabled", "DISABLED");
    Цены.Вставить("product_id"            , IDТовара);

    Результат = OPI_Ozon.ОбновитьЦеныТоваров(IDКлиента, КлючAPI, Цены);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЦеныТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбновлено(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Остатки = Новый Структура;
    Остатки.Вставить("offer_id"    , "143210610");
    Остатки.Вставить("product_id"  , IDТовара);
    Остатки.Вставить("stock"       , 20);
    Остатки.Вставить("warehouse_id", 1);

    Результат = OPI_Ozon.ОбновитьКоличествоТоваров(IDКлиента, КлючAPI, Остатки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьКоличествоТоваров", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьЦеныТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьЦеныТоваров(IDКлиента, КлючAPI, Новый Структура);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЦеныТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьИнформациюОбУценке(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Результат = OPI_Ozon.ПолучитьИнформациюОбУценке(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбУценке", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат, "items");

КонецПроцедуры

Процедура Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = 1156646653;

    Скидка = 10;

    Результат = OPI_Ozon.УстановитьСкидкуНаУцененныйТовар(IDКлиента, КлючAPI, IDТовара, Скидка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСкидкуНаУцененныйТовар", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьСписокАкций(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьСписокАкций(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокАкций", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции   = 111111111;

    Результат = OPI_Ozon.ПолучитьДоступныеТоварыАкции(IDКлиента, КлючAPI, IDАкции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоступныеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции   = 111111111;

    Результат = OPI_Ozon.ПолучитьУчаствующиеТоварыАкции(IDКлиента, КлючAPI, IDАкции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьУчаствующиеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруОстатковТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруОстатковТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруЦеныТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЦеныТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокКластеров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьСписокКластеров(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКластеров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонКластеры(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокСкладовОтгрузки(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Поиск     = "ТВЕРЬ";

    Результат = OPI_Ozon.ПолучитьСписокСкладовОтгрузки(IDКлиента, КлючAPI, Поиск);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСкладовОтгрузки", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонПоиск(Результат);

КонецПроцедуры

Процедура Ozon_СоздатьЧерновикЗаявкиFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Кластер   = 2;

    Позиции = Новый Соответствие;
    Позиции.Вставить("1783161863", 5);
    Позиции.Вставить("1784654052", 2);

    Результат = OPI_Ozon.СоздатьЧерновикЗаявкиFBO(IDКлиента, КлючAPI, Кластер, Позиции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЧерновикЗаявкиFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЧерновик(Результат);

    IDЧерновика = Результат["operation_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_FBOOperID", IDЧерновика);
    ПараметрыФункции.Вставить("Ozon_FBOOperID", IDЧерновика);

КонецПроцедуры

Процедура Ozon_ПолучитьЧерновикЗаявкиFBO(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    IDОперации = ПараметрыФункции["Ozon_FBOOperID"];

    Статус = "CALCULATION_STATUS_IN_PROGRESS";

    Пока Статус = "CALCULATION_STATUS_IN_PROGRESS" Цикл

        Результат = OPI_Ozon.ПолучитьЧерновикЗаявкиFBO(IDКлиента, КлючAPI, IDОперации);
        Статус    = Результат["status"];

        OPI_Инструменты.Пауза(20);

    КонецЦикла;

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧерновикЗаявкиFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонГотовыйЧерновик(Результат);

    IDЧерновика = Результат["draft_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_Draft", IDЧерновика);
    ПараметрыФункции.Вставить("Ozon_Draft", IDЧерновика);

    IDСклада = Результат["clusters"][0]["warehouses"][0]["supply_warehouse"]["warehouse_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_FBOWarehouse", IDСклада);
    ПараметрыФункции.Вставить("Ozon_FBOWarehouse", IDСклада);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруДопПолейОтправления(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруДопПолейОтправления();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруДопПолейОтправления", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруФильтраОтправлений(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруФильтраОтправлений();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраОтправлений", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокОтправленийFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    ДопПоля = Новый Структура;
    ДопПоля.Вставить("analytics_data", Истина);
    ДопПоля.Вставить("financial_data", Истина);

    Фильтр = Новый Структура;
    Фильтр.Вставить("since", XMLСтрока('20230101') + "Z");
    Фильтр.Вставить("to"   , XMLСтрока('20240101') + "Z");

    Результат = OPI_Ozon.ПолучитьСписокОтправленийFBO(IDКлиента, КлючAPI, Фильтр, ДопПоля);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОтправленийFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьТаймслотыFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Сутки     = 86400;

    ДатаОт   = OPI_Инструменты.ПолучитьТекущуюДату();
    ДатаПо   = ДатаОт + Сутки;
    Черновик = ПараметрыФункции["Ozon_Draft"];
    Склад    = ПараметрыФункции["Ozon_FBOWarehouse"];

    Результат = OPI_Ozon.ПолучитьТаймслотыFBO(IDКлиента, КлючAPI, ДатаОт, ДатаПо, Черновик, Склад);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТаймслотыFBO", "Ozon");
    //OPI_ПолучениеДанныхТестов.Проверка_ОзонТаймслоты(Результат);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура Neocities_ЗагрузитьФайл(ПараметрыФункции)

    Токен  = ПараметрыФункции["NC_Token"];
    Данные = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Путь   = "testfolder/test_pic.png";

    Результат = OPI_Neocities.ЗагрузитьФайл(Токен, Путь, Данные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ЗагрузитьФайлы(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные
    Гифка     = ПараметрыФункции["Gif"];      // URL, Путь или Двоичные данные

    СоответствиеФайлов = Новый Соответствие;
    СоответствиеФайлов.Вставить("test/pic1.png", Картинка1);
    СоответствиеФайлов.Вставить("test/gif.gif" , Картинка2);
    СоответствиеФайлов.Вставить("pic2.png"     , Гифка);

    Результат = OPI_Neocities.ЗагрузитьФайлы(Токен, СоответствиеФайлов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_УдалитьВыбранныеФайлы(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    Пути = Новый Массив;
    Пути.Добавить("/test/pic1.png");
    Пути.Добавить("/test/gif.gif");
    Пути.Добавить("/pic2.png");

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, Пути);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/testfolder");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы (каталог 1)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/test");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы (каталог 2)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Путь  = "test";

    Результат = OPI_Neocities.ПолучитьСписокФайлов(Токен, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "Neocities"); // SKIP

    OPI_ПолучениеДанныхТестов.Проверка_НСФайлыКаталога(Результат, 2); // SKIP

    Результат = OPI_Neocities.ПолучитьСписокФайлов(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов (Все)");

    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьДанныеОСайте(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Сайт  = "2athenaeum";

    Результат = OPI_Neocities.ПолучитьДанныеОСайте(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеОСайте", "Neocities"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат); // SKIP

    Результат = OPI_Neocities.ПолучитьДанныеОСайте(Токен, Сайт);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеОСайте (Сайт)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьТокен(ПараметрыФункции)

    Логин  = ПараметрыФункции["NC_Login"];
    Пароль = ПараметрыФункции["NC_Password"];

    Результат = OPI_Neocities.ПолучитьТокен(Логин, Пароль);

    // END

    Результат["api_key"] = "***";

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_СинхронизироватьКаталоги(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    ЛокальныйКаталог = "C:\test_site";
    УдаленныйКаталог = "test_sync";

    Результат = OPI_Neocities.СинхронизироватьКаталоги(Токен, ЛокальныйКаталог, УдаленныйКаталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СинхронизироватьКаталоги", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НССинхронизация(Результат);

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура CDEK_ПолучитьТокен(ПараметрыФункции)

    Аккаунт = ПараметрыФункции["CDEK_Account"];
    Пароль  = ПараметрыФункции["CDEK_Password"];

    Результат = OPI_CDEK.ПолучитьТокен(Аккаунт, Пароль, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкТокен(Результат);

    Токен = Результат["access_token"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_Token", Токен);
    OPI_Инструменты.ДобавитьПоле("CDEK_Token", Токен, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеЗаказа(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеЗаказа();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеЗаказа(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    ОписаниеЗаказа = Новый Структура;

    ЛокацияОтправления = Новый Структура;
    ЛокацияОтправления.Вставить("code"   , "44");
    ЛокацияОтправления.Вставить("city"   , "Москва");
    ЛокацияОтправления.Вставить("address", "пр. Ленинградский, д.4");

    ЛокацияНазначения = Новый Структура;
    ЛокацияНазначения.Вставить("code"   , "270");
    ЛокацияНазначения.Вставить("city"   , "Новосибирск");
    ЛокацияНазначения.Вставить("address", "ул. Блюхера, 32");

    Получатель = Новый Структура;

    Телефоны = Новый Массив;
    Телефоны.Добавить(Новый Структура("number", "+79134637228"));

    Получатель.Вставить("phones", Телефоны);
    Получатель.Вставить("name"  , "Иванов Иван");

    Отправитель = Новый Структура("name", "Петров Петр");

    Услуги = Новый Массив;

    Услуга = Новый Структура;
    Услуга.Вставить("code"     , "SECURE_PACKAGE_A2");
    Услуга.Вставить("parameter", 10);

    Услуги.Добавить(Услуга);

    Пакеты = Новый Массив;

    Пакет = Новый Структура;

    Позиции = Новый Массив;

    Позиция = Новый Структура;

    Оплата = Новый Структура;
    Оплата.Вставить("value", 3000);

    Позиция.Вставить("payment" , Оплата);
    Позиция.Вставить("ware_key", "00055");
    Позиция.Вставить("name"    , "Товар");
    Позиция.Вставить("cost"    , 300);
    Позиция.Вставить("amount"  , 2);
    Позиция.Вставить("weight"  , 700);
    Позиция.Вставить("url"     , "www.item.ru");

    Позиции.Добавить(Позиция);

    Пакет.Вставить("items"  , Позиции);
    Пакет.Вставить("number" , "bar-001");
    Пакет.Вставить("comment", "Упаковка");
    Пакет.Вставить("height" , 10);
    Пакет.Вставить("length" , 10);
    Пакет.Вставить("weight" , "4000");
    Пакет.Вставить("width"  , 10);

    Пакеты.Добавить(Пакет);

    ОписаниеЗаказа.Вставить("from_location", ЛокацияОтправления);
    ОписаниеЗаказа.Вставить("to_location"  , ЛокацияНазначения);
    ОписаниеЗаказа.Вставить("packages"     , Пакеты);
    ОписаниеЗаказа.Вставить("recipient"    , Получатель);
    ОписаниеЗаказа.Вставить("sender"       , Отправитель);
    ОписаниеЗаказа.Вставить("services"     , Услуги);

    ОписаниеЗаказа.Вставить("number"     , Строка(Новый УникальныйИдентификатор));
    ОписаниеЗаказа.Вставить("comment"    , "Новый заказ");
    ОписаниеЗаказа.Вставить("tariff_code", 139);

    ОписаниеЗаказа.Вставить("delivery_recipient_cost"    , Новый Структура("value"        , 50));
    ОписаниеЗаказа.Вставить("delivery_recipient_cost_adv", Новый Структура("sum,threshold", 3000, 200));

    Результат = OPI_CDEK.СоздатьЗаказ(Токен, ОписаниеЗаказа, Истина, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьЗаказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

    ВнутреннийНомер = Результат["entity"]["number"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderIMN", ВнутреннийНомер);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderIMN", ВнутреннийНомер, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаказПоНомеру(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    НомерЗаказа = ПараметрыФункции["CDEK_OrderIMN"];
    Результат   = OPI_CDEK.ПолучитьЗаказПоНомеру(Токен, НомерЗаказа, Истина, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаказПоНомеру", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

КонецПроцедуры

Процедура CDEK_ИзменитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    ОписаниеЗаказа = Новый Структура("comment", "Новый комментарий");

    Результат = OPI_CDEK.ИзменитьЗаказ(Токен, UUID, ОписаниеЗаказа, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_УдалитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.УдалитьЗаказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ОформитьКлиентскийВозврат(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тариф = 139;

    Результат = OPI_CDEK.ОформитьКлиентскийВозврат(Токен, UUID, Тариф, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОформитьКлиентскийВозврат", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьОтказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.СоздатьОтказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОтказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеЗаявкиКурьера();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаявкиКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеЗаявкиКурьера(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен       = ПараметрыФункции["CDEK_Token"];
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    ОписаниеЗаявки = Новый Структура;
    ОписаниеЗаявки.Вставить("intake_date"     , Формат(ТекущаяДата + 60 * 60 * 24, "ДФ=yyyy-MM-dd"));
    ОписаниеЗаявки.Вставить("intake_time_from", "10:00");
    ОписаниеЗаявки.Вставить("intake_time_to"  , "17:00");
    ОписаниеЗаявки.Вставить("name"            , "Консолидированный груз");
    ОписаниеЗаявки.Вставить("weight"          , 1000);
    ОписаниеЗаявки.Вставить("length"          , 10);
    ОписаниеЗаявки.Вставить("width"           , 10);
    ОписаниеЗаявки.Вставить("height"          , 10);
    ОписаниеЗаявки.Вставить("comment"         , "Комментарий курьеру");
    ОписаниеЗаявки.Вставить("need_call"       , Ложь);

    Отправитель = Новый Структура;
    Отправитель.Вставить("company", "Компания");
    Отправитель.Вставить("name"   , "Иванов Иван");

    Телефоны = Новый Массив;
    Телефон  = Новый Структура("number", "+79589441654");
    Телефоны.Добавить(Телефон);

    Отправитель.Вставить("phones", Телефоны);

    ОписаниеЗаявки.Вставить("sender", Отправитель);

    ТочкаОтправления = Новый Структура;
    ТочкаОтправления.Вставить("code"        , "44");
    ТочкаОтправления.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
    ТочкаОтправления.Вставить("postal_code" , "109004");
    ТочкаОтправления.Вставить("longitude"   , 37.6204);
    ТочкаОтправления.Вставить("latitude"    , 55.754);
    ТочкаОтправления.Вставить("country_code", "RU");
    ТочкаОтправления.Вставить("region"      , "Москва");
    ТочкаОтправления.Вставить("sub_region"  , "Москва");
    ТочкаОтправления.Вставить("city"        , "Москва");
    ТочкаОтправления.Вставить("kladr_code"  , "7700000000000");
    ТочкаОтправления.Вставить("address"     , "ул. Блюхера, 32");

    ОписаниеЗаявки.Вставить("from_location", ТочкаОтправления);

    Результат = OPI_CDEK.СоздатьЗаявкуНаВызовКурьера(Токен, ОписаниеЗаявки, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_IntakeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_IntakeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Результат = OPI_CDEK.ПолучитьЗаявкуНаВызовКурьера(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Результат = OPI_CDEK.УдалитьЗаявкуНаВызовКурьера(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаявкуНаВызовКурьера", "CDEK");
    //OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_СформироватьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тип   = "tpl_russia";
    Копий = 1;

    Результат = OPI_CDEK.СформироватьКвитанцию(Токен, UUID, Тип, Копий, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКвитанцию", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrintUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrintUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrintUUID"];

    Результат = OPI_CDEK.ПолучитьКвитанцию(Токен, UUID, , Истина); // Ответ сервера с ссылкой

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКвитанцию", "CDEK"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);                   // SKIP

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Результат = OPI_CDEK.ПолучитьКвитанцию(Токен, UUID, Истина, Истина); // PDF
    Результат.Записать(ИВФ);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКвитанцию (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CDEK_СформироватьШтрихкод(ПараметрыФункции)

    Токен  = ПараметрыФункции["CDEK_Token"];
    UUID   = ПараметрыФункции["CDEK_OrderUUID"];
    Формат = "A5";
    Копий  = 1;

    Результат = OPI_CDEK.СформироватьШтрихкод(Токен, UUID, Копий, Формат, , Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьШтрихкод", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_BarcodeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_BarcodeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьШтрихкод(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_BarcodeUUID"];

    Результат = OPI_CDEK.ПолучитьШтрихкод(Токен, UUID, , Истина); // Ответ сервера с ссылкой

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШтрихкод", "CDEK"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);                  // SKIP

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Результат = OPI_CDEK.ПолучитьШтрихкод(Токен, UUID, Истина, Истина); // PDF
    Результат.Записать(ИВФ);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШтрихкод (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьДоступныеИнтервалыДоставки(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоступныеИнтервалыДоставки", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкИнтервалыДоставки(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеДоговоренности(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеДоговоренности();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеДоговоренности", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеДоговоренности(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеДоговоренности (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыФункции)

    Токен      = ПараметрыФункции["CDEK_Token"];
    UUIDЗаказа = ПараметрыФункции["CDEK_OrderUUID"];

    Сутки        = 60 * 60 * 24;
    ТекущаяДата  = НачалоДня(OPI_Инструменты.ПолучитьТекущуюДату());
    ДатаДоставки = ТекущаяДата + Сутки * 14;

    Пока ДеньНедели(ДатаДоставки) > 5 Цикл
        ДатаДоставки = ДатаДоставки + Сутки;
    КонецЦикла;

    Договоренность = Новый Структура;

    Договоренность.Вставить("cdek_number", "1106207236");
    Договоренность.Вставить("order_uuid" , UUIDЗаказа);
    Договоренность.Вставить("date"       , Формат(ДатаДоставки, "ДФ=yyyy-MM-dd"));
    Договоренность.Вставить("time_from"  , "10:00");
    Договоренность.Вставить("time_to"    , "17:00");
    Договоренность.Вставить("comment"    , "Офис группы компаний");

    МестоДоставки = Новый Структура;
    МестоДоставки.Вставить("code"        , "270");
    МестоДоставки.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
    МестоДоставки.Вставить("postal_code" , "109004");
    МестоДоставки.Вставить("longitude"   , 37.6204);
    МестоДоставки.Вставить("latitude"    , 55.754);
    МестоДоставки.Вставить("country_code", "RU");
    МестоДоставки.Вставить("region"      , "Новосибирск");
    МестоДоставки.Вставить("sub_region"  , "Новосибирск");
    МестоДоставки.Вставить("city"        , "Новосибирск");
    МестоДоставки.Вставить("kladr_code"  , "7700000000000");
    МестоДоставки.Вставить("address"     , "ул. Блюхера, 33");

    Договоренность.Вставить("to_location", МестоДоставки);

    Результат = OPI_CDEK.ЗафиксироватьДоговоренностьОДоставке(Токен, Договоренность, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗафиксироватьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_ApptUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_ApptUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_ApptUUID"];

    Результат = OPI_CDEK.ПолучитьДоговоренностьОДоставке(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьПреалерт(ПараметрыФункции)

    Токен        = ПараметрыФункции["CDEK_Token"];
    UUID         = ПараметрыФункции["CDEK_OrderUUID"];
    ПВЗ          = "NSK27";
    ДатаПередачи = OPI_Инструменты.ПолучитьТекущуюДату() + 60 * 60 * 24;

    Результат = OPI_CDEK.СоздатьПреалерт(Токен, UUID, ДатаПередачи, ПВЗ, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrealertUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrealertUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьПреалерт(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrealertUUID"];

    Результат = OPI_CDEK.ПолучитьПреалерт(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьСтатусПаспортныхДанных(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПаспортныхДанных", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкПаспорт(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьЧекЗаказа(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьЧекЗаказа(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧекЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьЧекиНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьЧекиНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧекиНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьРеестрыПлатежейНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьРеестрыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьПереводыПлатежейНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПереводыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеФильтраОфисов();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФильтраОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеФильтраОфисов(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФильтраОфисов (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьСписокОфисов(ПараметрыФункции)

    Токен  = ПараметрыФункции["CDEK_Token"];
    Фильтр = Новый Структура;
    Фильтр.Вставить("weight_max" , 50);
    Фильтр.Вставить("city_code"  , 270);
    Фильтр.Вставить("allowed_cod", Истина);

    Результат = OPI_CDEK.ПолучитьСписокОфисов(Токен, Фильтр, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьСписокРегионов(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    Результат = OPI_CDEK.ПолучитьСписокРегионов(Токен, , , , Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРегионов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура YandexMetrika_ПолучитьСписокМеток(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    Результат = OPI_YandexMetrika.ПолучитьСписокМеток(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокМеток", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетки(Результат);

КонецПроцедуры

Процедура YandexMetrika_СоздатьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    Наименование = "Новая метка";

    Результат = OPI_YandexMetrika.СоздатьМетку(Токен, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);

    IDМетки = Результат["label"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_LabelID", IDМетки);
    OPI_Инструменты.ДобавитьПоле("Metrika_LabelID", IDМетки, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура YandexMetrika_УдалитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Результат = OPI_YandexMetrika.УдалитьМетку(Токен, IDМетки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ИзменитьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    IDМетки      = ПараметрыФункции["Metrika_LabelID"];
    Наименование = "Новое имя метки";

    Результат = OPI_YandexMetrika.ИзменитьМетку(Токен, IDМетки, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Результат = OPI_YandexMetrika.ПолучитьМетку(Токен, IDМетки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыФункции)

    Результат = OPI_YandexMetrika.ПолучитьСтруктуруСчетчика();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСчетчика", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура YandexMetrika_СоздатьСчетчик(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

    СтруктураНастроекКода = Новый Структура;
    СтруктураНастроекКода.Вставить("async"          , 0);
    СтруктураНастроекКода.Вставить("clickmap"       , 1);
    СтруктураНастроекКода.Вставить("ecommerce"      , 1);
    СтруктураНастроекКода.Вставить("in_one_line"    , 0);
    СтруктураНастроекКода.Вставить("track_hash"     , 1);
    СтруктураНастроекКода.Вставить("visor"          , 1);
    СтруктураНастроекКода.Вставить("xml_site"       , 0);
    СтруктураНастроекКода.Вставить("ytm"            , 0);
    СтруктураНастроекКода.Вставить("alternative_cdn", 1);

    СтруктураИнформера = Новый Структура;
    СтруктураИнформера.Вставить("color_arrow", 1);
    СтруктураИнформера.Вставить("color_end"  , "EFEFEFFE");
    СтруктураИнформера.Вставить("color_start", "EEEEEEEE");
    СтруктураИнформера.Вставить("color_text" , 0);
    СтруктураИнформера.Вставить("enabled"    , 1);
    СтруктураИнформера.Вставить("indicator"  , "uniques");
    СтруктураИнформера.Вставить("size"       , 2);
    СтруктураИнформера.Вставить("type"       , "ext");

    СтруктураНастроекКода.Вставить("informer", СтруктураИнформера);

    СтруктураСчетчика.Вставить("code_options", СтруктураНастроекКода);

    СтруктураФлагов = Новый Структура;
    СтруктураФлагов.Вставить("collect_first_party_data"             , Истина);
    СтруктураФлагов.Вставить("measurement_enabled"                  , Истина);
    СтруктураФлагов.Вставить("use_in_benchmarks"                    , Истина);
    СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Истина);

    СтруктураСчетчика.Вставить("counter_flags"          , СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"               , 1);
    СтруктураСчетчика.Вставить("filter_robots"          , 2);
    СтруктураСчетчика.Вставить("gdpr_agreement_accepted", 1);

    СтруктураДомена = Новый Структура("site", "openintegrations.dev");

    СтруктураСчетчика.Вставить("site2", СтруктураДомена);

    Результат = OPI_YandexMetrika.СоздатьСчетчик(Токен, СтруктураСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

    IDСчетчика = Результат["counter"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_CounterID", IDСчетчика);
    OPI_Инструменты.ДобавитьПоле("Metrika_CounterID", IDСчетчика, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура YandexMetrika_УдалитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.УдалитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ИзменитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

    СтруктураФлагов = Новый Структура;
    СтруктураФлагов.Вставить("collect_first_party_data"             , Ложь);
    СтруктураФлагов.Вставить("measurement_enabled"                  , Ложь);
    СтруктураФлагов.Вставить("use_in_benchmarks"                    , Ложь);
    СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Ложь);

    СтруктураСчетчика.Вставить("counter_flags", СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"     , 0);
    СтруктураСчетчика.Вставить("filter_robots", 1);

    Результат = OPI_YandexMetrika.ИзменитьСчетчик(Токен, IDСчетчика, СтруктураСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ПолучитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура YandexMetrika_ВосстановитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ВосстановитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ПолучитьСписокСчетчиков(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСчетчиков", "YandexMetrika"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);                                // SKIP

    // Фильтр по списку ID

    Фильтр = Новый Структура;

    МассивСчетчиков = Новый Массив;
    МассивСчетчиков.Добавить(IDСчетчика);

    Фильтр.Вставить("counter_ids", МассивСчетчиков);

    Результат = OPI_YandexMetrika.ПолучитьСписокСчетчиков(Токен, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСчетчиков (фильтр)", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСписокОпераций(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ПолучитьСписокОпераций(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОпераций", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаОперации(Результат);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура S3_ПолучитьСтруктуруДанных(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Результат = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // END

    Результат["SecretKey"] = "***";
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруДанных", "S3");

КонецПроцедуры

Процедура S3_ОтправитьЗапросБезТела(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"] + "/opi-newbucket2";
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Метод          = "GET";

    Результат = OPI_S3.ОтправитьЗапросБезТела(Метод, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЗапросБезТела");
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "ОтправитьЗапросБезТела", "S3", Истина);

КонецПроцедуры

Процедура S3_ОтправитьЗапросСТелом(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Метод = "PUT";
    Тело  = "C:\test_data\document.docx";  // URL, Путь или Двоичные данные

    Результат = OPI_S3.ОтправитьЗапросСТелом(Метод, ОсновныеДанные, Тело);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЗапросСТелом");
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "ОтправитьЗапросСТелом", "S3", Истина);

КонецПроцедуры

Процедура S3_СоздатьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Результат = OPI_S3.УдалитьБакет(Наименование, ОсновныеДанные, Истина);              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет (Удаление, DB)", "S3"); // SKIP

    Результат = OPI_S3.СоздатьБакет(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                       // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Результат = OPI_S3.УдалитьБакет(Наименование, ОсновныеДанные);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет (Удаление)", "S3");

    Результат = OPI_S3.СоздатьБакет(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УдалитьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.УдалитьБакет(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБакет (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                       // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.УдалитьБакет(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьСписокБакетов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Результат      = OPI_S3.ПолучитьСписокБакетов(ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокБакетов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПроверитьДоступностьБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Наименование   = "opi-dirbucket3";

    Результат = OPI_S3.ПроверитьДоступностьБакета(Наименование, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступностьБакета", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                // SKIP

    Результат = OPI_S3.ПроверитьДоступностьБакета(Наименование, ОсновныеДанные, , "1234");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступностьБакета (аккаунт)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Наименование   = "opi-newbucket2";

    Результат = OPI_S3.ПолучитьШифрованиеБакета(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "ПолучитьШифрованиеБакета", "S3", Истина);

КонецПроцедуры

Процедура S3_УдалитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Наименование   = "opi-newbucket2";

    Результат = OPI_S3.УдалитьШифрованиеБакета(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УстановитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Наименование   = "opi-newbucket2";
    XMLКонфигурация = "<ServerSideEncryptionConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/"">
                      |    <Rule>
                      |        <ApplyServerSideEncryptionByDefault>
                      |            <SSEAlgorithm>AES256</SSEAlgorithm>
                      |        </ApplyServerSideEncryptionByDefault>
                      |    </Rule>
                      |</ServerSideEncryptionConfiguration>";

    Результат = OPI_S3.УстановитьШифрованиеБакета(Наименование, ОсновныеДанные, XMLКонфигурация);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3НеПоддерживается(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "УстановитьШифрованиеБакета", "S3", Истина);

КонецПроцедуры

Процедура S3_ПолучитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.ПолучитьТегиБакета(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТегиБакета (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                       // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.ПолучитьТегиБакета(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УстановитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    СтруктураТегов = Новый Структура;

    СтруктураТегов.Вставить("MyTag1", "SomeValue");
    СтруктураТегов.Вставить("MyTag2", "AnotherOne");

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.УстановитьТегиБакета(Наименование, ОсновныеДанные, СтруктураТегов, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТегиБакета (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                               // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.УстановитьТегиБакета(Наименование, ОсновныеДанные, СтруктураТегов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УдалитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.УдалитьТегиБакета(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТегиБакета (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                            // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.УдалитьТегиБакета(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    Результат = OPI_S3.ПолучитьТегиБакета(Наименование, ОсновныеДанные, Ложь);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТегиБакета (получение)", "S3");

КонецПроцедуры

Процедура S3_ПолучитьНастройкийВерсионированияБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.ПолучитьНастройкийВерсионированияБакета(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкийВерсионированияБакета (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                                  // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.ПолучитьНастройкийВерсионированияБакета(Наименование, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкийВерсионированияБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УстановитьНастройкиВерсионированияБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Статус         = Истина;

    // Directory bucket

    Наименование = "opi-dirbucket3";
    Результат    = OPI_S3.УстановитьНастройкиВерсионированияБакета(Наименование, ОсновныеДанные, Статус, , Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьНастройкиВерсионированияБакета (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                                   // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";
    Результат    = OPI_S3.УстановитьНастройкиВерсионированияБакета(Наименование, ОсновныеДанные, Статус);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьНастройкиВерсионированияБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ЗагрузитьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_S3.ЗагрузитьОбъект(Наименование, Бакет, Содержимое, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьОбъект", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                     // SKIP

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные

    ОсновныеДанные.Вставить("ChunkSize", 5242880);

    Результат = OPI_S3.ЗагрузитьОбъект(Наименование, Бакет, Содержимое, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьОбъект (частями)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

    Бакет     = "opi-dirbucket3";
    Результат = OPI_S3.ЗагрузитьОбъект(Наименование, Бакет, Содержимое, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьОбъект (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура S3_ЗагрузитьОбъектЦеликом(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "pictureSmall.jpg";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_S3.ЗагрузитьОбъектЦеликом(Наименование, Бакет, Содержимое, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьОбъектЦеликом", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура S3_УдалитьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьОписаниеОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.ПолучитьОписаниеОбъекта(Наименование, Бакет, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_КопироватьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    ПутьИсточник  = "picture.jpg";
    БакетИсточник = "opi-gpbucket3";

    ПутьПриемник  = "new_picture.jpg";
    БакетПриемник = "opi-dirbucket3";

    Результат = OPI_S3.КопироватьОбъект(ПутьИсточник, БакетИсточник, ПутьПриемник, БакетПриемник, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(ПутьПриемник, БакетПриемник, ОсновныеДанные);

КонецПроцедуры

Процедура S3_УстановитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    СтруктураТегов = Новый Структура;

    СтруктураТегов.Вставить("MyTag1", "SomeValue");
    СтруктураТегов.Вставить("MyTag2", "AnotherOne");

    Результат = OPI_S3.УстановитьТегиОбъекта(Наименование, Бакет, ОсновныеДанные, СтруктураТегов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.ПолучитьТегиОбъекта(Наименование, Бакет, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УдалитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.УдалитьТегиОбъекта(Наименование, Бакет, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьСписокОбъектов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Бакет     = "opi-gpbucket3";
    Результат = OPI_S3.ПолучитьСписокОбъектов(Бакет, ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОбъектов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьСписокВерсийОбъектов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Бакет     = "opi-gpbucket3";
    Префикс   = "pic";
    Результат = OPI_S3.ПолучитьСписокВерсийОбъектов(Бакет, ОсновныеДанные, Префикс);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВерсийОбъектов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьОбъект(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];          // SKIP
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // SKIP
    НеобходимыйРазмер = Картинка.Размер();                    // SKIP

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.ПолучитьОбъект(Наименование, Бакет, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект", "S3");        // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, НеобходимыйРазмер); // SKIP

    ВременныйФайл = ПолучитьИмяВременногоФайла();
    ОсновныеДанные.Вставить("ChunkSize", 200000);

    Результат = OPI_S3.ПолучитьОбъект(Наименование, Бакет, ОсновныеДанные, , , ВременныйФайл);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект (файл)", "S3");
    ФайлРез                                               = Новый Файл(Результат);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлРез.Размер() = НеобходимыйРазмер);
    УдалитьФайлы(ВременныйФайл);

    Наименование = "bigfile.exe";
    Бакет        = "newbucket2";

    ВременныйФайлБольшой = ПолучитьИмяВременногоФайла();
    Результат            = OPI_S3.ПолучитьОбъект(Наименование, Бакет, ОсновныеДанные, , , ВременныйФайлБольшой);
    ФайлРез              = Новый Файл(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект (большой, файл)", "S3");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлРез.Размер() = 34432400);
    УдалитьФайлы(ВременныйФайлБольшой);

    Результат = OPI_S3.ПолучитьОбъект(Наименование, Бакет, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект (большой, ДД)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 34432400);

КонецПроцедуры

Процедура S3_ИнициализироватьЗагрузкуЧастями(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Содержимое = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные
    Содержимое = OPI_ЗапросыHTTP.Get(Содержимое);

    Результат = OPI_S3.ИнициализироватьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИнициализироватьЗагрузкуЧастями", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                     // SKIP

    IDЗагрузки    = Результат["response"]["InitiateMultipartUploadResult"]["UploadId"];
    ОбщийРазмер   = Содержимое.Размер();
    РазмерУчастка = 5242880;
    ПрочитаноБайт = 0;
    НомерЧасти    = 1;

    ЧтениеДанных  = Новый ЧтениеДанных(Содержимое);
    ИсходныйПоток = ЧтениеДанных.ИсходныйПоток();
    МассивТегов   = Новый Массив;

    Пока ПрочитаноБайт < ОбщийРазмер Цикл

        ТекущееЧтение = ЧтениеДанных.Прочитать(РазмерУчастка);
        ТекущиеДанные = ТекущееЧтение.ПолучитьДвоичныеДанные();

        Если ТекущиеДанные.Размер() = 0 Тогда
            Прервать;
        КонецЕсли;

        Результат = OPI_S3.ЗагрузитьЧастьОбъекта(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, НомерЧасти,
            ТекущиеДанные);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьЧастьОбъекта (ИЗЧ)", "S3"); // SKIP
        OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                 // SKIP

        ПрочитаноБайт = ИсходныйПоток.ТекущаяПозиция();

        ETag = Результат["headers"]["Etag"];
        ETag = ?(ETag = Неопределено, Результат["headers"]["ETag"], ETag);

        МассивТегов.Добавить(ETag);

        НомерЧасти = НомерЧасти + 1;

    КонецЦикла;

    Результат = OPI_S3.ЗавершитьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, МассивТегов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗагрузкуЧастями (ИЗЧ)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура S3_ЗавершитьЗагрузкуЧастями(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Содержимое = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные
    Содержимое = OPI_ЗапросыHTTP.Get(Содержимое);

    Результат = OPI_S3.ИнициализироватьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИнициализироватьЗагрузкуЧастями (ЗЗЧ)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                           // SKIP

    IDЗагрузки    = Результат["response"]["InitiateMultipartUploadResult"]["UploadId"];
    ОбщийРазмер   = Содержимое.Размер();
    РазмерУчастка = 5242880;
    ПрочитаноБайт = 0;
    НомерЧасти    = 1;

    ЧтениеДанных  = Новый ЧтениеДанных(Содержимое);
    ИсходныйПоток = ЧтениеДанных.ИсходныйПоток();
    МассивТегов   = Новый Массив;

    Пока ПрочитаноБайт < ОбщийРазмер Цикл

        ТекущееЧтение = ЧтениеДанных.Прочитать(РазмерУчастка);
        ТекущиеДанные = ТекущееЧтение.ПолучитьДвоичныеДанные();

        Если ТекущиеДанные.Размер() = 0 Тогда
            Прервать;
        КонецЕсли;

        Результат = OPI_S3.ЗагрузитьЧастьОбъекта(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, НомерЧасти,
            ТекущиеДанные);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьЧастьОбъекта (ЗЗЧ)", "S3"); // SKIP
        OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                 // SKIP

        ПрочитаноБайт = ИсходныйПоток.ТекущаяПозиция();

        ETag = Результат["headers"]["Etag"];
        ETag = ?(ETag = Неопределено, Результат["headers"]["ETag"], ETag);

        МассивТегов.Добавить(ETag);

        НомерЧасти = НомерЧасти + 1;

    КонецЦикла;

    Результат = OPI_S3.ЗавершитьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, МассивТегов);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗагрузкуЧастями", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура S3_ЗагрузитьЧастьОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Содержимое = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные
    Содержимое = OPI_ЗапросыHTTP.Get(Содержимое);

    Результат = OPI_S3.ИнициализироватьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИнициализироватьЗагрузкуЧастями (ЗЧО)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                           // SKIP

    IDЗагрузки    = Результат["response"]["InitiateMultipartUploadResult"]["UploadId"];
    ОбщийРазмер   = Содержимое.Размер();
    РазмерУчастка = 5242880;
    ПрочитаноБайт = 0;
    НомерЧасти    = 1;

    ЧтениеДанных  = Новый ЧтениеДанных(Содержимое);
    ИсходныйПоток = ЧтениеДанных.ИсходныйПоток();
    МассивТегов   = Новый Массив;

    Пока ПрочитаноБайт < ОбщийРазмер Цикл

        ТекущееЧтение = ЧтениеДанных.Прочитать(РазмерУчастка);
        ТекущиеДанные = ТекущееЧтение.ПолучитьДвоичныеДанные();

        Если ТекущиеДанные.Размер() = 0 Тогда
            Прервать;
        КонецЕсли;

        Результат = OPI_S3.ЗагрузитьЧастьОбъекта(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, НомерЧасти,
            ТекущиеДанные);

        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьЧастьОбъекта", "S3"); // SKIP
        OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                           // SKIP

        ПрочитаноБайт = ИсходныйПоток.ТекущаяПозиция();

        ETag = Результат["headers"]["Etag"];
        ETag = ?(ETag = Неопределено, Результат["headers"]["ETag"], ETag);

        МассивТегов.Добавить(ETag);

        НомерЧасти = НомерЧасти + 1;

    КонецЦикла;

    Результат = OPI_S3.ЗавершитьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные, IDЗагрузки, МассивТегов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗагрузкуЧастями (ЗЧО)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура S3_ОтменитьЗагрузкуЧастями(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Начало     = OPI_S3.ИнициализироватьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные);
    IDЗагрузки = Начало["response"]["InitiateMultipartUploadResult"]["UploadId"];

    Результат = OPI_S3.ОтменитьЗагрузкуЧастями(Наименование, Бакет, ОсновныеДанные, IDЗагрузки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьЗагрузкуЧастями", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьСсылкуСкачиванияОбъекта(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];                   // SKIP
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // SKIP
    НеобходимыйРазмер = Картинка.Размер();                    // SKIP

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Результат = OPI_S3.ПолучитьСсылкуСкачиванияОбъекта(Наименование, Бакет, ОсновныеДанные, 7200);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуСкачиванияОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    Результат = OPI_ЗапросыHTTP.Get(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, НеобходимыйРазмер);

КонецПроцедуры

Процедура S3_ПолучитьСсылкуЗагрузкиОбъекта(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];          // SKIP
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // SKIP
    НеобходимыйРазмер = Картинка.Размер();                    // SKIP

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Наименование = "pictureU.jpg";
    Бакет        = "newbucket2";

    Результат = OPI_S3.ПолучитьСсылкуЗагрузкиОбъекта(Наименование, Бакет, ОсновныеДанные, 7200);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуЗагрузкиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(Результат)
        .УстановитьДвоичноеТело(Картинка)
        .ОбработатьЗапрос("PUT");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуЗагрузкиОбъекта (PUT)", "S3");

    Проверка = OPI_S3.ПолучитьОписаниеОбъекта(Наименование, Бакет, ОсновныеДанные);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ПолучитьОписаниеОбъекта (Ссылка загрузки)", "S3");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(НеобходимыйРазмер = Число(Проверка["headers"]["Content-Length"])).Равно(Истина);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

#КонецОбласти

#Область TCP

Процедура TCP_ОткрытьСоединение(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    Результат = Строка(Соединение);                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение", "TCP"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Заполнено(Результат);                      // SKIP

    OPI_TCP.ЗакрытьСоединение(Соединение);

    Адрес      = "tcpbin.com:4243";
    Tls        = OPI_TCP.ПолучитьНастройкиTls(Истина);
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес, TLS);

    // END

    Если ТипЗнч(Соединение) = Тип("Соответствие") Тогда
        Результат = Соединение;
    Иначе
        Результат = Строка(Соединение);
    КонецЕсли;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (TLS)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура TCP_ЗакрытьСоединение(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    Результат = OPI_TCP.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьСоединение", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

Процедура TCP_ПрочитатьДвоичныеДанные(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);
    Сообщение  = "Hello server!" + Символы.ПС;
    Данные     = ПолучитьДвоичныеДанныеИзСтроки(Сообщение);

    OPI_TCP.ОтправитьДвоичныеДанные(Соединение, Данные);

    // Маркер конца сообщения для исключения ожидания конца таймаута
    Маркер    = Символы.ПС;
    Результат = OPI_TCP.ПрочитатьДвоичныеДанные(Соединение, , Маркер);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    OPI_TCP.ЗакрытьСоединение(Соединение);

    // END

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьДвоичныеДанные", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Сообщение);

    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    OPI_TCP.ОтправитьДвоичныеДанные(Соединение, Данные);
    Результат = OPI_TCP.ПрочитатьДвоичныеДанные(Соединение, , , 50000);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьДвоичныеДанные (таймаут)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Сообщение);

КонецПроцедуры

Процедура TCP_ОтправитьДвоичныеДанные(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);
    Сообщение  = "Hello server!" + Символы.ПС;
    Данные     = ПолучитьДвоичныеДанныеИзСтроки(Сообщение);

    Результат = OPI_TCP.ОтправитьДвоичныеДанные(Соединение, Данные);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    // Маркер конца сообщения для исключения ожидания конца таймаута
    Маркер = Символы.ПС;
    Ответ  = OPI_TCP.ПрочитатьДвоичныеДанные(Соединение, , Маркер);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    // END

    Ответ = ПолучитьСтрокуИзДвоичныхДанных(Ответ);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДвоичныеДанные", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Ответ, Сообщение);

    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    OPI_TCP.ОтправитьДвоичныеДанные(Соединение, Данные);
    Результат = OPI_TCP.ПрочитатьДвоичныеДанные(Соединение, , , 50000);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДвоичныеДанные (таймаут)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Сообщение);

КонецПроцедуры

Процедура TCP_ОбработатьЗапрос(ПараметрыФункции)

    Адрес  = ПараметрыФункции["TCP_Address"];
    Данные = "Echo this!" + Символы.ПС;

    Результат = OPI_TCP.ОбработатьЗапрос(Адрес, Данные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбработатьЗапрос", "TCP"); // END
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Данные);                // END

    Адрес = ПараметрыФункции["TCP_AddressTLS"];
    Tls   = OPI_TCP.ПолучитьНастройкиTls(Истина);

    Результат = OPI_TCP.ОбработатьЗапрос(Адрес, Данные, , Tls);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбработатьЗапрос (TLS)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Данные);

КонецПроцедуры

Процедура TCP_ПрочитатьСтроку(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);
    Данные     = "Hello server!" + Символы.ПС;

    OPI_TCP.ОтправитьСтроку(Соединение, Данные);

    // Маркер конца сообщения для исключения ожидания конца таймаута
    Маркер    = Символы.ПС;
    Результат = OPI_TCP.ПрочитатьСтроку(Соединение, , Маркер);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    OPI_TCP.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьСтроку", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Данные);

    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    OPI_TCP.ОтправитьСтроку(Соединение, Данные);
    Результат = OPI_TCP.ПрочитатьСтроку(Соединение, , , 50000);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьСтроку (таймаут)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Данные);

КонецПроцедуры

Процедура TCP_ОтправитьСтроку(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);
    Данные     = "Hello server!" + Символы.ПС;

    Результат = OPI_TCP.ОтправитьСтроку(Соединение, Данные);
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    // Маркер конца сообщения для исключения ожидания конца таймаута
    Маркер = Символы.ПС;
    Ответ  = OPI_TCP.ПрочитатьСтроку(Соединение, , Маркер);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСтроку", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Ответ, Данные);

    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);

    OPI_TCP.ОтправитьСтроку(Соединение, Данные);
    Результат = OPI_TCP.ПрочитатьСтроку(Соединение, , , 50000);

    OPI_TCP.ЗакрытьСоединение(Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСтроку (таймаут)", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат, Данные);

КонецПроцедуры

Процедура TCP_ПолучитьНастройкиTls(ПараметрыФункции)

    Результат = OPI_TCP.ПолучитьНастройкиTls(Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкиTls", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура TCP_ПолучитьПоследнююОшибку(ПараметрыФункции)

    Адрес      = ПараметрыФункции["TCP_Address"];
    Соединение = OPI_TCP.ОткрытьСоединение(Адрес);
    Данные     = "Hello server!" + Символы.ПС;

    Отправка  = OPI_TCP.ОтправитьСтроку(Соединение, Данные);
    Результат = OPI_TCP.ПолучитьПоследнююОшибку(Соединение);                                               // SKIP

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПоследнююОшибку", "TCP");

КонецПроцедуры

#КонецОбласти

#Область SQLite

Процедура SQLite_ОткрытьСоединение(ПараметрыФункции)

    ИВФ = ПолучитьИмяВременногоФайла("sqlite");

    БазаНаДиске = OPI_SQLite.ОткрытьСоединение(ИВФ);
    БазаВПамяти = OPI_SQLite.ОткрытьСоединение();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(БазаНаДиске, "ОткрытьСоединение", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(БазаНаДиске, "AddIn.OPI_SQLite.Main");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(БазаВПамяти, "ОткрытьСоединение (im)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(БазаВПамяти, "AddIn.OPI_SQLite.Main");

    Закрытие = OPI_SQLite.ЗакрытьСоединение(БазаНаДиске);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Закрытие, "ЗакрытьСоединение", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Закрытие);

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLite_ЗакрытьСоединение(ПараметрыФункции)

    ИВФ = ПолучитьИмяВременногоФайла("sqlite");

    Соединение = OPI_SQLite.ОткрытьСоединение(ИВФ);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ОткрытьСоединение (закрытие)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_SQLite.Main");          // SKIP

    Закрытие = OPI_SQLite.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Закрытие, "ЗакрытьСоединение", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Закрытие);

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLite_ВыполнитьЗапросSQL(ПараметрыФункции)

    ИВФ = ПолучитьИмяВременногоФайла("sqlite");

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    Соединение = OPI_SQLite.ОткрытьСоединение(ИВФ);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ОткрытьСоединение (запрос)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_SQLite.Main");        // SKIP

    // CREATE

    ТекстЗапроса = "
                   |CREATE TABLE test_table (
                   |id INTEGER PRIMARY KEY,
                   |name TEXT,
                   |age INTEGER,
                   |salary REAL,
                   |is_active BOOLEAN,
                   |created_at DATETIME,
                   |data BLOB
                   |);";

    Результат = OPI_SQLite.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Create)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);                                 // SKIP

    // INSERT с параметрами

    ТекстЗапроса = "
                   |INSERT INTO test_table (name, age, salary, is_active, created_at, data)
                   |VALUES (?1, ?2, ?3, ?4, ?5, ?6);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить("Vitaly");                              // TEXT
    МассивПараметров.Добавить(25);                                    // INTEGER
    МассивПараметров.Добавить(1000.12);                               // REAL
    МассивПараметров.Добавить(Истина);                                // BOOL
    МассивПараметров.Добавить(OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    МассивПараметров.Добавить(Картинка);                              // BLOB

    Результат = OPI_SQLite.ВыполнитьЗапросSQL(ТекстЗапроса, МассивПараметров, , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Insert)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);                                 // SKIP

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT id, name, age, salary, is_active, created_at, data FROM test_table;";

    Результат = OPI_SQLite.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    Blob = Результат["data"][0]["data"]["blob"];                                                    // SKIP

    Результат["data"][0]["data"]["blob"] = "Base64";                                                // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL", "SQLite");               // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);                                      // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Blob).Размер(), Картинка.Размер()); // SKIP

    // Транзакция

    ТекстЗапроса = "BEGIN TRANSACTION;
                   |    CREATE TABLE IF NOT EXISTS users (
                   |        id INTEGER PRIMARY KEY AUTOINCREMENT,
                   |        name TEXT NOT NULL,
                   |        age INTEGER NOT NULL
                   |    );
                   |    INSERT INTO users (name, age) VALUES ('Alice', 30);
                   |    INSERT INTO users (name, age) VALUES ('Bob', 25);
                   |    INSERT INTO users (name, age) VALUES ('Charlie', 35);
                   |    COMMIT;";

    Результат = OPI_SQLite.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Transaction)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);                                      // SKIP

    // С расширением

    Если OPI_Инструменты.ЭтоWindows() Тогда
        Расширение = ПараметрыФункции["SQLite_Ext"];      // URL, Путь или Двоичные данные
    Иначе
        Расширение = ПараметрыФункции["SQLite_ExtLinux"]; // URL, Путь или Двоичные данные
    КонецЕсли;

    ТочкаВхода = "sqlite3_uuid_init";

    СоответствиеРасширений = Новый Соответствие;
    СоответствиеРасширений.Вставить(Расширение, ТочкаВхода);

    ТекстЗапроса = "SELECT uuid4();";

    Результат = OPI_SQLite.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение, СоответствиеРасширений);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (расширение)", "SQLite"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);                                     // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 1);                               // SKIP

    Закрытие = OPI_SQLite.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьПодключение (запрос)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLite_ЭтоКоннектор(ПараметрыФункции)

    Соединение = OPI_SQLite.ОткрытьСоединение();
    Результат  = OPI_SQLite.ЭтоКоннектор(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЭтоКоннектор", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

Процедура SQLite_СоздатьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("id"        , "INTEGER PRIMARY KEY");
    СтруктураКолонок.Вставить("name"      , "TEXT");
    СтруктураКолонок.Вставить("age"       , "INTEGER");
    СтруктураКолонок.Вставить("salary"    , "REAL");
    СтруктураКолонок.Вставить("is_active" , "BOOLEAN");
    СтруктураКолонок.Вставить("created_at", "DATETIME");
    СтруктураКолонок.Вставить("data"      , "BLOB");

    Результат = OPI_SQLite.СоздатьТаблицу(Таблица, СтруктураКолонок, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СоответствиеКолонок = Новый Соответствие;
    СоответствиеКолонок.Вставить("id"                  , "INTEGER PRIMARY KEY");
    СоответствиеКолонок.Вставить("[Непонятная колонка]", "TEXT");

    Результат = OPI_SQLite.СоздатьТаблицу("test1", СоответствиеКолонок, База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура SQLite_ДобавитьЗаписи(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    ФайлКартинки = ПолучитьИмяВременногоФайла("png");
    Картинка.Записать(ФайлКартинки);                          // ФайлКартинки - Файл на диске

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    МассивДанных = Новый Массив;

    СтруктураСтроки1 = Новый Структура;
    СтруктураСтроки1.Вставить("name"      , "Vitaly");                              // TEXT
    СтруктураСтроки1.Вставить("age"       , 25);                                    // INTEGER
    СтруктураСтроки1.Вставить("salary"    , 1000.12);                               // REAL
    СтруктураСтроки1.Вставить("is_active" , Истина);                                // BOOL
    СтруктураСтроки1.Вставить("created_at", OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    СтруктураСтроки1.Вставить("data"      , Картинка);                              // BLOB

    СтруктураСтроки2 = Новый Структура;
    СтруктураСтроки2.Вставить("name"      , "Lesha");                              // TEXT
    СтруктураСтроки2.Вставить("age"       , 20);                                    // INTEGER
    СтруктураСтроки2.Вставить("salary"    , 200.20);                               // REAL
    СтруктураСтроки2.Вставить("is_active" , Ложь);                                // BOOL
    СтруктураСтроки2.Вставить("created_at", OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    СтруктураСтроки2.Вставить("data"      , Новый Структура("blob", ФайлКартинки)); // BLOB

    МассивДанных.Добавить(СтруктураСтроки1);
    МассивДанных.Добавить(СтруктураСтроки2);

    Результат = OPI_SQLite.ДобавитьЗаписи(Таблица, МассивДанных, , База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ДобавитьЗаписи(Таблица, МассивДанных, Ложь, База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (без транзакции)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураСтроки2.Вставить("error", "Lesha");
    МассивДанных.Добавить(СтруктураСтроки2);

    Результат = OPI_SQLite.ДобавитьЗаписи(Таблица, МассивДанных, , База);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (ошибка поля)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    Результат = OPI_SQLite.ДобавитьЗаписи(Таблица, МассивДанных, Ложь, База);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (ошибка поля без транзакции)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteСтроки(Результат, 1);

    Результат = OPI_SQLite.ДобавитьЗаписи(Таблица, "not valid json", , База);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (ошибка json)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    СоответствиеСтроки = Новый Соответствие;
    СоответствиеСтроки.Вставить("[Непонятная колонка]", "yo");

    Результат = OPI_SQLite.ДобавитьЗаписи("test1", СоответствиеСтроки, , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Попытка
        УдалитьФайлы(ФайлКартинки);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла картинки", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLite_ПолучитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Поля = Новый Массив;
    Поля.Добавить("name");
    Поля.Добавить("salary");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "name");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Vitaly");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "age");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 30");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("created_at", "DESC");
    Количество = 1;

    Результат = OPI_SQLite.ПолучитьЗаписи(Таблица, Поля, Фильтры, Сортировка, Количество, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ПолучитьЗаписи(Таблица, "['name','age','salary','is_active','created_at']", , , , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (без параметров)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураФильтра2.Вставить("type", "BEETWEEN");
    Фильтры.Добавить(СтруктураФильтра2);

    Результат = OPI_SQLite.ПолучитьЗаписи(Таблица, "['name','age','salary','is_active','created_at']", Фильтры, , ,
        База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (ошибка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    Результат = OPI_SQLite.ПолучитьЗаписи("test1", , , , , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура SQLite_ОбновитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("name"  , "Vitaly A.");
    СтруктураПолей.Вставить("salary", "999999");

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "name");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", "Vitaly");
    СтруктураФильтра.Вставить("union", "AND");
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Результат = OPI_SQLite.ОбновитьЗаписи(Таблица, СтруктураПолей, СтруктураФильтра, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураФильтра.Вставить("value", "Vitaly A.");

    Фильтры = Новый Массив;
    Фильтры.Добавить(СтруктураФильтра);

    Проверка = OPI_SQLite.ПолучитьЗаписи(Таблица, "['name','salary']", Фильтры, , , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][0], СтруктураПолей);

КонецПроцедуры

Процедура SQLite_УдалитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "name");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", "Vitaly A.");
    СтруктураФильтра.Вставить("union", "AND");
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Результат = OPI_SQLite.УдалитьЗаписи(Таблица, СтруктураФильтра, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Проверка = OPI_SQLite.ПолучитьЗаписи(Таблица, "['name','salary']", Фильтры, , , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteНетЗаписей(Проверка);

КонецПроцедуры

Процедура SQLite_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Результат = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура SQLite_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Результат = OPI_SQLite.ПолучитьСтруктуруФильтраЗаписей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_SQLite.ПолучитьСтруктуруФильтраЗаписей(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "SQLite");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура SQLite_УдалитьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Результат = OPI_SQLite.УдалитьТаблицу(Таблица, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Проверка = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 0);

    OPI_SQLite.УдалитьТаблицу("test1", База);

КонецПроцедуры

Процедура SQLite_ОчиститьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Результат = OPI_SQLite.ОчиститьТаблицу(Таблица, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Проверка = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 5);

    Проверка = OPI_SQLite.ПолучитьЗаписи(Таблица, , , , , База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 0);

КонецПроцедуры

Процедура SQLite_ПодключитьРасширение(ПараметрыФункции)

    Если OPI_Инструменты.ЭтоWindows() Тогда
        Расширение = ПараметрыФункции["SQLite_Ext"];      // URL, Путь или Двоичные данные
    Иначе
        Расширение = ПараметрыФункции["SQLite_ExtLinux"]; // URL, Путь или Двоичные данные
    КонецЕсли;

    База       = ПараметрыФункции["SQLite_DB"];
    ТочкаВхода = "sqlite3_uuid_init";

    Соединение = OPI_SQLite.ОткрытьСоединение(База);
    Результат  = OPI_SQLite.ПодключитьРасширение(Расширение, ТочкаВхода, Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПодключитьРасширение", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    ИВФ = ПолучитьИмяВременногоФайла("dll");
    КопироватьФайл(Расширение, ИВФ);

    Результат = OPI_SQLite.ПодключитьРасширение(ИВФ, ТочкаВхода, Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПодключитьРасширение (путь)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ПодключитьРасширение(Новый ДвоичныеДанные(ИВФ), ТочкаВхода, Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПодключитьРасширение (двоичные)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ВыполнитьЗапросSQL("select uuid4();", , , Соединение);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПодключитьРасширение (проверка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 1);

    Результат = OPI_SQLite.ЗакрытьСоединение(Соединение);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПодключитьРасширение (закрытие)", "SQLite");

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла расширение", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура SQLite_ДобавитьКолонкуТаблицы(ПараметрыФункции)

    База      = ПараметрыФункции["SQLite_DB"];
    Таблица   = "test";
    Имя       = "new_col";
    ТипДанных = "TEXT";

    Результат = OPI_SQLite.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (проверка)", "SQLite");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["name"] = Имя Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Равенство(ТипДанных, Колонка["type"]);
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

КонецПроцедуры

Процедура SQLite_УдалитьКолонкуТаблицы(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";
    Имя     = "new_col";

    Результат = OPI_SQLite.УдалитьКолонкуТаблицы(Таблица, Имя, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Результат = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (проверка)", "SQLite");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["name"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

КонецПроцедуры

Процедура SQLite_ГарантироватьТаблицу(ПараметрыФункции)

    База = ПараметрыФункции["SQLite_DB"];

    Таблица = "test";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("id"        , "INTEGER");
    СтруктураКолонок.Вставить("code"      , "INTEGER");
    СтруктураКолонок.Вставить("name"      , "TEXT");
    СтруктураКолонок.Вставить("age"       , "INTEGER");
    СтруктураКолонок.Вставить("info"      , "TEXT");

    Результат = OPI_SQLite.ГарантироватьТаблицу(Таблица, СтруктураКолонок, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);

    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(Колонка["type"], СтруктураКолонок[Колонка["name"]]);
    КонецЦикла;

    Таблица = "test_new";

    Результат = OPI_SQLite.ГарантироватьТаблицу(Таблица, СтруктураКолонок, База);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (новая)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_SQLite.ПолучитьИнформациюОТаблице(Таблица, База);

    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(Колонка["type"], СтруктураКолонок[Колонка["name"]]);
    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

Процедура PostgreSQL_СформироватьСтрокуПодключения(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    Результат = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // END

    Результат = СтрЗаменить(Результат, Пароль, "***");
    Результат = СтрЗаменить(Результат, Адрес , "127.0.0.1");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьСтрокуПодключения", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура PostgreSQL_ОткрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Результат         = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_PostgreSQL.ЗакрытьСоединение(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение", "PostgreSQL");   // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_PostgreSQL.Main"); // SKIP

    // С TLS

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS      = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_PostgreSQL.ЗакрытьСоединение(Результат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_PostgreSQL.Main");

    НастройкиTLS = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);
    Результат    = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (TLS игнор)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_PostgreSQL.Main");

    Адрес             = ПараметрыФункции["PG_IP"];
    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);

    НастройкиTLS = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);
    Соединение   = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ОткрытьСоединение (перед базой)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_PostgreSQL.Main");

    Результат = OPI_PostgreSQL.СоздатьБазуДанных("test1", Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (база)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "test1";

    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, Соединение, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (удаление базы)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ЗакрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Соединение        = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);
    Результат         = OPI_PostgreSQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьСоединение", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ЭтоКоннектор(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Соединение = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);
    Результат  = OPI_PostgreSQL.ЭтоКоннектор(Соединение);

    OPI_PostgreSQL.ЗакрытьСоединение(Результат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЭтоКоннектор", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ВыполнитьЗапросSQL(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Соединение        = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_PostgreSQL.УдалитьТаблицу("users"    , Соединение);                                                 // SKIP
    OPI_PostgreSQL.УдалитьТаблицу("test_data", Соединение);                                             // SKIP
    Удаление = OPI_PostgreSQL.УдалитьТаблицу("test_table", Соединение);                                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ВыполнитьЗапросSQL (удаление 1)", "PostgreSQL"); // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ВыполнитьЗапросSQL (соединение)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_PostgreSQL.Main");             // SKIP

    // CREATE

    ТекстЗапроса = "
                   |CREATE TABLE test_table (
                   |id SERIAL PRIMARY KEY,
                   |name NAME,
                   |age INT,
                   |salary REAL,
                   |is_active BOOL,
                   |created_at DATE,
                   |data BYTEA
                   |);";

    Результат = OPI_PostgreSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Create)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                 // SKIP

    // INSERT с параметрами

    ТекстЗапроса = "
                   |INSERT INTO test_table (name, age, salary, is_active, created_at, data)
                   |VALUES ($1, $2, $3, $4, $5, $6);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить(Новый Структура("NAME" , "Vitaly"));
    МассивПараметров.Добавить(Новый Структура("INT"  , 25));
    МассивПараметров.Добавить(Новый Структура("REAL" , 1000.12));
    МассивПараметров.Добавить(Новый Структура("BOOL" , Истина));
    МассивПараметров.Добавить(Новый Структура("DATE" , OPI_Инструменты.ПолучитьТекущуюДату()));
    МассивПараметров.Добавить(Новый Структура("BYTEA", Картинка));

    Результат = OPI_PostgreSQL.ВыполнитьЗапросSQL(ТекстЗапроса, МассивПараметров, , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Insert)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                 // SKIP

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT id, name, age, salary, is_active, created_at, data FROM test_table;";

    Результат = OPI_PostgreSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    Blob = Результат["data"][0]["data"]["BYTEA"];                                                   // SKIP

    Результат["data"][0]["data"]["BYTEA"] = "Base64";                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL", "PostgreSQL");           // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                  // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Blob).Размер(), Картинка.Размер()); // SKIP

    // DO + Транзакция

    ТекстЗапроса = "DO $$
                   |BEGIN
                   |    CREATE TABLE users (
                   |        id SMALLSERIAL,
                   |        name TEXT NOT NULL,
                   |        age INT NOT NULL
                   |    );
                   |    INSERT INTO users (name, age) VALUES ('Alice', 30);
                   |    INSERT INTO users (name, age) VALUES ('Bob', 25);
                   |    INSERT INTO users (name, age) VALUES ('Charlie', 35);
                   |END $$ LANGUAGE plpgsql;";

    Результат = OPI_PostgreSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Transaction)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                      // SKIP

    // SQL запрос из файла

    ФайлSQL = ПараметрыФункции["SQL"]; // Двоичные данные, URL или путь к файлу

    Результат = OPI_PostgreSQL.ВыполнитьЗапросSQL(ФайлSQL, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (файл)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                               // SKIP

    Закрытие = OPI_PostgreSQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьПодключение (запрос)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_СоздатьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    База = "testbase1";

    Удаление = OPI_PostgreSQL.УдалитьБазуДанных(База, СтрокаПодключения);                          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Удаление, "СоздатьБазуДанных (удаление)", "PostgreSQL"); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.СоздатьБазуДанных(База, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, "postgres", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Удаление = OPI_PostgreSQL.УдалитьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Удаление, "СоздатьБазуДанных (удаление, TLS)", "PostgreSQL");

    Результат = OPI_PostgreSQL.СоздатьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";
    OPI_PostgreSQL.УдалитьБазуДанных(База, СтрокаПодключения);

    Подключение = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "СоздатьБазуДанных (открытие)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_PostgreSQL.Main");

    Результат = OPI_PostgreSQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (подключение)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (существующая)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    OPI_PostgreSQL.ЗакрытьСоединение(Подключение);

КонецПроцедуры

Процедура PostgreSQL_СоздатьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("bool_field"       , "BOOL");
    СтруктураКолонок.Вставить("oldchar_field"    , """char""");
    СтруктураКолонок.Вставить("smallint_field"   , "SMALLINT");
    СтруктураКолонок.Вставить("smallserial_field", "SMALLSERIAL");
    СтруктураКолонок.Вставить("int_field"        , "INT");
    СтруктураКолонок.Вставить("serial_field"     , "SERIAL");
    СтруктураКолонок.Вставить("oid_field"        , "OID");
    СтруктураКолонок.Вставить("bigint_field"     , "BIGINT");
    СтруктураКолонок.Вставить("bigserial_field"  , "BIGSERIAL");
    СтруктураКолонок.Вставить("real_field"       , "REAL");
    СтруктураКолонок.Вставить("dp_field"         , "DOUBLE PRECISION");
    СтруктураКолонок.Вставить("text_field"       , "TEXT");
    СтруктураКолонок.Вставить("varchar_field"    , "VARCHAR");
    СтруктураКолонок.Вставить("charn_field"      , "CHAR(3)");
    СтруктураКолонок.Вставить("char_field"       , "CHAR");
    СтруктураКолонок.Вставить("name_field"       , "NAME");
    СтруктураКолонок.Вставить("bytea_field"      , "BYTEA");
    СтруктураКолонок.Вставить("ts_field"         , "TIMESTAMP");
    СтруктураКолонок.Вставить("tswtz_field"      , "TIMESTAMP WITH TIME ZONE");
    СтруктураКолонок.Вставить("ip_field"         , "INET");
    СтруктураКолонок.Вставить("json_field"       , "JSON");
    СтруктураКолонок.Вставить("jsonb_field"      , "JSONB");
    СтруктураКолонок.Вставить("date_field"       , "DATE");
    СтруктураКолонок.Вставить("time_field"       , "TIME");
    СтруктураКолонок.Вставить("uuid_field"       , "UUID");

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Таблица = "АБВ ГДЕ";

    Результат = OPI_PostgreSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка имени)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Таблица = "somename";
    СтруктураКолонок.Вставить("wtf_field", "WTF");

    Результат = OPI_PostgreSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка типа)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура PostgreSQL_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 25);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 25);

    Таблица = "heyho";

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице (ошибка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура PostgreSQL_ДобавитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица       = "testtable";
    МассивЗаписей = Новый Массив;

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    СлучайнаяСтруктура = Новый Структура("key,value", "ItsKey", 10);

    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();
    ТекущаяДатаЧП = OPI_Инструменты.ДатаRFC3339(ТекущаяДата, "+05:00");

    СтруктураЗаписи = Новый Структура;
    СтруктураЗаписи.Вставить("bool_field"       , Новый Структура("BOOL"                    , Истина));
    СтруктураЗаписи.Вставить("oldchar_field"    , Новый Структура("OLDCHAR"                 , 1));                  // или "char"
    СтруктураЗаписи.Вставить("smallint_field"   , Новый Структура("SMALLINT"                , 5));
    СтруктураЗаписи.Вставить("smallserial_field", Новый Структура("SMALLSERIAL"             , 6));
    СтруктураЗаписи.Вставить("int_field"        , Новый Структура("INT"                     , 100));
    СтруктураЗаписи.Вставить("serial_field"     , Новый Структура("SERIAL"                  , 100));
    СтруктураЗаписи.Вставить("oid_field"        , Новый Структура("OID"                     , 24576));
    СтруктураЗаписи.Вставить("bigint_field"     , Новый Структура("BIGINT"                  , 9999999));
    СтруктураЗаписи.Вставить("bigserial_field"  , Новый Структура("BIGSERIAL"               , 9999999));
    СтруктураЗаписи.Вставить("real_field"       , Новый Структура("REAL"                    , 15.2));
    СтруктураЗаписи.Вставить("dp_field"         , Новый Структура("DOUBLE_PRECISION"        , 1.0002));            // или DOUBLE PRECISION
    СтруктураЗаписи.Вставить("text_field"       , Новый Структура("TEXT"                    , "Some text"));
    СтруктураЗаписи.Вставить("varchar_field"    , Новый Структура("VARCHAR"                 , "Some varchar"));
    СтруктураЗаписи.Вставить("charn_field"      , Новый Структура("CHAR"                    , "AAA"));
    СтруктураЗаписи.Вставить("char_field"       , Новый Структура("CHAR"                    , "A"));
    СтруктураЗаписи.Вставить("name_field"       , Новый Структура("NAME"                    , "Vitaly"));
    СтруктураЗаписи.Вставить("bytea_field"      , Новый Структура("BYTEA"                   , Картинка));
    СтруктураЗаписи.Вставить("ts_field"         , Новый Структура("TIMESTAMP"               , ТекущаяДата));
    СтруктураЗаписи.Вставить("tswtz_field"      , Новый Структура("TIMESTAMP_WITH_TIME_ZONE", ТекущаяДатаЧП));      // или TIMESTAMP WITH TIME ZONE
    СтруктураЗаписи.Вставить("ip_field"         , Новый Структура("INET"                    , "127.0.0.1"));
    СтруктураЗаписи.Вставить("json_field"       , Новый Структура("JSON"                    , СлучайнаяСтруктура));
    СтруктураЗаписи.Вставить("jsonb_field"      , Новый Структура("JSONB"                   , СлучайнаяСтруктура));
    СтруктураЗаписи.Вставить("date_field"       , Новый Структура("DATE"                    , ТекущаяДата));
    СтруктураЗаписи.Вставить("time_field"       , Новый Структура("TIME"                    , ТекущаяДата));
    СтруктураЗаписи.Вставить("uuid_field"       , Новый Структура("UUID"                    , Новый УникальныйИдентификатор));

    МассивЗаписей.Добавить(СтруктураЗаписи);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.ДобавитьЗаписи(Таблица, МассивЗаписей, Истина, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ДобавитьЗаписи(Таблица, МассивЗаписей, Истина, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ПолучитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // Все записи без отборов

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    Если ЗначениеЗаполнено(Результат["data"]) Тогда                                   // SKIP
        Результат["data"][0]["bytea_field"]["BYTEA"] = Лев(Результат["data"][0]["bytea_field"]["BYTEA"], 10) + "..."; // SKIP
    КонецЕсли;                                                                        // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                    // SKIP

    // Отборы, выбранные поля, количество и сортировка

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, "test_data", Логин, Пароль);

    Таблица = "test_data";

    Поля = Новый Массив;
    Поля.Добавить("first_name");
    Поля.Добавить("last_name");
    Поля.Добавить("email");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "gender");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Male");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "id");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 50");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("ip_address", "DESC");
    Количество = 5;

    Результат = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, Поля, Фильтры, Сортировка, Количество, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (отборы)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 5);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Таблица = "testtable";

    Результат = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"]);

КонецПроцедуры

Процедура PostgreSQL_ОбновитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ip_address", Новый Структура("VARCHAR", "127.0.0.1"));

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Количество = OPI_PostgreSQl.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения);          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Количество, "ОбновитьЗаписи (количество)", "PostgreSQL"); // SKIP
    Количество = Количество["data"].Количество();                                                   // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQl.ОбновитьЗаписи(Таблица, СтруктураПолей, СтруктураФильтра, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Проверка = OPI_PostgreSQl.ПолучитьЗаписи(Таблица, "['ip_address']", Фильтры, , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ОбновитьЗаписи (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], Количество);

    Для Н = 0 По Проверка["data"].ВГраница() Цикл
        OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][Н], СтруктураПолей);
    КонецЦикла;

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("bool_field", Новый Структура("bool", Истина));

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, "testbase1", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQl.ОбновитьЗаписи("testtable", СтруктураПолей, , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_УдалитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);
    СтруктураФильтра.Вставить("union", "AND");

    Фильтры.Добавить(СтруктураФильтра);

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "ip_address");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "127.0.0.1"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Получение = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.УдалитьЗаписи(Таблица, Фильтры, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Получение, "УдалитьЗаписи (получение)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Количество = Получение["data"].Количество();
    Остаток    = 100 - Количество;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], Остаток);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, "testbase1", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.УдалитьЗаписи("testtable", , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_УдалитьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.УдалитьТаблицу(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.УдалитьТаблицу(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База    = "test_data";
    Таблица = "test_data";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Результат         = OPI_PostgreSQL.УдалитьТаблицу(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу (тест)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_УдалитьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    База = "testbase1";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";

    Подключение = OPI_PostgreSQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "УдалитьБазуДанных (открытие)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_PostgreSQL.Main");

    Результат = OPI_PostgreSQL.ОтключитьВсеСоединенияБазыДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (отключение)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (подключение)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Закрытие = OPI_PostgreSQL.ЗакрытьСоединение(Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Закрытие, "УдалитьБазуДанных (закрытие)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Закрытие);

    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка подключения)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, "postgres", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);
    База                 = "testbase1";

    Результат = OPI_PostgreSQL.УдалитьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ОчиститьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.ОчиститьТаблицу(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ОчиститьТаблицу(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура PostgreSQL_ОтключитьВсеСоединенияБазыДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_PostgreSQL.ОтключитьВсеСоединенияБазыДанных(База, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьВсеСоединенияБазыДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ОтключитьВсеСоединенияБазыДанных(База, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьВсеСоединенияБазыДанных (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура PostgreSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Результат = OPI_PostgreSQL.ПолучитьСтруктуруФильтраЗаписей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_PostgreSQL.ПолучитьСтруктуруФильтраЗаписей(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "PostgreSQL");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура PostgreSQL_ПолучитьНастройкиTls(ПараметрыФункции)

    Результат = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкиTls", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура PostgreSQL_ДобавитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База      = "testbase1";
    Таблица   = "testtable";
    Имя       = "new_field";
    ТипДанных = "TEXT";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Результат = OPI_PostgreSQL.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (проверка)", "PostgreSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТипДанных), нРег(Колонка["data_type"]));
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (TLS, проверка)", "PostgreSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТипДанных), нРег(Колонка["data_type"]));
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

КонецПроцедуры

Процедура PostgreSQL_УдалитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";
    Имя     = "new_field";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Результат = OPI_PostgreSQL.УдалитьКолонкуТаблицы(Таблица, Имя, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (проверка)", "PostgreSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.УдалитьКолонкуТаблицы(Таблица, Имя, СтрокаПодключенияTLS, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (TLS, проверка)", "PostgreSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

КонецПроцедуры

Процедура PostgreSQL_ГарантироватьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";

    СтрокаПодключения = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("smallint_field" , "SMALLINT");
    СтруктураКолонок.Вставить("uuid_field"     , "uuid");
    СтруктураКолонок.Вставить("bigint_field"   , "BIGINT");
    СтруктураКолонок.Вставить("custom_field"   , "TEXT");

    Результат = OPI_PostgreSQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(Колонка["data_type"]), нРег(СтруктураКолонок[Колонка["column_name"]]));
    КонецЦикла;

    Таблица = "test_new";

    Результат = OPI_PostgreSQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (новая)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (новая, проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(Колонка["data_type"]), нРег(СтруктураКолонок[Колонка["column_name"]]));
    КонецЦикла;

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "5433";

    Таблица              = "testtable";
    СтрокаПодключенияTLS = OPI_PostgreSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_PostgreSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_PostgreSQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (TLS)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_PostgreSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (TLS, проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(Колонка["data_type"]), нРег(СтруктураКолонок[Колонка["column_name"]]));
    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область MySQL

Процедура MySQL_СформироватьСтрокуПодключения(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    Результат = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // END

    Результат = СтрЗаменить(Результат, Пароль, "***");
    Результат = СтрЗаменить(Результат, Адрес , "127.0.0.1");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьСтрокуПодключения", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура MySQL_ОткрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Результат         = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение", "MySQL");   // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_MySQL.Main"); // SKIP

    OPI_MySQL.ЗакрытьСоединение(Результат);

    // С TLS

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS      = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_MySQL.ЗакрытьСоединение(Результат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_MySQL.Main");

    Результат = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (ошибка без TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    НастройкиTLS = OPI_MySQL.ПолучитьНастройкиTls(Истина);
    Результат    = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (TLS игнор)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_MySQL.Main");

    Адрес             = ПараметрыФункции["PG_IP"];
    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);

    НастройкиTLS = OPI_MySQL.ПолучитьНастройкиTls(Истина);
    Соединение   = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ОткрытьСоединение (перед базой)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_MySQL.Main");

    Результат = OPI_MySQL.СоздатьБазуДанных("test1", Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (база)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "test1";

    Результат = OPI_MySQL.УдалитьБазуДанных(База, Соединение, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (удаление базы)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_ЗакрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Соединение        = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);
    Результат         = OPI_MySQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьСоединение", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_ЭтоКоннектор(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Соединение = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);
    Результат  = OPI_MySQL.ЭтоКоннектор(Соединение);

    OPI_MySQL.ЗакрытьСоединение(Результат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЭтоКоннектор", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

Процедура MySQL_ВыполнитьЗапросSQL(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Соединение        = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_MySQL.УдалитьТаблицу("users"    , Соединение);                                             // SKIP
    OPI_MySQL.УдалитьТаблицу("test_data", Соединение);                                             // SKIP
    Удаление = OPI_MySQL.УдалитьТаблицу("test_table", Соединение);                                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ВыполнитьЗапросSQL (удаление 1)", "MySQL"); // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ВыполнитьЗапросSQL (соединение)", "MySQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_MySQL.Main");             // SKIP

    // CREATE

    ТекстЗапроса = "
                   |CREATE TABLE test_table (
                   |id INT AUTO_INCREMENT PRIMARY KEY,
                   |name VARCHAR(255),
                   |age INT,
                   |salary DOUBLE,
                   |amount FLOAT,
                   |type TINYINT UNSIGNED,
                   |date DATE,
                   |time TIME,
                   |data MEDIUMBLOB
                   |);";

    Результат = OPI_MySQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Create)", "MySQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                            // SKIP

    // INSERT с параметрами

    ТекстЗапроса = "
                   |INSERT INTO test_table (name, age, salary, amount, type, date, time, data)
                   |VALUES (?, ?, ?, ?, ?, ?, ?, ?);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить(Новый Структура("TEXT"  , "Vitaly"));
    МассивПараметров.Добавить(Новый Структура("INT"   , 25));
    МассивПараметров.Добавить(Новый Структура("DOUBLE", 1000.12));
    МассивПараметров.Добавить(Новый Структура("FLOAT" , 1000.12));
    МассивПараметров.Добавить(Новый Структура("UINT"  , 1));
    МассивПараметров.Добавить(Новый Структура("DATE"  , OPI_Инструменты.ПолучитьТекущуюДату()));
    МассивПараметров.Добавить(Новый Структура("TIME"  , OPI_Инструменты.ПолучитьТекущуюДату()));
    МассивПараметров.Добавить(Новый Структура("BYTES" , Картинка));

    Результат = OPI_MySQL.ВыполнитьЗапросSQL(ТекстЗапроса, МассивПараметров, , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Insert)", "MySQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                            // SKIP

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT name, age, salary, amount, type, date, time, data FROM test_table;";

    Результат = OPI_MySQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    Blob = Результат["data"][0]["data"]["BYTES"];                                                   // SKIP

    Результат["data"][0]["data"]["BYTES"] = "Base64";                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL", "MySQL");                // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                  // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Blob).Размер(), Картинка.Размер()); // SKIP
    OPI_MySQL.ВыполнитьЗапросSQL("create table test_data (id INT,first_name VARCHAR(50),last_name VARCHAR(50),email VARCHAR(50),gender VARCHAR(50),ip_address VARCHAR(20));",  , , Соединение); // SKIP

    // SQL запрос из файла

    ФайлSQL = ПараметрыФункции["SQL2"]; // Двоичные данные, URL или путь к файлу

    Результат = OPI_MySQL.ВыполнитьЗапросSQL(ФайлSQL, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (файл)", "MySQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                          // SKIP

    Закрытие = OPI_MySQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьПодключение (запрос)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_СоздатьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    База = "testbase1";

    Удаление = OPI_MySQL.УдалитьБазуДанных(База, СтрокаПодключения);                          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Удаление, "СоздатьБазуДанных (удаление)", "MySQL"); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.СоздатьБазуДанных(База, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, "", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    OPI_MySQL.УдалитьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);
    Результат = OPI_MySQL.СоздатьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";
    OPI_MySQL.УдалитьБазуДанных(База, СтрокаПодключения);

    Подключение = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "СоздатьБазуДанных (открытие)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_MySQL.Main");

    Результат = OPI_MySQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (подключение)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (существующая)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    OPI_MySQL.ЗакрытьСоединение(Подключение);

КонецПроцедуры

Процедура MySQL_СоздатьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("char_field"      , "CHAR(5)");
    СтруктураКолонок.Вставить("varchar_field"   , "VARCHAR(255)");
    СтруктураКолонок.Вставить("tinytext_field"  , "TINYTEXT");
    СтруктураКолонок.Вставить("text_field"      , "TEXT");
    СтруктураКолонок.Вставить("mediumtext_field", "MEDIUMTEXT");
    СтруктураКолонок.Вставить("longtext_field"  , "LONGTEXT");
    СтруктураКолонок.Вставить("tinyint_field"   , "TINYINT");
    СтруктураКолонок.Вставить("smallint_field"  , "SMALLINT");
    СтруктураКолонок.Вставить("mediumint_field" , "MEDIUMINT");
    СтруктураКолонок.Вставить("int_field"       , "INT");
    СтруктураКолонок.Вставить("uint_field"      , "INT UNSIGNED");
    СтруктураКолонок.Вставить("bigint_field"    , "BIGINT");
    СтруктураКолонок.Вставить("float_field"     , "FLOAT");
    СтруктураКолонок.Вставить("double_field"    , "DOUBLE");
    СтруктураКолонок.Вставить("date_field"      , "DATE");
    СтруктураКолонок.Вставить("time_field"      , "TIME");
    СтруктураКолонок.Вставить("datetime_field"  , "DATETIME");
    СтруктураКолонок.Вставить("timestamp_field" , "TIMESTAMP");
    СтруктураКолонок.Вставить("mediumblob_field", "MEDIUMBLOB");
    СтруктураКолонок.Вставить("set_field"       , "SET('one','two','three')");

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Таблица = "АБВ ГДЕ";

    Результат = OPI_MySQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка имени)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Таблица = "somename";
    СтруктураКолонок.Вставить("wtf_field", "WTF");

    Результат = OPI_MySQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка типа)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура MySQL_ДобавитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица       = "testtable";
    МассивЗаписей = Новый Массив;

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    СтруктураЗаписи = Новый Структура;
    СтруктураЗаписи.Вставить("char_field"      , Новый Структура("TEXT"  , "AAAAA"));
    СтруктураЗаписи.Вставить("varchar_field"   , Новый Структура("TEXT"  , "Some varchar"));
    СтруктураЗаписи.Вставить("tinytext_field"  , Новый Структура("TEXT"  , "Some tiny text"));
    СтруктураЗаписи.Вставить("text_field"      , Новый Структура("TEXT"  , "Some text"));
    СтруктураЗаписи.Вставить("mediumtext_field", Новый Структура("TEXT"  , "Some medium text"));
    СтруктураЗаписи.Вставить("longtext_field"  , Новый Структура("TEXT"  , "Some looooooong text"));
    СтруктураЗаписи.Вставить("tinyint_field"   , Новый Структура("INT"   , 127));
    СтруктураЗаписи.Вставить("smallint_field"  , Новый Структура("INT"   , -32767));
    СтруктураЗаписи.Вставить("mediumint_field" , Новый Структура("INT"   , 8388607));
    СтруктураЗаписи.Вставить("int_field"       , Новый Структура("INT"   , -2147483647));
    СтруктураЗаписи.Вставить("uint_field"      , Новый Структура("UINT"  , 4294967295));
    СтруктураЗаписи.Вставить("bigint_field"    , Новый Структура("INT"   , 9223372036854775807));
    СтруктураЗаписи.Вставить("float_field"     , Новый Структура("FLOAT" , 100.50));
    СтруктураЗаписи.Вставить("double_field"    , Новый Структура("FLOAT" , 100.512123));
    СтруктураЗаписи.Вставить("date_field"      , Новый Структура("DATE"  , ТекущаяДата));
    СтруктураЗаписи.Вставить("time_field"      , Новый Структура("TIME"  , ТекущаяДата));
    СтруктураЗаписи.Вставить("datetime_field"  , Новый Структура("DATE"  , ТекущаяДата));
    СтруктураЗаписи.Вставить("timestamp_field" , Новый Структура("DATE"  , ТекущаяДата));
    СтруктураЗаписи.Вставить("mediumblob_field", Новый Структура("BYTES" , Картинка));
    СтруктураЗаписи.Вставить("set_field"       , Новый Структура("TEXT"  , "one"));

    МассивЗаписей.Добавить(СтруктураЗаписи);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ДобавитьЗаписи(Таблица, МассивЗаписей, Истина, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ДобавитьЗаписи(Таблица, МассивЗаписей, Истина, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_ПолучитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // Все записи без отборов

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    Если ЗначениеЗаполнено(Результат["data"]) Тогда                                                                               // SKIP
        Результат["data"][0]["mediumblob_field"]["BYTES"] = Лев(Результат["data"][0]["mediumblob_field"]["BYTES"], 10) + "...";   // SKIP
    КонецЕсли;                                                                                                                    // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи", "MySQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);               // SKIP

    // Отборы, выбранные поля, количество и сортировка

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, "test_data", Логин, Пароль);

    Таблица = "test_data";

    Поля = Новый Массив;
    Поля.Добавить("first_name");
    Поля.Добавить("last_name");
    Поля.Добавить("email");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "gender");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Male");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "id");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 50");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("ip_address", "DESC");
    Количество = 5;

    Результат = OPI_MySQL.ПолучитьЗаписи(Таблица, Поля, Фильтры, Сортировка, Количество, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (отборы)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 5);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Таблица = "testtable";

    Результат = OPI_MySQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"]);

КонецПроцедуры

Процедура MySQL_ОбновитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ip_address", Новый Структура("VARCHAR", "127.0.0.1"));

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Количество = OPI_MySQL.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения);          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Количество, "ОбновитьЗаписи (количество)", "MySQL"); // SKIP
    Количество = Количество["data"].Количество();                                                   // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ОбновитьЗаписи(Таблица, СтруктураПолей, СтруктураФильтра, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Проверка = OPI_MySQL.ПолучитьЗаписи(Таблица, "['ip_address']", Фильтры, , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ОбновитьЗаписи (проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], Количество);

    Для Н = 0 По Проверка["data"].ВГраница() Цикл
        OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][Н], СтруктураПолей);
    КонецЦикла;

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("varchar_field", Новый Структура("VARCHAR", "Another varchar"));

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, "testbase1", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ОбновитьЗаписи("testtable", СтруктураПолей, , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_УдалитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);
    СтруктураФильтра.Вставить("union", "AND");

    Фильтры.Добавить(СтруктураФильтра);

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "ip_address");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "127.0.0.1"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Получение = OPI_MySQL.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.УдалитьЗаписи(Таблица, Фильтры, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Получение, "УдалитьЗаписи (получение)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Количество = Получение["data"].Количество();
    Остаток    = 100 - Количество;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи (проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], Остаток);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, "testbase1", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.УдалитьЗаписи("testtable", , СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_УдалитьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.УдалитьТаблицу(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.УдалитьТаблицу(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База    = "test_data";
    Таблица = "test_data";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Результат         = OPI_MySQL.УдалитьТаблицу(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу (тест)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_УдалитьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    База = "testbase1";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.УдалитьБазуДанных(База, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";

    Подключение = OPI_MySQL.ОткрытьСоединение(СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "УдалитьБазуДанных (открытие)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_MySQL.Main");

    Результат = OPI_MySQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (подключение)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Закрытие = OPI_MySQL.ЗакрытьСоединение(Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Закрытие, "УдалитьБазуДанных (закрытие)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Закрытие);

    Результат = OPI_MySQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка подключения)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, "", Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);
    База                 = "testbase1";

    Результат = OPI_MySQL.УдалитьБазуДанных(База, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MySQL_ОчиститьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ОчиститьТаблицу(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ОчиститьТаблицу(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу (проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура MySQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Результат = OPI_MySQL.ПолучитьСтруктуруФильтраЗаписей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_MySQL.ПолучитьСтруктуруФильтраЗаписей(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "MySQL");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура MySQL_ПолучитьНастройкиTls(ПараметрыФункции)

    Результат = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкиTls", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура MySQL_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 20);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 20);

    Таблица = "heyho";

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице (ошибка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура MySQL_ДобавитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База      = "testbase1";
    Таблица   = "testtable";
    Имя       = "new_field";
    ТипДанных = "MEDIUMTEXT";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (проверка)", "MySQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["COLUMN_NAME"] = Имя Тогда

            ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
            OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТипДанных), нРег(ТекущийТип));

            Найдена = Истина;

        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (TLS, проверка)", "MySQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["COLUMN_NAME"] = Имя Тогда

            ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
            OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТипДанных), нРег(ТекущийТип));

            Найдена = Истина;

        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

КонецПроцедуры

Процедура MySQL_УдалитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";
    Имя     = "new_field";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.УдалитьКолонкуТаблицы(Таблица, Имя, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (проверка)", "MySQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["COLUMN_NAME"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.УдалитьКолонкуТаблицы(Таблица, Имя, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (TLS, проверка)", "MySQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["COLUMN_NAME"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

КонецПроцедуры

Процедура MySQL_ГарантироватьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";

    СтрокаПодключения = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("smallint_field" , "SMALLINT");
    СтруктураКолонок.Вставить("double_field"   , "DOUBLE");
    СтруктураКолонок.Вставить("bigint_field"   , "BIGINT");
    СтруктураКолонок.Вставить("custom_field"   , "TEXT");

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MySQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТекущийТип), нРег(СтруктураКолонок[Колонка["COLUMN_NAME"]]));
    КонецЦикла;

    Таблица = "test_new";

    Результат = OPI_MySQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (новая)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (новая, проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТекущийТип), нРег(СтруктураКолонок[Колонка["COLUMN_NAME"]]));
    КонецЦикла;

    Адрес = ПараметрыФункции["PG_IP"];
    Порт  = "3307";

    Таблица              = "testtable";
    СтрокаПодключенияTLS = OPI_MySQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль, Порт);
    НастройкиTLS         = OPI_MySQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MySQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (TLS)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_MySQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключенияTLS, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (TLS, проверка)", "MySQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТекущийТип), нРег(СтруктураКолонок[Колонка["COLUMN_NAME"]]));
    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область GreenAPI

Процедура GreenAPI_СформироватьПараметрыДоступа(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Результат = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);

    // END

    Результат.Вставить("apiTokenInstance", "***");
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьПараметрыДоступа", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьНастройкиИнстанса(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьНастройкиИнстанса(ПараметрыДоступа);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкиИнстанса", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринИнстанс(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьИнформациюОбАккаунте(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьИнформациюОбАккаунте(ПараметрыДоступа);

    // END

    Попытка
        Результат["deviceId"] = "***";
        Результат["phone"]    = "***";
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбАккаунте", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринПрофиль(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьСтруктуруНастроекИнстанса(ПараметрыФункции)

    Результат = OPI_GreenAPI.ПолучитьСтруктуруНастроекИнстанса();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекИнстанса", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_GreenAPI.ПолучитьСтруктуруНастроекИнстанса(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекИнстанса (пустая)", "GreenAPI");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура GreenAPI_УстановитьНастройкиИнстанса(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);

    СтруктураНастроек = Новый Структура;
    СтруктураНастроек.Вставить("pollMessageWebhook"       , "yes");
    СтруктураНастроек.Вставить("incomingBlockWebhook"     , "no");
    СтруктураНастроек.Вставить("incomingCallWebhook"      , "no");
    СтруктураНастроек.Вставить("editedMessageWebhook"     , "yes");
    СтруктураНастроек.Вставить("deletedMessageWebhook"    , "yes");
    СтруктураНастроек.Вставить("outgoingAPIMessageWebhook", "yes");

    Результат = OPI_GreenAPI.УстановитьНастройкиИнстанса(СтруктураНастроек, ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьНастройкиИнстанса", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСохранениеНастроек(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьСостояниеИнстанса(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьСостояниеИнстанса(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСостояниеИнстанса", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринАвторизован(Результат);

КонецПроцедуры

Процедура GreenAPI_ПерезапуститьИнстанс(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПерезапуститьИнстанс(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПерезапуститьИнстанс", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринПерезапуск(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьQR(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьQR(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьQR", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);

КонецПроцедуры

Процедура GreenAPI_РазлогинитьИнстанс(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.РазлогинитьИнстанс(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазлогинитьИнстанс", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринРазлогин(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьКодАвторизации(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    НомерТелефона = 441234567890;

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьКодАвторизации(ПараметрыДоступа, НомерТелефона);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКодАвторизации", "GreenAPI");

КонецПроцедуры

Процедура GreenAPI_УстановитьКартинкуПрофиля(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.УстановитьКартинкуПрофиля(ПараметрыДоступа, Картинка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьКартинкуПрофиля", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринАватар(Результат);

КонецПроцедуры

Процедура GreenAPI_СоздатьГруппу(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Имя = "New group";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.СоздатьГруппу(ПараметрыДоступа, Имя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьГруппу", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринНоваяГруппа(Результат);

    IDГруппы = Результат["chatId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_GroupID", IDГруппы);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_GroupID", IDГруппы, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GreenAPI_ПокинутьГруппу(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы = ПараметрыФункции["GreenAPI_GroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПокинутьГруппу(ПараметрыДоступа, IDГруппы);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьГруппу", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринВыходГруппы(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьИнформациюОГруппе(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы = ПараметрыФункции["GreenAPI_GroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьИнформациюОГруппе(ПараметрыДоступа, IDГруппы);

    // END

    Попытка
        Результат["owner"]                 = "***";
        Результат["participants"][0]["id"] = "***";
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОГруппе", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринГруппа(Результат);

КонецПроцедуры

Процедура GreenAPI_ИзменитьИмяГруппы(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы = ПараметрыФункции["GreenAPI_GroupID"];
    Имя      = "New name";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ИзменитьИмяГруппы(ПараметрыДоступа, IDГруппы, Имя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьИмяГруппы", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринИмяГруппы(Результат);

КонецПроцедуры

Процедура GreenAPI_ДобавитьУчастникаВГруппу(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы       = ПараметрыФункции["GreenAPI_GroupID"];
    IDПользователя = "123123123@c.us";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ДобавитьУчастникаВГруппу(ПараметрыДоступа, IDГруппы, IDПользователя);

    // END

    Попытка
        Результат["addParticipant"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьУчастникаВГруппу", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринДобавлениеПользователя(Результат);

КонецПроцедуры

Процедура GreenAPI_ИсключитьУчастникаГруппы(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы       = ПараметрыФункции["GreenAPI_GroupID"];
    IDПользователя = "123123123@c.us";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ИсключитьУчастникаГруппы(ПараметрыДоступа, IDГруппы, IDПользователя);

    // END

    Попытка
        Результат["removeParticipant"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьУчастникаГруппы", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринИсключениеПользователя(Результат);

КонецПроцедуры

Процедура GreenAPI_НазначитьПраваАдминистратора(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы       = ПараметрыФункции["GreenAPI_GroupID"];
    IDПользователя = "123123123@c.us";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.НазначитьПраваАдминистратора(ПараметрыДоступа, IDГруппы, IDПользователя);

    // END

    Попытка
        Результат["setGroupAdmin"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НазначитьПраваАдминистратора", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринНазначениеАдминистратора(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтозватьПраваАдминистратора(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDГруппы       = ПараметрыФункции["GreenAPI_GroupID"];
    IDПользователя = "123123123@c.us";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтозватьПраваАдминистратора(ПараметрыДоступа, IDГруппы, IDПользователя);

    // END

    Попытка
        Результат["removeAdmin"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтозватьПраваАдминистратора", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринОтзывАдминистратора(Результат);

КонецПроцедуры

Процедура GreenAPI_УстановитьКартинкуГруппы(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    IDГруппы = ПараметрыФункции["GreenAPI_GroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.УстановитьКартинкуГруппы(ПараметрыДоступа, IDГруппы, Картинка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьКартинкуГруппы", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринКартинкаГруппы(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];
    Текст  = "Новое сообщение";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьТекстовоеСообщение(ПараметрыДоступа, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_MessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_MessageID", IDСообщения, "Строка", ПараметрыФункции);

    Результат = OPI_GreenAPI.ОтправитьТекстовоеСообщение(ПараметрыДоступа, IDЧата, Текст, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_УдалитьСообщение(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата      = ПараметрыФункции["GreenAPI_TestGroupID"];
    IDСообщения = ПараметрыФункции["GreenAPI_MessageID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.УдалитьСообщение(ПараметрыДоступа, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GreenAPI_ИзменитьТекстСообщения(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата      = ПараметрыФункции["GreenAPI_TestGroupID"];
    IDСообщения = ПараметрыФункции["GreenAPI_MessageID"];
    Текст       = "Новый текст сообщения";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ИзменитьТекстСообщения(ПараметрыДоступа, IDЧата, IDСообщения, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТекстСообщения", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьФайл(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Файл     = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    ИмяФайла = "photo.jpg";
    IDЧата   = ПараметрыФункции["GreenAPI_TestGroupID"];
    Описание = "Описание файла";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьФайл(ПараметрыДоступа, IDЧата, Файл, ИмяФайла, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринФайл(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_FileMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_FileMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Файл      = ПараметрыФункции["Video"];
    ИмяФайла  = "vid.mp4";
    Результат = OPI_GreenAPI.ОтправитьФайл(ПараметрыДоступа, IDЧата, Файл, ИмяФайла, Описание, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринФайл(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьФайлПоURL(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Файл     = ПараметрыФункции["Picture"];
    ИмяФайла = "photo.jpg";
    IDЧата   = ПараметрыФункции["GreenAPI_TestGroupID"];
    Описание = "Описание файла";

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьФайлПоURL(ПараметрыДоступа, IDЧата, Файл, ИмяФайла, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайлПоURL", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_FileMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_FileMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Файл      = ПараметрыФункции["Video"];
    ИмяФайла  = "vid.mp4";
    Результат = OPI_GreenAPI.ОтправитьФайлПоURL(ПараметрыДоступа, IDЧата, Файл, ИмяФайла, Описание, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайлПоURL (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьОпрос(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];
    Текст  = "Какой ваш любимый цвет?";

    Варианты = Новый Массив;
    Варианты.Добавить("Красный");
    Варианты.Добавить("Желтый");
    Варианты.Добавить("Зеленый");

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьОпрос(ПараметрыДоступа, IDЧата, Текст, Варианты);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_PollMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_PollMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Результат = OPI_GreenAPI.ОтправитьОпрос(ПараметрыДоступа, IDЧата, Текст, Варианты, Истина, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьОписаниеЛокации(ПараметрыФункции)

    Широта   = 53.908522;
    Долгота  = 27.574821;
    Адрес    = "Площадь Победы, Минск";
    Название = "пл. Победы";

    Результат = OPI_GreenAPI.ПолучитьОписаниеЛокации(Широта, Долгота, Адрес, Название);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЛокации", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьЛокацию(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];

    Широта   = 53.908522;
    Долгота  = 27.574821;
    Адрес    = "Площадь Победы, Минск";
    Название = "пл. Победы";

    Локация = OPI_GreenAPI.ПолучитьОписаниеЛокации(Широта, Долгота, Адрес, Название);

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьЛокацию(ПараметрыДоступа, IDЧата, Локация);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_LocMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_LocMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Локация   = OPI_GreenAPI.ПолучитьОписаниеЛокации(Широта, Долгота);
    Результат = OPI_GreenAPI.ОтправитьЛокацию(ПараметрыДоступа, IDЧата, Локация, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьОписаниеКонтакта(ПараметрыФункции)

    Телефон  = 79001234568;
    Имя      = "Артем";
    Фамилия  = "Евпаторийский";
    Отчество = "Петрович";
    Компания = "Велосипед";

    Результат = OPI_GreenAPI.ПолучитьОписаниеКонтакта(Телефон, Имя, Фамилия, Отчество, Компания);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеКонтакта", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура GreenAPI_ОтправитьКонтакт(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];

    Телефон  = 79001234568;
    Имя      = "Артем";
    Фамилия  = "Евпаторийский";
    Отчество = "Петрович";
    Компания = "Велосипед";

    Контакт = OPI_GreenAPI.ПолучитьОписаниеКонтакта(Телефон, Имя, Фамилия, Отчество, Компания);

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОтправитьКонтакт(ПараметрыДоступа, IDЧата, Контакт);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

    IDСообщения = Результат["idMessage"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_ContactMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_ContactMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Контакт   = OPI_GreenAPI.ПолучитьОписаниеКонтакта(Телефон, , , , Компания);
    Результат = OPI_GreenAPI.ОтправитьКонтакт(ПараметрыДоступа, IDЧата, Контакт, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт (цитата)", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ПереслатьСообщения(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    Откуда = "11001234567@c.us";
    Откуда = ПараметрыФункции["GreenAPI_TestGroupID"]; // SKIP
    Куда   = ПараметрыФункции["GreenAPI_TestGroupID"];

    Сообщение = ПараметрыФункции["GreenAPI_MessageID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПереслатьСообщения(ПараметрыДоступа, Откуда, Куда, Сообщение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщения", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщения(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьУведомление(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьУведомление(ПараметрыДоступа);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьУведомление", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринУведомление(Результат);

    IDУведомления = Результат["receiptId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GreenAPI_ReceiptID", IDУведомления);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_ReceiptID", IDУведомления, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GreenAPI_УдалитьУведомлениеИзОчереди(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDДоставки = ПараметрыФункции["GreenAPI_ReceiptID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.УдалитьУведомлениеИзОчереди(ПараметрыДоступа, IDДоставки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьУведомлениеИзОчереди", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура GreenAPI_СкачатьФайлСообщения(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата      = ПараметрыФункции["GreenAPI_TestGroupID"];
    IDСообщения = ПараметрыФункции["GreenAPI_FileMessageID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.СкачатьФайлСообщения(ПараметрыДоступа, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайлСообщения", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринВходнойФайл(Результат);

КонецПроцедуры

Процедура GreenAPI_УстановитьОтметкуПрочтения(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата      = ПараметрыФункции["GreenAPI_TestGroupID"];
    IDСообщения = ПараметрыФункции["GreenAPI_FileMessageID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.УстановитьОтметкуПрочтения(ПараметрыДоступа, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьОтметкуПрочтения", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринПрочтение(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьОчередьСообщений(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьОчередьСообщений(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОчередьСообщений", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GreenAPI_ОчиститьОчередьСообщений(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ОчиститьОчередьСообщений(ПараметрыДоступа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьОчередьСообщений", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринОчисткаОчереди(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьИсториюЧата(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьИсториюЧата(ПараметрыДоступа, IDЧата);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюЧата", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьСообщение(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата      = ПараметрыФункции["GreenAPI_TestGroupID"];
    IDСообщения = ПараметрыФункции["GreenAPI_MessageID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьСообщение(ПараметрыДоступа, IDЧата, IDСообщения);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСообщение", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_ГринСообщение(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьЖурналВходящихСообщений(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьЖурналВходящихСообщений(ПараметрыДоступа);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЖурналВходящихСообщений", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GreenAPI_ПолучитьЖурналИсходящихСообщений(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.ПолучитьЖурналИсходящихСообщений(ПараметрыДоступа);

    // END

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, ПараметрыФункции["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Ошибка JSON");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЖурналИсходящихСообщений", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GreenAPI_АрхивироватьЧат(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.АрхивироватьЧат(ПараметрыДоступа, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьЧат", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GreenAPI_РазархивироватьЧат(ПараметрыФункции)

    ApiUrl           = ПараметрыФункции["GreenAPI_ApiURL"];
    MediaUrl         = ПараметрыФункции["GreenAPI_MediaURL"];
    IdInstance       = ПараметрыФункции["GreenAPI_IdInstance"];
    ApiTokenInstance = ПараметрыФункции["GreenAPI_Token"];

    IDЧата = ПараметрыФункции["GreenAPI_TestGroupID"];

    ПараметрыДоступа = OPI_GreenAPI.СформироватьПараметрыДоступа(ApiUrl, MediaUrl, IdInstance, ApiTokenInstance);
    Результат        = OPI_GreenAPI.РазархивироватьЧат(ПараметрыДоступа, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазархивироватьЧат", "GreenAPI");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

#КонецОбласти

#Область RCON

Процедура RCON_СформироватьПараметрыСоединения(ПараметрыФункции)

    URL           = ПараметрыФункции["RCON_URL"];
    Пароль        = ПараметрыФункции["RCON_Password"];
    ТаймаутЗаписи = 20;
    ТаймаутЧтения = 20;

    Результат = OPI_RCON.СформироватьПараметрыСоединения(URL, Пароль, ТаймаутЧтения, ТаймаутЗаписи);

    // END

    Результат["url"]      = "127.0.0.1:25565";
    Результат["password"] = "***";
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьПараметрыСоединения", "RCON");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура RCON_ОткрытьСоединение(ПараметрыФункции)

    URL           = ПараметрыФункции["RCON_URL"];
    Пароль        = ПараметрыФункции["RCON_Password"];
    ТаймаутЗаписи = 20;
    ТаймаутЧтения = 20;

    ПараметрыСоединения = OPI_RCON.СформироватьПараметрыСоединения(URL, Пароль, ТаймаутЧтения, ТаймаутЗаписи);
    Результат           = OPI_RCON.ОткрытьСоединение(ПараметрыСоединения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение", "RCON");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_RCON.Main");

КонецПроцедуры

Процедура RCON_ВыполнитьКоманду(ПараметрыФункции)

    URL           = ПараметрыФункции["RCON_URL"];
    Пароль        = ПараметрыФункции["RCON_Password"];
    ТаймаутЗаписи = 20;
    ТаймаутЧтения = 20;

    ПараметрыСоединения = OPI_RCON.СформироватьПараметрыСоединения(URL, Пароль, ТаймаутЧтения, ТаймаутЗаписи);
    Соединение          = OPI_RCON.ОткрытьСоединение(ПараметрыСоединения);

    Команда   = "list";
    Результат = OPI_RCON.ВыполнитьКоманду(Команда, Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьКоманду", "RCON");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Команда   = "list";
    Результат = OPI_RCON.ВыполнитьКоманду(Команда, ПараметрыСоединения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьКоманду (без соединения)", "RCON");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура RCON_ЭтоКоннектор(ПараметрыФункции)

    URL           = ПараметрыФункции["RCON_URL"];
    Пароль        = ПараметрыФункции["RCON_Password"];
    ТаймаутЗаписи = 20;
    ТаймаутЧтения = 20;

    ПараметрыСоединения = OPI_RCON.СформироватьПараметрыСоединения(URL, Пароль, ТаймаутЧтения, ТаймаутЗаписи);
    Соединение          = OPI_RCON.ОткрытьСоединение(ПараметрыСоединения);
    Результат           = OPI_RCON.ЭтоКоннектор(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЭтоКоннектор", "RCON");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

#КонецОбласти

#Область Ollama

Процедура Ollama_ПолучитьОтвет(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Промпт = "What is 1C:Enterprise?";
    Модель = "tinyllama";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьОтвет(URL, Модель, Промпт, , ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтвет", "Ollama"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_OllamaОтвет(Результат);                   // SKIP

    // С параметрами

    Промпт = "Ollama is 22 years old and is busy saving the world. Respond using JSON";

    Формат = OPI_Инструменты.JSONВСтруктуру("
    |{
    |""type"": ""object"",
    |""properties"": {
    |  ""age"": {
    |    ""type"": ""integer""
    |  },
    |  ""available"": {
    |    ""type"": ""boolean""
    |  }
    |},
    |""required"": [
    |  ""age"",
    |  ""available""
    |]
    |}");

    ДопПараметры = Новый Структура("format", Формат);

    Результат = OPI_Ollama.ПолучитьОтвет(URL, Модель, Промпт, ДопПараметры, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтвет (параметры)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaОтвет(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьОтветВКонтексте(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Модель = "tinyllama";

    МассивСообщений = Новый Массив;

    Вопрос1 = OPI_Ollama.ПолучитьСтруктуруСообщенияКонтекста("user", "What is 1C:Enterprise?");
    Вопрос2 = OPI_Ollama.ПолучитьСтруктуруСообщенияКонтекста("user", "When the first version was released?"); // Вопрос без конкретики

    // Добавляем первый вопрос в контекст
    МассивСообщений.Добавить(Вопрос1);

    Ответ1 = OPI_Ollama.ПолучитьОтветВКонтексте(URL, Модель, МассивСообщений, , ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Ответ1, "ПолучитьОтветВКонтексте (предварительный)", "Ollama"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_OllamaСообщение(Ответ1);                                           // SKIP

    МассивСообщений.Добавить(Ответ1["message"]); // Добавляем ответ на первый вопрос в контекст
    МассивСообщений.Добавить(Вопрос2);           // Добавляем второй вопрос в контекст

    Ответ2 = OPI_Ollama.ПолучитьОтветВКонтексте(URL, Модель, МассивСообщений, , ДопЗаголовки);

    МассивСообщений.Добавить(Ответ2["message"]);

    // ...

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Ответ2, "ПолучитьОтветВКонтексте", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaСообщение(Ответ2);

    МассивСообщений = Новый Массив;

    Вопрос = Новый Структура("role,content", "user", "Hello!");
    МассивСообщений.Добавить(Вопрос);

    Опции        = Новый Структура("seed,temperature", 101, 0);
    ДопПараметры = Новый Структура("options", Опции);

    Результат = OPI_Ollama.ПолучитьОтветВКонтексте(URL, Модель, МассивСообщений, ДопПараметры, ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтветВКонтексте (сид, 1)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaСообщение(Результат);

    Сообщение1 = Результат["message"]["content"];

    Результат = OPI_Ollama.ПолучитьОтветВКонтексте(URL, Модель, МассивСообщений, ДопПараметры, ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтветВКонтексте (сид, 2)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaСообщение(Результат);

    Сообщение2 = Результат["message"]["content"];

    Опции        = Новый Структура("seed,temperature", 555, 10);
    ДопПараметры = Новый Структура("options", Опции);

    Результат = OPI_Ollama.ПолучитьОтветВКонтексте(URL, Модель, МассивСообщений, ДопПараметры, ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтветВКонтексте (сид, 3)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaСообщение(Результат);

    Сообщение3 = Результат["message"]["content"];

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Сообщение1, Сообщение2);
    OPI_ПолучениеДанныхТестов.Проверка_Неравенство(Сообщение1, Сообщение3);

КонецПроцедуры

Процедура Ollama_ЗагрузитьМодельВПамять(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "tinyllama";
    Период = 500;

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ЗагрузитьМодельВПамять(URL, Модель, Период, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьМодельВПамять", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaЗагрузкаВыгрузка(Результат, Ложь);

КонецПроцедуры

Процедура Ollama_ВыгрузитьМодельИзПамяти(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "tinyllama";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ВыгрузитьМодельИзПамяти(URL, Модель, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыгрузитьМодельИзПамяти", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaЗагрузкаВыгрузка(Результат, Истина);

КонецПроцедуры

Процедура Ollama_ПолучитьСтруктуруПараметровЗапроса(ПараметрыФункции)

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровЗапроса();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровЗапроса", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровЗапроса(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровЗапроса (пустая)", "Ollama");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура Ollama_ПолучитьСтруктуруПараметровВКонтексте(ПараметрыФункции)

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровВКонтексте();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровВКонтексте", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровВКонтексте(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровВКонтексте (пустая)", "Ollama");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура Ollama_ПолучитьСтруктуруСообщенияКонтекста(ПараметрыФункции)

    Результат = OPI_Ollama.ПолучитьСтруктуруСообщенияКонтекста("user", "Hello!");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСообщенияКонтекста", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьСтруктуруНастроекМодели(ПараметрыФункции)

    Результат = OPI_Ollama.ПолучитьСтруктуруНастроекМодели();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекМодели", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Ollama.ПолучитьСтруктуруНастроекМодели(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруНастроекМодели (пустая)", "Ollama");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура Ollama_СоздатьМодель(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "mario";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Настройки = Новый Структура("from,system", "tinyllama", "You are Mario from Super Mario Bros.");

    Результат = OPI_Ollama.СоздатьМодель(URL, Модель, Настройки, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьМодель", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaУспех(Результат);

    Результат = OPI_Ollama.ПолучитьОтвет(URL, Модель, "How are you?", , ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьМодель (запрос)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaОтвет(Результат);

КонецПроцедуры

Процедура Ollama_УдалитьМодель(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "mario";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.УдалитьМодель(URL, Модель, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМодель", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaКод(Результат);

    Результат = OPI_Ollama.УдалитьМодель(URL, "library/tinyllama:latest", ДопЗаголовки);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМодель (tiny)", "Ollama");

    Результат = OPI_Ollama.УдалитьМодель(URL, "bayselonarrend/tinyllama:latest", ДопЗаголовки);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМодель (tiny, bay)", "Ollama");

    Результат = OPI_Ollama.ПолучитьСписокМоделей(URL, ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМодель (список)", "Ollama");

    OPI_ПолучениеДанныхТестов.Проверка_OllamaМодели(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["models"], 0);

КонецПроцедуры

Процедура Ollama_ПолучитьСписокМоделей(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьСписокМоделей(URL, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокМоделей", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaМодели(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьСписокЗапущенныхМоделей(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьСписокЗапущенныхМоделей(URL, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗапущенныхМоделей", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaМодели(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьИнформациюОМодели(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "mario";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьИнформациюОМодели(URL, Модель, Ложь, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОМодели", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaИнформацияМодели(Результат);

КонецПроцедуры

Процедура Ollama_КопироватьМодель(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "mario";
    Имя    = "mario2";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.КопироватьМодель(URL, Модель, Имя, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьМодель", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaКод(Результат);

    OPI_Ollama.УдалитьМодель(URL, Имя, ДопЗаголовки);

КонецПроцедуры

Процедура Ollama_ПолучитьВерсию(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьВерсию(URL, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВерсию", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaВерсия(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьПредставления(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    МассивСтрок = Новый Массив;
    МассивСтрок.Добавить("Why is the sky blue?");
    МассивСтрок.Добавить("Why is the grass green?");

    Модель = "tinyllama";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПолучитьПредставления(URL, Модель, МассивСтрок, , ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПредставления", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaПривязки(Результат);

КонецПроцедуры

Процедура Ollama_ПолучитьСтруктуруПараметровПредставлений(ПараметрыФункции)

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровПредставлений();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровПредставлений", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_Ollama.ПолучитьСтруктуруПараметровПредставлений(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруПараметровПредставлений (пустая)", "Ollama");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура Ollama_ОтправитьМодель(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "bayselonarrend/tinyllama:latest";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ОтправитьМодель(URL, Модель, , ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМодель", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaУспех(Результат);

КонецПроцедуры

Процедура Ollama_СкачатьМодель(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Модель = "tinyllama";

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.СкачатьМодель(URL, Модель, , ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьМодель", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaУспех(Результат);

    Результат = OPI_Ollama.СкачатьМодель(URL, "bayselonarrend/tinyllama:latest", , ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьМодель (bay)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaУспех(Результат);

КонецПроцедуры

Процедура Ollama_ОтправитьBlob(ПараметрыФункции)

    URL   = ПараметрыФункции["Ollama_URL"];
    Токен = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка, Истина);                   // SKIP
    Рандом   = ПолучитьДвоичныеДанныеИзСтроки(Строка(Новый УникальныйИдентификатор));   // SKIP
    Картинка = OPI_Инструменты.СклеитьДанные(Картинка, Рандом);                         // SKIP

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ОтправитьBlob(URL, Картинка, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьBlob", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaКод(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ollama_Blob", Результат["digest"]);
    ПараметрыФункции.Вставить("Ollama_Blob", Результат["digest"]);

КонецПроцедуры

Процедура Ollama_ПроверитьBlob(ПараметрыФункции)

    URL    = ПараметрыФункции["Ollama_URL"];
    Токен  = ПараметрыФункции["Ollama_Token"]; // Авторизация - не часть API Ollama
    SHA256 = ПараметрыФункции["Ollama_Blob"];

    ДопЗаголовки = Новый Соответствие;
    ДопЗаголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));

    Результат = OPI_Ollama.ПроверитьBlob(URL, SHA256, ДопЗаголовки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьBlob", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaКод(Результат);

    Результат = OPI_Ollama.ПроверитьBlob(URL, "yoyoyo", ДопЗаголовки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьBlob (ошибка)", "Ollama");
    OPI_ПолучениеДанныхТестов.Проверка_OllamaОшибка(Результат);

КонецПроцедуры

#КонецОбласти

#Область HTTP

Процедура HTTPКлиент_Инициализировать(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP
        .НовыйЗапрос()
        .Инициализировать(URL) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    Попытка

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Инициализировать", "HTTPКлиент");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"].Количество()).Равно(0);

        HTTPКлиент = OPI_ЗапросыHTTP.НовыйЗапрос()
            .Инициализировать(URL)
            .ОбработатьЗапрос("POST", Ложь);

        HTTPЗапрос     = HTTPКлиент.ВернутьЗапрос();
        HTTPСоединение = HTTPКлиент.ВернутьСоединение();
        HTTPОтвет      = HTTPКлиент.ВернутьОтвет();
        ОсновнойURL    = СтрЗаменить(ПараметрыФункции["HTTP_URL"], "https://", "");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос).ИмеетТип("HTTPЗапрос");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPСоединение).ИмеетТип("HTTPСоединение");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос.АдресРесурса).Равно("/get");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPСоединение.Сервер).Равно(ОсновнойURL);

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPОтвет).Равно(Неопределено);

        ДругойЗапрос = HTTPКлиент.УстановитьURL(ПараметрыФункции["HTTP_URL"] + "/post")
            .ОбработатьЗапрос("POST", Ложь)
            .ВернутьЗапрос();

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(ДругойЗапрос).ИмеетТип("HTTPЗапрос");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(ДругойЗапрос.АдресРесурса).Равно("/post");

    Исключение
        Сообщить(HTTPКлиент.ПолучитьЛог(Истина));
        ВызватьИсключение ОписаниеОшибки();
    КонецПопытки;

КонецПроцедуры

Процедура HTTPКлиент_УстановитьURL(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    Попытка

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьURL", "HTTPКлиент");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"].Количество()).Равно(0);

        HTTPКлиент = OPI_ЗапросыHTTP.НовыйЗапрос()
            .Инициализировать()
            .УстановитьURL(URL)
            .ОбработатьЗапрос("POST", Ложь);

        HTTPЗапрос     = HTTPКлиент.ВернутьЗапрос();
        HTTPСоединение = HTTPКлиент.ВернутьСоединение();
        HTTPОтвет      = HTTPКлиент.ВернутьОтвет();
        ОсновнойURL    = СтрЗаменить(ПараметрыФункции["HTTP_URL"], "https://", "");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос).ИмеетТип("HTTPЗапрос");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPСоединение).ИмеетТип("HTTPСоединение");

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос.АдресРесурса).Равно("/get");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPСоединение.Сервер).Равно(ОсновнойURL);

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPОтвет).Равно(Неопределено);
    Исключение
        Сообщить(HTTPКлиент.ПолучитьЛог(Истина));
        ВызватьИсключение ОписаниеОшибки();
    КонецПопытки;

КонецПроцедуры

Процедура HTTPКлиент_УстановитьПараметрыURL(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    СтруктураПараметров = Новый Структура("param1,param2", "text", 10);

    Результат = OPI_ЗапросыHTTP
        .НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьПараметрыURL(СтруктураПараметров) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    Адрес     = "/get?param1=text&param2=10";
    ПолныйURL = ПараметрыФункции["HTTP_URL"] + Адрес;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПараметрыURL", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"].Количество()).Равно(2);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["url"]).Равно(ПолныйURL);

    HTTPКлиент = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьПараметрыURL(СтруктураПараметров)
        .ОбработатьЗапрос("POST", Ложь);

    HTTPЗапрос = HTTPКлиент.ВернутьЗапрос();

    Попытка

        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос).ИмеетТип("HTTPЗапрос");
        OPI_ПолучениеДанныхТестов.ОжидаетЧто(HTTPЗапрос.АдресРесурса).Равно(Адрес);

    Исключение
        Сообщить(HTTPКлиент.ПолучитьЛог(Истина));
        ВызватьИсключение ОписаниеОшибки();
    КонецПопытки;

    // Проверка кодировки

    // Комплексная

    СтруктураПараметров1 = Новый Структура;
    СтруктураПараметров1.Вставить("param1", "search?text");
    СтруктураПараметров1.Вставить("param2", "John Doe");
    СтруктураПараметров1.Вставить("param3", "value&another");
    СтруктураПараметров1.Вставить("param4", "кириллица");
    СтруктураПараметров1.Вставить("param5", "<script>alert('XSS')</script>");

    АдресРесурса1 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров1)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант1 = "/page?param1=search%3Ftext&param2=John%20Doe&param3=value%26another&param4=%D0%BA%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0&param5=%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса1).Равно(ПравильныйВариант1);

    СтруктураПараметров2 = Новый Структура;
    СтруктураПараметров2.Вставить("param1", "search?text");
    СтруктураПараметров2.Вставить("param2", "John Doe");

    // Параметры в оригинальном URL

    АдресРесурса2 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page?existing=value")
        .УстановитьПараметрыURL(СтруктураПараметров2)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант2 = "/page?existing=value&param1=search%3Ftext&param2=John%20Doe";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса2).Равно(ПравильныйВариант2);

    // Пустая строка параметров

    СтруктураПараметров3 = Новый Структура;
    СтруктураПараметров3.Вставить("param1", "search?text");
    СтруктураПараметров3.Вставить("param2", "John Doe");

    АдресРесурса3 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page?")
        .УстановитьПараметрыURL(Структурапараметров3)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант3 = "/page?param1=search%3Ftext&param2=John%20Doe";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса3).Равно(ПравильныйВариант3);

    // Спец. символы в пути

    СтруктураПараметров4 = Новый Структура;
    СтруктураПараметров4.Вставить("param1", "search?text");
    СтруктураПараметров4.Вставить("param2", "John Doe");

    АдресРесурса4 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/path with spaces")
        .УстановитьПараметрыURL(СтруктураПараметров4)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант4 = "/path%20with%20spaces?param1=search%3Ftext&param2=John%20Doe";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса4).Равно(ПравильныйВариант4);

    // URL с фрагментом

    СтруктураПараметров5 = Новый Структура;
    СтруктураПараметров5.Вставить("param1", "search?text");
    СтруктураПараметров5.Вставить("param2", "John Doe");

    АдресРесурса5 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page#section")
        .УстановитьПараметрыURL(СтруктураПараметров5)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант5 = "/page?param1=search%3Ftext&param2=John%20Doe#section";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса5).Равно(ПравильныйВариант5);

    // Кирилица в пути

    СтруктураПараметров6 = Новый Структура;
    СтруктураПараметров6.Вставить("param1", "search?text");
    СтруктураПараметров6.Вставить("param2", "John Doe");

    АдресРесурса6 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/путь")
        .УстановитьПараметрыURL(СтруктураПараметров6)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант6 = "/%D0%BF%D1%83%D1%82%D1%8C?param1=search%3Ftext&param2=John%20Doe";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса6).Равно(ПравильныйВариант6);

    // Несколько параметров и кодировка

    СтруктураПараметров7 = Новый Структура;
    СтруктураПараметров7.Вставить("param1", "value1");
    СтруктураПараметров7.Вставить("param2", "value two");
    Структурапараметров7.Вставить("param3", "value<three>");

    АдресРесурса7 = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров7)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    ПравильныйВариант7 = "/page?param1=value1&param2=value%20two&param3=value%3Cthree%3E";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(АдресРесурса7).Равно(ПравильныйВариант7);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьФайлОтвета(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    ИВФ = ПолучитьИмяВременногоФайла();

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьФайлОтвета(ИВФ) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьИмяФайлаТелаОтвета();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьФайлОтвета", "HTTPКлиент");

    ФайлТела        = Новый Файл(ИВФ);
    ФайлТелаВозврат = Новый Файл(Результат);

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ИВФ).Равно(Результат);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлТела.Размер()).Равно(ФайлТелаВозврат.Размер());
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлТела.Размер() > 0).Равно(Истина);

    РезультатПроверки = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .УстановитьФайлОтвета(ИВФ) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакДвоичныеДанные();

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлТела.Размер()).Равно(РезультатПроверки.Размер());

    РезультатПроверкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(РезультатПроверки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(РезультатПроверкиСтрокой, "УстановитьФайлОтвета (тело)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(OPI_Инструменты.JsonВСтруктуру(РезультатПроверкиСтрокой)).ИмеетТип("Соответствие");

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла", "HTTPКлиент");
    КонецПопытки;

КонецПроцедуры

Процедура HTTPКлиент_УстановитьТипДанных(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    ТипMIME = "text/markdown";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьСтроковоеТело("# Привет мир!")
        .УстановитьТипДанных(ТипMIME) // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТипДанных", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно(ТипMIME);

КонецПроцедуры

Процедура HTTPКлиент_ПолучитьЛог(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    СтруктураПараметров = Новый Структура("param1,param2", "text", 10);

    HTTPКлиент = OPI_ЗапросыHTTP
        .НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьПараметрыURL(СтруктураПараметров)
        .ОбработатьЗапрос("GET");

    Ответ = HTTPКлиент.ВернутьОтветКакJSONКоллекцию();
    Лог   = HTTPКлиент.ПолучитьЛог(Истина);

    // END

КонецПроцедуры

Процедура HTTPКлиент_УстановитьДвоичноеТело(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка) // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
        Результат["data"]   = "...";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьДвоичноеТело", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/octet-stream");

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);

    Размер = Картинка.Размер();
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Размер);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Length"]).Равно(Размер);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьСтроковоеТело(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Текст     = "Привет мир!";
    Кодировка = "Windows-1251";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .ИспользоватьКодировку(Кодировка)
        .УстановитьСтроковоеТело(Текст) // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтроковоеТело", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("text/plain; charset=" + Кодировка);

    ТекстДД = ПолучитьДвоичныеДанныеИзСтроки(Текст, Кодировка);
    Размер  = ТекстДД.Размер();
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Размер);

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Length"]).Равно(Размер);

    ТекстB64 = "data:application/octet-stream;base64," + Base64Строка(ТекстДД);

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["data"] = ТекстB64 Или Результат["data"] = Текст).Равно(Истина);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьJsonТело(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    СлучайныйМассив = Новый Массив;
    СлучайныйМассив.Добавить("A");
    СлучайныйМассив.Добавить("B");
    СлучайныйМассив.Добавить("C");

    Данные = Новый Структура("Поле1,Поле2,Поле3", 10, "Текст", СлучайныйМассив);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьJsonТело(Данные) // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтроковоеТело", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/json; charset=utf-8");

    JSONРезультат = Результат["json"];
    JSONОригинал  = Данные;

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(JSONРезультат["Поле1"]).Равно(JSONОригинал["Поле1"]);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(JSONРезультат["Поле2"]).Равно(JSONОригинал["Поле2"]);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(JSONРезультат["Поле3"][0]).Равно(JSONОригинал["Поле3"][0]);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(JSONРезультат["Поле3"][1]).Равно(JSONОригинал["Поле3"][1]);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(JSONРезультат["Поле3"][2]).Равно(JSONОригинал["Поле3"][2]);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьFormТело(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Данные = Новый Структура("Поле1,Поле2", "10", "Текст");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьFormТело(Данные) // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьFormТело", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/x-www-form-urlencoded; charset=utf-8");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле1"]).Равно(Данные["Поле1"]);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле2"]).Равно(Данные["Поле2"]);

КонецПроцедуры

Процедура HTTPКлиент_НачатьЗаписьТелаMultipart(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .НачатьЗаписьТелаMultipart() // <---
        .ДобавитьФайлMultipartFormData("file1", "pic.png", Картинка, "image/png")
        .ДобавитьПолеMultipartFormData("Поле1", "Текст")
        .ДобавитьПолеMultipartFormData("Поле2", "10")
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьЗаписьТелаMultipart", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьФайлMultipartFormData(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .НачатьЗаписьТелаMultipart()
        .ДобавитьФайлMultipartFormData("file1", "pic.png", Картинка, "image/png") // <---
        .ДобавитьПолеMultipartFormData("Поле1", "Текст")
        .ДобавитьПолеMultipartFormData("Поле2", "10")
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьФайлMultipartFormData", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьПолеMultipartFormData(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .НачатьЗаписьТелаMultipart()
        .ДобавитьФайлMultipartFormData("file1", "pic.png", Картинка, "image/png")
        .ДобавитьПолеMultipartFormData("Поле1", "Текст") // <---
        .ДобавитьПолеMultipartFormData("Поле2", "10")    // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПолеMultipartFormData", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьДанныеRelated(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    СлучайныйМассив = Новый Массив;
    СлучайныйМассив.Добавить("A");
    СлучайныйМассив.Добавить("B");
    СлучайныйМассив.Добавить("C");

    Данные = Новый Структура("Поле1,Поле2,Поле3", 10, "Текст", СлучайныйМассив);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .НачатьЗаписьТелаMultipart(Истина, "related")
        .ДобавитьДанныеRelated(Данные, "application/json; charset=UTF-8") // <---
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьДанныеRelated", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

КонецПроцедуры

Процедура HTTPКлиент_ИспользоватьКодировку(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Текст     = "Привет мир!";
    Кодировка = "Windows-1251";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .ИспользоватьКодировку(Кодировка) // <---
        .УстановитьСтроковоеТело(Текст)
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтроковоеТело", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("text/plain; charset=" + Кодировка);

КонецПроцедуры

Процедура HTTPКлиент_ИспользоватьСжатиеGzip(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ИспользоватьСжатиеGzip(Ложь) // <---
        .ОбработатьЗапрос("POST", Ложь)
        .ВернутьЗапрос();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИспользоватьСжатиеGzip", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Заголовки["Accept-Encoding"]).Равно(Неопределено);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ИспользоватьСжатиеGzip(Истина) // <---
        .ОбработатьЗапрос("POST", Ложь)
        .ВернутьЗапрос();

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИспользоватьСжатиеGzip (включено)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Заголовки["Accept-Encoding"]).Равно("gzip");

КонецПроцедуры

Процедура HTTPКлиент_ИспользоватьПоляТелаВOAuth(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Токен              = "***";
    Секрет             = "***";
    КлючПользователя   = "***";
    СекретПользователя = "***";
    Версия             = "1.0";

    НовыйЗапрос = OPI_ЗапросыHTTP.НовыйЗапрос().Инициализировать(URL);

    Результат = НовыйЗапрос
        .НачатьЗаписьТелаMultipart()
        .ДобавитьФайлMultipartFormData("file1", "pic.png", Картинка, "image/png")
        .ДобавитьПолеMultipartFormData("field1", "Текст")
        .ДобавитьПолеMultipartFormData("field2", "10")
        .ИспользоватьПоляТелаВOAuth(Ложь) // <---
        .ДобавитьOauthV1Авторизацию(Токен, Секрет, КлючПользователя, СекретПользователя, Версия)
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"]         = "***";
        Результат["files"]["file1"] = "...";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    ЛогСтрокой = НовыйЗапрос.ПолучитьЛог(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИспользоватьMultipartПоляВOAuth", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНайти(ЛогСтрокой, "добавление полей тела в строку для подписи")).Равно(0);

    Результат = OPI_ЗапросыHTTP
        .НовыйЗапрос()
        .Инициализировать(URL)
        .НачатьЗаписьТелаMultipart()
        .ДобавитьФайлMultipartFormData("file1", "pic.png", Картинка, "image/png")
        .ДобавитьПолеMultipartFormData("field1", "Текст")
        .ДобавитьПолеMultipartFormData("field2", "10")
        .ИспользоватьПоляТелаВOAuth(Истина) // <---
        .ДобавитьOauthV1Авторизацию(Токен, Секрет, КлючПользователя, СекретПользователя, Версия)
        .ОбработатьЗапрос("POST", Ложь)
        .ПолучитьЛог(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИспользоватьMultipartПоляВOAuth (включено)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНайти(Результат, "добавление полей тела в строку для подписи") <> 0).Равно(Истина);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьЗаголовки(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Header1", "Value1");
    Заголовки.Вставить("X-Header2", "Value2");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .УстановитьЗаголовки(Заголовки) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗаголовки", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBearerАвторизацию("1111")
        .УстановитьЗаголовки(Заголовки, Истина) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗаголовки (перезапись)", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьЗаголовок(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьЗаголовок("X-Header1", "Value1") // <---
        .ДобавитьЗаголовок("X-Header2", "Value2") // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаголовок", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");

    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Header1", "Value1");
    Заголовки.Вставить("X-Header2", "Value2");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBearerАвторизацию("1111")
        .ДобавитьЗаголовок("X-Header3", "BadValue") // <---
        .ДобавитьЗаголовок("X-Header4", "BadValue")
        .УстановитьЗаголовки(Заголовки, Истина) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаголовок (с заменой)", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header3"]).Равно(Неопределено);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header4"]).Равно(Неопределено);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBearerАвторизацию("1111")
        .ДобавитьЗаголовок("X-Header3", "BadValue") // <---
        .ДобавитьЗаголовок("X-Header4", "BadValue")
        .УстановитьЗаголовки(Заголовки) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаголовок (с дополнением)", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header3"]).Равно("BadValue");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Header4"]).Равно("BadValue");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьBasicАвторизацию(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBasicАвторизацию("user", "password") // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьBasicАвторизацию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Basic " + Base64Строка(ПолучитьДвоичныеДанныеИзСтроки("user:password")));

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьBearerАвторизацию(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBearerАвторизацию("123123") // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьBearerАвторизацию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer " + "123123");

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьAWS4Авторизацию(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    AccessKey = "AccessKey";
    SecretKey = "SecretKey";
    Region    = "Region";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьAWS4Авторизацию(AccessKey, SecretKey, Region) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьAWS4Авторизацию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "AWS4")).Равно(Истина);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["headers"]["X-Amz-Content-Sha256"] = Неопределено).Равно(Ложь);

КонецПроцедуры

Процедура HTTPКлиент_ДобавитьOAuthV1Авторизацию(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Токен              = "***";
    Секрет             = "***";
    КлючПользователя   = "***";
    СекретПользователя = "***";
    Версия             = "1.0";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .ДобавитьOAuthV1Авторизацию(Токен, Секрет, КлючПользователя, СекретПользователя, Версия) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьOauthV1Авторизацию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "OAuth")).Равно(Истина);

КонецПроцедуры

Процедура HTTPКлиент_УстановитьАлгоритмOAuthV1(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Токен              = "***";
    Секрет             = "***";
    КлючПользователя   = "***";
    СекретПользователя = "***";
    Версия             = "1.0";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .ДобавитьOAuthV1Авторизацию(Токен, Секрет, КлючПользователя, СекретПользователя, Версия)
        .УстановитьАлгоритмOAuthV1("HMAC", "SHA1") // <---
        .ОбработатьЗапрос("GET")
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");

        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьOauthV1Авторизацию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "OAuth")).Равно(Истина);

КонецПроцедуры

Процедура HTTPКлиент_ОбработатьЗапрос(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET") // <---
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбработатьЗапрос", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"].Количество()).Равно(0);

КонецПроцедуры

Процедура HTTPКлиент_ВыполнитьЗапрос(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET", Ложь)
        .ВыполнитьЗапрос() // <---
        .ВернутьОтветКакJSONКоллекцию();

    // END

    Попытка
        Результат["origin"] = "***";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапрос", "HTTPКлиент");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат["args"].Количество()).Равно(0);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьОтвет(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапрос (без выполнения)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).Равно(Неопределено);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET", Ложь)
        .ВыполнитьЗапрос()
        .ВернутьОтвет(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапрос (выполнение)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат = Неопределено).Равно(Ложь);

КонецПроцедуры

Процедура HTTPКлиент_ВернутьЗапрос(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос(); // <---

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьЗапрос", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("HTTPЗапрос");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ВернутьЗапрос(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьЗапрос (принудительно)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).Равно(Неопределено);

КонецПроцедуры

Процедура HTTPКлиент_ВернутьСоединение(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьСоединение(); // <---

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьСоединение", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ВернутьСоединение(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьСоединение (принудительно)", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).Равно(Неопределено);

КонецПроцедуры

Процедура HTTPКлиент_ВернутьОтвет(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ОбработатьЗапрос("POST")
        .ВернутьОтвет(); // <---

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьОтвет", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("HTTPОтвет");

КонецПроцедуры

Процедура HTTPКлиент_ВернутьОтветКакJSONКоллекцию(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию(); // <---

    // END

    Попытка
        Результат["origin"] = "***";
        Результат["data"]   = "...";
    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(Результат.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(Результат));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьОтветКакJSONКоллекцию", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Соответствие");

КонецПроцедуры

Процедура HTTPКлиент_ВернутьОтветКакДвоичныеДанные(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакДвоичныеДанные(); // <---

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьОтветКакДвоичныеДанные", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

КонецПроцедуры

Процедура HTTPКлиент_ВернутьОтветКакСтроку(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/post";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьДвоичноеТело(Картинка)
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакСтроку(); // <---

    // END

    Попытка

        РезультатJSON = OPI_Инструменты.JSONВСтруктуру(Результат);

        РезультатJSON["origin"] = "***";
        РезультатJSON["data"]   = "...";

    Исключение
        Сообщить("Не удалось заменить origin");
        Попытка
            Сообщить(РезультатJSON.ПолучитьЛог(Истина));
        Исключение
            Сообщить(ПолучитьСтрокуИзДвоичныхДанных(РезультатJSON));
        КонецПопытки;
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(РезультатJSON, "ВернутьОтветКакСтроку", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка");

КонецПроцедуры

Процедура HTTPКлиент_ВернутьИмяФайлаТелаОтвета(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    ИВФ = ПолучитьИмяВременногоФайла();

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать(URL)
        .УстановитьФайлОтвета(ИВФ) // <---
        .ОбработатьЗапрос("GET")
        .ВернутьИмяФайлаТелаОтвета();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьИмяФайлаТелаОтвета", "HTTPКлиент");

    ФайлТела        = Новый Файл(ИВФ);
    ФайлТелаВозврат = Новый Файл(Результат);

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ИВФ).Равно(Результат);
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлТела.Размер()).Равно(ФайлТелаВозврат.Размер());
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ФайлТела.Размер() > 0).Равно(Истина);

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ОписаниеОшибки(), "Ошибка удаления файла", "HTTPКлиент");
    КонецПопытки;

КонецПроцедуры

Процедура HTTPКлиент_УстановитьПрокси(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    НастройкиПрокси = Новый ИнтернетПрокси;
    НастройкиПрокси.Установить("https", "proxy.com", 443, "user", "password", Ложь);

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .УстановитьПрокси(НастройкиПрокси) // <---
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьСоединение();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПрокси", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Прокси.Пользователь("https")).Равно("user");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Прокси.Пароль("https")).Равно("password");

КонецПроцедуры

Процедура HTTPКлиент_УстановитьТаймаут(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .УстановитьТаймаут(60) // <---
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьСоединение();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТаймаут", "HTTPКлиент");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Таймаут).Равно(60);

КонецПроцедуры

Процедура HTTPКлиент_ИспользоватьКодированиеURL(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("param1", "search?text");
    СтруктураПараметров.Вставить("param2", "John Doe");
    СтруктураПараметров.Вставить("param3", "value&another");
    СтруктураПараметров.Вставить("param4", "кириллица");
    СтруктураПараметров.Вставить("param5", "<script>alert('XSS')</script>");

    БезКодирования = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров)
        .ИспользоватьКодированиеURL(Ложь) // <---
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    СКодированием = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    // END

    Результат = Новый Соответствие;
    Результат.Вставить("Без кодирования", БезКодирования);
    Результат.Вставить("С кодированием" , СКодированием);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИспользоватьКодированиеURL", "HTTPКлиент");

    ПравильныйВариант1 = "/page?param1=search?text&param2=John Doe&param3=value&another&param4=кириллица&param5=<script>alert('XSS')</script>";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(БезКодирования).Равно(ПравильныйВариант1);

    ПравильныйВариант2 = "/page?param1=search%3Ftext&param2=John%20Doe&param3=value%26another&param4=%D0%BA%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0&param5=%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(СКодированием).Равно(ПравильныйВариант2);

КонецПроцедуры

Процедура HTTPКлиент_РазделятьМассивыВURL(ПараметрыФункции)

    URL = ПараметрыФункции["HTTP_URL"];
    URL = URL + "/get";

    ПараметрМассив = Новый Массив;
    ПараметрМассив.Добавить("val1");
    ПараметрМассив.Добавить("val2");
    ПараметрМассив.Добавить("val3");

    СтруктураПараметров = Новый Структура("arrayfield", ПараметрМассив);

    Разделение = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров)
        .РазделятьМассивыВURL(Истина) // <---
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    РазделениеPhp = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров)
        .РазделятьМассивыВURL(Истина, Истина) // <---
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    БезРазделения = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать("https://example.com/page")
        .УстановитьПараметрыURL(СтруктураПараметров)
        .ОбработатьЗапрос("GET", Ложь)
        .ВернутьЗапрос()
        .АдресРесурса;

    // END

    Результат = СтрШаблон("Без разделения: %1;
    |Разделение: %2
    |Разделение (php): %3", БезРазделения, Разделение, РазделениеPhp);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазделятьМассивыВURL", "HTTPКлиент");

    ПравильныйВариант1 = "/page?arrayfield=val1&arrayfield=val2&arrayfield=val3";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Разделение).Равно(ПравильныйВариант1);

    ПравильныйВариант2 = "/page?arrayfield=[val1,val2,val3]";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(БезРазделения).Равно(ПравильныйВариант2);

    ПравильныйВариант3 = "/page?arrayfield[]=val1&arrayfield[]=val2&arrayfield[]=val3";
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(РазделениеPhp).Равно(ПравильныйВариант3);

КонецПроцедуры

#КонецОбласти

#Область OpenAI

Процедура OpenAI_ПолучитьОтвет(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    // Текстовые сообщения

    Сообщения = Новый Массив;
    Сообщения.Добавить(OPI_OpenAI.ПолучитьСтруктуруСообщения("user"     , "What is 1C:Enterprise?"));
    Сообщения.Добавить(OPI_OpenAI.ПолучитьСтруктуруСообщения("assistant", "1C:Enterprise is a full-stack, low-code platform"));
    Сообщения.Добавить(OPI_OpenAI.ПолучитьСтруктуруСообщения("user"     , "When the first version was released?"));

    Модель = "smolvlm-256m-instruct";

    Результат = OPI_OpenAI.ПолучитьОтвет(URL, Токен, Модель, Сообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтвет", "OpenAI"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIОтвет(Результат);                   // SKIP

    // Картинки

    Модель     = "moondream2-20250414";
    Файл       = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    ИмяФайла   = СтрШаблон("%1.png", Строка(Новый УникальныйИдентификатор()));
    Назначение = "user_data";

    Сообщения = Новый Массив;

    ЗагрузкаКартинки = OPI_OpenAI.ЗагрузитьФайл(URL, Токен, ИмяФайла, Файл, Назначение);
    IDКартинки       = ЗагрузкаКартинки["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(ЗагрузкаКартинки, "ПолучитьОтвет (загрузка картинки)", "OpenAI"); // SKIP

    Описание = OPI_OpenAI.ПолучитьСтруктуруСообщенияКартинки("user", IDКартинки, "What is in this image?");

    Сообщения.Добавить(Описание);

    Результат = OPI_OpenAI.ПолучитьОтвет(URL, Токен, Модель, Сообщения);

    OPI_OpenAI.УдалитьФайл(URL, Токен, IDКартинки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОтвет (картинка)", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIОтвет(Результат);

КонецПроцедуры

Процедура OpenAI_ПолучитьПредставления(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Текст  = "What is 1C:Enterprise?";
    Модель = "text-embedding-ada-002";

    Результат = OPI_OpenAI.ПолучитьПредставления(URL, Токен, Модель, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПредставления", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIПредставления(Результат);

КонецПроцедуры

Процедура OpenAI_СоздатьАссистента(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Инструкция = "You are a personal math tutor. When asked a question, write and run Python code to answer the question.";
    Модель     = "smolvlm-256m-instruct";
    Имя        = "Math tutor";

    Результат = OPI_OpenAI.СоздатьАссистента(URL, Токен, Модель, Имя, Инструкция);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьАссистента", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIАссистент(Результат, Имя);

    IDАссистента = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("OpenAI_Assistant", IDАссистента);
    OPI_Инструменты.ДобавитьПоле("OpenAI_Assistant", IDАссистента, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура OpenAI_УдалитьАссистента(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    IDАссистента = ПараметрыФункции["OpenAI_Assistant"];

    Результат = OPI_OpenAI.УдалитьАссистента(URL, Токен, IDАссистента);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьАссистента", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIУдалениеАссистента(Результат, IDАссистента);

КонецПроцедуры

Процедура OpenAI_ПолучитьАссистента(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    IDАссистента = ПараметрыФункции["OpenAI_Assistant"];

    Результат = OPI_OpenAI.ПолучитьАссистента(URL, Токен, IDАссистента);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьАссистента", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIАссистент(Результат, "Math tutor");

КонецПроцедуры

Процедура OpenAI_ПолучитьСписокАссистентов(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Количество   = 2;
    ДопПараметры = Новый Структура("after,order", "asst_2", "desc");

    Результат = OPI_OpenAI.ПолучитьСписокАссистентов(URL, Токен, Количество, ДопПараметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокАссистентов", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"]);

КонецПроцедуры

Процедура OpenAI_ЗагрузитьФайл(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Файл = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    ИмяФайла   = СтрШаблон("%1.png", Строка(Новый УникальныйИдентификатор()));
    Назначение = "assistants";

    Результат = OPI_OpenAI.ЗагрузитьФайл(URL, Токен, ИмяФайла, Файл, Назначение);

    // END

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIФайл(Результат, ИмяФайла, Файл.Размер() + 2, Назначение);

    IDФайла = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("OpenAI_File", IDФайла);
    OPI_Инструменты.ДобавитьПоле("OpenAI_File", IDФайла, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура OpenAI_УдалитьФайл(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    IDФайла = ПараметрыФункции["OpenAI_File"];

    Результат = OPI_OpenAI.УдалитьФайл(URL, Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIУдалениеФайла(Результат, IDФайла);

КонецПроцедуры

Процедура OpenAI_ПолучитьИнформациюОФайле(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    IDФайла = ПараметрыФункции["OpenAI_File"];

    Результат = OPI_OpenAI.ПолучитьИнформациюОФайле(URL, Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIФайл(Результат);

КонецПроцедуры

Процедура OpenAI_ПолучитьСписокФайлов(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Результат = OPI_OpenAI.ПолучитьСписокФайлов(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"]);

КонецПроцедуры

Процедура OpenAI_СкачатьФайл(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    IDФайла = ПараметрыФункции["OpenAI_File"];

    Результат = OPI_OpenAI.СкачатьФайл(URL, Токен, IDФайла);

    // END

    Файл = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, Файл.Размер() + 2);

КонецПроцедуры

Процедура OpenAI_ПолучитьСтруктуруСообщения(ПараметрыФункции)

    Результат = OPI_OpenAI.ПолучитьСтруктуруСообщения("user", "What is 1C:Enterprise?");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСообщения", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура OpenAI_ПолучитьСтруктуруСообщенияКартинки(ПараметрыФункции)

    URL      = ПараметрыФункции["OpenAI_URL"];
    Токен    = ПараметрыФункции["OpenAI_Token"];
    Картинка = ПараметрыФункции["OpenAI_File"];

    Результат = OPI_OpenAI.ПолучитьСтруктуруСообщенияКартинки("user", Картинка, "What is in this image?");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСообщенияКартинки", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура OpenAI_СгенерироватьРечь(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Текст  = "Attack ships on fire off the shoulder of Orion bright as magnesium";
    Модель = "tts-1";

    ДопПараметры = Новый Структура("response_format", "wav");

    Результат = OPI_OpenAI.СгенерироватьРечь(URL, Токен, Модель, Текст, , ДопПараметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СгенерироватьРечь", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 137516);

    //@skip-check missing-temporary-file-deletion
    ИВФ = ПолучитьИмяВременногоФайла("wav");
    Результат.Записать(ИВФ);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("OpenAI_Speech", ИВФ);
    OPI_Инструменты.ДобавитьПоле("OpenAI_Speech", ИВФ, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура OpenAI_СоздатьТранскрипцию(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Аудио  = ПараметрыФункции["OpenAI_Speech"];
    Модель = "whisper-1";

    Результат = OPI_OpenAI.СоздатьТранскрипцию(URL, Токен, Модель, Аудио, "audio/wav");

    // END

    Попытка
        УдалитьФайлы(Аудио);
    Исключение
        Сообщить("Ошибка удаления файла после теста");
    КонецПопытки;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТранскрипцию", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(нРег(Результат["text"]), "attack ships on fire off the shoulder of orion bright as magnesium.");

КонецПроцедуры

Процедура OpenAI_ПолучитьКартинки(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL2"];
    Токен = ПараметрыФункции["OpenAI_Token2"];

    Модель    = "dall-e-3";
    Описание  = OPI_OpenAI.ПолучитьСтруктуруОписанияКартинок("Yellow alpaca", 1, , "1024x1024");
    Результат = OPI_OpenAI.ПолучитьКартинки(URL, Токен, Модель, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКартинки", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIКартинка(Результат);

КонецПроцедуры

Процедура OpenAI_ПолучитьСписокМоделей(ПараметрыФункции)

    URL   = ПараметрыФункции["OpenAI_URL"];
    Токен = ПараметрыФункции["OpenAI_Token"];

    Результат = OPI_OpenAI.ПолучитьСписокМоделей(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокМоделей", "OpenAI");
    OPI_ПолучениеДанныхТестов.Проверка_OpenAIСписок(Результат);

КонецПроцедуры

Процедура OpenAI_ПолучитьСообщениеАссистента(ПараметрыФункции)

    Результат = OPI_OpenAI.ПолучитьСообщениеАссистента("What is 1C:Enterprise?");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСообщениеАссистента", "OpenAI");

    Проверка  = OPI_OpenAI.ПолучитьСтруктуруСообщения("assistant", "What is 1C:Enterprise?");
    Проверка  = OPI_Инструменты.JSONСтрокой(Проверка);
    Результат = OPI_Инструменты.JSONСтрокой(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Результат, Проверка);

КонецПроцедуры

Процедура OpenAI_ПолучитьСообщениеПользователя(ПараметрыФункции)

    Результат = OPI_OpenAI.ПолучитьСообщениеПользователя("What is 1C:Enterprise?", "Vitaly");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСообщениеПользователя", "OpenAI");

    Проверка  = OPI_OpenAI.ПолучитьСтруктуруСообщения("user", "What is 1C:Enterprise?", "Vitaly");
    Проверка  = OPI_Инструменты.JSONСтрокой(Проверка);
    Результат = OPI_Инструменты.JSONСтрокой(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Результат, Проверка);

КонецПроцедуры

Процедура OpenAI_ПолучитьСообщениеСистемы(ПараметрыФункции)

    Результат = OPI_OpenAI.ПолучитьСообщениеСистемы("What is 1C:Enterprise?");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСообщениеСистемы", "OpenAI");

    Проверка  = OPI_OpenAI.ПолучитьСтруктуруСообщения("system", "What is 1C:Enterprise?");
    Проверка  = OPI_Инструменты.JSONСтрокой(Проверка);
    Результат = OPI_Инструменты.JSONСтрокой(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Результат, Проверка);

КонецПроцедуры

#КонецОбласти

#Область MSSQL

Процедура MSSQL_СформироватьСтрокуПодключения(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];

    Результат = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);

    // END

    Результат = СтрЗаменить(Результат, Пароль, "***");
    Результат = СтрЗаменить(Результат, Адрес , "127.0.0.1");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьСтрокуПодключения", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура MSSQL_ОткрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);
    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);

    Результат = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Результат, "AddIn.OPI_MSSQL.Main");

    Адрес             = ПараметрыФункции["PG_IP"];
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);

    НастройкиTLS = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    Соединение   = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ОткрытьСоединение (перед базой)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_MSSQL.Main");

    OPI_MSSQL.УдалитьБазуДанных("test1", Соединение);
    Результат = OPI_MSSQL.СоздатьБазуДанных("test1", Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (база)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "test1";

    Результат = OPI_MSSQL.УдалитьБазуДанных(База, Соединение, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьСоединение (удаление базы)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MSSQL_ЗакрытьСоединение(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);
    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);

    Соединение = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);
    Результат  = OPI_MSSQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьСоединение", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MSSQL_ЭтоКоннектор(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);
    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);

    Соединение = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);
    Результат  = OPI_MSSQL.ЭтоКоннектор(Соединение);

    OPI_MSSQL.ЗакрытьСоединение(Результат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЭтоКоннектор", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат);

КонецПроцедуры

Процедура MSSQL_ВыполнитьЗапросSQL(ПараметрыФункции)

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Картинка    = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Соединение        = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_MSSQL.УдалитьТаблицу("users"    , Соединение);                                             // SKIP
    OPI_MSSQL.УдалитьТаблицу("test_data", Соединение);                                             // SKIP
    Удаление = OPI_MSSQL.УдалитьТаблицу("test_table", Соединение);                                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Удаление, "ВыполнитьЗапросSQL (удаление 1)", "MSSQL");   // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Соединение, "ВыполнитьЗапросSQL (соединение)", "MSSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Соединение, "AddIn.OPI_MSSQL.Main");             // SKIP

    // CREATE

    ТекстЗапроса = "
        |CREATE TABLE test_table (
        |    ID INT PRIMARY KEY,
        |    FirstName NVARCHAR(50),
        |    LastName NVARCHAR(50),
        |    BirthDate DATE,
        |    IsEmployed BIT,
        |    Salary DECIMAL(10, 2),
        |    CreatedAt DATETIME,
        |    Age SMALLINT,
        |    RowGuid UNIQUEIDENTIFIER,
        |    Data VARBINARY(MAX)
        |);";

    Результат = OPI_MSSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Create)", "MSSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                            // SKIP

    // INSERT с параметрами

    ТекстЗапроса = "
        |INSERT INTO test_table (ID, FirstName, LastName, BirthDate, IsEmployed, Salary, CreatedAt, Age, RowGuid, Data)
        |VALUES (@P1, @P2, @P3, @P4, @P5, @P6, @P7, @P8, @P9, @P10);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить(Новый Структура("INT"     , 1));
    МассивПараметров.Добавить(Новый Структура("NVARCHAR", "Vitaly"));
    МассивПараметров.Добавить(Новый Структура("NVARCHAR", "Alpaca"));
    МассивПараметров.Добавить(Новый Структура("DATE"    , ТекущаяДата));
    МассивПараметров.Добавить(Новый Структура("BIT"     , Истина));
    МассивПараметров.Добавить(Новый Структура("DECIMAL" , 10.30));
    МассивПараметров.Добавить(Новый Структура("DATETIME", ТекущаяДата));
    МассивПараметров.Добавить(Новый Структура("SMALLINT", 20));
    МассивПараметров.Добавить(Новый Структура("UUID"    , Новый УникальныйИдентификатор));
    МассивПараметров.Добавить(Новый Структура("BYTES"   , Картинка));

    Результат = OPI_MSSQL.ВыполнитьЗапросSQL(ТекстЗапроса, МассивПараметров, , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (Insert)", "MSSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                            // SKIP

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT FirstName, LastName, BirthDate, IsEmployed, Salary, CreatedAt, Age, RowGuid, Data FROM test_table;";

    Результат = OPI_MSSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);

    Blob = Результат["data"][0]["Data"]["BYTES"];                                                   // SKIP

    Результат["data"][0]["Data"]["BYTES"] = "Base64";                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL", "MSSQL");                // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                  // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Blob).Размер(), Картинка.Размер()); // SKIP

    ТекстЗапроса = "create table test_data (id INT,first_name NVARCHAR(50),last_name NVARCHAR(50),email NVARCHAR(50),gender NVARCHAR(50),ip_address NVARCHAR(20));"; // SKIP
    Результат    = OPI_MSSQL.ВыполнитьЗапросSQL(ТекстЗапроса, , , Соединение);                                                                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (test_data)", "MSSQL");                                                                     // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                                                                                   // SKIP

    // SQL запрос из файла

    ФайлSQL = ПараметрыФункции["SQL2"]; // Двоичные данные, URL или путь к файлу

    Результат = OPI_MSSQL.ВыполнитьЗапросSQL(ФайлSQL, , , Соединение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЗапросSQL (файл)", "MSSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                          // SKIP

    Закрытие = OPI_MSSQL.ЗакрытьСоединение(Соединение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьПодключение (запрос)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MSSQL_ПолучитьНастройкиTls(ПараметрыФункции)

    Результат = OPI_MSSQL.ПолучитьНастройкиTls(Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНастройкиTls", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура MSSQL_СоздатьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);

    База = "testbase1";

    Удаление = OPI_MSSQL.УдалитьБазуДанных(База, СтрокаПодключения, НастройкиTLS);            // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Удаление, "СоздатьБазуДанных (удаление)", "MSSQL"); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.СоздатьБазуДанных(База, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";
    OPI_MSSQL.УдалитьБазуДанных(База, СтрокаПодключения, НастройкиTLS);

    Подключение = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "СоздатьБазуДанных (открытие)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_MSSQL.Main");

    Результат = OPI_MSSQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (подключение)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.СоздатьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных (существующая)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    OPI_MSSQL.ЗакрытьСоединение(Подключение);

КонецПроцедуры

Процедура MSSQL_СоздатьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("tinyint_field"  , "tinyint");
    СтруктураКолонок.Вставить("smallint_field" , "smallint");
    СтруктураКолонок.Вставить("int_field"      , "int");
    СтруктураКолонок.Вставить("bigint_field"   , "bigint");
    СтруктураКолонок.Вставить("float24_field"  , "float(24)");
    СтруктураКолонок.Вставить("float53_field"  , "float(53)");
    СтруктураКолонок.Вставить("bit_field"      , "bit");
    СтруктураКолонок.Вставить("nvarchar_field" , "nvarchar(4000)");
    СтруктураКолонок.Вставить("varbinary_field", "varbinary(max)");
    СтруктураКолонок.Вставить("uid_field"      , "uniqueidentifier");
    СтруктураКолонок.Вставить("numeric_field"  , "numeric(5,3)"); // Или decimal
    СтруктураКолонок.Вставить("xml_field"      , "xml");
    СтруктураКолонок.Вставить("date_field"     , "date");
    СтруктураКолонок.Вставить("time_field"     , "time");
    СтруктураКолонок.Вставить("dto_field"      , "datetimeoffset");
    СтруктураКолонок.Вставить("datetime_field" , "datetime");

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Таблица = "АБВ ГДЕ";

    Результат = OPI_MSSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка имени)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Таблица = "somename";
    СтруктураКолонок.Вставить("wtf_field", "WTF");

    Результат = OPI_MSSQL.СоздатьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу (ошибка типа)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура MSSQL_ДобавитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица       = "testtable";
    МассивЗаписей = Новый Массив;

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    XML = "<?xml version=""1.0""?>
        |<root>
        |    <element>
        |        <name>Пример</name>
        |        <value>123</value>
        |    </element>
        |    <element>
        |        <name>Тест</name>
        |        <value>456</value>
        |    </element>
        |</root>";

    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();
    ТекущаяДатаЧП = OPI_Инструменты.ДатаRFC3339(ТекущаяДата, "+05:00");

    СтруктураЗаписи = Новый Структура;
    СтруктураЗаписи.Вставить("tinyint_field"  , Новый Структура("TINYINT"       , 5));
    СтруктураЗаписи.Вставить("smallint_field" , Новый Структура("SMALLINT"      , 2000));
    СтруктураЗаписи.Вставить("int_field"      , Новый Структура("INT"           , 200000));
    СтруктураЗаписи.Вставить("bigint_field"   , Новый Структура("BIGINT"        , 20000000000));
    СтруктураЗаписи.Вставить("float24_field"  , Новый Структура("FLOAT24"       , 10.1234567));
    СтруктураЗаписи.Вставить("float53_field"  , Новый Структура("FLOAT53"       , 10.123456789123456));
    СтруктураЗаписи.Вставить("bit_field"      , Новый Структура("BIT"           , Истина));
    СтруктураЗаписи.Вставить("nvarchar_field" , Новый Структура("NVARCHAR"      , "Some text"));
    СтруктураЗаписи.Вставить("varbinary_field", Новый Структура("BYTES"         , Картинка));
    СтруктураЗаписи.Вставить("uid_field"      , Новый Структура("UUID"          , Новый УникальныйИдентификатор));
    СтруктураЗаписи.Вставить("numeric_field"  , Новый Структура("NUMERIC"       , 5.333));
    СтруктураЗаписи.Вставить("xml_field"      , Новый Структура("XML"           , XML));
    СтруктураЗаписи.Вставить("date_field"     , Новый Структура("DATE"          , ТекущаяДата));
    СтруктураЗаписи.Вставить("time_field"     , Новый Структура("TIME"          , ТекущаяДата));
    СтруктураЗаписи.Вставить("dto_field"      , Новый Структура("DATETIMEOFFSET", ТекущаяДатаЧП));
    СтруктураЗаписи.Вставить("datetime_field" , Новый Структура("DATETIME"      , ТекущаяДата));

    МассивЗаписей.Добавить(СтруктураЗаписи);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ДобавитьЗаписи(Таблица, МассивЗаписей, Истина, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗаписи", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MSSQL_ПолучитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // Все записи без отборов

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения, НастройкиTLS);

    Если ЗначениеЗаполнено(Результат["data"]) Тогда                                                                             // SKIP
        Результат["data"][0]["varbinary_field"]["BYTES"] = Лев(Результат["data"][0]["varbinary_field"]["BYTES"], 10) + "...";   // SKIP
    КонецЕсли;                                                                                                                  // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи", "MSSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);               // SKIP

    // Отборы, выбранные поля, количество и сортировка

    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, "test_data", Логин, Пароль);

    Таблица = "test_data";

    Поля = Новый Массив;
    Поля.Добавить("first_name");
    Поля.Добавить("last_name");
    Поля.Добавить("email");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "gender");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Male");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "id");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 50");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("ip_address", "DESC");
    Количество = 5;

    Результат = OPI_MSSQL.ПолучитьЗаписи(Таблица, Поля, Фильтры, Сортировка, Количество, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаписи (отборы)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 5);

КонецПроцедуры

Процедура MSSQL_ОбновитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ip_address", Новый Структура("VARCHAR", "127.0.0.1"));

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("NVARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Количество = OPI_MSSQL.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения, НастройкиTLS); // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Количество, "ОбновитьЗаписи (количество)", "MSSQL");      // SKIP
    Количество = Количество["data"].Количество();                                                   // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ОбновитьЗаписи(Таблица, СтруктураПолей, СтруктураФильтра, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЗаписи", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Проверка = OPI_MSSQL.ПолучитьЗаписи(Таблица, "['ip_address']", Фильтры, , , СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ОбновитьЗаписи (проверка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], Количество);

    Для Н = 0 По Проверка["data"].ВГраница() Цикл
        OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][Н], СтруктураПолей);
    КонецЦикла;

КонецПроцедуры

Процедура MSSQL_УдалитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "test_data";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("NVARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);
    СтруктураФильтра.Вставить("union", "AND");

    Фильтры.Добавить(СтруктураФильтра);

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "ip_address");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("NVARCHAR", "127.0.0.1"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Получение = OPI_MSSQL.ПолучитьЗаписи(Таблица, , Фильтры, , , СтрокаПодключения, НастройкиTls); // SKIP

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.УдалитьЗаписи(Таблица, Фильтры, СтрокаПодключения, НастройкиTls);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Получение, "УдалитьЗаписи (получение)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Количество = Получение["data"].Количество();
    Остаток    = 100 - Количество;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи (проверка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], Остаток);

КонецПроцедуры

Процедура MSSQL_УдалитьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.УдалитьТаблицу(Таблица, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База    = "test_data";
    Таблица = "test_data";

    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);
    Результат         = OPI_MSSQL.УдалитьТаблицу(Таблица, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТаблицу (тест)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура MSSQL_УдалитьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, , Логин, Пароль);

    База = "testbase1";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.УдалитьБазуДанных(База, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База = "testbase2";

    Подключение = OPI_MSSQL.ОткрытьСоединение(СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Подключение, "УдалитьБазуДанных (открытие)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Компонента(Подключение, "AddIn.OPI_MSSQL.Main");

    Результат = OPI_MSSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (подключение)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

    Закрытие = OPI_MSSQL.ЗакрытьСоединение(Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Закрытие, "УдалитьБазуДанных (закрытие)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Закрытие);

    Результат = OPI_MSSQL.УдалитьБазуДанных(База, Подключение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБазуДанных (ошибка подключения)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура MSSQL_ОчиститьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ОчиститьТаблицу(Таблица, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.ПолучитьЗаписи(Таблица, , , , , СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьТаблицу (проверка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура MSSQL_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    Таблица = "testtable";

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 16);

    Таблица = "heyho";

    Результат = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТаблице (ошибка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура MSSQL_ДобавитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    База      = "testbase1";
    Таблица   = "testtable";
    Имя       = "new_field";
    ТипДанных = "bigint";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ДобавитьКолонкуТаблицы(Таблица, Имя, ТипДанных, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКолонкуТаблицы (проверка)", "MSSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда

            OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТипДанных), нРег(Колонка["data_type"]));

            Найдена = Истина;

        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Истина);

КонецПроцедуры

Процедура MSSQL_УдалитьКолонкуТаблицы(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";
    Имя     = "new_field";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.УдалитьКолонкуТаблицы(Таблица, Имя, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКолонкуТаблицы (проверка)", "MSSQL");

    Найдена = Ложь;

    Для Каждого Колонка Из Результат["data"] Цикл

        Если Колонка["column_name"] = Имя Тогда
            Найдена = Истина;
        КонецЕсли;

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Найдена, Ложь);

КонецПроцедуры

Процедура MSSQL_ГарантироватьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "SA";
    Пароль = ПараметрыФункции["PG_Password"];

    База    = "testbase1";
    Таблица = "testtable";

    НастройкиTLS      = OPI_MSSQL.ПолучитьНастройкиTls(Истина);
    СтрокаПодключения = OPI_MSSQL.СформироватьСтрокуПодключения(Адрес, База, Логин, Пароль);

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("smallint_field" , "smallint");
    СтруктураКолонок.Вставить("double_field"   , "real");
    СтруктураКолонок.Вставить("bigint_field"   , "bigint");
    СтруктураКолонок.Вставить("custom_field"   , "nvarchar");

    // При использовании строки подключения инициализируется новое соединение,
    // которое будет закрыто после выполнения функции.
    // В случае выполнения нескольких операций желательно использовать одно соединение,
    // заранее созданное функцией ОткрытьСоединение()
    Результат = OPI_MSSQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения, НастройкиTLS);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (проверка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        ТекущийТип = Колонка["data_type"];
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТекущийТип), нРег(СтруктураКолонок[Колонка["column_name"]]));
    КонецЦикла;

    Таблица = "test_new";

    Результат = OPI_MSSQL.ГарантироватьТаблицу(Таблица, СтруктураКолонок, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ГарантироватьТаблицу (новая)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(Результат["commit"]["result"]);

    Проверка = OPI_MSSQL.ПолучитьИнформациюОТаблице(Таблица, СтрокаПодключения, НастройкиTLS);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Проверка, "ГарантироватьТаблицу (новая, проверка)", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], СтруктураКолонок.Количество());

    Для Каждого Колонка Из Проверка["data"] Цикл
        ТекущийТип = Колонка["data_type"];
        OPI_ПолучениеДанныхТестов.Проверка_Равенство(нРег(ТекущийТип), нРег(СтруктураКолонок[Колонка["column_name"]]));
    КонецЦикла;

КонецПроцедуры

Процедура MSSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Результат = OPI_MSSQL.ПолучитьСтруктуруФильтраЗаписей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей", "MSSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_MSSQL.ПолучитьСтруктуруФильтраЗаписей(Истина);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "MSSQL");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
