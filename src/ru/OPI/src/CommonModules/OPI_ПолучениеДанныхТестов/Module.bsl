// OneScript: ./OInt/tools/Modules/OPI_ПолучениеДанныхТестов.os

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingHardcodePath-off
// BSLLS:Typo-off
// BSLLS:DeprecatedMessage-off
// BSLLS:UsingServiceTag-off
// BSLLS:ExecuteExternalCodeInCommonModule-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off
// BSLLS:UsingHardcodeNetworkAddress-off
// BSLLS:UsingSynchronousCalls-off

//@skip-check use-non-recommended-method
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content
//@skip-check module-unused-method

// Раскомментировать, если выполняется OneScript
// #Использовать "./internal"
// #Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСоответствиеРазделовТестирования() Экспорт

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , 5);
    Разделы.Вставить("VK"             , 5);
    Разделы.Вставить("Viber"          , 5);
    Разделы.Вставить("Twitter"        , 4);
    Разделы.Вставить("FTP"            , 5);
    Разделы.Вставить("PostgreSQL"     , 5);
    Разделы.Вставить("MySQL"          , 5);
    Разделы.Вставить("MSSQL"          , 5);
    Разделы.Вставить("SQLite"         , 5);
    Разделы.Вставить("RCON"           , 5);
    Разделы.Вставить("YandexDisk"     , 5);
    Разделы.Вставить("GoogleWorkspace", 2);
    Разделы.Вставить("GoogleCalendar" , 5);
    Разделы.Вставить("GoogleDrive"    , 5);
    Разделы.Вставить("GoogleSheets"   , 5);
    Разделы.Вставить("Notion"         , 5);
    Разделы.Вставить("Slack"          , 5);
    Разделы.Вставить("Airtable"       , 5);
    Разделы.Вставить("Dropbox"        , 5);
    Разделы.Вставить("Bitrix24"       , 5);
    Разделы.Вставить("VkTeams"        , 5);
    Разделы.Вставить("Ozon"           , 5);
    Разделы.Вставить("Neocities"      , 5);
    Разделы.Вставить("CDEK"           , 5);
    Разделы.Вставить("YandexMetrika"  , 5);
    Разделы.Вставить("S3"             , 5);
    Разделы.Вставить("TCP"            , 5);
    Разделы.Вставить("GreenAPI"       , 5);
    Разделы.Вставить("Ollama"         , 5);
    Разделы.Вставить("HTTPКлиент"     , 5);
    Разделы.Вставить("OpenAI"         , 5);

    Возврат Разделы;

КонецФункции

Функция ПолучитьСоответствиеРазделовТестированияGA() Экспорт

    СтандартныеЗависимости = "[Decode, Build]";
    ЗависимостиГугл        = "Testing-GoogleWorkspace";

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , СтандартныеЗависимости);
    Разделы.Вставить("VK"             , СтандартныеЗависимости);
    Разделы.Вставить("Viber"          , СтандартныеЗависимости);
    Разделы.Вставить("Twitter"        , СтандартныеЗависимости);
    Разделы.Вставить("FTP"            , СтандартныеЗависимости);
    Разделы.Вставить("PostgreSQL"     , СтандартныеЗависимости);
    Разделы.Вставить("MySQL"          , СтандартныеЗависимости);
    Разделы.Вставить("MSSQL"          , СтандартныеЗависимости);
    Разделы.Вставить("SQLite"         , СтандартныеЗависимости);
    Разделы.Вставить("RCON"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexDisk"     , СтандартныеЗависимости);
    Разделы.Вставить("GoogleWorkspace", СтандартныеЗависимости);
    Разделы.Вставить("GoogleCalendar" , ЗависимостиГугл);
    Разделы.Вставить("GoogleDrive"    , ЗависимостиГугл);
    Разделы.Вставить("GoogleSheets"   , ЗависимостиГугл);
    Разделы.Вставить("Notion"         , СтандартныеЗависимости);
    Разделы.Вставить("Slack"          , СтандартныеЗависимости);
    Разделы.Вставить("Airtable"       , СтандартныеЗависимости);
    Разделы.Вставить("Dropbox"        , СтандартныеЗависимости);
    Разделы.Вставить("Bitrix24"       , СтандартныеЗависимости);
    Разделы.Вставить("VkTeams"        , СтандартныеЗависимости);
    Разделы.Вставить("Ozon"           , СтандартныеЗависимости);
    Разделы.Вставить("Neocities"      , СтандартныеЗависимости);
    Разделы.Вставить("CDEK"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexMetrika"  , СтандартныеЗависимости);
    Разделы.Вставить("S3"             , СтандартныеЗависимости);
    Разделы.Вставить("TCP"            , СтандартныеЗависимости);
    Разделы.Вставить("GreenAPI"       , СтандартныеЗависимости);
    Разделы.Вставить("Ollama"         , СтандартныеЗависимости);
    Разделы.Вставить("HTTPКлиент"     , СтандартныеЗависимости);
    Разделы.Вставить("OpenAI"         , СтандартныеЗависимости);

    Возврат Разделы;

КонецФункции

Функция ПолучитьТаблицуТестов() Экспорт

    Телеграм  = "Telegram";
    ВКонтакте = "VK";
    ЯДиск     = "YandexDisk";
    Календарь = "GoogleCalendar";
    Твиттер   = "Twitter";
    Вайбер    = "Viber";
    Драйв     = "GoogleDrive";
    ВСпейс    = "GoogleWorkspace";
    Ноушн     = "Notion";
    Слак      = "Slack";
    Таблицы   = "GoogleSheets";
    АирТ      = "Airtable";
    ДропБокс  = "Dropbox";
    Битрикс   = "Bitrix24";
    ВКТ       = "VkTeams";
    Озон      = "Ozon";
    Неоситиз  = "Neocities";
    Сдэк      = "CDEK";
    Метрика   = "YandexMetrika";
    S3_       = "S3";
    TCP       = "TCP";
    SQLite    = "SQLite";
    Postgres  = "PostgreSQL";
    GreenAPI  = "GreenAPI";
    RCON      = "RCON";
    MySQL     = "MySQL";
    Ollama    = "Ollama";
    Http      = "HTTPКлиент";
    OpenAI    = "OpenAI";
    MSSQL     = "MSSQL";
    FTP       = "FTP";

    ТаблицаТестов = Новый ТаблицаЗначений;
    ТаблицаТестов.Колонки.Добавить("Метод");
    ТаблицаТестов.Колонки.Добавить("Синоним");
    ТаблицаТестов.Колонки.Добавить("Раздел");

    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьИнформациюБота"      , "Получить информацию бота"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьОбновления"          , "Получить обновления"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_УстановитьWebhook"           , "Установить Webhook"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьТекстовоеСообщение" , "Отправить текстовое сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКартинку"           , "Отправить картинку"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьВидео"              , "Отправить видео"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьАудио"              , "Отправить аудио"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьДокумент"           , "Отправить документ"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьГифку"              , "Отправить гифку"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМедиагруппу"        , "Отправить медиагруппу"          , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМестоположение"     , "Отправить местоположение"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКонтакт"            , "Отправить контакт"              , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьОпрос"              , "Отправить опрос"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПереслатьСообщение"          , "Переслать сообщение"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_БанРазбан"                   , "Бан/Разбан"                     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьСсылкуПриглашение"    , "Создать ссылку-приглашение"     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ЗакрепитьОткрепитьСообщение" , "Закрепить/Открепить сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьЧислоУчастников"     , "Получить число участников"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьСписокАватаровФорума", "Получить список аватаров форума", Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьУдалитьТемуФорума"    , "Создать/Удалить тему форума"    , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ИзменитьИмяГлавнойТемы"      , "Изменить имя главной темы"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СкрытьПоказатьГлавнуюТему"   , "Скрыть/Показать главную тему"   , Телеграм);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСсылкуТокена"               , "Создать ссылку получения токена", ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьУдалитьПост"                , "Создать/Удалить пост"           , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСоставнойПост"              , "Создать/Удалить составной пост" , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьОпрос"                      , "Создать опрос"                  , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СохранитьУдалитьКартинку"          , "Добавить/Удалить картинку"      , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьИсторию"                    , "Создать историю"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_МетодыОбсуждений"                  , "Действия с обсуждениями"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЛайкРепостКоммент"                 , "Лайк/Репост/Комментарий"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистику"                , "Получить статистику"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистикуПостов"          , "Получить статистику постов"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьРекламнуюКампанию"          , "Создать рекламную кампанию"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ОтправитьСообщение"                , "Отправить сообщение"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьКатегорииТоваров"          , "Получить категории товаров"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварПодборку"              , "Создать товар и подборку"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварСоСвойствами"          , "Создать товар со свойствами"    , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокТоваров"             , "Получить список товаров"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокПодборок"            , "Получить список подборок"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокСвойств"             , "Получить список свойств"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокЗаказов"             , "Получить список заказов"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЗагрузитьВидео"                    , "Загрузить видео"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьИнформациюОДиске"       , "Получить информацию о диске"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьПапку"                   , "Создать папку"                  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект", "Загрузить по URL и получить"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьУдалитьФайл"           , "Загрузить/Удалить файл"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьКопиюОбъекта"            , "Создать копию объекта"          , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСсылкуНаСкачивание"     , "Получить ссылку на скачивание"  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокФайлов"           , "Получить список файлов"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПереместитьОбъект"              , "Переместить объект"             , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ДействияПубличныхОбъектов"      , "Действия с публичными объектами", ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокОпубликованных"   , "Получить список опубликованных" , ЯДиск);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , ВСпейс);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_ПолучитьСписокКалендарей"          , "Получить список календарей"     , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьКалендарь"           , "Создать/Удалить календарь"      , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьСобытие"             , "Создать/Удалить событие"        , Календарь);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ПолучитьСписокКаталогов"           , "Получить список каталогов"      , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ЗагрузитьУдалитьФайл"              , "Загрузить/Удалить Файл"         , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьУдалитьКомментарий"         , "Создать/Удалить кооментарий"    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьКаталог"                    , "Создать/Удалить каталог"        , Драйв);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_СоздатьТаблицу"                    , "Создать таблицу"                , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_ЗаполнитьОчиститьЯчейки"           , "Заполнить/Очистить ячейки"      , Таблицы);
    НовыйТест(ТаблицаТестов, "Твиттер_ДанныеАккаунта"               , "Данные аккаунта"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Твиттер_Твиты"                        , "Создание твитов"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Вайбер_ПолучениеИнформации"           , "Получение информации"           , Вайбер);
    НовыйТест(ТаблицаТестов, "Вайбер_ОтправкаСообщений"             , "Отправка сообщений"             , Вайбер);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьСтраницу"             , "Создать страницу"               , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьИзменитьБазу"         , "Создать/Изменить базу"          , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьУдалитьБлок"          , "Создать/Удалить блок"           , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_ПолучитьПользователей"       , "Получить пользователей"         , Ноушн);
    НовыйТест(ТаблицаТестов, "Слак_ПолучитьИнформацию"              , "Получить информацию"            , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОтправитьУдалитьСообщение"       , "Отправить/Удалить сообщение"    , Слак);
    НовыйТест(ТаблицаТестов, "Слак_СоздатьАрхивироватьКанал"        , "Создать/Архивировать канал"     , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОткрытьЗакрытьДиалог"            , "Открыть/Закрыть диалог"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьФайл"            , "Загрузить/Удалить файл"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьВФ"              , "Загрузить/Удалить внеш. файл"   , Слак);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьБазу"                       , "Создать/Изменить базу"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьТаблицу"                    , "Создать/Изменить таблицу"       , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьПоле"                       , "Создать/Изменить поле"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьУдалитьЗаписи"              , "Создать/Удалить записи"         , АирТ);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьОбновитьТокен"       , "Получить/Обновить токен"        , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайл"               , "Загрузить файл"                 , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайлПоURL"          , "Загрузить файл по URL"          , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьКаталог"              , "Создать каталог"                , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьУдалитьТег"           , "Создать/Удалить тег"            , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьАккаунт"             , "Получить данные аккаунта"       , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_РаботаСДоступами"            , "Работа с доступами"             , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьСписокФайловПапки"   , "Получить список файлов папки"   , ДропБокс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСТокеном"                   , "Работа с токеном"               , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_СерверноеВремя"                   , "Серверное время"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСНовостями"                 , "Работа с новостями"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЗадачами"                  , "Работа с задачами"              , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКомментариями"             , "Работа с комментариями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСДиском"                    , "Работа с диском"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_Канбан"                           , "Канбан"                         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УчетРабочегоВремени"              , "Учет рабочего времени"          , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЧатами"                    , "Работа с чатами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСУведомлениями"             , "Работа с уведомлениями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСПолямиЗадач"               , "Работа с польз. полями задач"   , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПодразделениями"        , "Управление подразделениями"     , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПользователями"         , "Управление пользователями"      , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЛидами"                    , "Работа с лидами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСоСделками"                 , "Работа со сделками"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКалендарями"               , "Работа с календарями"           , Битрикс);
    НовыйТест(ТаблицаТестов, "ВКТ_ОтправкаСообщений"                , "Отправка сообщений"             , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_ОбщиеМетоды"                      , "Общие методы"                   , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_УправлениеЧатами"                 , "Управление чатами"              , ВКТ);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_АтрибутыИХарактеристики"      , "Атрибуты и характеристики"      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЗагрузкаИОбновлениеТоваров"   , "Загрузка и обновление товаров"  , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_Штрихкоды"                    , "Штрихкоды"                      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЦеныИОстаткиТоваров"          , "Цены и остатки товаров"         , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСАкциями"               , "Работа с акциями"               , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСоСкладами"             , "Работа со складами"             , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_СхемаFBO"                     , "Схема FBO"                      , Озон);
    НовыйТест(ТаблицаТестов, "НС_РаботаСФайлами"                    , "Работа с файлами"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "НС_ПолучениеДанных"                   , "Получение данных"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_ОбщиеМетоды"                  , "Общие методы"                   , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаказами"              , "Работа с заказами"              , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера", "Работа с заявками курьера"      , Сдэк);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеМетками"           , "Управление метками"             , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеСчетчиками"        , "Управление счетчиками"          , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеОперациями"        , "Управление операциями"          , Метрика);
    НовыйТест(ТаблицаТестов, "AWS_ОбщиеМетоды"                      , "Общие методы"                   , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСБакетами"                  , "Работа с бакетами"              , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСОбъектами"                 , "Работа с объектами"             , S3_);
    НовыйТест(ТаблицаТестов, "TC_Клиент"                            , "TCP Клиент"                     , TCP);
    НовыйТест(ТаблицаТестов, "SQLL_ОсновныеМетоды"                  , "Основные методы"                , SQLite);
    НовыйТест(ТаблицаТестов, "SQLL_ORM"                             , "ORM"                            , SQLite);
    НовыйТест(ТаблицаТестов, "Postgres_ОсновныеМетоды"              , "Основные методы"                , Postgres);
    НовыйТест(ТаблицаТестов, "Postgres_ORM"                         , "ORM"                            , Postgres);
    НовыйТест(ТаблицаТестов, "MYS_ОсновныеМетоды"                   , "Основные методы"                , MySQL);
    НовыйТест(ТаблицаТестов, "MYS_ORM"                              , "ORM"                            , MySQL);
    НовыйТест(ТаблицаТестов, "MSS_ОсновныеМетоды"                   , "Основные методы"                , MSSQL);
    НовыйТест(ТаблицаТестов, "MSS_ORM"                              , "ORM"                            , MSSQL);
    НовыйТест(ТаблицаТестов, "GAPI_УправлениеГруппами"              , "Управление группами"            , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОтправкаСообщений"               , "Отправка сообщений"             , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ПолучениеУведомлений"            , "Получение уведомлений"          , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОчередьСообщений"                , "Очередь сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ЖурналыСообщений"                , "Журналы сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_Аккаунт"                         , "Аккаунт"                        , GreenAPI);
    НовыйТест(ТаблицаТестов, "RC_ВыполнениеКоманд"                  , "Выполнение команд"              , RCON);
    НовыйТест(ТаблицаТестов, "OLLM_ОбработкаЗапросов"               , "Обработка запросов"             , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСМоделями"                 , "Работа с моделями"              , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСBlob"                     , "Работа с BLOB"                  , Ollama);
    НовыйТест(ТаблицаТестов, "HTTP_Инициализация"                   , "Инициализация"                  , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаТела"                   , "Установка тела"                 , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Настройки"                       , "Настройки"                      , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаЗаголовков"             , "Установка заголовков"           , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Авторизация"                     , "Авторизация"                    , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ОбработкаЗапроса"                , "Обработка запроса"              , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ПолучениеОтвета"                 , "Получение ответа"               , Http);
    НовыйТест(ТаблицаТестов, "OAI_ОбработкаЗапросов"                , "Обработка запросов"             , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_Ассистенты"                       , "Ассистенты"                     , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСФайлами"                   , "Работа с файлами"               , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСАудио"                     , "Работа с аудио"                 , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСМоделями"                  , "Работа с моделями"              , OpenAI);
    НовыйТест(ТаблицаТестов, "FT_РаботаСДиректориями"               , "Работа с директориями"          , FTP);
    НовыйТест(ТаблицаТестов, "FT_РаботаСФайлами"                    , "Работа с файлами"               , FTP);
    НовыйТест(ТаблицаТестов, "FT_ОсновныеМетоды"                    , "Основные методы"                , FTP);

    Возврат ТаблицаТестов;

КонецФункции

Функция ОжидаетЧто(Значение) Экспорт

    Попытка

        Модуль  = ПолучитьОбщийМодуль("ЮТест");
        Ожидаем = ТипЗнч(Модуль) = Тип("ОбщийМодуль");
        Возврат Модуль.ОжидаетЧто(Значение);

    Исключение
        Возврат Ожидаем.Что(Значение);
    КонецПопытки;

КонецФункции

Функция СформироватьТестыЯкс() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;
        Отбор         = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела  = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор(ТекущийРаздел);

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест(Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертс() Экспорт

    ТаблицаТестов = ПолучитьТаблицуТестов();
    МассивТестов  = Новый Массив;

    Для Каждого Тест Из ТаблицаТестов Цикл
        МассивТестов.Добавить(Тест.Метод);
    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция СформироватьТестыЯксCLI() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор("CLI_" + ТекущийРаздел);

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест("CLI_" + Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертсCLI() Экспорт

    МассивТестов = Новый Массив;

    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Для Каждого Тест Из ТестыРаздела Цикл
            МассивТестов.Добавить("CLI_" + Тест.Метод);
        КонецЦикла;

    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция ПолучитьПараметр(Параметр) Экспорт

    Путь = ПутьКФайлуДанных();
    Возврат ПолучитьЗначениеИзФайла(Параметр, Путь);

КонецФункции

Функция ПолучитьДвоичные(Параметр) Экспорт

    Путь     = ПутьКФайлуДанных();
    Значение = ПолучитьЗначениеИзФайла(Параметр, Путь);

    Если ТипЗнч(Значение) = Тип("Строка") Тогда

        Значение = ПолучитьФайлПути(Значение);

    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ПолучитьФайлПути(Знач Путь) Экспорт

    Если СтрНайти(Путь, "http") > 0 Или СтрНайти(Путь, "www") > 0 Тогда

        ИВФ      = ПолучитьИмяВременногоФайла();
        КопироватьФайл(Путь, ИВФ);
        Путь     = ИВФ;
        Двоичные = Новый ДвоичныеДанные(Путь);

        УдалитьФайлы(ИВФ);

    Иначе

        Двоичные = Новый ДвоичныеДанные(Путь);

    КонецЕсли;

    Возврат Двоичные;

КонецФункции

Функция ПолучитьLocalhost() Экспорт

    Если OPI_Инструменты.ЭтоWindows() Тогда
        Результат = "127.0.0.1";
    Иначе
        Результат = "host.docker.internal";
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция ПолучитьВариантыПараметровFTP() Экспорт

    МассивВариантов = Новый Массив;

    ПараметрыТестаОсновные = Новый Структура;
    ПараметрВКоллекцию("FTP_IP"        , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_Port"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTPS_IP"       , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTPS_Port"     , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_User"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_Password"  , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_User"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_Password", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Socks5_IP"     , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Socks5_Port"   , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_IP"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_Port"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Picture"       , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Big"           , ПараметрыТестаОсновные);


    Локалхост = ПолучитьLocalhost();

    Socks5IP                            = ПараметрыТестаОсновные["Socks5_IP"];
    ПараметрыТестаОсновные["Socks5_IP"] = ?(Socks5IP = "127.0.0.1", Локалхост, Socks5IP);

    HttpProxyIP                        = ПараметрыТестаОсновные["Proxy_IP"];
    ПараметрыТестаОсновные["Proxy_IP"] = ?(HttpProxyIP = "127.0.0.1", Локалхост, HttpProxyIP);

    // FTP
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", " (FTP)");
    СтруктураПараметров.Вставить("FTP_IP", Локалхост);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Ложь);
    СтруктураПараметров.Вставить("TLS", Ложь);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTPS
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", " (FTPS)");
    СтруктураПараметров.Вставить("FTP_IP", Локалхост);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTPS_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Ложь);
    СтруктураПараметров.Вставить("TLS", Истина);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTP + Socks5
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", " (FTP, Socks5)");
    СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTP_IP"]);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Истина);
    СтруктураПараметров.Вставить("TLS", Ложь);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTPS + Socks5
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", " (FTPS, Socks5)");
    СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTPS_IP"]);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Истина);
    СтруктураПараметров.Вставить("TLS", Истина);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    Если OPI_Инструменты.ЭтоWindows() Тогда

        // FTP + HTTP
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Postfix", " (FTP, HTTP)");
        СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTP_IP"]);
        СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
        СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
        СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
        СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
        СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
        СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Proxy_IP"]);
        СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Proxy_Port"]);
        СтруктураПараметров.Вставить("Proxy_Type", "http");
        СтруктураПараметров.Вставить("Proxy", Истина);
        СтруктураПараметров.Вставить("TLS", Ложь);
        СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
        СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
        МассивВариантов.Добавить(СтруктураПараметров);

        // FTPS + HTTP
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Postfix", "");
        СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTPS_IP"]);
        СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
        СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
        СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
        СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
        СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
        СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Proxy_IP"]);
        СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Proxy_Port"]);
        СтруктураПараметров.Вставить("Proxy_Type", "http");
        СтруктураПараметров.Вставить("Proxy", Истина);
        СтруктураПараметров.Вставить("TLS", Истина);
        СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
        СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
        МассивВариантов.Добавить(СтруктураПараметров);

    КонецЕсли;

    Возврат МассивВариантов;

КонецФункции

Процедура ПараметрВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьПараметр(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ДвоичныеВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьДвоичные(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ЗаписатьПараметр(Параметр, Значение) Экспорт

    Путь = ПутьКФайлуДанных();
    ЗаписатьПараметрВФайл(Параметр, Значение, Путь);

КонецПроцедуры

Процедура ЗаписатьЛог(Знач Результат, Знач Метод, Знач Библиотека = "") Экспорт // DEPRECATED

    Шапка = Строка(OPI_Инструменты.ПолучитьТекущуюДату()) + " | " + Метод;

    Попытка
        Данные = OPI_Инструменты.JSONСтрокой(Результат);
    Исключение
        Данные = "Не JSON: " + Строка(Результат);
    КонецПопытки;

    Данные = "    " + Данные;

    Сообщить(Шапка);
    Сообщить(Символы.ПС);
    Сообщить(Данные);
    Сообщить(Символы.ПС);
    Сообщить("---------------------------------");
    Сообщить(Символы.ПС);

    Если ЗначениеЗаполнено(Библиотека) Тогда

        Попытка
            Библиотека = Новый ЗащищенноеСоединениеOpenSSL; // Проверка на работу в 1С
        Исключение
            ЗаписатьФайлЛога(Данные, Метод, Библиотека);
        КонецПопытки;

    КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЛогCLI(Знач Результат, Знач Метод, Знач Библиотека = "") Экспорт

    Шаблон = "%1 (CLI, %2)";
    ЗаписатьЛог(Результат, СтрШаблон(Шаблон, Метод, Библиотека));

КонецПроцедуры

Функция ВыполнитьТестCLI(Знач Библиотека, Знач Метод, Знач Опции, Знач Записывать = Истина) Экспорт

    Если OPI_Инструменты.ЭтоWindows() Тогда

        Если OPI_Инструменты.ЭтоOneScript() Тогда
            Oint = """C:\Program Files (x86)\OInt\bin\oint.bat""";
        Иначе
            Oint = """C:\Program Files\OneScript\bin\oint.bat""";
        КонецЕсли;

    Иначе

        Oint = "oint";

    КонецЕсли;

    ФайлРезультата = ПолучитьИмяВременногоФайла();

    СтрокаЗапуска = Oint + " " + Библиотека + " " + Метод;

    Для Каждого Опция Из Опции Цикл

        Если Опция.Значение = Неопределено Тогда
            Продолжить;
        КонецЕсли;

        ТекущееЗначение = ПолучитьЗначениеДляCLI(Опция.Значение);

        СтрокаЗапуска = СтрокаЗапуска
            + " --"
            + Опция.Ключ
            + " "
            + ТекущееЗначение;

    КонецЦикла;

    // BSLLS:ExternalAppStarting-off
    ЗапуститьПриложение(СтрокаЗапуска + " --out """ + ФайлРезультата + """ --debug" , , Истина);
    // BSLLS:ExternalAppStarting-on

    Результат = ПрочестьРезультатCLI(ФайлРезультата);

    Если Записывать Тогда
        ЗаписатьВызовCLI(Библиотека, Метод, Опции);
    КонецЕсли;

    Попытка
        УдалитьФайлы(ФайлРезультата);
    Исключение
        Сообщить("Не удалось удалить временный файл после теста!");
    КонецПопытки;

    Возврат Результат;

КонецФункции

Процедура ОбработатьРезультатТестирования(Знач Результат
    , Знач Метод
    , Знач Библиотека
    , Знач Вариант = ""
    , ДопПараметр1 = Неопределено
    , ДопПараметр2 = Неопределено
    , ДопПараметр3 = Неопределено) Экспорт
    
    МетодЛога = ?(ЗначениеЗаполнено(Вариант), СтрШаблон("%1 (%2)", Метод, Вариант), Метод);
    
    Попытка
        
        МассивПараметров = Новый Массив;
        МассивПараметров.Добавить("Результат");
        МассивПараметров.Добавить("Вариант");
        
        Если ДопПараметр1 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр1");
        КонецЕсли;
        
        Если ДопПараметр2 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр2");
        КонецЕсли;       

        Если ДопПараметр3 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр3");
        КонецЕсли;
                
        ШаблонПроверки = "РезультатПроверки = Проверка_%1_%2(%3)";
            
        ВызовПроверки     = СтрШаблон(ШаблонПроверки, Библиотека, Метод, СтрСоединить(МассивПараметров, ", "));
        РезультатПроверки = Неопределено;
        
        //@skip-check server-execution-safe-mode
        Выполнить(ВызовПроверки);
        
        ВывестиЛог(РезультатПроверки, МетодЛога, Библиотека);
        
        Если Не ЗначениеЗаполнено(Вариант) Тогда 
            ЗаписатьФайлЛога(РезультатПроверки, Метод, Библиотека);    
        КонецЕсли
        
	Исключение
		ООп = ОписаниеОшибки();
        ВывестиЛог(Результат, Метод, Библиотека);
		ВызватьИсключение ООп;
    КонецПопытки;
    
КонецПроцедуры

#Область Проверки

Функция Проверка_Telegram_ПолучитьИнформациюБота(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["username"]).Заполнено();
    
    OPI_Инструменты.Пауза(5);
        
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ПолучитьОбновления(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    
    OPI_Инструменты.Пауза(5);
        
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_УстановитьWebhook(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Равно("Webhook was set");
    
    OPI_Инструменты.Пауза(5);
        
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_УдалитьWebhook(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Заполнено();
    
    OPI_Инструменты.Пауза(5);
        
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
        
    Если Не ЗначениеЗаполнено(Вариант) Тогда
        
        ИмяПараметра = "Telegram_MessageID";
        ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);
        
    ИначеЕсли Вариант = "Канал" Тогда
        
        ИмяПараметра = "Telegram_ChannelMessageID";
        ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);
        
    Иначе
        ИмяПараметра = "";
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ИмяПараметра) Тогда
        
        IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
        ЗаписатьПараметр(ИмяПараметра, IDСообщения);         
        OPI_Инструменты.ДобавитьПоле(ИмяПараметра, IDСообщения, "Строка", Параметры);
        
    КонецЕсли;
        
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_СформироватьКлавиатуруПоМассивуКнопок(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();  
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьКартинку(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["photo"]).ИмеетТип("Массив");
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда
        
        IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);                  
        ЗаписатьПараметр("Telegram_PicMessageID", IDСообщения);               
        OPI_Инструменты.ДобавитьПоле("Telegram_PicMessageID", IDСообщения, "Строка", Параметры); 
        
    КонецЕсли;  
    
    Если Вариант = "Клавиатура коллекция" Тогда
        
        IDФайла = Результат["result"]["photo"][0]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);
        
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьВидео(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["video"]["mime_type"]).Равно("video/mp4");
        
    Если Вариант = "Двоичные" Тогда
        
        IDФайла = Результат["result"]["video"]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);
    
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьАудио(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["audio"]["mime_type"]).Равно("audio/mpeg");
        
    Если Вариант = "Двоичные" Тогда
        
        IDФайла = Результат["result"]["audio"]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);
    
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьДокумент(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["document"]).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьГифку(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    Result_ = "result";

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат[Result_]["document"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат[Result_]["animation"]["mime_type"]).Равно("video/mp4");
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьМедиагруппу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьМестоположение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["location"]).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьКонтакт(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["contact"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["contact"]["first_name"]).Равно(Имя);
    
    OPI_Инструменты.Пауза(15);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОтправитьОпрос(Знач Результат, Знач Вариант, Вопрос = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["poll"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["poll"]["question"]).Равно(Вопрос);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_СкачатьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ПереслатьСообщение(Знач Результат, Знач Вариант, IDСообщения = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["forward_origin"]["message_id"]).Равно(Число(IDСообщения));
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_Бан(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["description"]).Равно("Bad Request: can't remove chat owner");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_Разбан(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["description"]).Равно("Bad Request: can't remove chat owner");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_СоздатьСсылкуПриглашение(Знач Результат, Знач Вариант, Заголовок = "", UnixИстечение = "")

    Result_ = "result";
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["member_limit"]).Равно(200);
    ОжидаетЧто(Результат[Result_]["name"]).Равно(Заголовок);
    ОжидаетЧто(Результат[Result_]["expire_date"]).Равно(Число(UnixИстечение));
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ЗакрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОткрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ПолучитьЧислоУчастников(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Число");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ПолучитьСписокИконокАватаров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_СоздатьТемуФорума(Знач Результат, Знач Вариант, Параметры = "", ИмяИлиТекст = "", Иконка = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        ОжидаетЧто(Результат["ok"]).Равно(Истина);
        ОжидаетЧто(Результат["result"]["name"]).Равно(ИмяИлиТекст);
        ОжидаетЧто(Результат["result"]["icon_custom_emoji_id"]).Равно(Иконка);
        
        Тема = Результат["result"]["message_thread_id"];
    
        OPI_Инструменты.ДобавитьПоле("Telegram_TopicID", Тема, "Строка", Параметры);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_TopicID", Параметры["Telegram_TopicID"]);
                    
    Иначе

        ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        ОжидаетЧто(Результат["ok"]).Равно(Истина);
        ОжидаетЧто(Результат["result"]["text"]).Равно(ИмяИлиТекст);
            
    КонецЕсли;
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ИзменитьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ЗакрытьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(10);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОткрытьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(10);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_УдалитьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(10);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_СкрытьГлавнуюТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ПоказатьГлавнуюТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ИзменитьИмяГлавнойТемыФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ЗаменитьТекстСообщения(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ЗаменитьКлавиатуруСообщения(Знач Результат, Знач Вариант, Клавиатура = "")

    КлавиатураСообщения = Результат["result"]["reply_markup"];

    Клавиатура_ = OPI_Инструменты.JsonВСтруктуру(Клавиатура);
    Клавиатура_.Удалить("rows");
    Клавиатура_ = OPI_Инструменты.JSONСтрокой(Клавиатура_);

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(СтрДлина(OPI_Инструменты.JSONСтрокой(КлавиатураСообщения))).Равно(СтрДлина(Клавиатура_));
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_Telegram_ЗаменитьОписаниеСообщения(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["photo"]).ИмеетТип("Массив");
    
    Возврат Результат;
    
КонецФункции

Функция Проверка_VK_СоздатьСсылкуПолученияТокена(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Строка");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьПост(Знач Результат, Знач Вариант, Параметры = "")

    ИДПоста  = Результат["response"]["post_id"];
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(ИДПоста).ИмеетТип("Число").Заполнено();
        
    Если Вариант = "Путь" Тогда
        
        OPI_Инструменты.ДобавитьПоле("VK_PostID", ИДПоста, "Строка", Параметры);
        ЗаписатьПараметр("VK_PostID", Параметры["VK_PostID"]);
                
    Иначе            
        
        OPI_VK.УдалитьПост(ИДПоста, Параметры);      
                      
    КонецЕсли;
     
    OPI_Инструменты.Пауза(5);
       
КонецФункции

Функция Проверка_VK_УдалитьПост(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьСоставнойПост(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["post_id"]).ИмеетТип("Число").Заполнено();
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьОпрос(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["post_id"]).ИмеетТип("Число").Заполнено();
    
    ИДПоста = Результат["response"]["post_id"];
    OPI_VK.УдалитьПост(ИДПоста, Параметры);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьАльбом(Знач Результат, Знач Вариант, Параметры = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["description"]).Равно(Описание);
    
    ИДАльбома = Результат["response"]["id"];
    Параметры.Вставить("VK_AlbumID", ИДАльбома);
    ЗаписатьПараметр("VK_AlbumID", ИДАльбома);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СохранитьКартинкуВАльбом(Знач Результат, Знач Вариант, Параметры = "", Описание = "", ИДАльбома = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"][0]["text"]).Равно(Описание);
    ОжидаетЧто(Результат["response"][0]["album_id"]).Равно(ИДАльбома);

       
    Если Вариант = "Путь" Тогда
        
        ИДКартинки = Результат["response"][0]["id"];
        Параметры.Вставить("VK_PictureID", ИДКартинки);
        ЗаписатьПараметр("VK_PictureID", ИДКартинки);
                
    Иначе

        ИДКартинки = Результат["response"][0]["id"];
        Результат  = OPI_VK.УдалитьКартинку(ИДКартинки, Параметры);       
    КонецЕсли;
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьКартинку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьАльбом(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьИсторию(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["count"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьОбсуждение(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();
    
    ИДОбсуждения = Результат["response"];
    Параметры.Вставить("VK_ConvID", ИДОбсуждения);
    ЗаписатьПараметр("VK_ConvID", ИДОбсуждения);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ЗакрытьОбсуждение(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ОткрытьОбсуждение(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_НаписатьВОбсуждение(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПоставитьЛайк(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["likes"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СделатьРепост(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["success"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["wall_repost_count"]).ИмеетТип("Число").Равно(1);
    
    Параметры.Вставить("Repost", Результат["response"]["post_id"]);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_НаписатьКомментарий(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["comment_id"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСтатистику(Знач Результат, Знач Вариант)
    
    ТипСоответствие = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["visitors"]).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["reach"]).ИмеетТип(ТипСоответствие).Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСтатистикуПостов(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив").ИмеетДлину(2);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьРекламнуюКампанию(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    ИДКампании = Результат["response"][0]["id"];
    ЗаписатьПараметр("VK_AdsCampaignID", ИДКампании);
    Параметры.Вставить("VK_AdsCampaignID", ИДКампании);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьРекламноеОбъявление(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    ИДОбъявления = Результат["response"][0]["id"];
    ЗаписатьПараметр("VK_AdsPostID", ИДОбъявления);
    Параметры.Вставить("VK_AdsPostID", ИДОбъявления);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПриостановитьРекламноеОбъявление(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СформироватьКлавиатуру(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_НаписатьСообщение(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокКатегорийТоваров(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьПодборкуТоваров(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["albums_count"]).ИмеетТип("Число").Заполнено();
    ОжидаетЧто(Результат["response"]["market_album_id"]).ИмеетТип("Число").Заполнено();

    ИДПодборки = Результат["response"]["market_album_id"];
    ЗаписатьПараметр("VK_MarketAlbumID", ИДПодборки);
    Параметры.Вставить("VK_MarketAlbumID", ИДПодборки);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ИзменитьПодборкуТоваров(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьПодборкиПоИД(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ДобавитьТовар(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["market_item_id"]).ИмеетТип("Число").Заполнено();

    ИДТовара = Результат["response"]["market_item_id"];
    ЗаписатьПараметр("VK_MarketItemID", ИДТовара);
    Параметры.Вставить("VK_MarketItemID", ИДТовара);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ИзменитьТовар(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ДобавитьТоварВПодборку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();
    
    OPI_Инструменты.Пауза(5);

    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьТоварИзПодборки(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьТовар(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьПодборку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьСвойствоТовара(Знач Результат, Знач Вариант, Параметры = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["property_id"]).ИмеетТип("Число").Заполнено();

    Свойство = Результат["response"]["property_id"];
    Свойство = OPI_Инструменты.ЧислоВСтроку(Свойство);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PropID", Свойство);
    Параметры.Вставить("VK_PropID", Свойство);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ИзменитьСвойствоТовара(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ДобавитьВариантСвойстваТовара(Знач Результат, Знач Вариант, Параметры = "", Счетчик = 0)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["variant_id"]).ИмеетТип("Число").Заполнено();
    
    ИДВарианта   = Результат["response"]["variant_id"];                   
    ИмяПараметра = "VK_PropVarID" + Строка(Счетчик);                     

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПараметра, ИДВарианта);
    Параметры.Вставить(ИмяПараметра, ИДВарианта);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ИзменитьВариантСвойстваТовара(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СоздатьТоварСоСвойством(Знач Результат, Знач Вариант, Параметры = "", Счетчик = 0)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["market_item_id"]).ИмеетТип("Число").Заполнено();
    
    ИДТовара = Результат["response"]["market_item_id"];
    ИмяПоля  = "VK_MarketItemID" + Строка(Счетчик);
    
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПоля, ИДТовара);
    Параметры.Вставить(ИмяПоля, ИДТовара);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьТоварыПоИД(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").ИмеетДлину(2);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СгруппироватьТовары(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["item_group_id"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьВариантСвойстваТовара(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_УдалитьСвойствоТовара(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокТоваров(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокПодборок(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокСвойств(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокЗаказов(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ЗагрузитьВидеоНаСервер(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["video_id"]).Заполнено();
    ОжидаетЧто(Результат["video_hash"]).Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ЗагрузитьФотоНаСервер(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"][0]["text"]).Равно("");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_СократитьСсылку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьСписокРекламныхКатегорий(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["v2"]).ИмеетТип("Массив").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_VK_ПолучитьОписаниеТовара(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьИнформациюОДиске(Знач Результат, Знач Вариант)
    
    Соответствие_ = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(Соответствие_).Заполнено();
    ОжидаетЧто(Результат["system_folders"]).ИмеетТип(Соответствие_);
    ОжидаетЧто(Результат["user"]).ИмеетТип(Соответствие_);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_СоздатьПапку(Знач Результат, Знач Вариант, Токен = "", Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("dir");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    
    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ЗагрузитьФайлПоURL(Знач Результат, Знач Вариант, Параметры = "", Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["href"]).Заполнено();
    ОжидаетЧто(Результат["method"]).Заполнено();
    
    ЗаписатьПараметр("YandexDisk_FileByURLPath", Путь);
    Параметры.Вставить("YandexDisk_FileByURLPath", Путь);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьОбъект(Знач Результат, Знач Вариант, Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
 
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_УдалитьОбъект(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ЗагрузитьФайл(Знач Результат, Знач Вариант, Токен = "", Путь = "")
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    OPI_Инструменты.Пауза(5);
    
    Удаление = OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    Если Не нРег(Строка(Удаление)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Удаление)).Равно(Ложь);
    КонецЕсли;
            
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_СоздатьКопиюОбъекта(Знач Результат, Знач Вариант, Параметры = "", Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    
    ЗаписатьПараметр("YandexDisk_CopyFilePath", Путь);
    Параметры.Вставить("YandexDisk_CopyFilePath", Путь);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьСсылкуДляСкачивания(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["method"]).Равно("GET");
    ОжидаетЧто(Результат["href"]).ИмеетТип("Строка").Заполнено();
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_СкачатьФайл(Знач Результат, Знач Вариант)
    
    МинимальныйРазмер = 500000;
    
    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() > МинимальныйРазмер).Равно(Истина);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьСписокФайлов(Знач Результат, Знач Вариант, Количество = 0, Отступ = 0)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["limit"]).Равно(Количество);
    ОжидаетЧто(Результат["offset"]).Равно(Отступ);
    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПереместитьОбъект(Знач Результат, Знач Вариант, Параметры = "", Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    
    ЗаписатьПараметр("YandexDisk_NewFilePath", Путь);
    Параметры.Вставить("YandexDisk_NewFilePath", Путь);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьСписокОпубликованныхОбъектов(Знач Результат, Знач Вариант, Количество = 0, Отступ = 0)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["limit"]).Равно(Количество);
    ОжидаетЧто(Результат["offset"]).Равно(Отступ);
    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ОпубликоватьОбъект(Знач Результат, Знач Вариант, Параметры = "", Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Строка").Заполнено();
    
    URL = Результат["public_url"];
    ЗаписатьПараметр("YandexDisk_PublicURL", URL);
    Параметры.Вставить("YandexDisk_PublicURL", URL);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["method"]).Равно("GET");
    ОжидаетЧто(Результат["href"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ПолучитьПубличныйОбъект(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Заполнено();
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_СохранитьПубличныйОбъектНаДиск(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Заполнено();
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Неопределено");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_YandexDisk_ОтменитьПубликациюОбъекта(Знач Результат, Знач Вариант, Путь = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Неопределено");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_УстановитьWebhook(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ПолучитьИнформациюОКанале(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ПолучитьДанныеПользователя(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["chat_hostname"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Заполнено();
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ПолучитьОнлайнПользователей(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    ОжидаетЧто(Результат["users"]).ИмеетТип("Массив");
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_СформироватьКлавиатуруИзМассиваКнопок(Знач Результат, Знач Вариант)
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьКартинку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьФайл(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьКонтакт(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьЛокацию(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Viber_ОтправитьСсылку(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleWorkspace_СформироватьСсылкуПолученияКода(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Строка");
    ЗаписатьПараметр("Google_Link", Результат);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleWorkspace_ПолучитьТокенПоКоду(Знач Результат, Знач Вариант)
    
    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        ЗаписатьПараметр("Google_Token"  , Результат["access_token"]);
        ЗаписатьПараметр("Google_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleWorkspace_ОбновитьТокен(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ЗаписатьПараметр("Google_Token", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleWorkspace_ПолучитьТокенServiceАккаунта(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ЗаписатьПараметр("Google_ServiceToken", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСписокКалендарей(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_СоздатьКалендарь(Знач Результат, Знач Вариант, Параметры = "", Наименование = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Календарь = Результат["id"];
    ЗаписатьПараметр("Google_NewCalendarID", Календарь);
    OPI_Инструменты.ДобавитьПоле("Google_NewCalendarID", Календарь, "Строка", Параметры);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьМетаданныеКалендаря(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьМетаданныеКалендаря(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ДобавитьКалендарьВСписок(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьКалендарьСписка(Знач Результат, Знач Вариант, ОсновнойЦвет = "", ДополнительныйЦвет = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["foregroundColor"]).Равно(ОсновнойЦвет);
    ОжидаетЧто(Результат["backgroundColor"]).Равно(ДополнительныйЦвет);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьКалендарьСписка(Знач Результат, Знач Вариант, ОсновнойЦвет = "", ДополнительныйЦвет = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["foregroundColor"]).Равно(ОсновнойЦвет);
    ОжидаетЧто(Результат["backgroundColor"]).Равно(ДополнительныйЦвет);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ОчиститьОсновнойКалендарь(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_УдалитьКалендарьИзСписка(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_УдалитьКалендарь(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_СоздатьСобытие(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Событие = Результат["id"];
    ЗаписатьПараметр("Google_EventID", Событие);
    OPI_Инструменты.ДобавитьПоле("Google_EventID", Событие, "Строка", Параметры);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПереместитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_УдалитьСобытие(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСписокСобытий(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьОписаниеСобытия(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокКаталогов(Знач Результат, Знач Вариант, Параметры = "")
    
    Результат = Результат[0];

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

    Идентификатор = Результат["id"];
    ЗаписатьПараметр("GD_Catalog", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Catalog", Идентификатор, "Строка", Параметры);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьИнформациюОбОбъекте(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ЗагрузитьФайл(Знач Результат, Знач Вариант, Параметры = "", Описание = "")

    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);
    
    Идентификатор = Результат["id"];
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда
            
        ЗаписатьПараметр("GD_File", Идентификатор);
        OPI_Инструменты.ДобавитьПоле("GD_File", Идентификатор, "Строка", Параметры);
        
    Иначе
        
        МассивУдаляемых = Параметры["МассивУдаляемых"];
        МассивУдаляемых.Добавить(Идентификатор);
        Параметры.Вставить("МассивУдаляемых", МассивУдаляемых);
        
    КонецЕсли;
            
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_СкопироватьОбъект(Знач Результат, Знач Вариант, Параметры = "", НовоеИмя = "")
    
    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    
    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);

    Идентификатор = Результат["id"];

    МассивУдаляемых = Параметры["МассивУдаляемых"];
    МассивУдаляемых.Добавить(Идентификатор);
    Параметры.Вставить("МассивУдаляемых", МассивУдаляемых);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_СкачатьФайл(Знач Результат, Знач Вариант, Параметры = "")

    Размер      = OPI_ЗапросыHTTP.Get(Параметры["Picture"]).Размер();

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ОбновитьФайл(Знач Результат, Знач Вариант, НовоеИмя = "")

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    
    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);
    
    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_УдалитьОбъект(Знач Результат, Знач Вариант)
    
    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьОписаниеФайла(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_СоздатьКомментарий(Знач Результат, Знач Вариант, Параметры = "", Комментарий = "")
    
    ОжидаетЧто(Результат["content"]).Равно(Комментарий);
    ОжидаетЧто(Результат["kind"]).Равно("drive#comment");
    
    Идентификатор = Результат["id"];

    ЗаписатьПараметр("GD_Comment", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Comment", Идентификатор, "Строка", Параметры);

    OPI_Инструменты.Пауза(5);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьКомментарий(Знач Результат, Знач Вариант)
    
    ОжидаетЧто(Результат["content"]).Равно("Текст комментария");
    ОжидаетЧто(Результат["kind"]).Равно("drive#comment");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокКомментариев(Знач Результат, Знач Вариант)

    Комментарии       = Результат["comments"];
    ОбъектКомментарий = Комментарии[Комментарии.ВГраница()];
 
    ОжидаетЧто(ОбъектКомментарий["content"]).Равно("Текст комментария");
    ОжидаетЧто(ОбъектКомментарий["kind"]).Равно("drive#comment");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_УдалитьКомментарий(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleDrive_СоздатьПапку(Знач Результат, Знач Вариант, Токен = "")

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();
    
    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_СоздатьКнигу(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", МассивЛистов = "")

    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Если ЗначениеЗаполнено(МассивЛистов) Тогда

        Для Н = 0 По МассивЛистов.ВГраница() Цикл

            ИмяЛиста = Результат["sheets"][Н]["properties"]["title"];
            ОжидаетЧто(ИмяЛиста).Равно(МассивЛистов[Н]);

        КонецЦикла;

    КонецЕсли;
    
    Книга = Результат["spreadsheetId"];
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда
        
        Лист  = Результат["sheets"][0]["properties"]["sheetId"];
        Лист  = OPI_Инструменты.ЧислоВСтроку(Лист);
    
        ЗаписатьПараметр("GS_Spreadsheet", Книга);
        ЗаписатьПараметр("GS_Sheet"      , Лист);
    
        OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet", Книга, "Строка", Параметры);
        OPI_Инструменты.ДобавитьПоле("GS_Sheet"      , Лист , "Строка", Параметры);
        
    Иначе

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet2", Книга);
        OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet2", Книга, "Строка", Параметры);
            
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ПолучитьКнигу(Знач Результат, Знач Вариант, Токен = "")

    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");
    
    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Для Н = 0 По МассивЛистов.ВГраница() Цикл

        ИмяЛиста = Результат["sheets"][Н]["properties"]["title"];
        ОжидаетЧто(ИмяЛиста).Равно(МассивЛистов[Н]);

    КонецЦикла;
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_КопироватьЛист(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["title"]).Заполнено();
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ДобавитьЛист(Знач Результат, Знач Вариант)

    НовыйЛист = Результат["replies"][0]["addSheet"]["properties"];
    ОжидаетЧто(НовыйЛист["title"]).Заполнено();
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_УдалитьЛист(Знач Результат, Знач Вариант, Книга = "")

    ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ИзменитьНаименованиеКниги(Знач Результат, Знач Вариант, Книга = "")

    ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ПолучитьТаблицу(Знач Результат, Знач Вариант)

    Наименование = "Тестовая таблица (изм.)";
    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_УстановитьЗначенияЯчеек(Знач Результат, Знач Вариант, Количество = 0)

    ОжидаетЧто(Результат["totalUpdatedCells"]).Равно(Количество);
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ПолучитьЗначенияЯчеек(Знач Результат, Знач Вариант, КнигаИлиКоличество = 0)

    Если Вариант = "Все" Тогда
        ОжидаетЧто(Результат["spreadsheetId"]).Равно(КнигаИлиКоличество);
    Иначе
        ОжидаетЧто(Результат["valueRanges"].Количество()).Равно(КнигаИлиКоличество);
    КонецЕсли;
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_GoogleSheets_ОчиститьЯчейки(Знач Результат, Знач Вариант, Количество = 0)

    ОжидаетЧто(Результат["clearedRanges"].Количество()).Равно(Количество);
  
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьИнформациюОБоте(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["bot_id"]).Заполнено();
    ОжидаетЧто(Результат["user_id"]).Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокРабочихОбластей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["teams"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ОтправитьСообщение(Знач Результат, Знач Вариант, Параметры = "", Текст = "", Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["message"]["text"]).Равно(Текст);
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Отметка = Результат["ts"];                                                            
        ЗаписатьПараметр("Slack_MessageTS", Отметка);                
        OPI_Инструменты.ДобавитьПоле("Slack_MessageTS", Отметка, "Строка", Параметры);       
         
    КонецЕсли;
    
    Если Вариант = "Отложенное" Тогда

        Токен    = Параметры["Slack_Token"];
        Отметка  = Результат["scheduled_message_id"];
        
        Удаление = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка, Истина);
        
        ОжидаетЧто(Удаление["ok"]).Равно(Истина);
        
    Иначе
        
        ОжидаетЧто(Результат["ts"]).Заполнено();
                
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_СформироватьБлокКартинку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ИзменитьСообщение(Знач Результат, Знач Вариант, Текст = "", Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина); 
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["ts"]).Заполнено();
    ОжидаетЧто(Результат["message"]["text"]).Равно(Текст);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокОтветовНаСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСсылкуНаСообщение(Знач Результат, Знач Вариант, Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["permalink"]).Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ОтправитьЭфемерноеСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["message_ts"]).Заполнено();
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокОтложенныхСообщений(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["scheduled_messages"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_СоздатьКанал(Знач Результат, Знач Вариант, Параметры = "", Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);
    
    Канал = Результат["channel"]["id"];
    ЗаписатьПараметр("Slack_NewChannel", Канал);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannel", Канал, "Строка", Параметры);

    ЗаписатьПараметр("Slack_NewChannelName", Имя);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannelName", Имя, "Строка", Параметры);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_УстановитьТемуКанала(Знач Результат, Знач Вариант, Тема = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["topic"]["value"]).Равно(Тема);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_УстановитьЦельКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПригласитьПользователейВКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ВыгнатьПользователяИзКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьИсториюКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокПользователейКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПокинутьКанал(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ВступитьВКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПереименоватьКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_АрхивироватьКанал(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокКаналов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channels"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ОткрытьДиалог(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда
        
        Диалог = Результат["channel"]["id"];
        
        ОжидаетЧто(Результат["channel"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Диалог).Заполнено();
        
        ЗаписатьПараметр("Slack_Dialog", Диалог);
        OPI_Инструменты.ДобавитьПоле("Slack_Dialog", Диалог, "Строка", Параметры);
        
    КонецЕсли;
     
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ЗакрытьДиалог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["files"]).ИмеетТип("Массив");
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ЗагрузитьФайл(Знач Результат, Знач Вариант, Параметры = "", ИмяФайла = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    Если ЗначениеЗаполнено(Результат["files"]) Тогда
        ЗагруженныйФайл = Результат["files"][0];
    Иначе
        ЗагруженныйФайл = Результат["file"];
    КонецЕсли;

    ОжидаетЧто(ЗагруженныйФайл["name"]).Равно(ИмяФайла);
    
    Если Не ЗначениеЗаполнено(Вариант) Тогда
        
        ЗагруженныйФайл = Результат["files"][0]["id"];                                             
        ЗаписатьПараметр("Slack_FileID", ЗагруженныйФайл);                
        OPI_Инструменты.ДобавитьПоле("Slack_FileID", ЗагруженныйФайл, "Строка", Параметры);
        
    Иначе
        OPI_Slack.УдалитьФайл(Параметры["Slack_Token"], Результат["files"][0]["id"]);
    КонецЕсли;
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_СделатьФайлПубличным(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_СделатьФайлПриватным(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьДанныеФайла(Знач Результат, Знач Вариант, ИмяФайла = "")

    Если ЗначениеЗаполнено(Результат["files"]) Тогда
        ЗагруженныйФайл = Результат["files"][0];
    Иначе
        ЗагруженныйФайл = Результат["file"];
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(ЗагруженныйФайл["name"]).Равно(ИмяФайла);
    
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_УдалитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьСписокВнешнихФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["files"]).ИмеетТип("Массив");
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ДобавитьВнешнийФайл(Знач Результат, Знач Вариант, Параметры = "", Заголовок = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    ЗагруженныйФайл = Результат["file"];
    ОжидаетЧто(ЗагруженныйФайл["title"]).Равно(Заголовок);
    
    ЗагруженныйФайл = Результат["file"]["id"];
    ЗаписатьПараметр("Slack_ExtFileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_ExtFileID", ЗагруженныйФайл, "Строка", Параметры);
   
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ПолучитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    
    ЗагруженныйФайл = Результат["file"];
    ОжидаетЧто(ЗагруженныйФайл["title"]).Равно("Новый файл");
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_ОтправитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Slack_УдалитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_СоздатьБазу(Знач Результат, Знач Вариант, Параметры = "", ИмяТаблицы = "")

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["tables"][0]["name"]).Равно(ИмяТаблицы);
    
    База = Результат["id"];
    ЗаписатьПараметр("Airtable_Base", База);
    OPI_Инструменты.ДобавитьПоле("Airtable_Base", База, "Строка", Параметры);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьТаблицыБазы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["tables"]).Заполнено();
    ОжидаетЧто(Результат["tables"]).ИмеетТип("Массив");
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьСписокБаз(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["bases"]).Заполнено();
    ОжидаетЧто(Результат["bases"]).ИмеетТип("Массив");
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеНомера(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеСтроковое(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеВложения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеФлажка(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеДаты(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеТелефона(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеПочты(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьПолеСсылки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_СоздатьТаблицу(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    
    Таблица = Результат["id"];
    ЗаписатьПараметр("Airtable_Table", Таблица);
    OPI_Инструменты.ДобавитьПоле("Airtable_Table", Таблица, "Строка", Параметры);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ИзменитьТаблицу(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_СоздатьПоле(Знач Результат, Знач Вариант, Параметры = "", Имя = "")

    ОжидаетЧто(Результат["name"]).Равно(Имя);
    
    Поле = Результат["id"];
    ЗаписатьПараметр("Airtable_Field", Поле);
    OPI_Инструменты.ДобавитьПоле("Airtable_Field", Поле, "Строка", Параметры);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ИзменитьПоле(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_СоздатьЗаписи(Знач Результат, Знач Вариант, Параметры = "", Числовой = "", Строчный = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
        ОжидаетЧто(Результат["records"]).Заполнено();
    
        Токен   = Параметры["Airtable_Token"];
        База    = Параметры["Airtable_Base"];
        Таблица = Параметры["Airtable_Table"];
        
        OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);
    
        МассивУдаляемых = Новый Массив;
    
        Для Каждого Запись Из Результат["records"] Цикл
    
            ТекущаяЗапись = Запись["id"];
            МассивУдаляемых.Добавить(ТекущаяЗапись);
    
        КонецЦикла;
    
        OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, МассивУдаляемых);
            
    Иначе

        ОдиночнаяЗапись = Результат["id"];
        ОжидаетЧто(ОдиночнаяЗапись).Заполнено();
        ОжидаетЧто(Результат["createdTime"]).Заполнено();
        ОжидаетЧто(Результат["fields"]["Номер"]).Равно(Числовой);
        ОжидаетЧто(СокрЛП(Результат["fields"]["Строковое"])).Равно(Строчный);
            
        Запись = Результат["id"];
        ЗаписатьПараметр("Airtable_Record", Запись);
        OPI_Инструменты.ДобавитьПоле("Airtable_Record", Запись, "Строка", Параметры);
        
    КонецЕсли;
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьЗапись(Знач Результат, Знач Вариант, Запись = "")

    ОжидаетЧто(Результат["id"]).Равно(Запись);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_СоздатьКомментарий(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат["text"]).Равно(Текст);

    Комментарий = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Comment", Комментарий);
    OPI_Инструменты.ДобавитьПоле("Airtable_Comment", Комментарий, "Строка", Параметры);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ИзменитьКомментарий(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат["text"]).Равно(Текст);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьКомментарии(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["comments"]).ИмеетТип("Массив");
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_УдалитьКомментарий(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["deleted"]).Равно(Истина);
    ОжидаетЧто(Результат["id"]).Равно(Комментарий);
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_ПолучитьСписокЗаписей(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["records"]).Заполнено();
        
    Возврат Результат;
        
КонецФункции

Функция Проверка_Airtable_УдалитьЗаписи(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["records"]).Заполнено();
        
    Возврат Результат;
        
КонецФункции

Процедура Проверка_Пусто(Знач Результат) Экспорт

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Строка(Знач Результат, Знач ОбъектСравнения = "") Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Строка");

    Если ЗначениеЗаполнено(ОбъектСравнения) Тогда
        ОжидаетЧто(Результат).Равно(ОбъектСравнения);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ДвоичныеДанные(Знач Результат, Знач Размер = Неопределено) Экспорт

    МинимальныйРазмер = 500000;

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

    Если Не Размер = Неопределено Тогда
        ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат.Размер() > МинимальныйРазмер).Равно(Истина);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Массив(Знач Результат, Знач Количество = Неопределено) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Если Не Количество = Неопределено Тогда
       ОжидаетЧто(Результат).ИмеетДлину(Количество);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Соответствие(Знач Результат, Знач Заполненность = Истина) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");

    Если Заполненность Тогда
        ОжидаетЧто(Результат).Заполнено();
    Иначе
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Структура(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();

КонецПроцедуры

Процедура Проверка_Заполнено(Знач Результат) Экспорт

    ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Истина);

КонецПроцедуры

Процедура Проверка_Истина(Знач Результат) Экспорт

    ОжидаетЧто(Результат).Равно(Истина);

КонецПроцедуры

Процедура Проверка_Ложь(Знач Результат) Экспорт

    ОжидаетЧто(Результат).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_ТвиттерТокен(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

КонецПроцедуры

Процедура Проверка_НоушнОбъект(Знач Результат, Знач Вид = "page") Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно(Вид);

КонецПроцедуры

Процедура Проверка_НоушнСтраницаБазы(Знач Результат, Знач База) Экспорт

    Проверка_НоушнОбъект(Результат);

    Родитель = Результат["parent"]["database_id"];
    ОжидаетЧто(Родитель).Равно(База);

КонецПроцедуры

Процедура Проверка_ДропБоксФайл(Знач Результат, Знач Путь) Экспорт

    ОжидаетЧто(Результат["path_display"]).Равно(Путь);

КонецПроцедуры

Процедура Проверка_ДропБоксМетаданные(Знач Результат, Знач Путь) Экспорт

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

КонецПроцедуры

Процедура Проверка_ДропБоксМассив(Знач Результат, Знач Количество = Неопределено) Экспорт

    ОжидаетЧто(Результат["entries"]).ИмеетТип("Массив");

    Если Не Количество = Неопределено Тогда
        ОжидаетЧто(Результат["entries"].Количество()).Равно(Количество);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ДропБоксРабота(Знач Результат) Экспорт
    ОжидаетЧто(Результат["async_job_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропБоксСтатус(Знач Результат) Экспорт
    ОжидаетЧто(Результат[".tag"]).Равно("complete");
КонецПроцедуры

Процедура Проверка_ДропБоксТеги(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["paths_to_tags"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["paths_to_tags"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_ДропбоксАккаунт(Знач Результат) Экспорт
    ОжидаетЧто(Результат["account_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропбоксПространство(Знач Результат) Экспорт
    ОжидаетЧто(Результат["used"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропбоксУчастник(Знач Результат, Знач Почта, Знач ТолькоПросмотр) Экспорт
    ОжидаетЧто(Результат[0]["result"][".tag"]).Равно("success");
    ОжидаетЧто(Результат[0]["member"]["email"]).Равно(Почта);
    ОжидаетЧто(
        Результат[0]["result"]["success"][".tag"]).Равно(?(ТолькоПросмотр, "viewer", "editor"));
КонецПроцедуры

Процедура Проверка_ДропбоксПубличнаяПапка(Знач Результат) Экспорт
    ОжидаетЧто(Результат["shared_folder_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксВремя(Знач Результат) Экспорт

    Время = Результат["result"];

    Если Не ТипЗнч(Время) = Тип("Дата") Тогда
       Время = XMLЗначение(Тип("Дата"), Время);
    КонецЕсли;

    ОжидаетЧто(Время).ИмеетТип("Дата").Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксАвторизация(Знач Результат) Экспорт

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЧисло(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксИстина(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);
КонецПроцедуры

Процедура Проверка_БитриксБулево(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Булево");
КонецПроцедуры

Процедура Проверка_БитриксСтрока(Знач Результат, Знач Значение = "") Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Строка").Заполнено();

    Если ЗначениеЗаполнено(Значение) Тогда
        ОжидаетЧто(Результат["result"]).Равно(Значение);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_БитриксМассив(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксСоответствие(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
КонецПроцедуры

Процедура Проверка_БитриксСписок(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]["list"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксМассивОбъектов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксПоля(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["fields"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЗадача(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокЗадач(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]["tasks"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксХранилища(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["total"]).Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксОбъект(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЛид(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["PHONE"]).Заполнено();
    ОжидаетЧто(Результат["result"]["NAME"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСделка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();
    ОжидаетЧто(Результат["result"]["BEGINDATE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксВложение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["attachmentId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксДоступныеДействия(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Действия = Результат["result"]["allowedActions"];
    ОжидаетЧто(Действия).ИмеетТип("Соответствие");
    ОжидаетЧто(Действия.Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_БитриксКомментарий(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["POST_MESSAGE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксРезультат(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["text"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксНеопределено(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокКомментариев(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["POST_MESSAGE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокРезультатов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["text"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСообщения(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["messages"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_БитриксДиалог(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["dialogId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксФайлСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["MESSAGE_ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксУчетВремени(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["STATUS"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксНастройкиУчетаВремени(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["UF_TIMEMAN"]).ИмеетТип("Булево");

КонецПроцедуры

Процедура Проверка_ВКТПользователь(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["userId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТСобытия(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["events"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ВКТСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ВКТФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["size"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТСписок(Знач Результат, Знач ИмяПоля) Экспорт

    ОжидаетЧто(Результат[ИмяПоля]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ВКТЧат(Знач Результат) Экспорт

    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["inviteLink"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТЗаявки(Знач Результат) Экспорт

    Если Не Результат["ok"] Тогда
        ОжидаетЧто(Результат["description"]).Равно("User is not pending or nobody in pending list");
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ОзонСписокКатегорий(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["category_name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонСписокХарактеристик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонСписокЗначенийХарактеристики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["value"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЗаданиеЗагрузки(Знач Результат, Знач Вложенный = Истина) Экспорт

    Если Вложенный Тогда
        IDЗадачи = Результат["result"]["task_id"];
    Иначе
        IDЗадачи = Результат["task_id"];
    КонецЕсли;

    ОжидаетЧто(IDЗадачи).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонНовыеТовары(Знач Результат) Экспорт

    Статус            = Результат["result"]["items"][0]["status"];
    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Статус = "imported" Или Статус = "skipped").Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонМассивОбъектов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонОбъекты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонМассивОбновлено(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"][0]["updated"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонМассивРейтингов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["products"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонТовар(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["id"]).Заполнено();
    ОжидаетЧто(Результат["result"]["name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонТовары(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["items"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЛимиты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["daily_create"]).Заполнено();
    ОжидаетЧто(Результат["daily_update"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонКартинки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["pictures"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонБезОшибок(Знач Результат) Экспорт

    ОжидаетЧто(Результат["errors"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_ОзонИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонМассив(Знач Результат, Знач Поле = "result") Экспорт

    ОжидаетЧто(Результат[Поле]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонУдалениеТовара(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"][0]["is_deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонДобавлениеКодов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["status"]).Равно("imported");

КонецПроцедуры

Процедура Проверка_ОзонПодписчики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"][0]["count"]).ИмеетТип("Число");

КонецПроцедуры

Процедура Проверка_ОзонSKU(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["availability"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЧерновик(Знач Результат) Экспорт

     ОжидаетЧто(Результат["operation_id"]).ИмеетТип("Строка").Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонПоиск(Знач Результат) Экспорт

    ОжидаетЧто(Результат["search"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонКластеры(Знач Результат) Экспорт

    ОжидаетЧто(Результат["clusters"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонГотовыйЧерновик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно("CALCULATION_STATUS_SUCCESS");

КонецПроцедуры

Процедура Проверка_ОзонТаймслоты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["drop_off_warehouse_timeslots"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_НСУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно("success");

КонецПроцедуры

Процедура Проверка_НСФайлыКаталога(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["result"]).Равно("success");
    ОжидаетЧто(Результат["files"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_НССинхронизация(Знач Результат) Экспорт

    ОжидаетЧто(Результат["errors"]).Равно(0);
    ОжидаетЧто(Результат["items"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_СдэкТокен(Знач Результат) Экспорт

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["expires_in"]).Заполнено();
    ОжидаетЧто(Результат["token_type"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СдэкЗаказ(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

КонецПроцедуры

Процедура Проверка_СдэкПреалерт(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["shipment_point"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

КонецПроцедуры

Процедура Проверка_СдэкКвитанция(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["statuses"][0]["code"]).Равно("ACCEPTED");
    ОжидаетЧто(Результат["entity"]["copy_count"]).Равно(1);

КонецПроцедуры

Процедура Проверка_СдэкДанныеЗаказа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["entity"]["number"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СдэкИнтервалыДоставки(Знач Результат) Экспорт
    ОжидаетЧто(Результат["date_intervals"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_СдэкПаспорт(Знач Результат) Экспорт

    ОжидаетЧто(Результат["orders"][0]["passport"][0]["client"]).Равно("SENDER");
    ОжидаетЧто(Результат["orders"][0]["passport"][1]["client"]).Равно("RECEIVER");

КонецПроцедуры

Процедура Проверка_СдэкЧек(Знач Результат) Экспорт

    ОжидаетЧто(Результат["check_info"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ЯМаркетМагазины(Знач Результат) Экспорт

    ОжидаетЧто(Результат["campaigns"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["pager"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетМагазин(Знач Результат) Экспорт

    ОжидаетЧто(Результат["campaign"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["campaign"]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетКабинет(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["settings"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетОк(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно("OK");
    ОжидаетЧто(Результат["results"]).Равно(Неопределено);

КонецПроцедуры

Процедура Проверка_МетрикаМетки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["labels"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_МетрикаМетка(Знач Результат, Знач Наименование = "") Экспорт

    ОжидаетЧто(Результат["label"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["label"]["id"]).Заполнено();

    Если ЗначениеЗаполнено(Наименование) Тогда
        ОжидаетЧто(Результат["label"]["name"]).Равно(Наименование);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_МетрикаУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["success"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_МетрикаСчетчик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["counter"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_МетрикаСчетчики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["counters"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_МетрикаОперации(Знач Результат) Экспорт

    ОжидаетЧто(Результат["operations"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_S3Успех(Знач Результат) Экспорт

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

КонецПроцедуры

Процедура Проверка_S3НеНайдено(Знач Результат) Экспорт

    НеНайдено = Результат["status"] = 404;
    ОжидаетЧто(НеНайдено).Равно(Истина);

КонецПроцедуры

Процедура Проверка_S3НеПоддерживается(Знач Результат) Экспорт

    Успех = Результат["status"] = 501;
    ОжидаетЧто(Успех).Равно(Истина);

КонецПроцедуры

Процедура Проверка_Компонента(Знач Результат, Знач ИмяТипа) Экспорт

    ОжидаетЧто(Строка(ТипЗнч(Результат))).Равно(ИмяТипа);

КонецПроцедуры

Процедура Проверка_Равенство(Знач Значение1, Знач Значение2) Экспорт

    ОжидаетЧто(Значение1).Равно(Значение2);

КонецПроцедуры

Процедура Проверка_Неравенство(Знач Значение1, Знач Значение2) Экспорт

    ОжидаетЧто(Значение1 = Значение2).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_SQLiteУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_SQLiteОшибка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_SQLiteСтроки(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["rows"]).Равно(Количество);

КонецПроцедуры

Процедура Проверка_SQLiteЗначенияПолей(Знач Результат, Знач СтруктураЗначений) Экспорт

    Для Каждого Значение Из СтруктураЗначений Цикл
        Результат[Значение.Ключ] = Значение.Значение;
    КонецЦикла;

КонецПроцедуры

Процедура Проверка_SQLiteНетЗаписей(Знач Результат) Экспорт

    ОжидаетЧто(Результат["data"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_РезультатИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_РезультатЛожь(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_ГринИнстанс(Знач Результат) Экспорт

    ОжидаетЧто(Результат["proxyInstance"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринСохранениеНастроек(Знач Результат) Экспорт

    ОжидаетЧто(Результат["saveSettings"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринАвторизован(Знач Результат) Экспорт

    ОжидаетЧто(Результат["stateInstance"]).Равно("authorized");

КонецПроцедуры

Процедура Проверка_ГринПерезапуск(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isReboot"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринРазлогин(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isLogout"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринАватар(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setProfilePicture"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринКартинкаГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setGroupPicture"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринКод(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно(Истина);
    ОжидаетЧто(Результат["code"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринПрофиль(Знач Результат) Экспорт

    ОжидаетЧто(Результат["deviceId"]).Заполнено();
    ОжидаетЧто(Результат["phone"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринНоваяГруппа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["created"]).Равно(Истина);
    ОжидаетЧто(Результат["chatId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринВыходГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринГруппа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["groupId"]).Заполнено();
    ОжидаетЧто(Результат["owner"]).Заполнено();
    ОжидаетЧто(Результат["creation"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринИмяГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["updateGroupName"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринДобавлениеПользователя(Знач Результат) Экспорт

    ОжидаетЧто(Результат["addParticipant"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринИсключениеПользователя(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeParticipant"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринНазначениеАдминистратора(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setGroupAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринОтзывАдминистратора(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринСообщения(Знач Результат) Экспорт

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ГринФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["idMessage"]).Заполнено();
    ОжидаетЧто(Результат["urlFile"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринУведомление(Знач Результат) Экспорт

    ОжидаетЧто(Результат["receiptId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринВходнойФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["downloadUrl"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринПрочтение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setRead"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринОчисткаОчереди(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isCleared"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OllamaОтвет(Знач Результат, Знач Завершен = Истина) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["response"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Завершен);

КонецПроцедуры

Процедура Проверка_OllamaПривязки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["embeddings"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaЗагрузкаВыгрузка(Знач Результат, Знач Выгрузка) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Истина);

   Если Выгрузка Тогда
       ОжидаетЧто(Результат["done_reason"]).Равно("unload");
   Иначе
       ОжидаетЧто(Результат["done_reason"]).Равно("load");
   КонецЕсли;

КонецПроцедуры

Процедура Проверка_OllamaСообщение(Знач Результат, Знач Завершен = Истина) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["message"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Завершен);

КонецПроцедуры

Процедура Проверка_OllamaУспех(Знач Результат) Экспорт

   ОжидаетЧто(Результат["status"]).Равно("success");

КонецПроцедуры

Процедура Проверка_OllamaМодели(Знач Результат) Экспорт

    ОжидаетЧто(Результат["models"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_OllamaИнформацияМодели(Знач Результат) Экспорт

   ОжидаетЧто(Результат["parameters"]).Заполнено();
   ОжидаетЧто(Результат["model_info"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaВерсия(Знач Результат) Экспорт

   ОжидаетЧто(Результат["version"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaКод(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OllamaОшибка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_code"] >= 400).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIОтвет(Знач Результат) Экспорт

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("chat.completion");
    ОжидаетЧто(Результат["choices"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIПредставления(Знач Результат) Экспорт

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIАссистент(Знач Результат, Знач Имя = "") Экспорт

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("assistant");

    Если ЗначениеЗаполнено(Имя) Тогда
        ОжидаетЧто(Результат["name"]).Равно(Имя);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_OpenAIУдалениеАссистента(Знач Результат, Знач IDАссистента) Экспорт

    ОжидаетЧто(Результат["id"]).Равно(IDАссистента);
    ОжидаетЧто(Результат["object"]).Равно("assistant.deleted");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIСписок(Знач Результат) Экспорт

    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIФайл(Знач Результат
    , Знач ИмяФайла   = Неопределено
    , Знач Размер     = Неопределено
    , Знач Назначение = Неопределено) Экспорт

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("file");

    Если ИмяФайла <> Неопределено Тогда
        ОжидаетЧто(Результат["filename"]).Равно(ИмяФайла);
    КонецЕсли;

    Если Размер <> Неопределено Тогда
        ОжидаетЧто(Результат["bytes"]).Равно(Размер);
    КонецЕсли;

    Если Назначение <> Неопределено Тогда
        ОжидаетЧто(Результат["purpose"]).Равно(Назначение);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_OpenAIУдалениеФайла(Знач Результат, Знач IDФайла) Экспорт

    ОжидаетЧто(Результат["id"]).Равно(IDФайла);
    ОжидаетЧто(Результат["object"]).Равно("file");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIКартинка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["data"]).Заполнено();
    ОжидаетЧто(Результат["created"]).Заполнено();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеИзФайла(Параметр, Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Возврат ?(Значения.Свойство(Параметр), Значения[Параметр], "");

КонецФункции

Функция ПутьКФайлуДанных()

    Путь          = "";
    ВозможныеПути = Новый Массив;
    ВозможныеПути.Добавить("./data.json");
    ВозможныеПути.Добавить("C:\GDrive\Мой диск\data.json");
    ВозможныеПути.Добавить("G:\My Drive\data.json");

    Для Каждого ВозможныйПуть Из ВозможныеПути Цикл

        ФайлРепозитория = Новый Файл(ВозможныйПуть);

        Если ФайлРепозитория.Существует() Тогда
            Путь = ВозможныйПуть;
            Прервать;
        КонецЕсли;

    КонецЦикла;

    Возврат Путь;

КонецФункции

Функция ПолучитьОбщийМодуль(Знач Имя)
    УстановитьБезопасныйРежим(Истина);
    Модуль = Вычислить(Имя);
    Возврат Модуль;
КонецФункции

// BSLLS:CognitiveComplexity-off

Функция ПолучитьЗначениеДляCLI(Знач Значение, Знач Вложенный = Ложь)

    ТекущийТип = ТипЗнч(Значение);
    Обертка    = Ложь;

    Если ТекущийТип = Тип("Число") Тогда

        Значение = OPI_Инструменты.ЧислоВСтроку(Значение);

    ИначеЕсли ТекущийТип = Тип("Строка") Тогда

        Значение = OPI_Инструменты.ЧислоВСтроку(Значение);

        Если Не Вложенный Тогда
            Обертка = Истина;
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Дата") Тогда

        Значение = XMLСтрока(Значение);
        Обертка  = Истина;

    ИначеЕсли ТекущийТип = Тип("Структура")
        Или ТекущийТип = Тип("Соответствие")
        Или ТекущийТип = Тип("Массив") Тогда

        ЗаписьJSON = Новый ЗаписьJSON();

        Если OPI_Инструменты.ЭтоOneScript() Или ТекущийТип = Тип("Массив") Тогда

            ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
            ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
            ЗаписатьJSON(ЗаписьJSON, Значение);

            Значение = ЗаписьJSON.Закрыть();
            Обертка  = Истина;

        Иначе

            // BSLLS:MissingTemporaryFileDeletion-off

            //@skip-check missing-temporary-file-deletion
            ИВТ   = ПолучитьИмяВременногоФайла("json");
            // BSLLS:MissingTemporaryFileDeletion-on

            Поток = Новый ФайловыйПоток(ИВТ, РежимОткрытияФайла.Создать);

            ЗаписьJSON.ОткрытьПоток(Поток);
            ЗаписатьJSON(ЗаписьJSON, Значение);
            ЗаписьJSON.Закрыть();
            Поток.Закрыть();

            Значение = ИВТ;
            Обертка  = Истина;

        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Булево") Тогда

        Значение = ?(Значение, "true", "false");

    ИначеЕсли ТекущийТип = Тип("ДвоичныеДанные") Тогда

        // BSLLS:MissingTemporaryFileDeletion-off

        //@skip-check missing-temporary-file-deletion
        ИВФ = ПолучитьИмяВременногоФайла();
        Значение.Записать(ИВФ);
        Значение = ИВФ;
        Обертка  = Истина;

        // BSLLS:MissingTemporaryFileDeletion-on

    Иначе

        ВызватьИсключение "Неподдерживаемый тип " + Строка(ТекущийТип);

    КонецЕсли;

    Если Не OPI_Инструменты.ЭтоWindows() Тогда
        Значение = СтрЗаменить(Значение, """" , """'""");
    КонецЕсли;

    Если Обертка Тогда
        Значение = """" + Значение + """";
    КонецЕсли;

    Возврат Значение;

КонецФункции

// BSLLS:CognitiveComplexity-on

Функция ОформитьОпцию(Знач Значение, Знач Имя, Знач Вложенный = Ложь)

    МассивСекретов = Новый Массив();
    МассивСекретов.Добавить("token");
    МассивСекретов.Добавить("key");
    МассивСекретов.Добавить("secret");
    МассивСекретов.Добавить("pass");
    МассивСекретов.Добавить("client");
    МассивСекретов.Добавить("api");
    МассивСекретов.Добавить("refresh");

    СтруктураЗамен = Новый Соответствие;
    СтруктураЗамен.Вставить("host.docker.internal", "127.0.0.1");

    Если ТипЗнч(Значение) = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда

        Значение = ОформитьОпциюКоллекцию(Значение);

    ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда

        Значение = ОформитьОпциюМассив(Значение, Имя);

    Иначе

        Для Каждого СекретныйКлюч Из МассивСекретов Цикл

            Если СтрНайти(нРег(Имя), СекретныйКлюч) <> 0 Тогда
                Значение = "***";
            КонецЕсли;

        КонецЦикла;

        Для Каждого ЗначениеЗамены Из СтруктураЗамен Цикл
            Значение = СтрЗаменить(Значение, ЗначениеЗамены.Ключ, ЗначениеЗамены.Значение);
        КонецЦикла;

    КонецЕсли;

    Если Не Вложенный Тогда
        Значение = "--" + Имя + " " + ПолучитьЗначениеДляCLI(Значение);
    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ОформитьОпциюКоллекцию(Знач Значение)

    Значение_ = ?(ТипЗнч(Значение) = Тип("Структура"), Новый Структура, Новый Соответствие);

    Для Каждого Элемент Из Значение Цикл

        Значение_.Вставить(Элемент.Ключ, ОформитьОпцию(Элемент.Значение, Элемент.Ключ, Истина));

    КонецЦикла;

    Возврат Значение_;

КонецФункции

Функция ОформитьОпциюМассив(Знач Значение, Знач Имя)

    Значение_ = Новый Массив;

    Для Каждого Элемент Из Значение Цикл
        Значение_.Добавить(ОформитьОпцию(Элемент, Имя, Истина));
    КонецЦикла;

    Возврат Значение_;

КонецФункции

Функция ПрочестьРезультатCLI(Знач ФайлРезультата)

    Попытка

        // BSLLS:ExternalAppStarting-off
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
        Результат  = ПрочитатьJSON(ЧтениеJSON, Истина);
        ЧтениеJSON.Закрыть();
        // BSLLS:ExternalAppStarting-on

    Исключение

        Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        Попытка
            Результат =  Новый ДвоичныеДанные(ФайлРезультата);
        Исключение
            Результат = null;
        КонецПопытки;

     КонецПопытки;

     Возврат Результат;

КонецФункции

Процедура НовыйТест(ТаблицаЗначений, Знач Метод, Знач Синоним, Знач Раздел)

    НовыйТест         = ТаблицаЗначений.Добавить();
    НовыйТест.Метод   = Метод;
    НовыйТест.Синоним = Синоним;
    НовыйТест.Раздел  = Раздел;

КонецПроцедуры

Процедура ЗаписатьПараметрВФайл(Знач Параметр, Знач Значение, Знач Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Значения.Вставить(Параметр, Значение);

    // BSLLS:ExternalAppStarting-off
    Запись              = Новый ЗаписьJSON;
    ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
    Запись.ОткрытьФайл(Путь, , , ПараметрыЗаписиJSON);
    ЗаписатьJSON(Запись, Значения);
    Запись.Закрыть();
    // BSLLS:ExternalAppStarting-on

КонецПроцедуры

Процедура ЗаписатьВызовCLI(Знач Библиотека, Знач Метод, Знач Опции)

    Если Не OPI_Инструменты.ЭтоOneScript() Тогда
        Возврат;
    КонецЕсли;

    КаталогПримеров = "./docs/ru/cli/" + Библиотека;
    ФайлПримеров    = Новый Файл(КаталогПримеров);

    Если Не ФайлПримеров.Существует() Тогда
        СоздатьКаталог(КаталогПримеров);
    КонецЕсли;

    КаталогМетода = КаталогПримеров + "/" + Метод;
    ФайлМетода    = Новый Файл(КаталогМетода);

    Если Не ФайлМетода.Существует() Тогда
        СоздатьКаталог(КаталогМетода);
    КонецЕсли;

    МассивОпций = Новый Массив;
    ЕстьJSON    = Ложь;

    Для Каждого Опция Из Опции Цикл

        Если ТипЗнч(Опция.Значение) = Тип("Структура")
            Или ТипЗнч(Опция.Значение) = Тип("Соответствие") Тогда

                ЕстьJSON = Истина;

        КонецЕсли;

        ТекущаяОпция = Опция.Значение;

        Если ТекущаяОпция <> Неопределено Тогда

            ОбработатьОсобенныеСекретыОпций(Библиотека, Опция.Ключ, ТекущаяОпция);
            ТекущаяОпция = ОформитьОпцию(ТекущаяОпция, Опция.Ключ);
            МассивОпций.Добавить(ТекущаяОпция);

        КонецЕсли;

    КонецЦикла;

    Начало = "oint ";

    Если ЕстьJSON Тогда

        Информация = "JSON данные также могут быть переданы как путь к файлу .json";

        НачалоBat  = ":: " + Информация + Символы.ПС + Символы.ПС + Начало;
        НачалоBash = "# " + Информация + Символы.ПС + Символы.ПС + Начало;

    Иначе

        НачалоBat  = Начало;
        НачалоBash = Начало;

    КонецЕсли;

    РазделительBat  = " ^" + Символы.ПС + "  ";
    РазделительBash = " \" + Символы.ПС + "  ";

    СтрокаBat  = НачалоBat + Библиотека + " " + Метод + РазделительBat + СтрСоединить(МассивОпций, РазделительBat);
    СтрокаBash = НачалоBash + Библиотека + " " + Метод + РазделительBash + СтрСоединить(МассивОпций, РазделительBash);

    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBat).Записать(КаталогМетода + "/bat.txt");
    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBash).Записать(КаталогМетода + "/bash.txt");

КонецПроцедуры

Процедура ВывестиЛог(Знач Результат, Знач Метод, Знач Библиотека)
    
    Шапка = Строка(OPI_Инструменты.ПолучитьТекущуюДату()) + " | " + Метод;

    Попытка
        Данные = OPI_Инструменты.JSONСтрокой(Результат);
    Исключение
        Данные = "Не JSON: " + Строка(Результат);
    КонецПопытки;

    Данные = "    " + Данные;

    Сообщить(Шапка);
    Сообщить(Символы.ПС);
    Сообщить(Данные);
    Сообщить(Символы.ПС);
    Сообщить("---------------------------------");
    Сообщить(Символы.ПС);
    
КонецПроцедуры

Процедура ЗаписатьФайлЛога(Знач Данные, Знач Метод, Знач Библиотека)

    Попытка
        
        ПутьЛогов           = "./docs/ru/results";
        ПутьЛоговБиблиотеки = ПутьЛогов + "/" + Библиотека;

        КаталогЛогов = Новый Файл(ПутьЛогов);

        Если Не КаталогЛогов.Существует() Тогда
            СоздатьКаталог(ПутьЛогов);
        КонецЕсли;

        КаталогЛоговБиблиотеки = Новый Файл(ПутьЛоговБиблиотеки);

        Если Не КаталогЛоговБиблиотеки.Существует() Тогда
            СоздатьКаталог(ПутьЛоговБиблиотеки);
        КонецЕсли;

        ПутьКФайлу = ПутьЛоговБиблиотеки + "/" + Метод + ".log";

        ДокументЛога = Новый ТекстовыйДокумент;
        ДокументЛога.УстановитьТекст(Данные);
        ДокументЛога.Записать(ПутьКФайлу);

    Исключение
        Сообщить("Не удалось записать файл лога!: " + ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

Процедура ОбработатьОсобенныеСекретыОпций(Знач Библиотека, Знач Опция, Значение)

    Если Библиотека = "bitrix24" Тогда

        ОбработатьСекретыBitrix24(Опция, Значение);

    ИначеЕсли Библиотека = "postgres" Тогда

        ОбработатьСекретыPostgreSQL(Опция, Значение);

    ИначеЕсли Библиотека = "mysql" Тогда

        ОбработатьСекретыMySQL(Опция, Значение);

    ИначеЕсли Библиотека = "mssql" Тогда

        ОбработатьСекретыMSSQL(Опция, Значение);

    ИначеЕсли Библиотека = "ollama" Тогда

        ОбработатьСекретыOllama(Опция, Значение);

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыBitrix24(Знач Опция, Значение)

    Если Опция = "url" Тогда

        Значение = ?(СтрНайти(Значение, "rest") > 0
            , "https://b24-ar17wx.bitrix24.by/rest/1/***"
            , Значение);

    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыPostgreSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "postgresql://bayselonarrend:***@127.0.0.1:5432/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMySQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "mysql://bayselonarrend:***@127.0.0.1:3306/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMSSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "Server=127.0.0.1;Database=***;User Id=SA;Password=***;";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыOllama(Знач Опция, Значение)

    Если Опция = "headers" Тогда

        Значение = Новый Структура("Authorization", "***");

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти
