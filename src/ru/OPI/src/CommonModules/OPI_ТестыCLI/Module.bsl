// OneScript: ./OInt/tests/Modules/internal/OPI_ТестыCLI.os

// MIT License

// Copyright (c) 2023 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// Набор тестов для YAxUnit

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingServiceTag-off
// BSLLS:UnusedParameters-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:UsingHardcodePath-off
// BSLLS:UnusedLocalVariable-off
// BSLLS:DeprecatedMessage-off
// BSLLS:LineLength-off
// BSLLS:MagicNumber-off
// BSLLS:CommentedCode-off
// BSLLS:AssignAliasFieldsInQuery-off
// BSLLS:UsingHardcodeNetworkAddress-off

//@skip-check undefined-variable
//@skip-check wrong-string-literal-content
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content
//@skip-check module-unused-local-variable

// Раскомментировать, если выполняется OneScript
// #Использовать "../../../tools"
// #Использовать "../../../core"
// #Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт

    OPI_ПолучениеДанныхТестов.СформироватьТестыЯксCLI();

КонецПроцедуры

// Для Asserts

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

   Возврат OPI_ПолучениеДанныхТестов.СформироватьТестыАссертсCLI();

КонецФункции

#Область ЗапускаемыеТесты

#Область Telegram

Процедура CLI_Телеграм_ПолучитьИнформациюБота() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    CLI_Telegram_ПолучитьИнформациюБота(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ПолучитьОбновления() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    CLI_Telegram_УдалитьWebhook(ПараметрыТеста);
    CLI_Telegram_ПолучитьОбновления(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_УстановитьWebhook() Экспорт

     ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_URL"  , ПараметрыТеста);

    CLI_Telegram_УстановитьWebhook(ПараметрыТеста);
    CLI_Telegram_УдалитьWebhook(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьТекстовоеСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);

    CLI_Telegram_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    CLI_Telegram_ЗаменитьТекстСообщения(ПараметрыТеста);
    CLI_Telegram_ЗаменитьКлавиатуруСообщения(ПараметрыТеста);
    CLI_Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);

    CLI_Telegram_ОтправитьКартинку(ПараметрыТеста);
    CLI_Telegram_ЗаменитьОписаниеСообщения(ПараметрыТеста);
    CLI_Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);

    CLI_Telegram_ОтправитьВидео(ПараметрыТеста);
    CLI_Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьАудио() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio"             , ПараметрыТеста);

    CLI_Telegram_ОтправитьАудио(ПараметрыТеста);
    CLI_Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьДокумент() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    CLI_Telegram_ОтправитьДокумент(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьГифку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"               , ПараметрыТеста);

    CLI_Telegram_ОтправитьГифку(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьМедиагруппу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    CLI_Telegram_ОтправитьМедиагруппу(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьМестоположение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Long"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Lat"               , ПараметрыТеста);

    CLI_Telegram_ОтправитьМестоположение(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьКонтакт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Name"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Surname"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Phone"             , ПараметрыТеста);

    CLI_Telegram_ОтправитьКонтакт(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ОтправитьОпрос() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    CLI_Telegram_ОтправитьОпрос(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ПереслатьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    CLI_Telegram_ПереслатьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_БанРазбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);

    CLI_Telegram_Бан(ПараметрыТеста);
    CLI_Telegram_Разбан(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_СоздатьСсылкуПриглашение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    CLI_Telegram_СоздатьСсылкуПриглашение(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ЗакрепитьОткрепитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    CLI_Telegram_ЗакрепитьСообщение(ПараметрыТеста);
    CLI_Telegram_ОткрепитьСообщение(ПараметрыТеста);
    CLI_Telegram_УдалитьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ПолучитьЧислоУчастников() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    CLI_Telegram_ПолучитьЧислоУчастников(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ПолучитьСписокАватаровФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    CLI_Telegram_ПолучитьСписокИконокАватаров(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_СоздатьУдалитьТемуФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"          , ПараметрыТеста);

    CLI_Telegram_СоздатьТемуФорума(ПараметрыТеста);
    CLI_Telegram_ИзменитьТемуФорума(ПараметрыТеста);
    CLI_Telegram_ЗакрытьТемуФорума(ПараметрыТеста);
    CLI_Telegram_ОткрытьТемуФорума(ПараметрыТеста);
    CLI_Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыТеста);
    CLI_Telegram_УдалитьТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_СкрытьПоказатьГлавнуюТему() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    CLI_Telegram_СкрытьГлавнуюТемуФорума(ПараметрыТеста);
    CLI_Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Телеграм_ИзменитьИмяГлавнойТемы() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    CLI_Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура CLI_ВК_СоздатьСсылкуТокена() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AppID", ПараметрыТеста);

    CLI_VK_СоздатьСсылкуПолученияТокена(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_СоздатьУдалитьПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    CLI_VK_СоздатьПост(ПараметрыТеста);
    CLI_VK_УдалитьПост(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_СоздатьСоставнойПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"   , ПараметрыТеста);

    CLI_VK_СоздатьСоставнойПост(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_СоздатьОпрос() Экспорт

    CLI_VK_СоздатьОпрос();

КонецПроцедуры

Процедура CLI_ВК_СохранитьУдалитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    CLI_VK_СоздатьАльбом(ПараметрыТеста);
    CLI_VK_СохранитьКартинкуВАльбом(ПараметрыТеста);
    CLI_VK_УдалитьКартинку(ПараметрыТеста);
    CLI_VK_УдалитьАльбом(ПараметрыТеста);
    CLI_VK_ЗагрузитьФотоНаСервер(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_СоздатьИсторию() Экспорт

    ПараметрыТеста = Новый Соответствие;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    CLI_VK_СоздатьИсторию(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_МетодыОбсуждений() Экспорт

    ПараметрыТеста = Новый Структура;
    Параметры      = ПолучитьПараметрыВК();

    CLI_VK_СоздатьОбсуждение(ПараметрыТеста);
    CLI_VK_ЗакрытьОбсуждение(ПараметрыТеста);
    CLI_VK_ОткрытьОбсуждение(ПараметрыТеста);
    CLI_VK_НаписатьВОбсуждение(ПараметрыТеста);

    OPI_VK.ЗакрытьОбсуждение(ПараметрыТеста["VK_ConvID"], Истина, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_ЛайкРепостКоммент() Экспорт

    ПараметрыТеста = Новый Структура();
    Параметры      = ПолучитьПараметрыВК();
    Текст          = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID", ПараметрыТеста);

    CLI_VK_ПоставитьЛайк(ПараметрыТеста);
    CLI_VK_СделатьРепост(ПараметрыТеста);
    CLI_VK_НаписатьКомментарий(ПараметрыТеста);
    CLI_VK_СократитьСсылку(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста                 , Параметры);
    OPI_VK.УдалитьПост(ПараметрыТеста["Repost"], Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСтатистику() Экспорт

    ПараметрыТеста = Новый Структура();

    CLI_VK_ПолучитьСтатистику(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСтатистикуПостов() Экспорт

    ПараметрыТеста = Новый Структура();

    CLI_VK_ПолучитьСтатистикуПостов(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_СоздатьРекламнуюКампанию() Экспорт

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);

    ПараметрыТеста = Новый Структура();
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AdsCabinetID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID"      , ПараметрыТеста);

    CLI_VK_СоздатьРекламнуюКампанию(ПараметрыТеста);
    CLI_VK_СоздатьРекламноеОбъявление(ПараметрыТеста);
    CLI_VK_ПриостановитьРекламноеОбъявление(ПараметрыТеста);
    CLI_VK_ПолучитьСписокРекламныхКатегорий(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_ОтправитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_CommunityToken", ПараметрыТеста);

    CLI_VK_СформироватьКлавиатуру(ПараметрыТеста);
    CLI_VK_НаписатьСообщение(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьКатегорииТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_VK_ПолучитьСписокКатегорийТоваров(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_СоздатьТоварПодборку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    CLI_VK_СоздатьПодборкуТоваров(ПараметрыТеста);
    CLI_VK_ИзменитьПодборкуТоваров(ПараметрыТеста);
    CLI_VK_ПолучитьПодборкиПоИД(ПараметрыТеста);
    CLI_VK_ДобавитьТовар(ПараметрыТеста);
    CLI_VK_ИзменитьТовар(ПараметрыТеста);
    CLI_VK_ДобавитьТоварВПодборку(ПараметрыТеста);
    CLI_VK_УдалитьТоварИзПодборки(ПараметрыТеста);
    CLI_VK_УдалитьТовар(ПараметрыТеста);
    CLI_VK_УдалитьПодборку(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ВК_СоздатьТоварСоСвойствами() Экспорт

    Параметры = ПолучитьПараметрыВК();

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    CLI_VK_ПолучитьОписаниеТовара(ПараметрыТеста);
    CLI_VK_СоздатьСвойствоТовара(ПараметрыТеста);
    CLI_VK_ИзменитьСвойствоТовара(ПараметрыТеста);
    CLI_VK_ДобавитьВариантСвойстваТовара(ПараметрыТеста);
    CLI_VK_ИзменитьВариантСвойстваТовара(ПараметрыТеста);
    CLI_VK_СоздатьТоварСоСвойством(ПараметрыТеста);
    CLI_VK_ПолучитьТоварыПоИД(ПараметрыТеста);
    CLI_VK_СгруппироватьТовары(ПараметрыТеста);

    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID2"], Параметры);
    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID3"], Параметры);

    CLI_VK_УдалитьВариантСвойстваТовара(ПараметрыТеста);
    CLI_VK_УдалитьСвойствоТовара(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСписокТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_VK_ПолучитьСписокТоваров(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСписокПодборок() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_VK_ПолучитьСписокПодборок(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСписокСвойств() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_VK_ПолучитьСписокСвойств(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_ПолучитьСписокЗаказов() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_VK_ПолучитьСписокЗаказов(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВК_ЗагрузитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video", ПараметрыТеста);

    CLI_VK_ЗагрузитьВидеоНаСервер(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура CLI_ЯДиск_ПолучитьИнформациюОДиске() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    CLI_YandexDisk_ПолучитьИнформациюОДиске(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯДиск_СоздатьПапку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    CLI_YandexDisk_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    CLI_YandexDisk_ЗагрузитьФайлПоURL(ПараметрыТеста);
    CLI_YandexDisk_ПолучитьОбъект(ПараметрыТеста);
    CLI_YandexDisk_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯДиск_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    CLI_YandexDisk_ЗагрузитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯДиск_СоздатьКопиюОбъекта() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    CLI_YandexDisk_СоздатьКопиюОбъекта(ПараметрыТеста);

    ПутьКопии = ПараметрыТеста["YandexDisk_CopyFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьКопии    , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ЯДиск_ПолучитьСсылкуНаСкачивание() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    Путь = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, Путь, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PathForLink", Путь);
    ПараметрыТеста.Вставить("YandexDisk_PathForLink", Путь);

    CLI_YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыТеста);
    CLI_YandexDisk_СкачатьФайл(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

КонецПроцедуры

Процедура CLI_ЯДиск_ПолучитьСписокФайлов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    CLI_YandexDisk_ПолучитьСписокФайлов(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯДиск_ПереместитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    CLI_YandexDisk_ПереместитьОбъект(ПараметрыТеста);

    ПутьНового = ПараметрыТеста["YandexDisk_NewFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьНового   , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ЯДиск_ДействияПубличныхОбъектов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    ПутьОригинала = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    CLI_YandexDisk_ОпубликоватьОбъект(ПараметрыТеста);
    CLI_YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыТеста);
    CLI_YandexDisk_ПолучитьПубличныйОбъект(ПараметрыТеста);
    CLI_YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыТеста);
    CLI_YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ЯДиск_ПолучитьСписокОпубликованных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    CLI_YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура CLI_Вайбер_ПолучениеИнформации() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);

    CLI_Viber_ПолучитьИнформациюОКанале(ПараметрыТеста);
    CLI_Viber_ПолучитьДанныеПользователя(ПараметрыТеста);
    CLI_Viber_ПолучитьОнлайнПользователей(ПараметрыТеста);
    CLI_Viber_УстановитьWebhook(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Вайбер_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_Token"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"            , ПараметрыТеста);

    CLI_Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыТеста);

    Возврат;

    //@skip-check unreachable-statement
    // BSLLS:UnreachableCode-off

    CLI_Viber_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    CLI_Viber_ОтправитьКартинку(ПараметрыТеста);
    CLI_Viber_ОтправитьФайл(ПараметрыТеста);
    CLI_Viber_ОтправитьКонтакт(ПараметрыТеста);
    CLI_Viber_ОтправитьЛокацию(ПараметрыТеста);
    CLI_Viber_ОтправитьСсылку(ПараметрыТеста);

    // BSLLS:UnreachableCode-on

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура CLI_ГВ_Авторизация() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientSecret", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Code"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Refresh"     , ПараметрыТеста);

    CLI_GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыТеста);
    CLI_GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыТеста);
    CLI_GoogleWorkspace_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура CLI_ГК_ПолучитьСписокКалендарей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    CLI_GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ГК_СоздатьУдалитьКалендарь() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    CLI_GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    CLI_GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыТеста);
    CLI_GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыТеста);
    CLI_GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыТеста);
    CLI_GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыТеста);
    CLI_GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыТеста);
    CLI_GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыТеста);
    CLI_GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыТеста);
    CLI_GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ГК_СоздатьУдалитьСобытие() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_NewCalendarID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_CalendarID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"            , ПараметрыТеста);

    CLI_GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    CLI_GoogleCalendar_СоздатьСобытие(ПараметрыТеста);
    CLI_GoogleCalendar_ИзменитьСобытие(ПараметрыТеста);
    CLI_GoogleCalendar_ПолучитьСобытие(ПараметрыТеста);
    CLI_GoogleCalendar_ПереместитьСобытие(ПараметрыТеста);
    CLI_GoogleCalendar_ПолучитьСписокСобытий(ПараметрыТеста);
    CLI_GoogleCalendar_УдалитьСобытие(ПараметрыТеста);
    CLI_GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);
    CLI_GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура CLI_ГД_ПолучитьСписокКаталогов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    CLI_GoogleDrive_ПолучитьСписокКаталогов(ПараметрыТеста);
    CLI_GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ГД_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"    , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    CLI_GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);
    CLI_GoogleDrive_СкопироватьОбъект(ПараметрыТеста);
    CLI_GoogleDrive_СкачатьФайл(ПараметрыТеста);
    CLI_GoogleDrive_ОбновитьФайл(ПараметрыТеста);
    CLI_GoogleDrive_ПолучитьСписокФайлов(ПараметрыТеста);
    CLI_GoogleDrive_УдалитьОбъект(ПараметрыТеста);
    CLI_GoogleDrive_ПолучитьОписаниеФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_ГД_СоздатьУдалитьКомментарий() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    CLI_GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);

    CLI_GoogleDrive_СоздатьКомментарий(ПараметрыТеста);
    CLI_GoogleDrive_ПолучитьКомментарий(ПараметрыТеста);
    CLI_GoogleDrive_ПолучитьСписокКомментариев(ПараметрыТеста);
    CLI_GoogleDrive_УдалитьКомментарий(ПараметрыТеста);

    CLI_GoogleDrive_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ГД_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);

    CLI_GoogleDrive_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура CLI_ГТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    CLI_GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    CLI_GoogleSheets_ПолучитьКнигу(ПараметрыТеста);
    CLI_GoogleSheets_КопироватьЛист(ПараметрыТеста);
    CLI_GoogleSheets_ДобавитьЛист(ПараметрыТеста);
    CLI_GoogleSheets_УдалитьЛист(ПараметрыТеста);
    CLI_GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыТеста);
    CLI_GoogleSheets_ПолучитьТаблицу(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

Процедура CLI_ГТ_ЗаполнитьОчиститьЯчейки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token"  , ПараметрыТеста);

    CLI_GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    CLI_GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыТеста);
    CLI_GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыТеста);
    CLI_GoogleSheets_ОчиститьЯчейки(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура CLI_Твиттер_ДанныеАккаунта() Экспорт

    ПараметрыТеста = Новый Структура;

    CLI_Twitter_ПолучитьТокен(ПараметрыТеста);
    CLI_Twitter_ПолучитьСсылкуАвторизации(ПараметрыТеста);
    CLI_Twitter_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Твиттер_Твиты() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"   , ПараметрыТеста);

    CLI_Twitter_СоздатьТекстовыйТвит(ПараметрыТеста);
    CLI_Twitter_ЗагрузитьМассивВложений(ПараметрыТеста);
    CLI_Twitter_СоздатьТвитВидео(ПараметрыТеста);
    CLI_Twitter_СоздатьТвитКартинки(ПараметрыТеста);
    CLI_Twitter_СоздатьТвитГифки(ПараметрыТеста);
    CLI_Twitter_СоздатьТвитОпрос(ПараметрыТеста);
    CLI_Twitter_СоздатьПроизвольныйТвит(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура CLI_НоушнАпи_СоздатьСтраницу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"     , ПараметрыТеста);

    CLI_Notion_СоздатьСтраницу(ПараметрыТеста);
    CLI_Notion_ПолучитьСтраницу(ПараметрыТеста);
    CLI_Notion_ИзменитьСвойстваСтраницы(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_НоушнАпи_СоздатьИзменитьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);

    CLI_Notion_СоздатьБазуДанных(ПараметрыТеста);
    CLI_Notion_ИзменитьСвойстваБазы(ПараметрыТеста);
    CLI_Notion_ПолучитьБазуДанных(ПараметрыТеста);
    CLI_Notion_СоздатьСтраницуВБазу(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_НоушнАпи_СоздатьУдалитьБлок() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Block" , ПараметрыТеста);

    CLI_Notion_ВернутьБлок(ПараметрыТеста);
    CLI_Notion_СоздатьБлок(ПараметрыТеста);
    CLI_Notion_ВернутьДочерниеБлоки(ПараметрыТеста);
    CLI_Notion_УдалитьБлок(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_НоушнАпи_ПолучитьПользователей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_User" , ПараметрыТеста);

    CLI_Notion_СписокПользователей(ПараметрыТеста);
    CLI_Notion_ПолучитьДанныеПользователя(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура CLI_Слак_ПолучитьИнформацию() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token", ПараметрыТеста);

    CLI_Slack_ПолучитьИнформациюОБоте(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокПользователей(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокРабочихОбластей(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Слак_ОтправитьУдалитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    CLI_Slack_ОтправитьСообщение(ПараметрыТеста);
    CLI_Slack_ИзменитьСообщение(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыТеста);
    CLI_Slack_ПолучитьСсылкуНаСообщение(ПараметрыТеста);
    CLI_Slack_УдалитьСообщение(ПараметрыТеста);
    CLI_Slack_ОтправитьЭфемерноеСообщение(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыТеста);
    CLI_Slack_СформироватьБлокКартинку(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Слак_СоздатьАрхивироватьКанал() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    CLI_Slack_СоздатьКанал(ПараметрыТеста);
    CLI_Slack_УстановитьТемуКанала(ПараметрыТеста);
    CLI_Slack_УстановитьЦельКанала(ПараметрыТеста);
    CLI_Slack_ПолучитьКанал(ПараметрыТеста);
    CLI_Slack_ПригласитьПользователейВКанал(ПараметрыТеста);
    CLI_Slack_ВыгнатьПользователяИзКанала(ПараметрыТеста);
    CLI_Slack_ПолучитьИсториюКанала(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокПользователейКанала(ПараметрыТеста);
    CLI_Slack_ПокинутьКанал(ПараметрыТеста);
    CLI_Slack_ВступитьВКанал(ПараметрыТеста);
    CLI_Slack_ПереименоватьКанал(ПараметрыТеста);
    CLI_Slack_АрхивироватьКанал(ПараметрыТеста);
    CLI_Slack_ПолучитьСписокКаналов(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Слак_ОткрытьЗакрытьДиалог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    CLI_Slack_ОткрытьДиалог(ПараметрыТеста);
    CLI_Slack_ЗакрытьДиалог(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Слак_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    CLI_Slack_ПолучитьСписокФайлов(ПараметрыТеста);
    CLI_Slack_ЗагрузитьФайл(ПараметрыТеста);
    CLI_Slack_СделатьФайлПубличным(ПараметрыТеста);
    CLI_Slack_СделатьФайлПриватным(ПараметрыТеста);
    CLI_Slack_ПолучитьДанныеФайла(ПараметрыТеста);
    CLI_Slack_УдалитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Слак_ЗагрузитьУдалитьВФ() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    CLI_Slack_ПолучитьСписокВнешнихФайлов(ПараметрыТеста);
    CLI_Slack_ДобавитьВнешнийФайл(ПараметрыТеста);
    CLI_Slack_ПолучитьВнешнийФайл(ПараметрыТеста);
    CLI_Slack_ОтправитьВнешнийФайл(ПараметрыТеста);
    CLI_Slack_УдалитьВнешнийФайл(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура CLI_АТ_СоздатьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Workspace", ПараметрыТеста);

    CLI_Airtable_СоздатьБазу(ПараметрыТеста);
    CLI_Airtable_ПолучитьТаблицыБазы(ПараметрыТеста);
    CLI_Airtable_ПолучитьСписокБаз(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_АТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);

    CLI_Airtable_ПолучитьПолеНомера(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеСтроковое(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеВложения(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеФлажка(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеДаты(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеТелефона(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеПочты(ПараметрыТеста);
    CLI_Airtable_ПолучитьПолеСсылки(ПараметрыТеста);
    CLI_Airtable_СоздатьТаблицу(ПараметрыТеста);
    CLI_Airtable_ИзменитьТаблицу(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_АТ_СоздатьПоле() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    CLI_Airtable_СоздатьПоле(ПараметрыТеста);
    CLI_Airtable_ИзменитьПоле(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_АТ_СоздатьУдалитьЗаписи() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    CLI_Airtable_СоздатьЗаписи(ПараметрыТеста);
    CLI_Airtable_ПолучитьЗапись(ПараметрыТеста);
    CLI_Airtable_СоздатьКомментарий(ПараметрыТеста);
    CLI_Airtable_ИзменитьКомментарий(ПараметрыТеста);
    CLI_Airtable_ПолучитьКомментарии(ПараметрыТеста);
    CLI_Airtable_УдалитьКомментарий(ПараметрыТеста);
    CLI_Airtable_ПолучитьСписокЗаписей(ПараметрыТеста);
    CLI_Airtable_УдалитьЗаписи(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура CLI_ДропБокс_ПолучитьОбновитьТокен() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appkey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appsecret", ПараметрыТеста);

    CLI_Dropbox_ПолучитьСсылкуАвторизации(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Code", ПараметрыТеста);

    CLI_Dropbox_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Refresh", ПараметрыТеста);

    CLI_Dropbox_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_ЗагрузитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);

    CLI_Dropbox_ЗагрузитьФайл(ПараметрыТеста);
    CLI_Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);
    CLI_Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыТеста);
    CLI_Dropbox_ВосстановитьОбъектКВерсии(ПараметрыТеста);
    CLI_Dropbox_ПолучитьПревью(ПараметрыТеста);
    CLI_Dropbox_СкачатьФайл(ПараметрыТеста);
    CLI_Dropbox_ПереместитьОбъект(ПараметрыТеста);
    CLI_Dropbox_КопироватьОбъект(ПараметрыТеста);
    CLI_Dropbox_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    CLI_Dropbox_СоздатьПапку(ПараметрыТеста);
    CLI_Dropbox_СкачатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_ПолучитьСписокФайловПапки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    CLI_Dropbox_ПолучитьСписокФайловПапки(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_ЗагрузитьФайлПоURL() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    CLI_Dropbox_ЗагрузитьФайлПоURL(ПараметрыТеста);
    CLI_Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_СоздатьУдалитьТег() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    CLI_Dropbox_ДобавитьТег(ПараметрыТеста);
    CLI_Dropbox_ПолучитьСписокТегов(ПараметрыТеста);
    CLI_Dropbox_УдалитьТег(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_ПолучитьАккаунт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    CLI_Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыТеста);
    CLI_Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ДропБокс_РаботаСДоступами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_OtherUser", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_FileID"   , ПараметрыТеста);

    CLI_Dropbox_ДобавитьПользователейКФайлу(ПараметрыТеста);
    CLI_Dropbox_ОпубликоватьПапку(ПараметрыТеста);
    CLI_Dropbox_ДобавитьПользователейКПапке(ПараметрыТеста);
    CLI_Dropbox_ОтменитьПубликациюПапки(ПараметрыТеста);
    CLI_Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыТеста);
    CLI_Dropbox_ОтменитьПубликациюФайла(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VkTeams

Процедура CLI_ВКТ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_FileID", ПараметрыТеста);

    CLI_VkTeams_ПроверитьТокен(ПараметрыТеста);
    CLI_VkTeams_ПолучитьСобытия(ПараметрыТеста);
    CLI_VKTeams_ПолучитьИнформациюОФайле(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВКТ_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_MessageID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio2"           , ПараметрыТеста);

    CLI_VkTeams_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    OPI_Инструменты.Пауза(60);

    CLI_VKTeams_ПереслатьСообщение(ПараметрыТеста);
    CLI_VKTeams_ОтправитьФайл(ПараметрыТеста);
    CLI_VKTeams_ПереслатьФайл(ПараметрыТеста);
    CLI_VKTeams_ИзменитьТекстСообщения(ПараметрыТеста);
    CLI_VKTeams_ЗакрепитьСообщение(ПараметрыТеста);
    CLI_VKTeams_ОткрепитьСообщение(ПараметрыТеста);
    CLI_VKTeams_УдалитьСообщение(ПараметрыТеста);
    CLI_VKTeams_ОтправитьГолосовоеСообщение(ПараметрыТеста);
    CLI_VKTeams_ПереслатьГолосовоеСообщение(ПараметрыТеста);
    CLI_VKTeams_СформироватьКнопкуДействия(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ВКТ_УправлениеЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture3"         , ПараметрыТеста);

    CLI_VKTeams_ИсключитьПользователейЧата(ПараметрыТеста);
    CLI_VKTeams_ИзменитьАватарЧата(ПараметрыТеста);
    CLI_VKTeams_ПолучитьИнформациюОЧате(ПараметрыТеста);
    CLI_VKTeams_ПолучитьАдминистраторовЧата(ПараметрыТеста);
    CLI_VKTeams_ПолучитьПользователейЧата(ПараметрыТеста);
    CLI_VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыТеста);
    CLI_VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыТеста);
    CLI_VKTeams_ЗаблокироватьПользователяЧата(ПараметрыТеста);
    CLI_VKTeams_РазблокироватьПользователяЧата(ПараметрыТеста);
    CLI_VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыТеста);
    CLI_VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыТеста);
    CLI_VKTeams_УстановитьЗаголовокЧата(ПараметрыТеста);
    CLI_VKTeams_УстановитьОписаниеЧата(ПараметрыТеста);
    CLI_VKTeams_УстановитьПравилаЧата(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область OzonSeller

Процедура CLI_ОзонАПИ_АтрибутыИХарактеристики() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    CLI_Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьХарактеристикиКатегории(ПараметрыТеста);
    CLI_Ozon_ПолучитьЗначенияХарактеристики(ПараметрыТеста);
    CLI_Ozon_НайтиЗначенияХарактеристики(ПараметрыТеста);
    CLI_Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ОзонАПИ_ЗагрузкаИОбновлениеТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"      , ПараметрыТеста);

    //    Сообщить("Проверка товаров Ozon недоступна");
    //    Возврат;

    // BSLLS:UnreachableCode-off

    CLI_Ozon_ПолучитьСтруктуруТовара(ПараметрыТеста);
    CLI_Ozon_СоздатьОбновитьТовары(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыТеста);
    CLI_Ozon_ДобавитьВидеоТовара(ПараметрыТеста);
    CLI_Ozon_ДобавитьВидеообложкуТовара(ПараметрыТеста);
    CLI_Ozon_ДополнитьКомплексныйАтрибут(ПараметрыТеста);
    CLI_Ozon_СоздатьТоварыПоOzonID(ПараметрыТеста);
    CLI_Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыТеста);
    CLI_Ozon_ОбновитьХарактеристикиТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьСписокТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьИнформациюОТоварах(ПараметрыТеста);
    CLI_Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьОписаниеТовара(ПараметрыТеста);
    CLI_Ozon_ОбновитьИзображенияТовара(ПараметрыТеста);
    CLI_Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыТеста);
    CLI_Ozon_ИзменитьАртикулыТоваров(ПараметрыТеста);
    CLI_Ozon_АрхивироватьТовары(ПараметрыТеста);
    CLI_Ozon_РазархивироватьТовары(ПараметрыТеста);
    CLI_Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыТеста);
    CLI_Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьСвязанныеSKU(ПараметрыТеста);
    CLI_Ozon_УдалитьТоварыБезSKU(ПараметрыТеста);

    // BSLLS:UnreachableCode-on

КонецПроцедуры

Процедура CLI_ОзонАПИ_Штрихкоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    CLI_Ozon_ПривязатьШтрихкоды(ПараметрыТеста);
    CLI_Ozon_СоздатьШтрихкоды(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ОзонАПИ_ЦеныИОстаткиТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    CLI_Ozon_ПолучитьКоличествоТоваров(ПараметрыТеста);
    CLI_Ozon_ОбновитьЦеныТоваров(ПараметрыТеста);
    CLI_Ozon_ОбновитьКоличествоТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьЦеныТоваров(ПараметрыТеста);
    CLI_Ozon_ПолучитьИнформациюОбУценке(ПараметрыТеста);
    CLI_Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ОзонАПИ_РаботаСоСкладами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    CLI_Ozon_ПолучитьСписокСкладов(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ОзонАПИ_РаботаСАкциями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    CLI_Ozon_ПолучитьСписокАкций(ПараметрыТеста);
    CLI_Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыТеста);
    CLI_Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ОзонАПИ_СхемаFBO() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    CLI_Ozon_ПолучитьСписокКластеров(ПараметрыТеста);
    CLI_Ozon_ПолучитьСписокСкладовОтгрузки(ПараметрыТеста);
    CLI_Ozon_СоздатьЧерновикЗаявкиFBO(ПараметрыТеста);
    CLI_Ozon_ПолучитьЧерновикЗаявкиFBO(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруДопПолейОтправления(ПараметрыТеста);
    CLI_Ozon_ПолучитьСтруктуруФильтраОтправлений(ПараметрыТеста);
    CLI_Ozon_ПолучитьСписокОтправленийFBO(ПараметрыТеста);
    CLI_Ozon_ПолучитьТаймслотыFBO(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура CLI_НС_РаботаСФайлами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Gif"      , ПараметрыТеста);

    CLI_Neocities_ЗагрузитьФайл(ПараметрыТеста);
    CLI_Neocities_ЗагрузитьФайлы(ПараметрыТеста);
    CLI_Neocities_ПолучитьСписокФайлов(ПараметрыТеста);
    CLI_Neocities_УдалитьВыбранныеФайлы(ПараметрыТеста);
    CLI_Neocities_СинхронизироватьКаталоги(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_НС_ПолучениеДанных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Login"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Password", ПараметрыТеста);

    CLI_Neocities_ПолучитьДанныеОСайте(ПараметрыТеста);
    CLI_Neocities_ПолучитьТокен(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура CLI_Б24_РаботаСТокеном() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientSecret", ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Code", ПараметрыТеста);

    CLI_Bitrix24_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Refresh", ПараметрыТеста);

    CLI_Bitrix24_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_СерверноеВремя() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    CLI_Bitrix24_СерверноеВремя(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСНовостями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    CLI_Bitrix24_СоздатьНовость(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьНовость(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьНовости(ПараметрыТеста);
    CLI_Bitrix24_ДобавитьКомментарийНовости(ПараметрыТеста);
    CLI_Bitrix24_ДобавитьПолучателейКНовости(ПараметрыТеста);
    CLI_Bitrix24_УдалитьНовость(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСЗадачами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_UserID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыТеста);
    CLI_Bitrix24_СоздатьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_СоздатьЗависимостьЗадач(ПараметрыТеста);
    CLI_Bitrix24_УдалитьЗависимостьЗадач(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ОтключитьЗвукЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ВключитьЗвукЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыТеста);
    CLI_Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыТеста);
    CLI_Bitrix24_ДелегироватьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ОтложитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ЗавершитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ОтклонитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ПринятьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ВозобновитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_НачатьВыполнениеЗадачи(ПараметрыТеста);
    CLI_Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыТеста);
    CLI_Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыТеста);
    CLI_Bitrix24_ПриостановитьЗадачу(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьИсториюЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокЗадач(ПараметрыТеста);
    CLI_Bitrix24_ПроверитьДоступКЗадаче(ПараметрыТеста);
    CLI_Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыТеста);

    Наименование = "Картинка задачи.jpg";
    Картинка     = ПараметрыТеста["Picture"];
    IDПриемника  = 3;

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование, Картинка, IDПриемника);
    IDФайла   = Результат["result"]["ID"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskFileID", IDФайла);
    ПараметрыТеста.Вставить("Bitrix24_TaskFileID", IDФайла);

    CLI_Bitrix24_ДобавитьФайлВЗадачу(ПараметрыТеста);

    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    CLI_Bitrix24_УдалитьЗадачу(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСКомментариями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentsTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_CommentsTaskID", IDЗадачи);

    CLI_Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыТеста);
    CLI_Bitrix24_СоздатьРезультатИзКомментария(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокРезультатов(ПараметрыТеста);
    CLI_Bitrix24_УдалитьРезультатИзКомментария(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыТеста);
    CLI_Bitrix24_УдалитьКомментарийЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура CLI_Б24_РаботаСДиском() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСписокХранилищ(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьХранилищеПриложения(ПараметрыТеста);
    CLI_Bitrix24_ПереименоватьХранилище(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьХранилище(ПараметрыТеста);
    CLI_Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьИнформациюОФайле(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыТеста);
    CLI_Bitrix24_ПереименоватьФайл(ПараметрыТеста);
    CLI_Bitrix24_ПоместитьФайлВКорзину(ПараметрыТеста);
    CLI_Bitrix24_ВосстановитьФайл(ПараметрыТеста);
    CLI_Bitrix24_СоздатьКаталогВХранилище(ПараметрыТеста);
    CLI_Bitrix24_ПереименоватьКаталог(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыТеста);
    CLI_Bitrix24_СоздатьПодкаталог(ПараметрыТеста);
    CLI_Bitrix24_ПереместитьФайлВКаталог(ПараметрыТеста);
    CLI_Bitrix24_СкопироватьКаталог(ПараметрыТеста);
    CLI_Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыТеста);
    CLI_Bitrix24_СкопироватьФайл(ПараметрыТеста);
    CLI_Bitrix24_УдалитьФайл(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыТеста);
    CLI_Bitrix24_ПереместитьКаталог(ПараметрыТеста);
    CLI_Bitrix24_ПоместитьКаталогВКорзину(ПараметрыТеста);
    CLI_Bitrix24_ВосстановитьКаталог(ПараметрыТеста);
    CLI_Bitrix24_УдалитьКаталог(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_УчетРабочегоВремени() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ElapsedTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_ElapsedTaskID", IDЗадачи);

    CLI_Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыТеста);
    CLI_Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыТеста);
    CLI_Bitrix24_НачатьУчетВремени(ПараметрыТеста);
    CLI_Bitrix24_ПриостановитьУчетВремени(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыТеста);
    CLI_Bitrix24_ЗавершитьУчетВремени(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура CLI_Б24_Канбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_KanbanTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_KanbanTaskID", IDЗадачи);

    CLI_Bitrix24_ДобавитьСтадиюКанбана(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтадииКанбана(ПараметрыТеста);
    CLI_Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьСтадиюКанбана(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

    CLI_Bitrix24_УдалитьСтадиюКанбана(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСУведомлениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    CLI_Bitrix24_СоздатьПерсональноеУведомление(ПараметрыТеста);
    CLI_Bitrix24_СоздатьСистемноеУведомление(ПараметрыТеста);
    CLI_Bitrix24_УдалитьУведомление(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСПолямиЗадач() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_HookTaskFieldID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_TaskFieldID"    , ПараметрыТеста);

    CLI_Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыТеста);
    CLI_Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_УправлениеПодразделениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    CLI_Bitrix24_СоздатьПодразделение(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПодразделения(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьПодразделение(ПараметрыТеста);
    CLI_Bitrix24_УдалитьПодразделение(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСтатусПользователя(ПараметрыТеста);
    CLI_Bitrix24_УстановитьСтатусПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПользователей(ПараметрыТеста);
    CLI_Bitrix24_СоздатьЧат(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыТеста);
    CLI_Bitrix24_ИсключитьПользователяИзЧата(ПараметрыТеста);
    CLI_Bitrix24_ДобавитьПользователейВЧат(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьЗаголовокЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_ИзменитьЦветЧата(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьКартинкуЧата(ПараметрыТеста);
    CLI_Bitrix24_ОтключитьУведомленияЧата(ПараметрыТеста);
    CLI_Bitrix24_ВключитьУведомленияЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыТеста);
    CLI_Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыТеста);
    CLI_Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьДиалог(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыТеста);
    CLI_Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыТеста);
    CLI_Bitrix24_ОтправитьСообщение(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьСообщение(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьБлокКартинки(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьБлокФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыТеста);
    CLI_Bitrix24_УдалитьСообщение(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыТеста);
    CLI_Bitrix24_ОтправитьФайл(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    CLI_Bitrix24_ПрочитатьВсе(ПараметрыТеста);
    CLI_Bitrix24_СменитьВладельцаЧата(ПараметрыТеста);
    CLI_Bitrix24_ПокинутьЧат(ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСтруктуруЧата(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_УправлениеПользователями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьТекущегоПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыТеста);
    CLI_Bitrix24_СоздатьПользователя(ПараметрыТеста);
    CLI_Bitrix24_НайтиПользователей(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПользователя(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьСтатусПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСЛидами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСписокЛидов(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруЛида(ПараметрыТеста);
    CLI_Bitrix24_СоздатьЛид(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьЛид(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьЛид(ПараметрыТеста);
    CLI_Bitrix24_УдалитьЛид(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСоСделками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    CLI_Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруСделки(ПараметрыТеста);
    CLI_Bitrix24_СоздатьСделку(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСделку(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьСделку(ПараметрыТеста);
    CLI_Bitrix24_УдалитьСделку(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокСделок(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Б24_РаботаСКалендарями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token"     , ПараметрыТеста);

    CLI_Bitrix24_СоздатьКалендарь(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьКалендарь(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСписокКалендарей(ПараметрыТеста);
    CLI_Bitrix24_СоздатьСобытиеКалендаря(ПараметрыТеста);
    CLI_Bitrix24_УстановитьСтатусУчастияПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтатусУчастияПользователя(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСобытиеКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСобытияКалендарей(ПараметрыТеста);
    CLI_Bitrix24_ИзменитьСобытиеКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьЗанятостьПользователей(ПараметрыТеста);
    CLI_Bitrix24_УдалитьСобытиеКалендаря(ПараметрыТеста);
    CLI_Bitrix24_УдалитьКалендарь(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьПользовательскиеНастройкиКалендаря(ПараметрыТеста);
    CLI_Bitrix24_УстановитьПользовательскиеНастройкиКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруНастроекКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруПользовательскихНастроекКаледнаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруСобытияКалендаря(ПараметрыТеста);
    CLI_Bitrix24_ПолучитьСтруктуруФильтраСобытийКалендарей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура CLI_СдэкАПИ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Account"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Password" , ПараметрыТеста);

    CLI_CDEK_ПолучитьТокен(ПараметрыТеста);
    CLI_CDEK_ПолучитьЧекиНаДату(ПараметрыТеста);
    CLI_CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыТеста);
    CLI_CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыТеста);
    CLI_CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыТеста);
    CLI_CDEK_ПолучитьСписокОфисов(ПараметрыТеста);
    CLI_CDEK_ПолучитьСписокРегионов(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_СдэкАПИ_РаботаСЗаказами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token"    , ПараметрыТеста);

    CLI_CDEK_ПолучитьОписаниеЗаказа(ПараметрыТеста);
    CLI_CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CLI_CDEK_ПолучитьЗаказ(ПараметрыТеста);
    CLI_CDEK_ПолучитьЗаказПоНомеру(ПараметрыТеста);
    CLI_CDEK_СформироватьКвитанцию(ПараметрыТеста);
    CLI_CDEK_СформироватьШтрихкод(ПараметрыТеста);
    CLI_CDEK_СоздатьПреалерт(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CLI_CDEK_ПолучитьКвитанцию(ПараметрыТеста);
    CLI_CDEK_ПолучитьШтрихкод(ПараметрыТеста);
    CLI_CDEK_ПолучитьПреалерт(ПараметрыТеста);
    CLI_CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыТеста);
    CLI_CDEK_ПолучитьЧекЗаказа(ПараметрыТеста);
    CLI_CDEK_ИзменитьЗаказ(ПараметрыТеста);
    CLI_CDEK_ОформитьКлиентскийВозврат(ПараметрыТеста);
    CLI_CDEK_СоздатьОтказ(ПараметрыТеста);
    CLI_CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token", ПараметрыТеста);

    CLI_CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CLI_CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыТеста);
    CLI_CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CLI_CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CLI_CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CLI_CDEK_ПолучитьОписаниеДоговоренности(ПараметрыТеста);
    CLI_CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыТеста);
    CLI_CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CLI_CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыТеста);
    CLI_CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура CLI_ЯМетрика_УправлениеМетками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    CLI_YandexMetrika_СоздатьМетку(ПараметрыТеста);
    CLI_YandexMetrika_ПолучитьСписокМеток(ПараметрыТеста);
    CLI_YandexMetrika_ИзменитьМетку(ПараметрыТеста);
    CLI_YandexMetrika_ПолучитьМетку(ПараметрыТеста);
    CLI_YandexMetrika_УдалитьМетку(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯМетрика_УправлениеСчетчиками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    CLI_YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыТеста);
    CLI_YandexMetrika_СоздатьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_ПолучитьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_ИзменитьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_УдалитьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_ВосстановитьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыТеста);
    CLI_YandexMetrika_УдалитьСчетчик(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_ЯМетрика_УправлениеОперациями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    CLI_YandexMetrika_СоздатьСчетчик(ПараметрыТеста);
    CLI_YandexMetrika_ПолучитьСписокОпераций(ПараметрыТеста);
    CLI_YandexMetrika_УдалитьСчетчик(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура CLI_AWS_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);

    CLI_S3_ПолучитьСтруктуруДанных(ПараметрыТеста);
    CLI_S3_ОтправитьЗапросБезТела(ПараметрыТеста);
    CLI_S3_ОтправитьЗапросСТелом(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_AWS_РаботаСБакетами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);

    CLI_S3_СоздатьБакет(ПараметрыТеста);
    CLI_S3_ПолучитьСписокБакетов(ПараметрыТеста);
    CLI_S3_ПроверитьДоступностьБакета(ПараметрыТеста);
    CLI_S3_УстановитьТегиБакета(ПараметрыТеста);
    CLI_S3_ПолучитьТегиБакета(ПараметрыТеста);
    CLI_S3_УдалитьТегиБакета(ПараметрыТеста);
    CLI_S3_УстановитьШифрованиеБакета(ПараметрыТеста);
    CLI_S3_ПолучитьШифрованиеБакета(ПараметрыТеста);
    CLI_S3_УдалитьШифрованиеБакета(ПараметрыТеста);
    CLI_S3_УстановитьНастройкиВерсионированияБакета(ПараметрыТеста);
    CLI_S3_ПолучитьНастройкийВерсионированияБакета(ПараметрыТеста);
    CLI_S3_УдалитьБакет(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_AWS_РаботаСОбъектами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio"       , ПараметрыТеста);

    CLI_S3_СоздатьБакет(ПараметрыТеста);
    CLI_S3_ЗагрузитьОбъект(ПараметрыТеста);
    CLI_S3_ЗагрузитьОбъектЦеликом(ПараметрыТеста);
    CLI_S3_ИнициализироватьЗагрузкуЧастями(ПараметрыТеста);
    CLI_S3_ОтменитьЗагрузкуЧастями(ПараметрыТеста);
    CLI_S3_ПолучитьОписаниеОбъекта(ПараметрыТеста);
    CLI_S3_КопироватьОбъект(ПараметрыТеста);
    CLI_S3_УстановитьТегиОбъекта(ПараметрыТеста);
    CLI_S3_ПолучитьТегиОбъекта(ПараметрыТеста);
    CLI_S3_УдалитьТегиОбъекта(ПараметрыТеста);
    CLI_S3_ПолучитьСписокОбъектов(ПараметрыТеста);
    CLI_S3_ПолучитьСписокВерсийОбъектов(ПараметрыТеста);
    CLI_S3_ПолучитьОбъект(ПараметрыТеста);
    CLI_S3_ПолучитьСсылкуСкачиванияОбъекта(ПараметрыТеста);
    CLI_S3_УдалитьОбъект(ПараметрыТеста);
    CLI_S3_УдалитьБакет(ПараметрыТеста);
    CLI_S3_ПолучитьСсылкуЗагрузкиОбъекта(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область TCP

Процедура CLI_TC_Клиент() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("TCP_Address", ПараметрыТеста);

    CLI_TCP_ОбработатьЗапрос(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область SQLite

Процедура CLI_SQLL_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);

    CLI_SQLite_ВыполнитьЗапросSQL(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_SQLL_ORM() Экспорт

    ПараметрыТеста = Новый Структура;

    База = ПолучитьИмяВременногоФайла("sqlite");
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderUUID", База);
    OPI_Инструменты.ДобавитьПоле("SQLite_DB", База, "Строка", ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture", ПараметрыТеста);

    CLI_SQLite_СоздатьТаблицу(ПараметрыТеста);
    CLI_SQLite_ДобавитьЗаписи(ПараметрыТеста);
    CLI_SQLite_ПолучитьЗаписи(ПараметрыТеста);
    CLI_SQLite_ОбновитьЗаписи(ПараметрыТеста);
    CLI_SQLite_УдалитьЗаписи(ПараметрыТеста);
    CLI_SQLite_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    CLI_SQLite_ОчиститьТаблицу(ПараметрыТеста);
    CLI_SQLite_УдалитьТаблицу(ПараметрыТеста);
    CLI_SQLite_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

    Попытка
       УдалитьФайлы(База);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

Процедура CLI_Postgres_ОсновныеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("SQL"        , ПараметрыТеста);

    CLI_PostgreSQL_СформироватьСтрокуПодключения(ПараметрыТеста);
    CLI_PostgreSQL_ВыполнитьЗапросSQL(ПараметрыТеста);

КонецПроцедуры

Процедура CLI_Postgres_ORM() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_IP"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("PG_Password", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"    , ПараметрыТеста);

    CLI_PostgreSQL_СоздатьБазуДанных(ПараметрыТеста);
    CLI_PostgreSQL_СоздатьТаблицу(ПараметрыТеста);
    CLI_PostgreSQL_ПолучитьИнформациюОТаблице(ПараметрыТеста);
    CLI_PostgreSQL_ДобавитьЗаписи(ПараметрыТеста);
    CLI_PostgreSQL_ПолучитьЗаписи(ПараметрыТеста);
    CLI_PostgreSQL_ОбновитьЗаписи(ПараметрыТеста);
    CLI_PostgreSQL_УдалитьЗаписи(ПараметрыТеста);
    CLI_PostgreSQL_ОчиститьТаблицу(ПараметрыТеста);
    CLI_PostgreSQL_УдалитьТаблицу(ПараметрыТеста);
    CLI_PostgreSQL_ОтключитьВсеСоединенияБазыДанных(ПараметрыТеста);
    CLI_PostgreSQL_УдалитьБазуДанных(ПараметрыТеста);
    CLI_PostgreSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыВК()

    Параметры   = Новый Структура;
    НомерГруппы = OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_GroupID");

    Параметры.Вставить("access_token"  , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_Token"));
    Параметры.Вставить("owner_id"      , "-" + НомерГруппы);
    Параметры.Вставить("app_id"        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_AppID"));
    Параметры.Вставить("group_id"      , НомерГруппы);

    Возврат Параметры;

КонецФункции

Функция ПолучитьПараметрыАвторизацииТвиттер()

    Параметры = Новый Соответствие;

    Параметры.Вставить("redirect_uri"          , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Redirect"));
    Параметры.Вставить("client_id"             , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClinetID"));
    Параметры.Вставить("client_secret"         , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClientSecret"));
    Параметры.Вставить("access_token"          , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Token"));
    Параметры.Вставить("refresh_token"         , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Refresh"));
    Параметры.Вставить("oauth_token"           , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthToken"));
    Параметры.Вставить("oauth_token_secret"    , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthSecret"));

    Параметры.Вставить("oauth_consumer_key"
        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthConsumerKey"));
    Параметры.Вставить("oauth_consumer_secret"
        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthConsumerSecret"));

    Возврат Параметры;

КонецФункции

#Область АтомарныеТесты

#Область Telegram

Процедура CLI_Telegram_ПолучитьИнформациюБота(ПараметрыФункции)

    Опции     = Новый Структура("token", ПараметрыФункции["Telegram_Token"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПолучитьИнформациюБота", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюБота", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИнформацияБота(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ПолучитьОбновления(ПараметрыФункции)

    Опции     = Новый Структура("token", ПараметрыФункции["Telegram_Token"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПолучитьОбновления", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбновления", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_УстановитьWebhook(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token", ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("url"  , ПараметрыФункции["Telegram_URL"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "УстановитьWebhook", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУстановкаВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_УдалитьWebhook(ПараметрыФункции)

    Опции     = Новый Структура("token", ПараметрыФункции["Telegram_Token"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "УдалитьWebhook", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУдалениеВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Текст = ПараметрыФункции["String"];

    Опции = Новый Структура;
    Опции.Вставить("token", ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat" , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text" , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_MessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("Telegram_MessageID", IDСообщения, "Строка", ПараметрыФункции);

    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (канал)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_ChannelMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("Telegram_ChannelMessageID", IDСообщения, "Строка", ПараметрыФункции);

    // Дополнительный тест 1
    Опции.Вставить("text"     , "<b>Текст html %%F0%%9F%%93%%9E 10%%</b>");
    Опции.Вставить("parsemode", "HTML");
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (HTML)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    // Дополнительный тест 2
    Опции.Вставить("text"     , "%%F0%%9F%%A4%%BC");
    Опции.Вставить("parsemode", "Markdown");
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (emoji)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    // Дополнительный тест 3
    Опции.Вставить("text"     , "Текст %%F0%%9F%%A5%%9D и emoji \(10%%\)");
    Опции.Вставить("parsemode", "MarkdownV2");
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (текст и emoji)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка1");
    МассивКнопок.Добавить("Кнопка2");
    МассивКнопок.Добавить("Кнопка3");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СформироватьКлавиатуруПоМассивуКнопок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьКлавиатуруПоМассивуКнопок", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьКартинку(ПараметрыФункции)

    Текст    = ПараметрыФункции["String"];
    Картинка = ПараметрыФункции["Picture"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"    , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("picture" , Картинка);

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКартинку", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_PicMessageID", IDСообщения);
    OPI_Инструменты.ДобавитьПоле("Telegram_PicMessageID", IDСообщения, "Строка", ПараметрыФункции);

    Опции.Вставить("picture" , КартинкаПуть);
    Опции.Вставить("chat"    , ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКартинку (Путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    УдалитьФайлы(КартинкаПуть);

    IDФайла = Результат["result"]["photo"][0]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьВидео(ПараметрыФункции)

    Текст = ПараметрыФункции["String"];
    Видео = ПараметрыФункции["Video"];

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("video" , Видео);

    ВидеоПуть = ПолучитьИмяВременногоФайла("mp4");
    КопироватьФайл(Видео, ВидеоПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьВидео", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьВидео", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст);

    Опции.Вставить("video" , ВидеоПуть);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьВидео", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьВидео (Путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст);

    УдалитьФайлы(ВидеоПуть);

    IDФайла = Результат["result"]["video"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьАудио(ПараметрыФункции)

    Текст = ПараметрыФункции["String"];
    Аудио = ПараметрыФункции["Audio"];

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("audio" , Аудио);

    АудиоПуть = ПолучитьИмяВременногоФайла("mp3");
    КопироватьФайл(Аудио, АудиоПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьАудио", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьАудио", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст);

    Опции.Вставить("audio" , АудиоПуть);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьАудио", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьАудио (Путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст);

    УдалитьФайлы(АудиоПуть);

    IDФайла = Результат["result"]["audio"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьДокумент(ПараметрыФункции)

    Текст    = ПараметрыФункции["String"];
    Документ = ПараметрыФункции["Document"];

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("doc"   , Документ);

    ДокументПуть = ПолучитьИмяВременногоФайла("docx");
    КопироватьФайл(Документ, ДокументПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьДокумент", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьДокумент", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст);

    Опции.Вставить("doc" , ДокументПуть);
    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьДокумент", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьДокумент (Путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст);

    Опции.Вставить("filename", "custom.docx");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьДокумент", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьДокумент (Имя)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст);

    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьГифку(ПараметрыФункции)

    Текст = ПараметрыФункции["String"];
    Гифка = ПараметрыФункции["GIF"];

    Опции = Новый Структура;
    Опции.Вставить("token", ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat" , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text" , Текст);
    Опции.Вставить("gif"  , Гифка);

    ГифкаПуть = ПолучитьИмяВременногоФайла("gif");
    КопироватьФайл(Гифка, ГифкаПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьГифку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьГифку", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст);

    Опции.Вставить("gif" , ГифкаПуть);
    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьГифку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьГифку (Путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст);

    УдалитьФайлы(ГифкаПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьМедиагруппу(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    Видео    = ПараметрыФункции["Video"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    Медиагруппа = Новый Соответствие;
    Медиагруппа.Вставить(КартинкаПуть, "photo");
    Медиагруппа.Вставить(Видео       , "video");

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("text"  , ПараметрыФункции["String"]);
    Опции.Вставить("media" , Медиагруппа);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьМедиагруппу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьМедиагруппу", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    ДокументURL  = ПараметрыФункции["Document"];
    ДокументПуть = ПолучитьИмяВременногоФайла("docx");

    КопироватьФайл(ДокументURL, ДокументПуть);

    МедиаГруппа = Новый Соответствие;
    Медиагруппа.Вставить(ДокументURL , "document");
    Медиагруппа.Вставить(ДокументПуть, "document");

    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("media" , Медиагруппа);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьМедиагруппу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьМедиагруппу (доки)", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    УдалитьФайлы(КартинкаПуть);
    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьМестоположение(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("lat"   , ПараметрыФункции["Lat"]);
    Опции.Вставить("long"  , ПараметрыФункции["Long"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьМестоположение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьМестоположение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат);

    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьМестоположение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьМестоположение (канал)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьКонтакт(ПараметрыФункции)

    Имя = ПараметрыФункции["Name"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"   , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("surname", ПараметрыФункции["Surname"]);
    Опции.Вставить("phone"  , ПараметрыФункции["Phone"]);
    Опции.Вставить("name"   , Имя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьКонтакт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКонтакт", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя);

    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьКонтакт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКонтакт (канал)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОтправитьОпрос(ПараметрыФункции)

    Вопрос = "Какой ваш любимый цвет?";

    МассивОтветов = Новый Массив;
    МассивОтветов.Добавить("Красный");
    МассивОтветов.Добавить("Желтый");
    МассивОтветов.Добавить("Зеленый");
    МассивОтветов.Добавить("Синий");

    Опции = Новый Структура;
    Опции.Вставить("token"   , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"    , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("question", Вопрос);
    Опции.Вставить("options" , МассивОтветов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьОпрос", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьОпрос", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос);

    Опции.Вставить("chat", ПараметрыФункции["Telegram_ChannelID"]);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОтправитьОпрос", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьОпрос (канал)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_СкачатьФайл(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"   , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("fileid"  , ПараметрыФункции["Telegram_FileID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СкачатьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкачатьФайл", "Telegram");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

КонецПроцедуры

Процедура CLI_Telegram_ПереслатьСообщение(ПараметрыФункции)

    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("from"   , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("to"     , ПараметрыФункции["Telegram_ChatID"]);
    Опции.Вставить("message", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПереслатьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереслатьСообщение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПереслать(Результат, IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_Бан(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token", ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat" , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("user" , ПараметрыФункции["Telegram_ChatID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "Бан", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "Бан", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_Разбан(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token", ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat" , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("user" , ПараметрыФункции["Telegram_ChatID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "Разбан", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "Разбан", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_СоздатьСсылкуПриглашение(ПараметрыФункции)

    Сутки       = 86400;
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    Заголовок     = "Ссылка " + Строка(ТекущаяДата);
    Истечение     = ТекущаяДата + Сутки;
    UnixИстечение = OPI_Инструменты.UNIXTime(Истечение);

    Опции = Новый Структура;
    Опции.Вставить("token" , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"  , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("expire", Истечение);
    Опции.Вставить("title" , Заголовок);
    Опции.Вставить("limit" , 200);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СоздатьСсылкуПриглашение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСсылкуПриглашение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПриглашение(Результат, Заголовок, UnixИстечение);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ЗакрепитьСообщение(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"   , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("message", ПараметрыФункции["Telegram_ChannelMessageID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗакрепитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрепитьСообщение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ОткрепитьСообщение(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"   , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("message", ПараметрыФункции["Telegram_ChannelMessageID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОткрепитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрепитьСообщение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ПолучитьЧислоУчастников(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"   , ПараметрыФункции["Telegram_ChannelID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПолучитьЧислоУчастников", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧислоУчастников", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ПолучитьСписокИконокАватаров(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПолучитьСписокИконокАватаров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокИконокАватаров", "Telegram");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_СоздатьТемуФорума(ПараметрыФункции)

    Имя    = "Тестовая тема " + Строка(Новый УникальныйИдентификатор);
    Иконка = "5357419403325481346";
    Чат    = ПараметрыФункции["Telegram_ForumID"];
    Токен  = ПараметрыФункции["Telegram_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("forum"  , Чат);
    Опции.Вставить("icon"   , Иконка);
    Опции.Вставить("title"  , Имя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СоздатьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТемуФорума", "Telegram");

    Тема = Результат["result"]["message_thread_id"];

    OPI_Инструменты.ДобавитьПоле("Telegram_TopicID", Тема, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_TopicID", ПараметрыФункции["Telegram_TopicID"]);

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСозданиеТемы(Результат, Имя, Иконка);

    ЧатТема   = Чат + "*" + Тема;
    Текст     = ПараметрыФункции["String"];
    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, ЧатТема, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (форум)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

КонецПроцедуры

Процедура CLI_Telegram_ИзменитьТемуФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);
    Опции.Вставить("icon"   , "5310132165583840589");
    Опции.Вставить("title"  , "Новый тестовый заголовок");
    Опции.Вставить("topic"  , ПараметрыФункции["Telegram_TopicID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ИзменитьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ЗакрытьТемуФорума(ПараметрыФункции)

    Токен = ПараметрыФункции["Telegram_Token"];
    Чат   = ПараметрыФункции["Telegram_ForumID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("forum"  , Чат);

    OPI_Telegram.ОткрытьТемуФорума(Токен, Чат);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗакрытьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрытьТемуФорума (главная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    Опции.Вставить("topic"  , ПараметрыФункции["Telegram_TopicID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗакрытьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрытьТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура CLI_Telegram_ОткрытьТемуФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОткрытьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрытьТемуФорума (главная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    Опции.Вставить("topic"  , ПараметрыФункции["Telegram_TopicID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОткрытьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрытьТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура CLI_Telegram_УдалитьТемуФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);
    Опции.Вставить("topic"  , ПараметрыФункции["Telegram_TopicID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "УдалитьТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура CLI_Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОчиститьСписокЗакрепленныхСообщенийТемы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы (главная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    Опции.Вставить("topic"  , ПараметрыФункции["Telegram_TopicID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ОчиститьСписокЗакрепленныхСообщенийТемы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_СкрытьГлавнуюТемуФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СкрытьГлавнуюТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкрытьГлавнуюТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ПоказатьГлавнуюТемуФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоказатьГлавнуюТемуФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("forum"  , ПараметрыФункции["Telegram_ForumID"]);
    Опции.Вставить("title"  , "Новое имя главной темы " + Строка(Новый УникальныйИдентификатор));

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ИзменитьИмяГлавнойТемыФорума", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьИмяГлавнойТемыФорума", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_УдалитьСообщение(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("token"  , ПараметрыФункции["Telegram_Token"]);
    Опции.Вставить("chat"   , ПараметрыФункции["Telegram_ChannelID"]);
    Опции.Вставить("message", ПараметрыФункции["Telegram_ChannelMessageID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "УдалитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Telegram_ЗаменитьТекстСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];
    Текст       = "Новый текст сообщения";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗаменитьТекстСообщения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗаменитьТекстСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

КонецПроцедуры

Процедура CLI_Telegram_ЗаменитьКлавиатуруСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDСообщения = ПараметрыФункции["Telegram_MessageID"];

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("1");
    МассивКнопок.Добавить("2");
    МассивКнопок.Добавить("3");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);
    Опции.Вставить("under"  , Истина);
    Опции.Вставить("column" , Ложь);

    Клавиатура = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "СформироватьКлавиатуруПоМассивуКнопок", Опции);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("chat"    , IDЧата);
    Опции.Вставить("message" , IDСообщения);
    Опции.Вставить("keyboard", Клавиатура);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗаменитьКлавиатуруСообщения", Опции);

    Клавиатура = OPI_Инструменты.JSONСтрокой(Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗаменитьКлавиатуруСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКлавиатураСообщения(Результат, Клавиатура);

КонецПроцедуры

Процедура CLI_Telegram_ЗаменитьОписаниеСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDСообщения = ПараметрыФункции["Telegram_PicMessageID"];

    Описание = "Новое описание картинки";

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("chat"    , IDЧата);
    Опции.Вставить("message" , IDСообщения);
    Опции.Вставить("caption" , Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("telegram", "ЗаменитьОписаниеСообщения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗаменитьОписаниеСообщения", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Описание);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура CLI_VK_СоздатьСсылкуПолученияТокена(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("app"  , ПараметрыФункции["VK_AppID"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьСсылкуПолученияТокена", Опции);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСсылкуПолученияТокена", "VK");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СоздатьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка  = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка2, ИВФ);

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(ИВФ);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", МассивКартинок);
    Опции.Вставить("ad"      , Истина);
    Опции.Вставить("url"     , URL);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьПост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПост", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);
    ИДПоста   = Результат["response"]["post_id"];
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", Картинка);
    Опции.Вставить("ad"      , Ложь);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьПост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПост (одна картинка)");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста   = Результат["response"]["post_id"];
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", ИВФ);
    Опции.Вставить("ad"      , Истина);
    Опции.Вставить("url"     , URL);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьПост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПост (один путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста = Результат["response"]["post_id"];
    OPI_Инструменты.ДобавитьПоле("VK_PostID", ИДПоста, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ПараметрыФункции["VK_PostID"]);

    УдалитьФайлы(ИВФ);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДПоста   = ПараметрыФункции["VK_PostID"];

    Опции = Новый Структура;
    Опции.Вставить("post", ИДПоста);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьПост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьПост", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура CLI_VK_СоздатьСоставнойПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Видео    = ПараметрыФункции["Video"];   // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);

    ЗагрузкаКартинки = OPI_VK.ЗагрузитьФотоНаСервер(ИВФ, Параметры)["response"][0];
    ЗагрузкаВидео    = OPI_VK.ЗагрузитьВидеоНаСервер(Видео, "Новое видео", , , Параметры);

    ВладелецКартинки = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["owner_id"]);
    ВладелецВидео    = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["owner_id"]);

    IDКартинки = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["id"]);
    IDВидео    = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["video_id"]);

    МассивВложений = Новый Массив;
    МассивВложений.Добавить("photo" + ВладелецКартинки + "_" + IDКартинки);
    МассивВложений.Добавить("video" + ВладелецВидео + "_" + IDВидео);

    Опции = Новый Структура;
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("objects", МассивВложений);
    Опции.Вставить("ad"     , Ложь);
    Опции.Вставить("url"    , URL);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьСоставнойПост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСоставнойПост", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);
    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СоздатьОпрос()

    Параметры = ПолучитьПараметрыВК();
    Вопрос    = "Какой ваш любимый цвет?";

    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Красный");
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Зеленый");

    Опции = Новый Структура;
    Опции.Вставить("question", Вопрос);
    Опции.Вставить("options" , МассивВариантов);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьОпрос", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьОпрос", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста = Результат["response"]["post_id"];
    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(10);

КонецПроцедуры

Процедура CLI_VK_СоздатьАльбом(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Имя       = "Альбом из автотеста";
    Описание  = "Новый альбом из автотеста";

    Опции = Новый Структура;
    Опции.Вставить("title"       , Имя);
    Опции.Вставить("description" , Описание);
    Опции.Вставить("auth"        , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьАльбом", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьАльбом", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКАльбом(Результат, Описание);

    ИДАльбома = Результат["response"]["id"];
    ПараметрыФункции.Вставить("VK_AlbumID", ИДАльбома);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AlbumID", ИДАльбома);

КонецПроцедуры

Процедура CLI_VK_СохранитьКартинкуВАльбом(ПараметрыФункции)

    Параметры        = ПолучитьПараметрыВК();
    ОписаниеКартинки = "Картинка автотест";
    ИДАльбома        = ПараметрыФункции["VK_AlbumID"];

    Картинка = ПараметрыФункции["Picture"];

    Опции = Новый Структура;
    Опции.Вставить("album"       , ИДАльбома);
    Опции.Вставить("picture"     , Картинка);
    Опции.Вставить("description" , ОписаниеКартинки);
    Опции.Вставить("auth"        , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СохранитьКартинкуВАльбом", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СохранитьКартинкуВАльбом", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, ОписаниеКартинки, ИДАльбома);

    ИДКартинки = Результат["response"][0]["id"];
    ПараметрыФункции.Вставить("VK_PictureID", ИДКартинки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PictureID", ИДКартинки);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьКартинку(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    ИДКартинки = ПараметрыФункции["VK_PictureID"];

    Опции = Новый Структура;
    Опции.Вставить("pictureid", ИДКартинки);
    Опции.Вставить("auth"     , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКартинку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьАльбом(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДАльбома = ПараметрыФункции["VK_AlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("album", ИДАльбома);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьАльбом", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьАльбом", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ЗагрузитьФотоНаСервер(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу
    Вид      = "Пост";

    Опции = Новый Структура;
    Опции.Вставить("file", Картинка);
    Опции.Вставить("type", Вид);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ЗагрузитьФотоНаСервер", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, "");

КонецПроцедуры

Процедура CLI_VK_СоздатьИсторию(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка = ПараметрыФункции["Picture"];       // URL, Путь к файлу или Двоичные данные
    ИВФ      = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);
    Картинка = Новый ДвоичныеДанные(ИВФ);

    Опции = Новый Структура;
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("url"    , URL);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьИсторию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьИсторию", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат);

    Опции = Новый Структура;
    Опции.Вставить("picture", ИВФ);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьИсторию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьИсторию (путь)");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СоздатьОбсуждение(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Название  = "Обсуждаем: какой цвет лучше?";
    Сообщение = "Красный, желтый, синий или какой-то другой?";

    Опции = Новый Структура;
    Опции.Вставить("title", Название);
    Опции.Вставить("text" , Сообщение);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьОбсуждение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьОбсуждение", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

    ИДОбсуждения = Результат["response"];
    ПараметрыФункции.Вставить("VK_ConvID", ИДОбсуждения);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_ConvID", ИДОбсуждения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ЗакрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];

    Опции = Новый Структура;
    Опции.Вставить("topic" , ИДОбсуждения);
    Опции.Вставить("remove", Ложь);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ЗакрытьОбсуждение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрытьОбсуждение", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ОткрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];

    Опции = Новый Структура;
    Опции.Вставить("topic" , ИДОбсуждения);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ОткрытьОбсуждение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрытьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_НаписатьВОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Сообщение    = "Мне больше нравится желтый";

    Опции = Новый Структура;
    Опции.Вставить("topic" , ИДОбсуждения);
    Опции.Вставить("text"  , Сообщение);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "НаписатьВОбсуждение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НаписатьВОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

КонецПроцедуры

Процедура CLI_VK_ПоставитьЛайк(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    IDПоста   = ПараметрыФункции["VK_PostID"];

    Опции = Новый Структура;
    Опции.Вставить("post"  , IDПоста);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПоставитьЛайк", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоставитьЛайк", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЛайк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СделатьРепост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    IDПоста   = 2571;
    IDСтены   = -218704372;

    Опции = Новый Структура;
    Опции.Вставить("post"  , IDПоста);
    Опции.Вставить("from"  , IDСтены);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СделатьРепост", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СделатьРепост", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКРепост(Результат);

    ПараметрыФункции.Вставить("Repost", Результат["response"]["post_id"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_НаписатьКомментарий(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Новый комментарий";
    IDПоста   = ПараметрыФункции["VK_PostID"];
    IDСтены   = Параметры["owner_id"];

    Опции = Новый Структура;
    Опции.Вставить("post"  , IDПоста);
    Опции.Вставить("wall"  , IDСтены);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "НаписатьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НаписатьКомментарий", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККомментарий(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СократитьСсылку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("url"  , "https://github.com/Bayselonarrend/OpenIntegrations");
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СократитьСсылку", Опции);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СократитьСсылку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСтатистику(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();
    ДатаНачала    = НачалоДня(ТекущаяДата);
    ДатаОкончания = КонецДня(ДатаНачала);

    Опции = Новый Структура;
    Опции.Вставить("datefrom", ДатаНачала);
    Опции.Вставить("dateto"  , ДатаОкончания);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСтатистику", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатистику", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистика(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСтатистикуПостов(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    МассивПостов = Новый Массив;
    МассивПостов.Добавить(214);
    МассивПостов.Добавить(215);

    Опции = Новый Структура;
    Опции.Вставить("posts", МассивПостов);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСтатистикуПостов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатистикуПостов", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистикаПостов(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СоздатьРекламнуюКампанию(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    IDКабинета   = ПараметрыФункции["VK_AdsCabinetID"];
    Наименование = "Новая кампания";

    Опции = Новый Структура;
    Опции.Вставить("cabinet", IDКабинета);
    Опции.Вставить("title"  , Наименование);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьРекламнуюКампанию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьРекламнуюКампанию", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДКампании = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsCampaignID", ИДКампании);
    ПараметрыФункции.Вставить("VK_AdsCampaignID", ИДКампании);

КонецПроцедуры

Процедура CLI_VK_СоздатьРекламноеОбъявление(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    НомерКампании  = ПараметрыФункции["VK_AdsCampaignID"];
    ДневнойЛимит   = 150;
    НомерКатегории = 126;
    IDПоста        = ПараметрыФункции["VK_PostID"];
    IDКабинета     = ПараметрыФункции["VK_AdsCabinetID"];

    Опции = Новый Структура;
    Опции.Вставить("campaign", НомерКампании);
    Опции.Вставить("limit"   , ДневнойЛимит);
    Опции.Вставить("category", НомерКатегории);
    Опции.Вставить("post"    , IDПоста);
    Опции.Вставить("cabinet" , IDКабинета);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьРекламноеОбъявление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьРекламноеОбъявление", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДОбъявления = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsPostID", ИДОбъявления);
    ПараметрыФункции.Вставить("VK_AdsPostID", ИДОбъявления);

КонецПроцедуры

Процедура CLI_VK_ПриостановитьРекламноеОбъявление(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    IDКабинета   = ПараметрыФункции["VK_AdsCabinetID"];
    IDОбъявления = ПараметрыФункции["VK_AdsPostID"];

    Опции = Новый Структура;
    Опции.Вставить("adv"     , IDОбъявления);
    Опции.Вставить("cabinet" , IDКабинета);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПриостановитьРекламноеОбъявление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПриостановитьРекламноеОбъявление", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокРекламныхКатегорий(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокРекламныхКатегорий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокРекламныхКатегорий", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККатегории(Результат);

КонецПроцедуры

Процедура CLI_VK_СформироватьКлавиатуру(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);

    Клавиатура = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СформироватьКлавиатуру", Опции);
    Клавиатура = OPI_Инструменты.JSONСтрокой(Клавиатура);

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Клавиатура);

КонецПроцедуры

Процедура CLI_VK_НаписатьСообщение(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Текст          = "Сообщение из автотеста";
    IDПользователя = ПараметрыФункции["VK_UserID"];
    Communitytoken = ПараметрыФункции["VK_CommunityToken"];

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);

    Клавиатура = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СформироватьКлавиатуру", Опции);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("user"    , IDПользователя);
    Опции.Вставить("ct"      , Communitytoken);
    Опции.Вставить("keyboard", Клавиатура);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "НаписатьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НаписатьСообщение", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокКатегорийТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокКатегорийТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКатегорийТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_VK_СоздатьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Тестовая подборка";
    Картинка = ПараметрыФункции["Picture"];
    Основная = Истина;
    Скрытая  = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("title"  , Название);
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("main"   , Основная);
    Опции.Вставить("hidden" , Скрытая);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьПодборкуТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПодборкуТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКПодборка(Результат);

    OPI_Инструменты.Пауза(5);

    ИДПодборки = Результат["response"]["market_album_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketAlbumID", ИДПодборки);
    ПараметрыФункции.Вставить("VK_MarketAlbumID", ИДПодборки);

КонецПроцедуры

Процедура CLI_VK_ИзменитьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Измененная подборка";
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("title", Название);
    Опции.Вставить("sel"  , Подборка);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ИзменитьПодборкуТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПодборкуТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьПодборкиПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("sels" , Подборка);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьПодборкиПоИД", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПодборкиПоИД", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЭлементы(Результат);

КонецПроцедуры

Процедура CLI_VK_ДобавитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    ОписаниеТовара = Новый Соответствие();
    ОписаниеТовара.Вставить("Имя"                , "Тестовый товар");
    ОписаниеТовара.Вставить("Описание"           , "Описание товара");
    ОписаниеТовара.Вставить("Категория"          , "20173");
    ОписаниеТовара.Вставить("Цена"               , 1);
    ОписаниеТовара.Вставить("СтараяЦена"         , 15);
    ОписаниеТовара.Вставить("ОсновноеФото"       , Картинка1);
    ОписаниеТовара.Вставить("URL"                , "https://github.com/Bayselonarrend/OpenIntegrations");
    ОписаниеТовара.Вставить("ДополнительныеФото" , МассивКартинок);
    ОписаниеТовара.Вставить("ГлавныйВГруппе"     , Истина);
    ОписаниеТовара.Вставить("Ширина"             , 20);
    ОписаниеТовара.Вставить("Высота"             , 30);
    ОписаниеТовара.Вставить("Глубина"            , 40);
    ОписаниеТовара.Вставить("Вес"                , 100);
    ОписаниеТовара.Вставить("SKU"                , "12345");
    ОписаниеТовара.Вставить("ДоступныйОстаток"   , "10");

    Опции = Новый Структура;
    Опции.Вставить("product", ОписаниеТовара);
    Опции.Вставить("sel"    , Подборка);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ДобавитьТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьТовар", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID", ИДТовара);

КонецПроцедуры

Процедура CLI_VK_ИзменитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар = ПараметрыФункции["VK_MarketItemID"];

    ОписаниеТовара = Новый Соответствие;
    ОписаниеТовара.Вставить("Имя", "Тестовый товар измененный");

    Опции = Новый Структура;
    Опции.Вставить("product", ОписаниеТовара);
    Опции.Вставить("item"   , Товар);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ИзменитьТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТовар", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура CLI_VK_ДобавитьТоварВПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар    = ПараметрыФункции["VK_MarketItemID"];
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("sel"  , Подборка);
    Опции.Вставить("items", Товар);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ДобавитьТоварВПодборку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьТоварВПодборку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьТоварИзПодборки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар    = ПараметрыФункции["VK_MarketItemID"];
    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("sel" , Подборка);
    Опции.Вставить("item", Товар);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьТоварИзПодборки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТоварИзПодборки", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар = ПараметрыФункции["VK_MarketItemID"];

    Опции = Новый Структура;
    Опции.Вставить("item", Товар);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТовар", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Подборка = ПараметрыФункции["VK_MarketAlbumID"];

    Опции = Новый Структура;
    Опции.Вставить("sel" , Подборка);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьПодборку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьПодборку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СоздатьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Цвет";

    Опции = Новый Структура;
    Опции.Вставить("title", Название);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СоздатьСвойствоТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСвойствоТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКСвойство(Результат);

    OPI_Инструменты.Пауза(5);

    Свойство = Результат["response"]["property_id"];
    Свойство = OPI_Инструменты.ЧислоВСтроку(Свойство);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PropID", Свойство);
    ПараметрыФункции.Вставить("VK_PropID", Свойство);

КонецПроцедуры

Процедура CLI_VK_ИзменитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Цвет (изм.)";
    Свойство = ПараметрыФункции["VK_PropID"];

    Опции = Новый Структура;
    Опции.Вставить("title", Название);
    Опции.Вставить("prop" , Свойство);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ИзменитьСвойствоТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСвойствоТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ДобавитьВариантСвойстваТовара(ПараметрыФункции)

    Счетчик   = 1;
    Параметры = ПолучитьПараметрыВК();

    Свойство        = ПараметрыФункции["VK_PropID"];
    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Синий");
    МассивВариантов.Добавить("Красный");

    Для Каждого Значение Из МассивВариантов Цикл

        Опции = Новый Структура;
        Опции.Вставить("value", Значение);
        Опции.Вставить("prop" , Свойство);
        Опции.Вставить("auth" , Параметры);

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ДобавитьВариантСвойстваТовара", Опции);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьВариантСвойстваТовара", "VK");
        OPI_ПолучениеДанныхТестов.Проверка_ВКВариантСвойства(Результат);
        OPI_Инструменты.Пауза(5);

        ИДВарианта   = Результат["response"]["variant_id"];
        ИмяПараметра = "VK_PropVarID" + Строка(Счетчик);

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПараметра, ИДВарианта);
        ПараметрыФункции.Вставить(ИмяПараметра, ИДВарианта);
        Счетчик = Счетчик + 1;

    КонецЦикла;

КонецПроцедуры

Процедура CLI_VK_ИзменитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство = ПараметрыФункции["VK_PropID"];
    Вариант  = ПараметрыФункции["VK_PropVarID1"];
    Значение = "Новое имя варианта";

    Опции = Новый Структура;
    Опции.Вставить("value" , Значение);
    Опции.Вставить("prop"  , Свойство);
    Опции.Вставить("option", Вариант);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ИзменитьВариантСвойстваТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьВариантСвойстваТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура CLI_VK_СоздатьТоварСоСвойством(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1        = ПараметрыФункции["Picture"];
    Картинка2        = ПараметрыФункции["Picture2"];
    ВариантСвойства1 = ПараметрыФункции["VK_PropVarID1"];
    ВариантСвойства2 = ПараметрыФункции["VK_PropVarID2"];

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Товар = Новый Соответствие();
    Товар.Вставить("Имя"                , "Тестовый товар (со свойством)");
    Товар.Вставить("Описание"           , "Описание товара");
    Товар.Вставить("Категория"          , "20173");
    Товар.Вставить("Цена"               , 1);
    Товар.Вставить("СтараяЦена"         , 15);
    Товар.Вставить("ОсновноеФото"       , Картинка1);
    Товар.Вставить("URL"                , "https://github.com/Bayselonarrend/OpenIntegrations");
    Товар.Вставить("ДополнительныеФото" , МассивКартинок);
    Товар.Вставить("ГлавныйВГруппе"     , Истина);
    Товар.Вставить("НомерГруппы"        , Неопределено);
    Товар.Вставить("Ширина"             , 20);
    Товар.Вставить("Высота"             , 30);
    Товар.Вставить("Глубина"            , 40);
    Товар.Вставить("Вес"                , 100);
    Товар.Вставить("SKU"                , 12345);
    Товар.Вставить("ДоступныйОстаток"   , "10");
    Товар.Вставить("ЗначенияСвойств"    , ВариантСвойства1);

    Опции = Новый Структура;
    Опции.Вставить("product", Товар);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ДобавитьТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ТоварСоСвойством1");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID2", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID2", ИДТовара);

    Товар.Вставить("Имя"            , "Тестовый товар (другой)");
    Товар.Вставить("ЗначенияСвойств", ВариантСвойства2);

    Опции = Новый Структура;
    Опции.Вставить("product", Товар);
    Опции.Вставить("auth"   , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ДобавитьТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ТоварСоСвойством2");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID3", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID3", ИДТовара);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьТоварыПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Опции = Новый Структура;
    Опции.Вставить("items", МассивТоваров);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьТоварыПоИД", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТоварыПоИД", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИнформацияОТоварах(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_СгруппироватьТовары(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Опции = Новый Структура;
    Опции.Вставить("items", МассивТоваров);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "СгруппироватьТовары", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СгруппироватьТовары", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКГруппаТоваров(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Вариант = ПараметрыФункции["VK_PropVarID1"];

    Опции = Новый Структура;
    Опции.Вставить("option", Вариант);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьВариантСвойстваТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьВариантСвойстваТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_УдалитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство = ПараметрыФункции["VK_PropID"];

    Опции = Новый Структура;
    Опции.Вставить("prop", Свойство);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "УдалитьСвойствоТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСвойствоТовара");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьОписаниеТовара(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьОписаниеТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокПодборок(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокПодборок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПодборок", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокСвойств(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокСвойств", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСвойств", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ПолучитьСписокЗаказов(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Опции = Новый Структура;
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ПолучитьСписокЗаказов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЗаказов", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VK_ЗагрузитьВидеоНаСервер(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Видео        = ПараметрыФункции["Video"]; // URL, Двоичные данные или Путь к файлу
    Наименование = "Новое видео";
    Описание     = "Описание видео";

    Опции = Новый Структура;
    Опции.Вставить("file"       , Видео);
    Опции.Вставить("title"      , Наименование);
    Опции.Вставить("description", Описание);
    Опции.Вставить("auth"       , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vk", "ЗагрузитьВидеоНаСервер", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКВидео(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура CLI_YandexDisk_ПолучитьИнформациюОДиске(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьИнформациюОДиске", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОДиске", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискДиск(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_СоздатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = "/" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "СоздатьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПапку", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискКаталог(Результат, Путь);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Адрес = ПараметрыФункции["Picture"];
    Путь  = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);
    Опции.Вставить("url"  , Адрес);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ЗагрузитьФайлПоURL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлПоURL", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПроцедура(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_FileByURLPath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_FileByURLPath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбъект", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

КонецПроцедуры

Процедура CLI_YandexDisk_УдалитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);
    Опции.Вставить("can"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ЗагрузитьФайл(ПараметрыФункции)

    Путь1 = "/" + Строка(Новый УникальныйИдентификатор) + ".png";
    Путь2 = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Картинка = ПараметрыФункции["Picture"]; // URL

    ИВФ = ПолучитьИмяВременногоФайла("png"); // Путь
    КопироватьФайл(Картинка, ИВФ);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("path"   , Путь1);
    Опции.Вставить("file"   , Картинка);
    Опции.Вставить("rewrite", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл (URL)", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("path"   , Путь2);
    Опции.Вставить("file"   , ИВФ);
    Опции.Вставить("rewrite", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь1);
    Опции.Вставить("can"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект (URL)", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь2);
    Опции.Вставить("can"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект (Путь)", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_СоздатьКопиюОбъекта(ПараметрыФункции)

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Оригинал = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("from"   , Оригинал);
    Опции.Вставить("to"     , Путь);
    Опции.Вставить("rewrite", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "СоздатьКопиюОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКопиюОбъекта", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_CopyFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_CopyFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_PathForLink"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьСсылкуДляСкачивания", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуДляСкачивания", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_СкачатьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_PathForLink"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "СкачатьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкачатьФайл", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен            = ПараметрыФункции["YandexDisk_Token"];
    Количество       = 2;
    СмещениеОтНачала = 1;
    ОтборПоТипу      = "image";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("amount", Количество);
    Опции.Вставить("offset", СмещениеОтНачала);
    Опции.Вставить("type"  , ОтборПоТипу);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ПереместитьОбъект(ПараметрыФункции)

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Оригинал = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("from"   , Оригинал);
    Опции.Вставить("to"     , Путь);
    Опции.Вставить("rewrite", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПереместитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьОбъект", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_NewFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_NewFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_YandexDisk_ОпубликоватьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ОпубликоватьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОпубликоватьОбъект", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Истина);

    URL = Результат["public_url"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PublicURL", URL);
    ПараметрыФункции.Вставить("YandexDisk_PublicURL", URL);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьСсылкуСкачиванияПубличногоОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуСкачиванияПубличногоОбъекта", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьПубличныйОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьПубличныйОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПубличныйОбъект", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Истина);

КонецПроцедуры

Процедура CLI_YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    URL   = ПараметрыФункции["YandexDisk_PublicURL"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "СохранитьПубличныйОбъектНаДиск", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СохранитьПубличныйОбъектНаДиск", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Ложь);

КонецПроцедуры

Процедура CLI_YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ОтменитьПубликациюОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтменитьПубликациюОбъекта", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Ложь);

КонецПроцедуры

Процедура CLI_YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыФункции)

    Токен            = ПараметрыФункции["YandexDisk_Token"];
    Количество       = 2;
    СмещениеОтНачала = 1;

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("amount", Количество);
    Опции.Вставить("offset", СмещениеОтНачала);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("yadisk", "ПолучитьСписокОпубликованныхОбъектов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОпубликованныхОбъектов", "YandexDisk");
    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура CLI_Viber_УстановитьWebhook(ПараметрыФункции)

    Токен = ПараметрыФункции["Viber_ChannelToken"];
    URL   = "http://api.athenaeum.digital/hs/viber";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("url"   , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "УстановитьWebhook", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьWebhook", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Viber_ПолучитьИнформациюОКанале(ПараметрыФункции)

    Токен = ПараметрыФункции["Viber_ChannelToken"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ПолучитьИнформациюОКанале", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОКанале", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("user" , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ПолучитьДанныеПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеПользователя", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ПолучитьОнлайнПользователей(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("users", IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ПолучитьОнлайнПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОнлайнПользователей", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберОнлайн(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "СформироватьКлавиатуруИзМассиваКнопок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьКлавиатуруИзМассиваКнопок", "Viber");

КонецПроцедуры

Процедура CLI_Viber_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Текст = "Тестовое сообщение";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Опции = Новый Структура;
    Опции.Вставить("buttons", МассивКнопок);

    Клавиатура = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "СформироватьКлавиатуруИзМассиваКнопок", Опции);

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);
    Опции.Вставить("keyboard" , Клавиатура);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);
    Опции.Вставить("keyboard" , Клавиатура);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ОтправитьКартинку(ПараметрыФункции)

    Описание = "Тестовое сообщение";
    URL      = ПараметрыФункции["Picture"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("picture"    , URL);
    Опции.Вставить("user"       , IDПользователя);
    Опции.Вставить("ischannel"  , ОтправкаВКанал);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКартинку", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("picture"    , URL);
    Опции.Вставить("user"       , IDПользователя);
    Опции.Вставить("ischannel"  , ОтправкаВКанал);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКартинку (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ОтправитьФайл(ПараметрыФункции)

    Расширение = "docx";
    URL        = ПараметрыФункции["Document"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("file"     , URL);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);
    Опции.Вставить("ext"      , Расширение);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("file"     , URL);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);
    Опции.Вставить("ext"      , Расширение);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ОтправитьКонтакт(ПараметрыФункции)

    Имя     = "Петр Петров";
    Телефон = "+123456789";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("name"     , Имя);
    Опции.Вставить("phone"    , Телефон);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьКонтакт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКонтакт", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("name"     , Имя);
    Опции.Вставить("phone"    , Телефон);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьКонтакт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьКонтакт (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ОтправитьЛокацию(ПараметрыФункции)

    Широта  = "48.87373649724122";
    Долгота = "2.2954639195323967";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("lat"      , Широта);
    Опции.Вставить("long"     , Долгота);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьЛокацию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьЛокацию", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("lat"      , Широта);
    Опции.Вставить("long"     , Долгота);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьЛокацию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьЛокацию (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Viber_ОтправитьСсылку(ПараметрыФункции)

    URL = "https://github.com/Bayselonarrend/OpenIntegrations";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("url"      , URL);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьСсылку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСсылку", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("url"      , URL);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("ischannel", ОтправкаВКанал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("viber", "ОтправитьСсылку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСсылку (канал)", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура CLI_GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыФункции)

    ClientID = ПараметрыФункции["Google_ClientID"];

    Опции = Новый Структура;
    Опции.Вставить("id" , ClientID);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("google", "СформироватьСсылкуПолученияКода", Опции);
    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Link", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Google_ClientID"];
    ClientSecret = ПараметрыФункции["Google_ClientSecret"];
    Code         = ПараметрыФункции["Google_Code"];

    Опции = Новый Структура;
    Опции.Вставить("id"    , ClientID);
    Опции.Вставить("secret", ClientSecret);
    Опции.Вставить("code"  , Code);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("google", "ПолучитьТокенПоКоду", Опции);

    Если ЗначениеЗаполнено(Результат["access_token"])
        И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleWorkspace_ОбновитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Google_ClientID"];
    ClientSecret = ПараметрыФункции["Google_ClientSecret"];
    RefreshToken = ПараметрыФункции["Google_Refresh"];

    Опции = Новый Структура;
    Опции.Вставить("id"     , ClientID);
    Опции.Вставить("secret" , ClientSecret);
    Опции.Вставить("refresh", RefreshToken);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("google", "ОбновитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_ГуглТокен(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура CLI_GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьСписокКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКалендарей", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleCalendar_СоздатьКалендарь(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовый календарь";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("title", Наименование);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "СоздатьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКалендарь(Результат, Наименование);

    Календарь = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_NewCalendarID", Календарь);
    OPI_Инструменты.ДобавитьПоле("Google_NewCalendarID", Календарь, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];
    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("calendar"   , Календарь);
    Опции.Вставить("title"      , Наименование);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ИзменитьМетаданныеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьМетаданныеКалендаря", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("calendar"   , Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьМетаданныеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьМетаданныеКалендаря", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("calendar"   , Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ДобавитьКалендарьВСписок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьКалендарьВСписок", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыФункции)

    Токен              = ПараметрыФункции["Google_Token"];
    Календарь          = ПараметрыФункции["Google_NewCalendarID"];
    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";
    Скрытый            = Ложь;

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("calendar" , Календарь);
    Опции.Вставить("primary"  , ОсновнойЦвет);
    Опции.Вставить("secondary", ДополнительныйЦвет);
    Опции.Вставить("hidden"   , Скрытый);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ИзменитьКалендарьСписка", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКалендарьСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("calendar" , Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьКалендарьСписка", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКалендарьСписка", "GoogleCalendar");

    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";

    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ОчиститьОсновнойКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьОсновнойКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("calendar" , Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "УдалитьКалендарьИзСписка", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКалендарьИзСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_GoogleCalendar_УдалитьКалендарь(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("calendar" , Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "УдалитьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_GoogleCalendar_СоздатьСобытие(ПараметрыФункции)

    ТекущаяДата  = OPI_Инструменты.ПолучитьТекущуюДату();
    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];
    Наименование = "Новое событие";
    Описание     = "Описание тестового события";
    Час          = 3600;

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Вложения  = Новый Соответствие;

    Вложения.Вставить("Картинка1", Картинка1);
    Вложения.Вставить("Картинка2", Картинка2);

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание"                 , Описание);
    ОписаниеСобытия.Вставить("Заголовок"                , Наименование);
    ОписаниеСобытия.Вставить("МестоПроведения"          , "В офисе");
    ОписаниеСобытия.Вставить("ДатаНачала"               , ТекущаяДата);
    ОписаниеСобытия.Вставить("ДатаОкончания"            , ОписаниеСобытия["ДатаНачала"] + Час);
    ОписаниеСобытия.Вставить("МассивURLФайловВложений"  , Вложения);
    ОписаниеСобытия.Вставить("ОтправлятьУведомления"    , Истина);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("calendar", Календарь);
    Опции.Вставить("props"   , ОписаниеСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "СоздатьСобытие", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСобытие", "GoogleCalendar");

    Событие = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_EventID", Событие);
    OPI_Инструменты.ДобавитьПоле("Google_EventID", Событие, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ИзменитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];
    Описание  = "Новое описание события";

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание", Описание);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("calendar", Календарь);
    Опции.Вставить("props"   , ОписаниеСобытия);
    Опции.Вставить("event"   , Событие);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ИзменитьСобытие", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПолучитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("calendar", Календарь);
    Опции.Вставить("event"   , Событие);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьСобытие", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПереместитьСобытие(ПараметрыФункции)

    Токен   = ПараметрыФункции["Google_Token"];
    Событие = ПараметрыФункции["Google_EventID"];

    КалендарьИсточник = ПараметрыФункции["Google_NewCalendarID"];
    КалендарьПриемник = ПараметрыФункции["Google_CalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("from" , КалендарьИсточник);
    Опции.Вставить("to"   , КалендарьПриемник);
    Опции.Вставить("event", Событие);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПереместитьСобытие", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

    OPI_GoogleCalendar.ПереместитьСобытие(Токен, КалендарьПриемник, КалендарьИсточник, Событие);

КонецПроцедуры

Процедура CLI_GoogleCalendar_УдалитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("calendar", Календарь);
    Опции.Вставить("event"   , Событие);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "УдалитьСобытие", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСобытие", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПолучитьСписокСобытий(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("calendar", Календарь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьСписокСобытий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСобытий", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура CLI_GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty"   , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gcalendar", "ПолучитьОписаниеСобытия", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеСобытия", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура CLI_GoogleDrive_ПолучитьСписокКаталогов(ПараметрыФункции)

    Имя   = "Тестовая папка";
    Токен = ПараметрыФункции["Google_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("querry", Имя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьСписокКаталогов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКаталогов", "GoogleDrive");

    Результат = Результат[0];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталоги(Результат);

    Идентификатор = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Catalog", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Catalog", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_Catalog"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("object", Идентификатор);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьИнформациюОбОбъекте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОбОбъекте", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_ЗагрузитьФайл(ПараметрыФункции)

    Токен    = ПараметрыФункции["Google_Token"];
    Картинка = ПараметрыФункции["Picture"];
    Каталог  = ПараметрыФункции["GD_Catalog"];

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Описание = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьОписаниеФайла", Опции);
    Описание.Вставить("Родитель", Каталог);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("file" , Картинка);
    Опции.Вставить("props", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_File", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_File", Идентификатор, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_GoogleDrive_СкопироватьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    НовоеИмя      = "Скопированный файл.jpeg";
    НовыйРодитель = "root";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);
    Опции.Вставить("title"  , НовоеИмя);
    Опции.Вставить("catalog", НовыйРодитель);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "СкопироватьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкопироватьОбъект", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор = Результат["id"];

    МассивУдаляемых = ПараметрыФункции["МассивУдаляемых"];
    МассивУдаляемых.Добавить(Идентификатор);
    ПараметрыФункции.Вставить("МассивУдаляемых", МассивУдаляемых);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_СкачатьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "СкачатьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкачатьФайл", "GoogleDrive");

    Размер      = OPI_Инструменты.Get(ПараметрыФункции["Picture"]).Размер();
    ЛишниеБайты = 2;

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, Размер + ЛишниеБайты);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_ОбновитьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    НовоеИмя      = "Обновленный файл.jpg";
    Идентификатор = ПараметрыФункции["GD_File"];
    Файл          = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);
    Опции.Вставить("file"   , Файл);
    Опции.Вставить("title"  , НовоеИмя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ОбновитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьФайл", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен       = ПараметрыФункции["Google_Token"];
    Каталог     = "root";
    ИмяСодержит = "data";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("querry" , ИмяСодержит);
    Опции.Вставить("catalog", Каталог);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура CLI_GoogleDrive_УдалитьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Для Каждого Удаляемый Из ПараметрыФункции["МассивУдаляемых"] Цикл

        Результат = OPI_GoogleDrive.УдалитьОбъект(Токен, Удаляемый);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект");

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);
        OPI_Инструменты.Пауза(2);

    КонецЦикла;

КонецПроцедуры

Процедура CLI_GoogleDrive_ПолучитьОписаниеФайла(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьОписаниеФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеФайла", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_GoogleDrive_СоздатьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    Комментарий   = "Текст комментария";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);
    Опции.Вставить("text"   , Комментарий);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "СоздатьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, Комментарий);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Comment", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Comment", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_GoogleDrive_ПолучитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);
    Опции.Вставить("comment", ИДКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, "Текст комментария");

КонецПроцедуры

Процедура CLI_GoogleDrive_ПолучитьСписокКомментариев(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "ПолучитьСписокКомментариев", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКомментариев", "GoogleDrive");

    Комментарии       = Результат["comments"];
    ОбъектКомментарий = Комментарии[Комментарии.ВГраница()];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(ОбъектКомментарий, "Текст комментария");

КонецПроцедуры

Процедура CLI_GoogleDrive_УдалитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("object" , Идентификатор);
    Опции.Вставить("comment", ИДКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "УдалитьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_GoogleDrive_СоздатьПапку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Google_Token"];
    Каталог = ПараметрыФункции["GD_Catalog"];
    Имя     = "Тестовая папка";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("title"  , Имя);
    Опции.Вставить("catalog", Каталог);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "СоздатьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПапку", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("title"  , Имя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gdrive", "СоздатьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПапку (корень)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура CLI_GoogleSheets_СоздатьКнигу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("title" , Наименование);
    Опции.Вставить("sheets", МассивЛистов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "СоздатьКнигу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

    Книга = Результат["spreadsheetId"];
    Лист  = Результат["sheets"][0]["properties"]["sheetId"];
    Лист  = OPI_Инструменты.ЧислоВСтроку(Лист);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet", Книга);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Sheet"      , Лист);

    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet", Книга, "Строка", ПараметрыФункции);
    OPI_Инструменты.ДобавитьПоле("GS_Sheet"      , Лист , "Строка", ПараметрыФункции);

    Наименование = "Тестовая таблица (доп.)";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("title" , Наименование);
    Опции.Вставить("sheets", МассивЛистов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "СоздатьКнигу", Опции);

    Книга = Результат["spreadsheetId"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet2", Книга);
    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet2", Книга, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_GoogleSheets_ПолучитьКнигу(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GS_Spreadsheet"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Идентификатор);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ПолучитьКнигу", Опции);

    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

КонецПроцедуры

Процедура CLI_GoogleSheets_КопироватьЛист(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Откуда = ПараметрыФункции["GS_Spreadsheet"];
    Куда   = ПараметрыФункции["GS_Spreadsheet2"];
    Лист   = ПараметрыФункции["GS_Sheet"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("from" , Откуда);
    Опции.Вставить("to"   , Куда);
    Опции.Вставить("sheet", Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "КопироватьЛист", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "КопироватьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(Результат);

КонецПроцедуры

Процедура CLI_GoogleSheets_ДобавитьЛист(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовый лист";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("title"      , Наименование);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ДобавитьЛист", Опции);

    НовыйЛист = Результат["replies"][0]["addSheet"]["properties"];

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(НовыйЛист);

КонецПроцедуры

Процедура CLI_GoogleSheets_УдалитьЛист(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = ПараметрыФункции["GS_Sheet"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("sheet"      , Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "УдалитьЛист", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура CLI_GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовая таблица (изм.)";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("title"      , Наименование);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ИзменитьНаименованиеКниги", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьНаименованиеКниги", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура CLI_GoogleSheets_ПолучитьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ПолучитьКнигу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТаблицу", "GoogleSheets");

    Наименование = "Тестовая таблица (изм.)";
    OPI_ПолучениеДанныхТестов.Проверка_ГуглИмяТаблицы(Результат, Наименование);

КонецПроцедуры

Процедура CLI_GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    СоответствиеЗначений = Новый Соответствие;
    СоответствиеЗначений.Вставить("A1", "Это A1");
    СоответствиеЗначений.Вставить("A2", "Это A2");
    СоответствиеЗначений.Вставить("B2", "Это B2");
    СоответствиеЗначений.Вставить("B3", "Это B3");
    СоответствиеЗначений.Вставить("A3", "Это A3");
    СоответствиеЗначений.Вставить("A4", "Это A4");
    СоответствиеЗначений.Вставить("B1", "Это B1");
    СоответствиеЗначений.Вставить("B4", "Это B4");

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("data"       , СоответствиеЗначений);
    Опции.Вставить("sheetname"  , Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "УстановитьЗначенияЯчеек", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбновлениеЯчеек(Результат, СоответствиеЗначений.Количество());

КонецПроцедуры

Процедура CLI_GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("cells"      , МассивЯчеек);
    Опции.Вставить("sheetname"  , Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ПолучитьЗначенияЯчеек", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЗначенияЯчеек(Результат, МассивЯчеек.Количество());

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("sheetname"  , Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ПолучитьЗначенияЯчеек", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗначенияЯчеек (все)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура CLI_GoogleSheets_ОчиститьЯчейки(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];
    Лист  = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("spreadsheet", Книга);
    Опции.Вставить("cells"      , МассивЯчеек);
    Опции.Вставить("sheetname"  , Лист);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("gsheets", "ОчиститьЯчейки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьЯчейки", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОчисткаЯчеек(Результат, МассивЯчеек.Количество());

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура CLI_Twitter_ПолучитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Код       = "123456";

    Опции = Новый Структура;
    Опции.Вставить("code" , Код);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "ПолучитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТокен", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Twitter_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();

    Опции = Новый Структура;
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "ПолучитьСсылкуАвторизации", Опции);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуАвторизации", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_URL", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Twitter_ОбновитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();

    Опции = Новый Структура;
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "ОбновитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьТокен", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТокен(Результат);

    Рефреш = Результат["refresh_token"];
    Токен  = Результат["access_token"];

    Если ЗначениеЗаполнено(Рефреш) И Не Рефреш = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Refresh", Рефреш);
    КонецЕсли;

    Если ЗначениеЗаполнено(Токен) И Не Токен = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Token"  , Токен);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьТекстовыйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text" , Текст);
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТекстовыйТвит", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТекстовыйТвит", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьТвитКартинки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка  = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(Картинка2);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", МассивКартинок);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитКартинки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитКартинки", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", Картинка);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитКартинки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитКартинки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Картинка = OPI_Инструменты.Get(Картинка);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("pictures", Картинка);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитКартинки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитКартинки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьТвитВидео(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Видео  = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу
    Видео2 = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу

    МассивВидео = Новый Массив;
    МассивВидео.Добавить(Видео);
    МассивВидео.Добавить(Видео2);

    Опции = Новый Структура;
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("videos", МассивВидео);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитВидео", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитВидео", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("videos", Видео);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитВидео", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитВидео (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Видео = OPI_Инструменты.Get(Видео);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("videos", Видео);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитВидео", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитВидео (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьТвитГифки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Гифка  = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу
    Гифка2 = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу

    МассивГифок = Новый Массив;
    МассивГифок.Добавить(Гифка);
    МассивГифок.Добавить(Гифка2);

    Опции = Новый Структура;
    Опции.Вставить("text", Текст);
    Опции.Вставить("gifs", МассивГифок);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитГифки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитГифки", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text", Текст);
    Опции.Вставить("gifs", Гифка);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитГифки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитГифки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Гифка = OPI_Инструменты.Get(Гифка);

    Текст = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("text", Текст);
    Опции.Вставить("gifs", Гифка);
    Опции.Вставить("auth", Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитГифки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитГифки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьТвитОпрос(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    МассивОтветов = Новый Массив;
    МассивОтветов.Добавить("Вариант 1");
    МассивОтветов.Добавить("Вариант 2");

    Опции = Новый Структура;
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("options" , МассивОтветов);
    Опции.Вставить("duration", 60);
    Опции.Вставить("auth"    , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьТвитОпрос", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТвитОпрос", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура CLI_Twitter_СоздатьПроизвольныйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив();
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Опции = Новый Структура;
    Опции.Вставить("files", МассивКартинок);
    Опции.Вставить("type" , "tweet_image");
    Опции.Вставить("auth" , Параметры);

    МассивМедиа = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "ЗагрузитьМассивВложений", Опции);

    Опции = Новый Структура;
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("media" , МассивМедиа);
    Опции.Вставить("auth"  , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "СоздатьПроизвольныйТвит", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПроизвольныйТвит", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура CLI_Twitter_ЗагрузитьМассивВложений(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив();
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Опции = Новый Структура;
    Опции.Вставить("files", МассивКартинок);
    Опции.Вставить("type" , "tweet_image");
    Опции.Вставить("auth" , Параметры);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("twitter", "ЗагрузитьМассивВложений", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьМассивВложений", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура CLI_Notion_СоздатьСтраницу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("page" , Родитель);
    Опции.Вставить("title", Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "СоздатьСтраницу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

    Страница = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Page", Страница);
    OPI_Инструменты.ДобавитьПоле("Notion_Page", Страница, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Notion_СоздатьБазуДанных(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"            , "title");
    Свойства.Вставить("Описание"       , "rich_text");
    Свойства.Вставить("Номер"          , "number");
    Свойства.Вставить("Статус"         , "status");
    Свойства.Вставить("Дата создания"  , "date");
    Свойства.Вставить("Картинка"       , "files");
    Свойства.Вставить("Активен"        , "checkbox");
    Свойства.Вставить("Сайт"           , "url");
    Свойства.Вставить("Почта"          , "email");
    Свойства.Вставить("Телефон"        , "phone_number");
    Свойства.Вставить("Пользователь"   , "people");

    ВыборЗначения = Новый Соответствие;
    ВыборЗначения.Вставить("Новый"    , "green");
    ВыборЗначения.Вставить("В работе" , "yellow");
    ВыборЗначения.Вставить("Удаленный", "red");

    Свойства.Вставить("Статус", ВыборЗначения);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("page" , Родитель);
    Опции.Вставить("title", Заголовок);
    Опции.Вставить("props", Свойства);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "СоздатьБазуДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Base", База);
    OPI_Инструменты.ДобавитьПоле("Notion_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Notion_ИзменитьСвойстваБазы(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    База  = ПараметрыФункции["Notion_Base"];

    Заголовок = "Тестовый заголовок";
    Описание  = "Тестовое описание";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Почта", "rich_text"); // Тип поля "Почта" будет изменен с email на текст
    Свойства.Вставить("Сайт");               // Поле "Сайт" будет удалено

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("base"       , База);
    Опции.Вставить("props"      , Свойства);
    Опции.Вставить("title"      , Заголовок);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ИзменитьСвойстваБазы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСвойстваБазы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура CLI_Notion_ПолучитьСтраницу(ПараметрыФункции)

    Токен    = ПараметрыФункции["Notion_Token"];
    Страница = ПараметрыФункции["Notion_Page"];

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("page"       , Страница);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ПолучитьСтраницу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура CLI_Notion_ПолучитьБазуДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    База  = ПараметрыФункции["Notion_Base"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("base" , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ПолучитьБазуДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура CLI_Notion_СоздатьСтраницуВБазу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    База      = ПараметрыФункции["Notion_Base"];
    Картинка_ = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу

    Картинка = Новый Соответствие;
    Картинка.Вставить("Лого", Картинка_);

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"               , "ООО Вектор");
    Свойства.Вставить("Описание"          , "Наш первый клиент");
    Свойства.Вставить("Номер"             , 1);
    Свойства.Вставить("Статус"            , "Обычный");
    Свойства.Вставить("Дата создания"     , OPI_Инструменты.ПолучитьТекущуюДату());
    Свойства.Вставить("Картинка"          , Картинка);
    Свойства.Вставить("Активен"           , Истина);
    Свойства.Вставить("Сайт"              , "https://vector.ru");
    Свойства.Вставить("Почта"             , "mail@vector.ru");
    Свойства.Вставить("Телефон"           , "88005553535");
    Свойства.Вставить("Статус"            , "Новый");

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("base" , База);
    Опции.Вставить("data" , Свойства);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "СоздатьСтраницуВБазу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСтраницуВБазу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнСтраницаБазы(Результат, База);

КонецПроцедуры

Процедура CLI_Notion_ИзменитьСвойстваСтраницы(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Страница     = ПараметрыФункции["Notion_Page"];
    Иконка       = ПараметрыФункции["Picture"];
    Обложка      = ПараметрыФункции["Picture2"];
    Архивировать = Ложь;

    Свойства = Новый Соответствие;
    Свойства.Вставить("Активен"     , Ложь);
    Свойства.Вставить("Почта"       , "vector@mail.ru");

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("page"   , Страница);
    Опции.Вставить("data"   , Свойства);
    Опции.Вставить("icon"   , Иконка);
    Опции.Вставить("cover"  , Обложка);
    Опции.Вставить("archive", Архивировать);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ИзменитьСвойстваСтраницы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСвойстваСтраницы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура CLI_Notion_ВернутьБлок(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_Block"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("block" , Блок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ВернутьБлок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВернутьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура CLI_Notion_СоздатьБлок(ПараметрыФункции)

    Токен    = ПараметрыФункции["Notion_Token"];
    Родитель = ПараметрыФункции["Notion_Parent"];
    Блок     = ПараметрыФункции["Notion_Block"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("block" , Блок);

    ДанныеБлока = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ВернутьБлок", Опции);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("page"  , Родитель);
    Опции.Вставить("block" , ДанныеБлока);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "СоздатьБлок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

    Блок = Результат["results"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_NewBlock", Блок);
    OPI_Инструменты.ДобавитьПоле("Notion_NewBlock", Блок, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Notion_ВернутьДочерниеБлоки(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_NewBlock"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("block" , Блок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ВернутьДочерниеБлоки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВернутьДочерниеБлоки", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура CLI_Notion_УдалитьБлок(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    Блок  = ПараметрыФункции["Notion_NewBlock"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("block" , Блок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "УдалитьБлок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура CLI_Notion_СписокПользователей(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "СписокПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СписокПользователей", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура CLI_Notion_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Пользователь = ПараметрыФункции["Notion_User"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("user"  , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("notion", "ПолучитьДанныеПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеПользователя", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "user");

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура CLI_Slack_ПолучитьИнформациюОБоте(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьИнформациюОБоте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОБоте", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакБот(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокПользователей(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователи(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокРабочихОбластей(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокРабочихОбластей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокРабочихОбластей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОбласти(Результат);

КонецПроцедуры

Процедура CLI_Slack_ОтправитьСообщение(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    // Текстовое

    Текст = "Тестовое сообщение 1";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОтправитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);

    Отметка = Результат["ts"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_MessageTS", Отметка);
    OPI_Инструменты.ДобавитьПоле("Slack_MessageTS", Отметка, "Строка", ПараметрыФункции);

    // С вложениями (в примере: блок с картинкой)

    Текст        = "Сообщение с картинкой";
    Картинка     = ПараметрыФункции["Picture"];
    МассивБлоков = Новый Массив;

    Опции = Новый Структура;
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("alt"    , "Картинка");

    Блок = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СформироватьБлокКартинку", Опции);

    МассивБлоков.Добавить(Блок);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("blocks" , МассивБлоков);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОтправитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение (картинка)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);

    // Отложенное

    Текст = "Отложенное сообщение";
    Час   = 3600;
    Сутки = 24;

    ДатаОтправки = OPI_Инструменты.ПолучитьТекущуюДату() + (Сутки * Час);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("date"   , ДатаОтправки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОтправитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенноеСообщение(Результат, Канал);

    Отметка   = Результат["scheduled_message_id"];
    Результат = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_СформироватьБлокКартинку(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];

    Опции = Новый Структура;
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("alt"    , "Картинка");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СформироватьБлокКартинку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьБлокКартинку", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Slack_ИзменитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Текст = "Тестовое сообщение 2";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("stamp"  , Отметка);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ИзменитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("stamp"  , Отметка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокОтветовНаСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОтветовНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщения(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСсылкуНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("stamp"  , Отметка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСсылкуНаСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСсылкаСообщения(Результат, Канал);

КонецПроцедуры

Процедура CLI_Slack_УдалитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("stamp"  , Отметка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "УдалитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ОтправитьЭфемерноеСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_Channel"];
    Пользователь = ПараметрыФункции["Slack_User"];
    Картинка     = ПараметрыФункции["Picture"];
    Текст        = "Эфимерное сообщение";

    Опции = Новый Структура;
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("alt"    , "Картинка");

    Блок = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СформироватьБлокКартинку", Опции);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("user"   , Пользователь);
    Опции.Вставить("blocks" , Блок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОтправитьЭфемерноеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьЭфемерноеСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакЭфемерное(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокОтложенныхСообщений", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОтложенныхСообщений", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенные(Результат);

КонецПроцедуры

Процедура CLI_Slack_СоздатьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Имя   = "testconv" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("title"  , Имя);
    Опции.Вставить("private", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СоздатьКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Имя);

    Канал = Результат["channel"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannel", Канал);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannel", Канал, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannelName", Имя);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannelName", Имя, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Slack_УстановитьТемуКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Тема  = "Тестовая тема";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("theme"  , Тема);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "УстановитьТемуКанала", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьТемуКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакТемаКанала(Результат, Тема);

КонецПроцедуры

Процедура CLI_Slack_УстановитьЦельКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Цель  = "Тестовая цель";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("purpose", Цель);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "УстановитьЦельКанала", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьЦельКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура CLI_Slack_ПригласитьПользователейВКанал(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("users"  , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПригласитьПользователейВКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПригласитьПользователейВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура CLI_Slack_ВыгнатьПользователяИзКанала(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("user"   , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ВыгнатьПользователяИзКанала", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыгнатьПользователяИзКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьИсториюКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьИсториюКанала", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИсториюКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакИсторияКанала(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокПользователейКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокПользователейКанала", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователейКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователиКанала(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПокинутьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПокинутьКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПокинутьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ВступитьВКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ВступитьВКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВступитьВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура CLI_Slack_ПереименоватьКанал(ПараметрыФункции)

    Токен    = ПараметрыФункции["Slack_Token"];
    Канал    = ПараметрыФункции["Slack_NewChannel"];
    Название = "testconv" + Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);
    Опции.Вставить("title"  , Название);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПереименоватьКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Название);

КонецПроцедуры

Процедура CLI_Slack_АрхивироватьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "АрхивироватьКанал", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "АрхивироватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокКаналов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокКаналов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКаналов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокКаналов(Результат);

КонецПроцедуры

Процедура CLI_Slack_ОткрытьДиалог(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("users", Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОткрытьДиалог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакДиалог(Результат);

    Диалог = Результат["channel"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_Dialog", Диалог);
    OPI_Инструменты.ДобавитьПоле("Slack_Dialog", Диалог, "Строка", ПараметрыФункции);

    Результат = OPI_Slack.ОтправитьСообщение(Токен, Диалог, "Тест диалог");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение (диалог)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ЗакрытьДиалог(ПараметрыФункции)

    Токен  = ПараметрыФункции["Slack_Token"];
    Диалог = ПараметрыФункции["Slack_Dialog"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("conv" , Диалог);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ЗакрытьДиалог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("channel", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура CLI_Slack_ЗагрузитьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];
    Файл  = ПараметрыФункции["Document"]; // URL, Двоичные данные или Путь к файлу

    ИмяФайла  = "megadoc.docx";
    Заголовок = "Новый файл";

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("file"    , Файл);
    Опции.Вставить("filename", ИмяФайла);
    Опции.Вставить("title"   , Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл"       , "Slack");
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СделатьФайлПубличным", "Slack");
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СделатьФайлПриватным", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);

    ЗагруженныйФайл = Результат["files"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_FileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_FileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("file"    , Файл);
    Опции.Вставить("filename", ИмяФайла);
    Опции.Вставить("title"   , Заголовок);
    Опции.Вставить("channel" , Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл (в канал)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);
    OPI_Slack.УдалитьФайл(Токен, Результат["files"][0]["id"]);

КонецПроцедуры

Процедура CLI_Slack_СделатьФайлПубличным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СделатьФайлПубличным", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Slack_СделатьФайлПриватным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "СделатьФайлПриватным", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьДанныеФайла(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьДанныеФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеФайла", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, "megadoc.docx");

КонецПроцедуры

Процедура CLI_Slack_УдалитьФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "УдалитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьСписокВнешнихФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("channel" , Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокВнешнихФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокВнешнихФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьСписокВнешнихФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокВнешнихФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура CLI_Slack_ДобавитьВнешнийФайл(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Заголовок = "Новый файл";
    Файл      = ПараметрыФункции["Document"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("url"   , Файл);
    Опции.Вставить("title" , Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ДобавитьВнешнийФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, Заголовок);

    ЗагруженныйФайл = Результат["file"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_ExtFileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_ExtFileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Slack_ПолучитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("fileid", ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ПолучитьВнешнийФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, "Новый файл");

КонецПроцедуры

Процедура CLI_Slack_ОтправитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    Канал              = ПараметрыФункции["Slack_Channel"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , ИдентификаторФайла);
    Опции.Вставить("channels", Канал);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "ОтправитьВнешнийФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура CLI_Slack_УдалитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("fileid", ИдентификаторФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("slack", "УдалитьВнешнийФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура CLI_Airtable_СоздатьБазу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    Область      = ПараметрыФункции["Airtable_Workspace"];
    Наименование = "Тестовая база";

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));

    ИмяТаблицы = "Тестовая таблица";

    СоответствиеТаблиц = Новый Соответствие;
    СоответствиеТаблиц.Вставить(ИмяТаблицы, МассивПолей);

    Опции = Новый Структура;
    Опции.Вставить("token"     , Токен);
    Опции.Вставить("ws"        , Область);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("tablesdata", СоответствиеТаблиц);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьБазу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБазу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТБазаСТаблицей(Результат, ИмяТаблицы);

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Base", База);
    OPI_Инструменты.ДобавитьПоле("Airtable_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьТаблицыБазы(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    Опции = Новый Структура;
    Опции.Вставить("token"     , Токен);
    Опции.Вставить("base"      , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьТаблицыБазы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТаблицыБазы", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокТаблиц(Результат);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьСписокБаз(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьСписокБаз", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокБаз", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокБаз(Результат);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеНомера(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Номер");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеНомера", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеНомера", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеСтроковое(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Строковое");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеСтроковое", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеСтроковое", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеВложения(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Вложение");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеВложения", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеВложения", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеФлажка(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Флажок");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеФлажка", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеФлажка", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеДаты(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Дата");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеДаты", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеДаты", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеТелефона(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Телефон");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеТелефона", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеТелефона", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеПочты(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Почта");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеПочты", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеПочты", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьПолеСсылки(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("title", "Ссылка");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеСсылки", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПолеСсылки", "Airtable");

КонецПроцедуры

Процедура CLI_Airtable_СоздатьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеВложения("Вложение"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеФлажка("Флажок"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеДаты("Дата"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеТелефона("Телефон"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеПочты("Почта"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСсылки("Ссылка"));

    Наименование = "Тестовая таблица 2";
    Описание     = "Новая таблица";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("base"       , База);
    Опции.Вставить("title"      , Наименование);
    Опции.Вставить("fieldsdata" , МассивПолей);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

    Таблица = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Table", Таблица);
    OPI_Инструменты.ДобавитьПоле("Airtable_Table", Таблица, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Airtable_ИзменитьТаблицу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    База         = ПараметрыФункции["Airtable_Base"];
    Таблица      = ПараметрыФункции["Airtable_Table"];
    Наименование = "Тестовая таблица 2 (изм.)";
    Описание     = "Новая таблица (изм.)";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("base"       , База);
    Опции.Вставить("table"      , Таблица);
    Опции.Вставить("title"      , Наименование);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ИзменитьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

КонецПроцедуры

Процедура CLI_Airtable_СоздатьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Имя     = Строка(Новый УникальныйИдентификатор);

    Опции = Новый Структура;
    Опции.Вставить("title", Имя);

    Поле = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьПолеНомера", Опции);

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("base"     , База);
    Опции.Вставить("table"    , Таблица);
    Опции.Вставить("title"    , Имя);
    Опции.Вставить("fielddata", Поле);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьПоле", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТПоле(Результат, Имя);

    Поле = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Field", Поле);
    OPI_Инструменты.ДобавитьПоле("Airtable_Field", Поле, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Airtable_ИзменитьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Поле    = ПараметрыФункции["Airtable_Field"];

    Имя      = Строка(Новый УникальныйИдентификатор) + "(изм.)";
    Описание = "Новое описание";

    Опции = Новый Структура;
    Опции.Вставить("token"      , Токен);
    Опции.Вставить("base"       , База);
    Опции.Вставить("table"      , Таблица);
    Опции.Вставить("field"      , Поле);
    Опции.Вставить("title"      , Имя);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ИзменитьПоле", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Имя, Описание);

КонецПроцедуры

Процедура CLI_Airtable_СоздатьЗаписи(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];

    Номер     = 10;
    Строковое = "Привет";

    ОписаниеСтроки1 = Новый Структура("Номер,Строковое", Номер, Строковое);
    ОписаниеСтроки2 = Новый Структура("Номер,Строковое", Номер, Строковое);

    МассивОписаний = Новый Массив;
    МассивОписаний.Добавить(ОписаниеСтроки1);
    МассивОписаний.Добавить(ОписаниеСтроки2);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("base"  , База);
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("data"  , МассивОписаний);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

    МассивУдаляемых = Новый Массив;

    Для Каждого Запись Из Результат["records"] Цикл

        ТекущаяЗапись = Запись["id"];
        МассивУдаляемых.Добавить(ТекущаяЗапись);

    КонецЦикла;

    OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, МассивУдаляемых);

    // Одиночное

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("base"  , База);
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("data"  , ОписаниеСтроки1);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗаписи (одна)");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписьНомерСтрока(Результат, Номер, Строковое);

    Запись = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Record", Запись);
    OPI_Инструменты.ДобавитьПоле("Airtable_Record", Запись, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьЗапись(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("base"  , База);
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("record", Запись);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьЗапись", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗапись", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗапись(Результат, Запись);

КонецПроцедуры

Процедура CLI_Airtable_СоздатьКомментарий(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];
    Текст   = "Тестовый комментарий";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("base"  , База);
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("record", Запись);
    Опции.Вставить("text"  , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "СоздатьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

    Комментарий = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Comment", Комментарий);
    OPI_Инструменты.ДобавитьПоле("Airtable_Comment", Комментарий, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_Airtable_ИзменитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Текст = "Тестовый комментарий (изм.)";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("base"   , База);
    Опции.Вставить("table"  , Таблица);
    Опции.Вставить("record" , Запись);
    Опции.Вставить("comment", Комментарий);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ИзменитьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьКомментарии(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("base"   , База);
    Опции.Вставить("table"  , Таблица);
    Опции.Вставить("record" , Запись);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьКомментарии", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКомментарии", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТКомментарии(Результат);

КонецПроцедуры

Процедура CLI_Airtable_УдалитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("base"   , База);
    Опции.Вставить("table"  , Таблица);
    Опции.Вставить("record" , Запись);
    Опции.Вставить("comment", Комментарий);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "УдалитьКомментарий", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТУдалениеКомментария(Результат, Комментарий);

КонецПроцедуры

Процедура CLI_Airtable_ПолучитьСписокЗаписей(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("base"   , База);
    Опции.Вставить("table"  , Таблица);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "ПолучитьСписокЗаписей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЗаписей", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

Процедура CLI_Airtable_УдалитьЗаписи(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("base"   , База);
    Опции.Вставить("table"  , Таблица);
    Опции.Вставить("records", Запись);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("airtable", "УдалитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура CLI_Dropbox_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    КлючПриложения = ПараметрыФункции["Dropbox_Appkey"];

    Опции = Новый Структура;
    Опции.Вставить("appkey", КлючПриложения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСсылкуАвторизации", Опции);
    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуАвторизации", "Dropbox");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка");

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    Код              = ПараметрыФункции["Dropbox_Code"];

    Опции = Новый Структура;
    Опции.Вставить("appkey"   , КлючПриложения);
    Опции.Вставить("appsecret", СекретПриложения);
    Опции.Вставить("code"     , Код);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТокен");

    Токен  = Результат["access_token"];
    Рефреш = Результат["refresh_token"];

    Если ЗначениеЗаполнено(Токен) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);
    КонецЕсли;

    Если ЗначениеЗаполнено(Рефреш) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Refresh", Рефреш);
    КонецЕсли;

КонецПроцедуры

Процедура CLI_Dropbox_ОбновитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    РефрешТокен      = ПараметрыФункции["Dropbox_Refresh"];

    Опции = Новый Структура;
    Опции.Вставить("appkey"   , КлючПриложения);
    Опции.Вставить("appsecret", СекретПриложения);
    Опции.Вставить("refresh"  , РефрешТокен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ОбновитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьТокен");

    Токен = Результат["access_token"];

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Токен).Заполнено();

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Путь  = "/New/pic.png";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);
    Опции.Вставить("detail", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьИнформациюОбОбъекте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОбОбъекте", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьПревью(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьПревью", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПревью", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 120000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ЗагрузитьФайл(ПараметрыФункции)

    Путь     = "/New/pic.png";
    Токен    = ПараметрыФункции["Dropbox_Token"];
    Картинка = ПараметрыФункции["Picture"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("file"     , КартинкаПуть);
    Опции.Вставить("path"     , Путь);
    Опции.Вставить("overwrite", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);
    УдалитьФайлы(КартинкаПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Путь  = "/New/url_doc.docx";
    Токен = ПараметрыФункции["Dropbox_Token"];
    URL   = ПараметрыФункции["Document"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("url"     , URL);
    Опции.Вставить("path"    , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ЗагрузитьФайлПоURL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлПоURL", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксРабота(Результат);

    Работа = Результат["async_job_id"];

    ПараметрыФункции.Вставить("Dropbox_Job", Работа);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Job", Работа);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    ИДРаботы = ПараметрыФункции["Dropbox_Job"];
    Статус   = "in_progress";

    Пока Статус = "in_progress" Цикл

        Опции = Новый Структура;
        Опции.Вставить("token"   , Токен);
        Опции.Вставить("job"     , ИДРаботы);

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСтатусЗагрузкиПоURL", Опции);
        Статус    = Результат[".tag"];

        OPI_Инструменты.Пауза(5);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусЗагрузкиПоURL", "Dropbox");

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    Путь = "/New/url_doc.docx";

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("path"    , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_УдалитьОбъект(ПараметрыФункции)

    Путь  = "/New/pic.png";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("path"    , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_КопироватьОбъект(ПараметрыФункции)

    Оригинал = "/New/pic.png";
    Копия    = "/New/pic_copy.png";
    Токен    = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("from"  , Оригинал);
    Опции.Вставить("to"    , Копия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "КопироватьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "КопироватьОбъект", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Копия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПереместитьОбъект(ПараметрыФункции)

    ОригиналныйПуть = "/New/pic.png";
    ЦелевойПуть     = "/pic.png";
    Токен           = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("from"  , ОригиналныйПуть);
    Опции.Вставить("to"    , ЦелевойПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПереместитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьОбъект", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ЦелевойПуть);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("from"  , ЦелевойПуть);
    Опции.Вставить("to"    , ОригиналныйПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПереместитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ОригиналныйПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_СоздатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/Новый каталог";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "СоздатьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПапку", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "УдалитьОбъект", Опции);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_СкачатьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/pic.png";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "СкачатьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкачатьФайл", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 2000000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_СкачатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "СкачатьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкачатьПапку", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьСписокФайловПапки(ПараметрыФункции)

    Путь  = "/New";
    Токен = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСписокФайловПапки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайловПапки", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/pic.png";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);
    Опции.Вставить("amount", 1);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСписокВерсийОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокВерсийОбъекта", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат, 1);

    Ревизия = Результат["entries"][0]["rev"];

    ПараметрыФункции.Вставить("Dropbox_FileRevision", Ревизия);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_FileRevision", Ревизия);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ВосстановитьОбъектКВерсии(ПараметрыФункции)

    Версия = ПараметрыФункции["Dropbox_FileRevision"];
    Токен  = ПараметрыФункции["Dropbox_Token"];
    Путь   = "/New/pic.png";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);
    Опции.Вставить("rev"   , Версия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ВосстановитьОбъектКВерсии", Опции);

    OPI_Инструменты.Пауза(30);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьОбъектКВерсии", "Dropbox");

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьСписокТегов(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    МассивПутей = Новый Массив;
    МассивПутей.Добавить("/New/Dogs.mp3");
    МассивПутей.Добавить("/New/mydoc.docx");

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("paths" , МассивПутей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСписокТегов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТегов", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, МассивПутей.Количество());

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("paths" , "/New/mydoc.docx");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСписокТегов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТегов (одиночный)");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, 1);

    ЕстьТег = Ложь;

    Для Каждого Тег Из Результат["paths_to_tags"][0]["tags"] Цикл
        Если Тег["tag_text"] = "важное" Тогда
            ЕстьТег = Истина;
        КонецЕсли;
    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ЕстьТег).Равно(Истина);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ДобавитьТег(ПараметрыФункции)

    Тег   = "Важное";
    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);
    Опции.Вставить("tag"   , Тег);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьТег", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьТег", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_УдалитьТег(ПараметрыФункции)

    Тег   = "Важное";
    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New/mydoc.docx";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("path"  , Путь);
    Опции.Вставить("tag"   , Тег);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьТег", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТег", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьИнформациюОбАккаунте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОбАккаунте", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("account", Результат["account_id"]);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьИнформациюОбАккаунте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОбАккаунте (сторонний)");
    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьДанныеИспользованияПространства", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеИспользованияПространства", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксПространство(Результат);

КонецПроцедуры

Процедура CLI_Dropbox_ДобавитьПользователейКФайлу(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Почта = ПараметрыФункции["Dropbox_OtherUser"];
    Файл  = ПараметрыФункции["Dropbox_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , Файл);
    Опции.Вставить("emails"  , Почта);
    Опции.Вставить("readonly", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьПользователейКФайлу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПользователейКФайлу", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Ложь);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , Файл);
    Опции.Вставить("emails"  , Почты);
    Опции.Вставить("readonly", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьПользователейКФайлу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПользователейКФайлу (доп.) ");
    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Истина);

КонецПроцедуры

Процедура CLI_Dropbox_ОпубликоватьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Путь  = "/New";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ОпубликоватьПапку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОпубликоватьПапку", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксПубличнаяПапка(Результат);

    IDПапки = Результат["shared_folder_id"];

    ПараметрыФункции.Вставить("Dropbox_SharedFolder", IDПапки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_SharedFolder", IDПапки);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ОтменитьПубликациюПапки(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Папка = ПараметрыФункции["Dropbox_SharedFolder"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("folder", Папка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ОтменитьПубликациюПапки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтменитьПубликациюПапки", "Dropbox");

    ТекущийСтатус = "in_progress";
    IDРаботы      = Результат["async_job_id"];

    Пока ТекущийСтатус = "in_progress" Цикл

        Опции = Новый Структура;
        Опции.Вставить("token" , Токен);
        Опции.Вставить("job"   , IDРаботы);

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСтатусАсинхронногоИзменения", Опции);

        ТекущийСтатус = Результат[".tag"];
        OPI_Инструменты.Пауза(3);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусАсинхронногоИзменения", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    ПараметрыФункции.Вставить("Dropbox_NewJobID", IDРаботы);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_NewJobID", IDРаботы);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    IDРаботы = ПараметрыФункции["Dropbox_NewJobID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("job"  , IDРаботы);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ПолучитьСтатусАсинхронногоИзменения", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Dropbox_ДобавитьПользователейКПапке(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Почта = ПараметрыФункции["Dropbox_OtherUser"];
    Папка = ПараметрыФункции["Dropbox_SharedFolder"]; // shared_folder_id

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("folder"  , Папка);
    Опции.Вставить("emails"  , Почта);
    Опции.Вставить("readonly", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьПользователейКПапке", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПользователейКПапке", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("folder"  , Папка);
    Опции.Вставить("emails"  , Почты);
    Опции.Вставить("readonly", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ДобавитьПользователейКПапке", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_Dropbox_ОтменитьПубликациюФайла(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Файл  = ПараметрыФункции["Dropbox_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("fileid"  , Файл);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("dropbox", "ОтменитьПубликациюФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтменитьПубликациюФайла", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

#КонецОбласти

#Область VKTeams

Процедура CLI_VKTeams_ПроверитьТокен(ПараметрыФункции)

    Токен = ПараметрыФункции["VkTeams_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПроверитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьТокен", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьСобытия(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDПоследнего = 0;

    Для Н = 1 По 5 Цикл // В реальной работе - бесконечный цикл

        Опции = Новый Структура;
        Опции.Вставить("token"  , Токен);
        Опции.Вставить("last"   , IDПоследнего);
        Опции.Вставить("timeout", 3);

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьСобытия", Опции);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытия", "VkTeams");
        OPI_ПолучениеДанныхТестов.Проверка_ВКТСобытия(Результат);

        События = Результат["events"];

        // Обработка событий...

        Если Не События.Количество() = 0 Тогда

            IDПоследнего = События[События.ВГраница()]["eventId"];

        КонецЕсли;

    КонецЦикла;

    OPI_Инструменты.Пауза(3);

КонецПроцедуры

Процедура CLI_VKTeams_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];
    Текст  = "Текст сообщения";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("chatid", IDЧата);
    Опции.Вставить("text"  , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение (простое)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];
    Текст         = "<b>Полужирный текст сообщения</b>";
    Разметка      = "HTML";

    Клавиатура         = Новый Массив;
    МассивСтрокиКнопок = Новый Массив;

    Опции = Новый Структура;
    Опции.Вставить("text" , "Кнопка1");
    Опции.Вставить("data" , "НажатиеКнопки1");
    Опции.Вставить("style", "attention");

    Кнопка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "СформироватьКнопкуДействия", Опции);
    МассивСтрокиКнопок.Добавить(Кнопка);

    Опции = Новый Структура;
    Опции.Вставить("text" , "Кнопка2");
    Опции.Вставить("url"  , "https://openintegrations.dev");

    Кнопка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "СформироватьКнопкуДействия", Опции);
    МассивСтрокиКнопок.Добавить(Кнопка);

    Клавиатура.Добавить(МассивСтрокиКнопок);
    Клавиатура.Добавить(МассивСтрокиКнопок);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("chatid"  , IDЧата);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("reply"   , IDЦитируемого);
    Опции.Вставить("keyboard", Клавиатура);
    Опции.Вставить("parsemod", Разметка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьТекстовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьТекстовоеСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    IDСообщения = Результат["msgId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_MessageID", IDСообщения);
    ПараметрыФункции.Вставить("VkTeams_MessageID", IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_ПереслатьСообщение(ПараметрыФункции)

    Токен           = ПараметрыФункции["VkTeams_Token"];
    IDЧата          = ПараметрыФункции["VkTeams_ChatID"];
    IDЧатаИсточника = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения     = ПараметрыФункции["VkTeams_MessageID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("messageid", IDСообщения);
    Опции.Вставить("fromid"   , IDЧатаИсточника);
    Опции.Вставить("chatid"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПереслатьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереслатьСообщение (простое)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    Текст = "Дополнительный текст";

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("messageid", IDСообщения);
    Опции.Вставить("fromid"   , IDЧатаИсточника);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("text"     , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПереслатьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереслатьСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ОтправитьФайл(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];
    Текст  = "Подпись к файлу";

    Файл     = ПараметрыФункции["Document"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("docx");  // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("file"     , Файл);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл (URL)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("file"     , ФайлПуть);
    Опции.Вставить("text"     , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл (Путь)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("file"     , ФайлДД);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("filename" , "ВажныйДокумент.docx");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_FileID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_ПереслатьФайл(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла = ПараметрыФункции["VkTeams_FileID"];
    Текст   = "Подпись к файлу";

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("fileid"   , IDФайла);
    Опции.Вставить("text"     , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПереслатьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереслатьФайл", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьИнформациюОФайле(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDФайла = ПараметрыФункции["VkTeams_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("fileid"   , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьИнформациюОФайле", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОФайле", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТФайл(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ИзменитьТекстСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];
    Текст       = "Новый текст сообщения";

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("messageid", IDСообщения);
    Опции.Вставить("text"     , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ИзменитьТекстСообщения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТекстСообщения (простое)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    Текст    = "<b>Новый полужирный текст сообщения</b>";
    Разметка = "HTML";

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("messageid", IDСообщения);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("parsemod" , Разметка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ИзменитьТекстСообщения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТекстСообщения", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_УдалитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Опции = Новый Структура;
    Опции.Вставить("token"    , Токен);
    Опции.Вставить("chatid"   , IDЧата);
    Опции.Вставить("messageid", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "УдалитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_ОтправитьГолосовоеСообщение(ПараметрыФункции)

    Токен         = ПараметрыФункции["VkTeams_Token"];
    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];

    Файл     = ПараметрыФункции["Audio2"]  ;        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("m4a");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("chatid", IDЧата);
    Опции.Вставить("file"  , Файл);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьГолосовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьГолосовоеСообщение (URL)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("chatid", IDЧата);
    Опции.Вставить("file"  , ФайлПуть);
    Опции.Вставить("reply" , IDЦитируемого);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтправитьГолосовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьГолосовоеСообщение (Путь)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_VoiceID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_VoiceID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_VKTeams_ПереслатьГолосовоеСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла = ПараметрыФункции["VkTeams_VoiceID"];

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("chatid", IDЧата);
    Опции.Вставить("fileid", IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПереслатьГолосовоеСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереслатьГолосовоеСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ИсключитьПользователейЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("members", Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ИсключитьПользователейЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИсключитьПользователейЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ИзменитьАватарЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Файл     = ПараметрыФункции["Picture3"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("png");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("file"   , Файл);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ИзменитьАватарЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьАватарЧата (URL)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("file"   , ФайлПуть);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ИзменитьАватарЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьАватарЧата (Путь)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    УдалитьФайлы(ФайлПуть);

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьИнформациюОЧате(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьИнформациюОЧате", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОЧате", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТЧат(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьАдминистраторовЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьАдминистраторовЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьАдминистраторовЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "admins");

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьПользователейЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьПользователейЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользователейЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "members");

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьЗаблокированныхПользователейЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаблокированныхПользователейЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура CLI_VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ПолучитьЗапросыВступленияЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗапросыВступленияЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура CLI_VKTeams_ЗаблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("userid" , Пользователь);
    Опции.Вставить("dellast", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ЗаблокироватьПользователяЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗаблокироватьПользователяЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_РазблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("userid" , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "РазблокироватьПользователяЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "РазблокироватьПользователяЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ЗакрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Опции = Новый Структура;
    Опции.Вставить("token"     , Токен);
    Опции.Вставить("chatid"    , IDЧата);
    Опции.Вставить("messageid" , IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ЗакрепитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗакрепитьСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ОткрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Опции = Новый Структура;
    Опции.Вставить("token"     , Токен);
    Опции.Вставить("chatid"    , IDЧата);
    Опции.Вставить("messageid" , IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОткрепитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОткрепитьСообщение", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("userid" , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОдобритьЗаявкуНаВступление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОдобритьЗаявкуНаВступление (один)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОдобритьЗаявкуНаВступление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОдобритьЗаявкуНаВступление", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("userid" , Пользователь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтклонитьЗаявкуНаВступление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтклонитьЗаявкуНаВступление (один)", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "ОтклонитьЗаявкуНаВступление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтклонитьЗаявкуНаВступление", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_УстановитьЗаголовокЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Новый заголовок";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "УстановитьЗаголовокЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьЗаголовокЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_УстановитьОписаниеЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Новое описание";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "УстановитьОписаниеЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьОписаниеЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_УстановитьПравилаЧата(ПараметрыФункции)

    Токен  = ПараметрыФункции["VkTeams_Token"];
    IDЧата = ПараметрыФункции["VkTeams_ChatID2"];
    Текст  = "Текст новых правил";

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("chatid" , IDЧата);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "УстановитьПравилаЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьПравилаЧата", "VkTeams");
    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура CLI_VKTeams_СформироватьКнопкуДействия(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("text"   , "Кнопка1");
    Опции.Вставить("data"   , "НажатиеКнопки1");
    Опции.Вставить("style"  , "attention");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("vkteams", "УстановитьПравилаЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьКнопкуДействия", "VkTeams");

КонецПроцедуры

#КонецОбласти

#Область Ozon

Процедура CLI_Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);
    Опции.Вставить("lang"    , "EN");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьДеревоКатегорийИТиповТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДеревоКатегорийИТиповТоваров (EN)", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат);

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьДеревоКатегорийИТиповТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДеревоКатегорийИТиповТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьХарактеристикиКатегории(ПараметрыФункции)

    IDКлиента   = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI     = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории = 17029016;
    IDТипа      = 970778135;

    Опции = Новый Структура;
    Опции.Вставить("clientid"  , IDКлиента);
    Опции.Вставить("apikey"    , КлючAPI);
    Опции.Вставить("categoryid", IDКатегории);
    Опции.Вставить("typeid"    , IDТипа);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьХарактеристикиКатегории", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьХарактеристикиКатегории", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокХарактеристик(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;

    Опции = Новый Структура;
    Опции.Вставить("clientid"   , IDКлиента);
    Опции.Вставить("apikey"     , КлючAPI);
    Опции.Вставить("categoryid" , IDКатегории);
    Опции.Вставить("typeid"     , IDТипа);
    Опции.Вставить("attributeid", IDХарактеристики);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьЗначенияХарактеристики", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗначенияХарактеристики", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура CLI_Ozon_НайтиЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;
    Значение         = "Sunshine";

    Опции = Новый Структура;
    Опции.Вставить("clientid"   , IDКлиента);
    Опции.Вставить("apikey"     , КлючAPI);
    Опции.Вставить("categoryid" , IDКатегории);
    Опции.Вставить("typeid"     , IDТипа);
    Опции.Вставить("attributeid", IDХарактеристики);
    Опции.Вставить("value"      , Значение);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "НайтиЗначенияХарактеристики", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НайтиЗначенияХарактеристики", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруТовара(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_СоздатьОбновитьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];
    Видео     = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    // Стандартные реквизиты

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210609");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1300");
    СтруктураТовара.Вставить("old_price"              , "1300");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");
    СтруктураТовара.Вставить("images"                 , МассивКартинок);

    // Видео

    Опции = Новый Структура;
    Опции.Вставить("item"   , СтруктураТовара);
    Опции.Вставить("url"    , Видео);
    Опции.Вставить("title"  , "video1");

    СтруктураТовара = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ДобавитьВидеоТовара", Опции);

    // Атрибуты, индивидуальные для разных категорий

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050  , "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576    , "серый");
    АтрибутКатегории4 = Новый Структура("dictionary_value_id,value", 95911    , "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    АтрибутКатегории5 = Новый Структура("value", "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    Опции = Новый Структура;
    Опции.Вставить("object"     , СтруктураТовара);
    Опции.Вставить("attributeid", 5076);
    Опции.Вставить("complexid"  , 0);
    Опции.Вставить("values"     , АтрибутКатегории1);

    СтруктураТовара = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ДополнитьКомплексныйАтрибут", Опции);

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 10096, 0, АтрибутКатегории3);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 8229 , 0, АтрибутКатегории4);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 9048 , 0, АтрибутКатегории5);

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);
    Опции.Вставить("items"   , СтруктураТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "СоздатьОбновитьТовары", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьОбновитьТовары", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадания = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_TaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_TaskID", IDЗадания);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура CLI_Ozon_ДобавитьВидеоТовара(ПараметрыФункции)

    Видео = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видео

    Опции = Новый Структура;
    Опции.Вставить("item"   , СтруктураТовара);
    Опции.Вставить("url"    , Видео);
    Опции.Вставить("title"  , "video1");

    СтруктураТовара = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ДобавитьВидеоТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(СтруктураТовара, "ДобавитьВидеоТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(СтруктураТовара);

КонецПроцедуры

Процедура CLI_Ozon_ДобавитьВидеообложкуТовара(ПараметрыФункции)

    Видео = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видеообложка

    Опции = Новый Структура;
    Опции.Вставить("item"   , СтруктураТовара);
    Опции.Вставить("url"    , Видео);

    СтруктураТовара = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ДобавитьВидеообложкуТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(СтруктураТовара, "ДобавитьВидеообложкуТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(СтруктураТовара);

КонецПроцедуры

Процедура CLI_Ozon_ДополнитьКомплексныйАтрибут(ПараметрыФункции)

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");

    Опции = Новый Структура;
    Опции.Вставить("object"     , СтруктураТовара);
    Опции.Вставить("attributeid", 5076);
    Опции.Вставить("complexid"  , 0);
    Опции.Вставить("values"     , АтрибутКатегории1);

    СтруктураТовара = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ДополнитьКомплексныйАтрибут", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(СтруктураТовара, "ДополнитьКомплексныйАтрибут", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(СтруктураТовара);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи  = ПараметрыФункции["Ozon_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("taskid"   , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусДобавленияТовара", "Ozon");

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияТовара", Опции);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура CLI_Ozon_СоздатьТоварыПоOzonID(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("name"         , "Новый импортированный товар");
    СтруктураТовара.Вставить("sku"          , 1626044001);
    СтруктураТовара.Вставить("offer_id"     , "91132");
    СтруктураТовара.Вставить("price"        , "1100");
    СтруктураТовара.Вставить("old_price"    , "1100");
    СтруктураТовара.Вставить("vat"          , "0.1");
    СтруктураТовара.Вставить("currency_code", "RUB");

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("items"    , СтруктураТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "СоздатьТоварыПоOzonID", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТоварыПоOzonID", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадачи = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_SkuTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_SkuTaskID", IDЗадачи);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("taskid"   , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияТовара", Опции);

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияТовара", Опции);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусДобавленияТовара (SKU)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСокращеннуюСтруктуруТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСокращеннуюСтруктуруТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруОбновленияХарактеристик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруОбновленияХарактеристик", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ОбновитьХарактеристикиТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураХаракетристик = Новый Структура("offer_id", "143210609");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050  , "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576    , "красный");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 10096, 0, АтрибутКатегории3);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("items"    , СтруктураХаракетристик);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ОбновитьХарактеристикиТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьХарактеристикиТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат, Ложь);

    IDЗадачи = Результат["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_AttUpdateTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_AttUpdateTaskID", IDЗадачи);

    Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусДобавленияТовара (хар.)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруФильтраТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility"   , "ALL");
    Фильтр.Вставить("offer_id"     , МассивID);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("filter"   , Фильтр);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбъектов(Результат);

    IDТовара = Результат["result"]["items"][0]["product_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_ProductID", IDТовара);
    ПараметрыФункции.Вставить("Ozon_ProductID", IDТовара);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility", "ALL");
    Фильтр.Вставить("offer_id"  , МассивID);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("filter"   , Фильтр);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьОписанияХарактеристикТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписанияХарактеристикТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("sku"      , SKU);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьКонтентРейтингТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКонтентРейтингТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивРейтингов(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьИнформациюОТоварах(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Артикул   = "143210609";

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("offerid"  , Артикул);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьИнформациюОТоварах", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОТоварах", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовары(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьОписаниеТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Артикул   = "143210609";

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("offerid"  , Артикул);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьОписаниеТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовар(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьЛимитыРаботыСТоварами", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЛимитыРаботыСТоварами", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЛимиты(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ОбновитьИзображенияТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];

    МаркетинговыйЦвет = "GREEN";

    МассивИзображений = Новый Массив;
    МассивИзображений.Добавить(Картинка1);
    МассивИзображений.Добавить(Картинка2);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("productid", IDТовара);
    Опции.Вставить("images"   , МассивИзображений);
    Опции.Вставить("color"    , МаркетинговыйЦвет);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ОбновитьИзображенияТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьИзображенияТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонКартинки(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("products" , IDТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПроверитьЗагрузкуИзображенийТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьЗагрузкуИзображенийТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ИзменитьАртикулыТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210609", "143210613");

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("offers"   , СоответствиеАртикулов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ИзменитьАртикулыТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьАртикулыТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210613", "143210609");

    Результат = OPI_Ozon.ИзменитьАртикулыТоваров(IDКлиента, КлючAPI, СоответствиеАртикулов);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьАртикулыТоваров (обратный)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура CLI_Ozon_АрхивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("products" , IDТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "АрхивироватьТовары", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "АрхивироватьТовары", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура CLI_Ozon_РазархивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("products" , IDТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "РазархивироватьТовары", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "РазархивироватьТовары", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура CLI_Ozon_УдалитьТоварыБезSKU(ПараметрыФункции)

    OPI_Инструменты.Пауза(30);

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "АрхивироватьТовары (для удаления)", "Ozon");
    OPI_Инструменты.Пауза(15);

    Артикул = "143210609";

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("articles" , Артикул);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "УдалитьТоварыБезSKU", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТоварыБезSKU", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Коды = Новый Массив;
    Коды.Добавить("11111111");
    Коды.Добавить("22222222");

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("productid", IDТовара);
    Опции.Вставить("codes"    , Коды);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ЗагрузитьКодыАктивацииТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьКодыАктивацииТовара", "Ozon");

    IDЗадания = 1;
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_CodesTaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_CodesTaskID", IDЗадания);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи  = ПараметрыФункции["Ozon_CodesTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("taskid"   , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияКодов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусДобавленияКодов", "Ozon");

    Если ЗначениеЗаполнено(Результат["result"]) Тогда
        Пока Результат["result"]["status"] = "pending" Цикл

            OPI_Инструменты.Пауза(30);
            Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтатусДобавленияКодов", Опции);

        КонецЦикла;
    КонецЕсли;

    //OPI_ПолучениеДанныхТестов.Проверка_ОзонДобавлениеКодов(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("sku"      , 1626044001);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьКоличествоПодписчиковТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКоличествоПодписчиковТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонПодписчики(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСвязанныеSKU(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("sku"      , 1626044001);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСвязанныеSKU", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСвязанныеSKU", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонSKU(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПривязатьШтрихкоды(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеШтрихкодов = Новый Соответствие;
    СоответствиеШтрихкодов.Вставить("1626044001", "112233");

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("barcodes" , СоответствиеШтрихкодов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПривязатьШтрихкоды", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПривязатьШтрихкоды", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_СоздатьШтрихкоды(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Опции = Новый Структура;
    Опции.Вставить("clientid"  , IDКлиента);
    Опции.Вставить("apikey"    , КлючAPI);
    Опции.Вставить("productids", IDТовара);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "СоздатьШтрихкоды", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьШтрихкоды", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокСкладов(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокСкладов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСкладов", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210608");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility"   , "ALL");
    Фильтр.Вставить("offer_id"     , МассивID);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("filter"   , Фильтр);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьКоличествоТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКоличествоТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ОбновитьЦеныТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Цены = Новый Структура;
    Цены.Вставить("auto_action_enabled"   , "DISABLED");
    Цены.Вставить("currency_code"         , "RUB");
    Цены.Вставить("min_price"             , "1300");
    Цены.Вставить("offer_id"              , "143210610");
    Цены.Вставить("old_price"             , "1400");
    Цены.Вставить("price"                 , "1300");
    Цены.Вставить("price_strategy_enabled", "DISABLED");
    Цены.Вставить("product_id"            , IDТовара);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("prices"   , Цены);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ОбновитьЦеныТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьЦеныТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбновлено(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ОбновитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Остатки = Новый Структура;
    Остатки.Вставить("offer_id"    , "143210610");
    Остатки.Вставить("product_id"  , IDТовара);
    Остатки.Вставить("stock"       , 20);
    Остатки.Вставить("warehouse_id", 1);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("stocks"   , Остатки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ОбновитьКоличествоТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьКоличествоТоваров", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьЦеныТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьЦеныТоваров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЦеныТоваров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонОбъекты(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьИнформациюОбУценке(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    SKU       = 1626044001;

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);
    Опции.Вставить("sku"     , SKU);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьИнформациюОбУценке", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОбУценке", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат, "items");

КонецПроцедуры

Процедура CLI_Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = 1156646653;

    Скидка = 10;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("productid", IDТовара);
    Опции.Вставить("discount" , Скидка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "УстановитьСкидкуНаУцененныйТовар", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьСкидкуНаУцененныйТовар", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокАкций(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокАкций", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокАкций", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции   = 111111111;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("actionid" , IDАкции);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьДоступныеТоварыАкции", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДоступныеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции   = 111111111;

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("actionid" , IDАкции);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьУчаствующиеТоварыАкции", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьУчаствующиеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруОстатковТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруОстатковТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруЦеныТовара", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЦеныТовара", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокКластеров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокКластеров", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКластеров", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонКластеры(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокСкладовОтгрузки(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Поиск     = "ТВЕРЬ";

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("search"   , Поиск);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокСкладовОтгрузки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСкладовОтгрузки", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонПоиск(Результат);

КонецПроцедуры

Процедура CLI_Ozon_СоздатьЧерновикЗаявкиFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Кластер   = 1;

    Позиции = Новый Соответствие;
    Позиции.Вставить("1783161863", 5);
    Позиции.Вставить("1784654052", 2);

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("clusters" , Кластер);
    Опции.Вставить("items"    , Позиции);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "СоздатьЧерновикЗаявкиFBO", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЧерновикЗаявкиFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонЧерновик(Результат);

    IDЧерновика = Результат["operation_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_FBOOperID", IDЧерновика);
    ПараметрыФункции.Вставить("Ozon_FBOOperID", IDЧерновика);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьЧерновикЗаявкиFBO(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    IDОперации = ПараметрыФункции["Ozon_FBOOperID"];

    Статус = "CALCULATION_STATUS_IN_PROGRESS";

    Опции = Новый Структура;
    Опции.Вставить("clientid" , IDКлиента);
    Опции.Вставить("apikey"   , КлючAPI);
    Опции.Вставить("oper"     , IDОперации);

    Пока Статус = "CALCULATION_STATUS_IN_PROGRESS" Цикл

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьЧерновикЗаявкиFBO", Опции);
        Статус    = Результат["status"];

        OPI_Инструменты.Пауза(20);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧерновикЗаявкиFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонГотовыйЧерновик(Результат);

    IDЧерновика = Результат["draft_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_Draft", IDЧерновика);
    ПараметрыФункции.Вставить("Ozon_Draft", IDЧерновика);

    IDСклада = Результат["clusters"][0]["warehouses"][0]["supply_warehouse"]["warehouse_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_FBOWarehouse", IDСклада);
    ПараметрыФункции.Вставить("Ozon_FBOWarehouse", IDСклада);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруДопПолейОтправления(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруДопПолейОтправления", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруДопПолейОтправления", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСтруктуруФильтраОтправлений(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСтруктуруФильтраОтправлений", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраОтправлений", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьСписокОтправленийFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];

    ДопПоля = Новый Структура;
    ДопПоля.Вставить("analytics_data", Истина);
    ДопПоля.Вставить("financial_data", Истина);

    Фильтр = Новый Структура;
    Фильтр.Вставить("since", XMLСтрока('20230101') + "Z");
    Фильтр.Вставить("to"   , XMLСтрока('20240101') + "Z");

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);
    Опции.Вставить("filter"  , Фильтр);
    Опции.Вставить("with"    , ДопПоля);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьСписокОтправленийFBO", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОтправленийFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура CLI_Ozon_ПолучитьТаймслотыFBO(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Сутки     = 86400;

    ДатаОт   = OPI_Инструменты.ПолучитьТекущуюДату();
    ДатаПо   = ДатаОт + Сутки;
    Черновик = ПараметрыФункции["Ozon_Draft"];
    Склад    = ПараметрыФункции["Ozon_FBOWarehouse"];

    Опции = Новый Структура;
    Опции.Вставить("clientid", IDКлиента);
    Опции.Вставить("apikey"  , КлючAPI);
    Опции.Вставить("from"    , ДатаОт);
    Опции.Вставить("to"      , ДатаПо);
    Опции.Вставить("draft"   , Черновик);
    Опции.Вставить("whs"     , Склад);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("ozon", "ПолучитьТаймслотыFBO", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТаймслотыFBO", "Ozon");
    OPI_ПолучениеДанныхТестов.Проверка_ОзонТаймслоты(Результат);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура CLI_Neocities_ЗагрузитьФайл(ПараметрыФункции)

    Токен  = ПараметрыФункции["NC_Token"];
    Данные = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Путь   = "testfolder/test_pic.png";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);
    Опции.Вставить("file" , Данные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ЗагрузитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайл", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура CLI_Neocities_ЗагрузитьФайлы(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные
    Гифка     = ПараметрыФункции["Gif"];      // URL, Путь или Двоичные данные

    СоответствиеФайлов = Новый Соответствие;
    СоответствиеФайлов.Вставить("test/pic1.png", Картинка1);
    СоответствиеФайлов.Вставить("test/gif.gif" , Картинка2);
    СоответствиеФайлов.Вставить("pic2.png"     , Гифка);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("files", СоответствиеФайлов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ЗагрузитьФайлы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура CLI_Neocities_УдалитьВыбранныеФайлы(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    Пути = Новый Массив;
    Пути.Добавить("/test/pic1.png");
    Пути.Добавить("/test/gif.gif");
    Пути.Добавить("/pic2.png");

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("paths", Пути);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "УдалитьВыбранныеФайлы", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьВыбранныеФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/testfolder");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьВыбранныеФайлы (каталог 1)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/test");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьВыбранныеФайлы (каталог 2)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура CLI_Neocities_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Путь  = "test";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов (Все)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("path" , Путь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ПолучитьСписокФайлов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокФайлов", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСФайлыКаталога(Результат, 2);

КонецПроцедуры

Процедура CLI_Neocities_ПолучитьДанныеОСайте(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Сайт  = "2athenaeum";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ПолучитьДанныеОСайте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеОСайте", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("sitename", Сайт);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ПолучитьДанныеОСайте", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДанныеОСайте (Сайт)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура CLI_Neocities_ПолучитьТокен(ПараметрыФункции)

    Логин  = ПараметрыФункции["NC_Login"];
    Пароль = ПараметрыФункции["NC_Password"];

    Опции = Новый Структура;
    Опции.Вставить("login"   , Логин);
    Опции.Вставить("password", Пароль);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "ПолучитьТокен", Опции);

    Результат["api_key"] = "***";

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТокен", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура CLI_Neocities_СинхронизироватьКаталоги(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    ЛокальныйКаталог = "C:\test_site";
    УдаленныйКаталог = "test_sync";

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("local" , ЛокальныйКаталог);
    Опции.Вставить("remote", УдаленныйКаталог);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("neocities", "СинхронизироватьКаталоги", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СинхронизироватьКаталоги", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НССинхронизация(Результат);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура CLI_Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыФункции)

    Домен    = ПараметрыФункции["Bitrix24_Domain"];
    ClientID = ПараметрыФункции["Bitrix24_ClientID"];

    Опции = Новый Структура;
    Опции.Вставить("domain"  , Домен);
    Опции.Вставить("clientid", ClientID);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСсылкуАвторизацииПриложения", Опции);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуАвторизацииПриложения", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_AuthURL", Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Code         = ПараметрыФункции["Bitrix24_Code"];

    Опции = Новый Структура;
    Опции.Вставить("clientid"    , ClientID);
    Опции.Вставить("clientsecret", ClientSecret);
    Опции.Вставить("code"        , Code);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТокен", "Bitrix24");

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура CLI_Bitrix24_ОбновитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Refresh      = ПараметрыФункции["Bitrix24_Refresh"];

    Опции = Новый Структура;
    Опции.Вставить("clientid"    , ClientID);
    Опции.Вставить("clientsecret", ClientSecret);
    Опции.Вставить("refresh"     , Refresh);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОбновитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьТокен", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксАвторизация(Результат);

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура CLI_Bitrix24_СерверноеВремя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url", URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СерверноеВремя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СерверноеВремя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СерверноеВремя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СерверноеВремя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьНовость(ПараметрыФункции)

    Текст     = "Текст новости";
    Заголовок = "Заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    Файлы = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);
    Файлы.Вставить("2.png", Картинка2);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("files"    , Файлы);
    Опции.Вставить("title"    , Заголовок);
    Опции.Вставить("important", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьНовость (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDНовости = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookPostID", IDНовости);
    ПараметрыФункции.Вставить("Bitrix24_HookPostID", IDНовости);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("files"    , Файлы);
    Опции.Вставить("title"    , Заголовок);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьНовость", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDНовости = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PostID", IDНовости);
    ПараметрыФункции.Вставить("Bitrix24_PostID", IDНовости);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьНовость(ПараметрыФункции)

    Текст     = "Новый текст новости";
    Заголовок = "Новый заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];

    Файлы = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("files"    , Файлы);
    Опции.Вставить("title"    , Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьНовость (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("files"    , Файлы);
    Опции.Вставить("title"    , Заголовок);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьНовость", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьНовость(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьНовость (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьНовость", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьНовость", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПросмотревшихВажное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПросмотревшихВажное (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПросмотревшихВажное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПросмотревшихВажное", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьНовости(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьНовости (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьНовости", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьКомментарийНовости(ПараметрыФункции)

    Текст     = "Комментарий к новости";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("text"     , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьКомментарийНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьКомментарийНовости (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    Текст = "Другой комментарий к новости";
    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("text"     , Текст);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьКомментарийНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьКомментарийНовости", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьПолучателейКНовости(ПараметрыФункции)

    Видимость = "UA";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("vision"   , Видимость);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПолучателейКНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПолучателейКНовости (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("postid"   , IDНовости);
    Опции.Вставить("vision"   , Видимость);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПолучателейКНовости", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПолучателейКНовости", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fields"   , СтруктураЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    IDЗадачи = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Bitrix24_HookTaskID", IDЗадачи);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fields"   , СтруктураЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    IDЗадачи = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Bitrix24_TaskID", IDЗадачи);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"      , "Другой заголовок задачи");
    СтруктураЗадачи.Вставить("DESCRIPTION", "Другое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"   , "1");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("fields"   , СтруктураЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("fields"   , СтруктураЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПринятьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПринятьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПринятьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПринятьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПринятьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтклонитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтклонитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтклонитьЗадачу (хук)", "Bitrix24");

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтклонитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтклонитьЗадачу", "Bitrix24");

КонецПроцедуры

Процедура CLI_Bitrix24_ЗавершитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗавершитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗавершитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗавершитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗавершитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВозобновитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВозобновитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВозобновитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВозобновитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВозобновитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтложитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтложитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтложитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтложитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтложитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_НачатьВыполнениеЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьВыполнениеЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НачатьВыполнениеЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьВыполнениеЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НачатьВыполнениеЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьНаблюдатьЗаЗадачей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НачатьНаблюдатьЗаЗадачей (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьНаблюдатьЗаЗадачей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НачатьНаблюдатьЗаЗадачей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПрекратитьНаблюдатьЗаЗадачей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПрекратитьНаблюдатьЗаЗадачей (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПрекратитьНаблюдатьЗаЗадачей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПрекратитьНаблюдатьЗаЗадачей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПриостановитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПриостановитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПриостановитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПриостановитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПриостановитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДелегироватьЗадачу(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи       = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("user"     , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДелегироватьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДелегироватьЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("user"     , IDПользователя);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДелегироватьЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДелегироватьЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьЗадачуВИзбранное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗадачуВИзбранное (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьЗадачуВИзбранное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗадачуВИзбранное", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УбратьЗадачуИзИзбранного", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УбратьЗадачуИзИзбранного (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УбратьЗадачуИзИзбранного", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УбратьЗадачуИзИзбранного", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьИсториюЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИсториюЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИсториюЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("task"     , IDЗадачи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИсториюЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИсториюЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокЗадач(ПараметрыФункции)

    // Полную структуру фильтра можно найти в функции ПолучитьСтруктуруФильтраЗадач
    Фильтр = Новый Структура;
    Фильтр.Вставить("CREATED_BY"    , 1);
    Фильтр.Вставить("RESPONSIBLE_ID", 10);

    Отступ = 1;
    URL    = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("filter"   , Фильтр);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЗадач (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("offset"   , Отступ);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Текст = "Пункт чек-листа";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("complete", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЭлемента = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCheckElementID", IDЭлемента);
    ПараметрыФункции.Вставить("Bitrix24_HookCheckElementID", IDЭлемента);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЭлемента = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CheckElementID", IDЭлемента);
    ПараметрыФункции.Вставить("Bitrix24_CheckElementID", IDЭлемента);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Текст = "Новый текст пункта чек-листа";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("text"    , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЧеклистЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧеклистЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЧеклистЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧеклистЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВыполнитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВыполнитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВозобновитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВозобновитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("element" , IDЭлемента);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВозобновитьЭлементЧеклистаЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВозобновитьЭлементЧеклистаЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьФайлВЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDФайла  = ПараметрыФункции["Bitrix24_TaskFileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("fileid" , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьФайлВЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьФайлВЗадачу (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("fileid" , IDФайла);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьФайлВЗадачу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьФайлВЗадачу", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПроверитьДоступКЗадаче(ПараметрыФункции)

    МассивПользователей = Новый Массив;
    МассивПользователей.Добавить("1");
    МассивПользователей.Добавить("10");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("users"  , МассивПользователей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПроверитьДоступКЗадаче", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьДоступКЗадаче (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество());

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("users"  , МассивПользователей);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПроверитьДоступКЗадаче", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьДоступКЗадаче", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество());

КонецПроцедуры

Процедура CLI_Bitrix24_ОтключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтключитьЗвукЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтключитьЗвукЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтключитьЗвукЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтключитьЗвукЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВключитьЗвукЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВключитьЗвукЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи = ПараметрыФункции["Bitrix24_TaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВключитьЗвукЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВключитьЗвукЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("taskfrom" , IDИсточника);
    Опции.Вставить("taskto"   , IDПриемника);
    Опции.Вставить("linktype" , ТипСвязи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЗависимостьЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗависимостьЗадач (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("taskfrom" , IDИсточника);
    Опции.Вставить("taskto"   , IDПриемника);
    Опции.Вставить("linktype" , ТипСвязи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЗависимостьЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("taskfrom" , IDИсточника);
    Опции.Вставить("taskto"   , IDПриемника);
    Опции.Вставить("linktype" , ТипСвязи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЗависимостьЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗависимостьЗадач (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("taskfrom" , IDИсточника);
    Опции.Вставить("taskto"   , IDПриемника);
    Опции.Вставить("linktype" , ТипСвязи);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЗависимостьЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПланЗадачНаДень", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПланЗадачНаДень (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПланЗадачНаДень", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПланЗадачНаДень", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраЗадач", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Текст = "Задача невыполнима, расходимся";

    Опции = Новый Структура;
    Опции.Вставить("url" , URL);
    Опции.Вставить("task", IDЗадачи);
    Опции.Вставить("text", Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьКомментарийЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКомментария = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCommentID", IDКомментария);
    ПараметрыФункции.Вставить("Bitrix24_HookCommentID", IDКомментария);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Текст = "Задача выполнима, не расходимся";

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);
    Опции.Вставить("text" , Текст);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьКомментарийЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКомментария = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentID", IDКомментария);
    ПараметрыФункции.Вставить("Bitrix24_CommentID", IDКомментария);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКомментарийЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКомментарийЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьРезультатИзКомментария(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("comment", IDКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьРезультатИзКомментария", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьРезультатИзКомментария (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьРезультатИзКомментария", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьРезультатИзКомментария", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьРезультатИзКомментария(ПараметрыФункции) Экспорт

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("comment", IDКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьРезультатИзКомментария", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьРезультатИзКомментария (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьРезультатИзКомментария", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьРезультатИзКомментария", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокРезультатов(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокРезультатов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокРезультатов (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокРезультатов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокРезультатов", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокКомментариевЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКомментариевЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокКомментариевЗадачи", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКомментариевЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьКомменатрийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКомменатрийЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьКомменатрийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКомменатрийЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Текст = "Задача изменена, не расходимся";

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКомментарийЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Текст = "Задача изменена, расходимся";

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("task"   , IDЗадачи);
    Опции.Вставить("comment", IDКомментария);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКомментарийЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКомментарийЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруКомментария", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруКомментария", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокХранилищ(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url", URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокХранилищ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокХранилищ (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокХранилищ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокХранилищ", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьХранилищеПриложения(ПараметрыФункции)

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьХранилищеПриложения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьХранилищеПриложения", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDХранилища = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StorageID", IDХранилища);
    ПараметрыФункции.Вставить("Bitrix24_StorageID", IDХранилища);

КонецПроцедуры

Процедура CLI_Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыФункции)

    Наименование2 = "Картинка2.jpg";
    Наименование  = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = 3;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("title"    , Наименование2);
    Опции.Вставить("file"     , Картинка2);
    Опции.Вставить("storageid", IDПриемника);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗагрузитьФайлВХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлВХранилище (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFileID", IDФайла);
    ПараметрыФункции.Вставить("Bitrix24_HookFileID", IDФайла);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("title"    , Наименование);
    Опции.Вставить("file"     , Картинка);
    Опции.Вставить("storageid", IDПриемника);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗагрузитьФайлВХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлВХранилище", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FileID", IDФайла);
    ПараметрыФункции.Вставить("Bitrix24_FileID", IDФайла);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьФайл(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_HookFileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fileid"   , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьФайл (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL     = ПараметрыФункции["Bitrix24_Domain"];
    Токен   = ПараметрыФункции["Bitrix24_Token"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fileid"   , IDФайла);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьФайл", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьКаталогВХранилище(ПараметрыФункции)

    IDХранилища   = 3;
    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("storageid", IDХранилища);
    Опции.Вставить("title"    , Наименование2);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьКаталогВХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКаталогВХранилище (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFolderID", IDКаталога);
    ПараметрыФункции.Вставить("Bitrix24_HookFolderID", IDКаталога);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("storageid", IDХранилища);
    Опции.Вставить("title"    , Наименование);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьКаталогВХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКаталогВХранилище", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FolderID", IDКаталога);
    ПараметрыФункции.Вставить("Bitrix24_FolderID", IDКаталога);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("folderid" , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("folderid" , IDКаталога);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьХранилище(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища = 3;

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("storageid" , IDХранилища);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьХранилище (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("storageid" , IDХранилища);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьХранилище", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища = 3;

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("storageid" , IDХранилища);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСодержимоеХранилища", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСодержимоеХранилища (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("storageid" , IDХранилища);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСодержимоеХранилища", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСодержимоеХранилища", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПереименоватьХранилище(ПараметрыФункции)

    Наименование = "Новое имя хранилища";
    URL          = ПараметрыФункции["Bitrix24_Domain"];
    Токен        = ПараметрыФункции["Bitrix24_Token"];
    IDХранилища  = ПараметрыФункции["Bitrix24_StorageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("storageid" , IDХранилища);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереименоватьХранилище", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьХранилище", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИнформациюОКаталоге", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОКаталоге (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИнформациюОКаталоге", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОКаталоге", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьПодкаталог(ПараметрыФункции)

    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];
    Наименование  = "Новый подкаталог";
    Наименование2 = "Новый подкаталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("title"     , Наименование2);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПодкаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПодкаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDПодкаталога = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookSubfolderID", IDПодкаталога);
    ПараметрыФункции.Вставить("Bitrix24_HookSubfolderID", IDПодкаталога);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПодкаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПодкаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDПодкаталога = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SubfolderID", IDПодкаталога);
    ПараметрыФункции.Вставить("Bitrix24_SubfolderID", IDПодкаталога);

КонецПроцедуры

Процедура CLI_Bitrix24_СкопироватьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookSubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("tagetid"   , IDПриемника);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СкопироватьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкопироватьКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDПриемника = ПараметрыФункции["Bitrix24_SubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("tagetid"   , IDПриемника);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СкопироватьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкопироватьКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьВнешнююСсылкуКаталога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьВнешнююСсылкуКаталога (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьВнешнююСсылкуКаталога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьВнешнююСсылкуКаталога", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраКаталога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраКаталога (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраКаталога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраКаталога", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьДочерниеЭлементыКаталога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДочерниеЭлементыКаталога (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьДочерниеЭлементыКаталога", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДочерниеЭлементыКаталога", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПоместитьКаталогВКорзину(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПоместитьКаталогВКорзину", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоместитьКаталогВКорзину (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПоместитьКаталогВКорзину", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоместитьКаталогВКорзину", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВосстановитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВосстановитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВосстановитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПереместитьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("tagetid"   , IDПриемника);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереместитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("tagetid"   , IDПриемника);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереместитьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПереименоватьКаталог(ПараметрыФункции)

    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    IDКаталога2 = ПараметрыФункции["Bitrix24_HookFolderID"];
    URL         = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога2);
    Опции.Вставить("title"     , Наименование2);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереименоватьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];
    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереименоватьКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыФункции)

    Наименование2 = "Картинка2.jpg";
    Наименование  = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = ПараметрыФункции["Bitrix24_FolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("title"     , Наименование2);
    Опции.Вставить("file"      , Картинка2);
    Опции.Вставить("folderid"  , IDПриемника);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗагрузитьФайлВКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлВКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = Результат["result"]["ID"];
    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("file"      , Картинка);
    Опции.Вставить("folderid"  , IDПриемника);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗагрузитьФайлВКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьФайлВКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла   = Результат["result"]["ID"];
    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла, Токен);

КонецПроцедуры

Процедура CLI_Bitrix24_СкопироватьФайл(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СкопироватьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкопироватьФайл (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СкопироватьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СкопироватьФайл", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьИнформациюОФайле(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИнформациюОФайле", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОФайле (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьИнформациюОФайле", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОФайле", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыФункции)

    OPI_Инструменты.Пауза(20);

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьВнешнююСсылкуФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьВнешнююСсылкуФайла (хук)", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьВнешнююСсылкуФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьВнешнююСсылкуФайла", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПоместитьФайлВКорзину(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПоместитьФайлВКорзину", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоместитьФайлВКорзину (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПоместитьФайлВКорзину", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПоместитьФайлВКорзину", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВосстановитьФайл(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВосстановитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьФайл (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВосстановитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьФайл", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПереименоватьФайл(ПараметрыФункции)

    Наименование  = "Новое имя файла.jpg";
    Наименование2 = "Новое имя файла 2.jpg";

    IDФайла2 = ПараметрыФункции["Bitrix24_HookFileID"];
    URL      = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла2);
    Опции.Вставить("title"     , Наименование2);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереименоватьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьФайл (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = ПараметрыФункции["Bitrix24_FileID"];
    URL     = ПараметрыФункции["Bitrix24_Domain"];
    Токен   = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("title"     , Наименование);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереименоватьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереименоватьФайл", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПереместитьФайлВКаталог(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookSubFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("folderid"  , IDКаталога);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереместитьФайлВКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьФайлВКаталог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = ПараметрыФункции["Bitrix24_SubFolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fileid"    , IDФайла);
    Опции.Вставить("folderid"  , IDКаталога);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПереместитьФайлВКаталог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПереместитьФайлВКаталог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Время = 3600;

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("task"      , IDЗадачи);
    Опции.Вставить("amount"    , Время);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьТрудозатратыЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЗатрат = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTimeID", IDЗатрат);
    ПараметрыФункции.Вставить("Bitrix24_HookTimeID", IDЗатрат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Текст          = "Трудозатраты по обработке";
    IDПользователя = 10;
    Время          = 7200;
    ДатаУстановки  = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("amount"  , Время);
    Опции.Вставить("user"    , IDПользователя);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("date"    , ДатаУстановки);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьТрудозатратыЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЗатрат = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TimeID", IDЗатрат);
    ПараметрыФункции.Вставить("Bitrix24_TimeID", IDЗатрат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Текст = "Забытый в прошлый раз текст";
    Время = 4800;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);
    Опции.Вставить("amount"  , Время);
    Опции.Вставить("text"    , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТрудозатратыЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Текст         = "Новые трудозатраты по обработке";
    Время         = 4800;
    ДатаУстановки = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);
    Опции.Вставить("amount"  , Время);
    Опции.Вставить("text"    , Текст);
    Опции.Вставить("date"    , ДатаУстановки);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьТрудозатратыЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТрудозатратыЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТрудозатратыЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи = ПараметрыФункции["Bitrix24_HookTimeID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТрудозатратыЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи = ПараметрыФункции["Bitrix24_TimeID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("record"  , IDЗаписи);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьТрудозатратыЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТрудозатратыЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокТрудозатратЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТрудозатратЗадачи (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("task"    , IDЗадачи);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокТрудозатратЗадачи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокТрудозатратЗадачи", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_НачатьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьУчетВремени", Опции);

    Час = 3600;

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату() - Час;
    Отчет          = "Опоздание";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("userid"  , IDПользователя);
    Опции.Вставить("time"    , Время);
    Опции.Вставить("report"  , Отчет);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НачатьУчетВремени", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ЗавершитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗавершитьУчетВремени", Опции);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату();
    Отчет          = "Отгул";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("userid"  , IDПользователя);
    Опции.Вставить("time"    , Время);
    Опции.Вставить("report"  , Отчет);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗавершитьУчетВремени", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ПриостановитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПриостановитьУчетВремени", Опции);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("userid"  , IDПользователя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПриостановитьУчетВремени", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусУчетаВремени", Опции);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("userid"  , IDПользователя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусУчетаВремени", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьНастройкиУчетаВремени", Опции);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("userid"  , IDПользователя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьНастройкиУчетаВремени", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новая стадия";
    Цвет         = "0026FF";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("title"    , Наименование);
    Опции.Вставить("color"    , Цвет);
    Опции.Вставить("prevstage", 6);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьСтадиюКанбана (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПредыдущей = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookStageID", IDПредыдущей);
    ПараметрыФункции.Вставить("Bitrix24_HookStageID", IDПредыдущей);

    Наименование = "Новая стадия 2";
    Цвет         = "0026FF";

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("title"    , Наименование);
    Опции.Вставить("color"    , Цвет);
    Опции.Вставить("prevstage", IDПредыдущей);
    Опции.Вставить("admin"    , Истина);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьСтадиюКанбана", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСтадии = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StageID", IDСтадии);
    ПараметрыФункции.Вставить("Bitrix24_StageID", IDСтадии);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьСтадиюКанбана(ПараметрыФункции)

    IDСтадии = ПараметрыФункции["Bitrix24_HookStageID"];
    URL      = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("stage"    , IDСтадии);
    Опции.Вставить("admin"    , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСтадиюКанбана (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDСтадии = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("stage"    , IDСтадии);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСтадиюКанбана", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтадииКанбана(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("admin"    , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтадииКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтадииКанбана (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтадииКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтадииКанбана", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыФункции)

    IDЗадачи = ПараметрыФункции["Bitrix24_KanbanTaskID"];
    IDСтадии = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);
    Опции.Вставить("stage", IDСтадии);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПеренестиЗадачуВСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПеренестиЗадачуВСтадиюКанбана (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    IDСтадии = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("task" , IDЗадачи);
    Опции.Вставить("stage", IDСтадии);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПеренестиЗадачуВСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПеренестиЗадачуВСтадиюКанбана", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, 2, , , Токен);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новое имя стадии стадии";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("title", Наименование);
    Опции.Вставить("stage", IDСтадии);
    Опции.Вставить("color", Цвет);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСтадиюКанбана (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    Наименование = "Новое имя стадии стадии 2";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_StageID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("title"    , Наименование);
    Опции.Вставить("stage"    , IDСтадии);
    Опции.Вставить("color"    , Цвет);
    Опции.Вставить("prevstage", 6);
    Опции.Вставить("admin"    , Истина);
    Опции.Вставить("token"    , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСтадиюКанбана", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСтадиюКанбана", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьПерсональноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("user"  , IDПользователя);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("blocks", Вложения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПерсональноеУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПерсональноеУведомление (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalHookNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_PersoalHookNotifyID", IDСообщения);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("user"  , IDПользователя);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("tag"   , Тег);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПерсональноеУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПерсональноеУведомление", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_PersoalNotifyID", IDСообщения);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьСистемноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("user"  , IDПользователя);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("blocks", Вложения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСистемноеУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСистемноеУведомление (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemHookNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_SystemHookNotifyID", IDСообщения);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("user"  , IDПользователя);
    Опции.Вставить("text"  , Текст);
    Опции.Вставить("tag"   , Тег);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСистемноеУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСистемноеУведомление", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_SystemNotifyID", IDСообщения);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьУведомление(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalHookNotifyID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("notif" , IDУведомления);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьУведомление", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalNotifyID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("notif" , IDУведомления);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьУведомление", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьУведомление (приложение)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксБулево(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Тип = "date";
    Имя = "BIRTHDAY_FIELD";

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("type"     , Тип);
    Опции.Вставить("fieldname", Имя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПользовательскоеПолеЗадачи", Опции);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Тип        = "string";
    Имя        = "TEXT_FIELD";
    ВнешнийКод = "BITRIX_TEXT_FIELD";
    Заголовок  = "Поле для текста";
    Подпись    = Новый Структура("en,ru", "Some field", "Некоторое поле");

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("type"      , Тип);
    Опции.Вставить("fieldname" , Имя);
    Опции.Вставить("externalid", ВнешнийКод);
    Опции.Вставить("title"     , Заголовок);
    Опции.Вставить("label"     , Подпись);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПользовательскоеПолеЗадачи", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПоля    = ПараметрыФункции["Bitrix24_HookTaskFieldID"];
    Заголовок = "Новый заголовок";

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fieldid"  , IDПоля);
    Опции.Вставить("title"    , Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьПользовательскоеПолеЗадачи", Опции);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    IDПоля     = ПараметрыФункции["Bitrix24_TaskFieldID"];
    ВнешнийКод = "NEW_TEXT_FIELD";
    Подпись    = Новый Структура("en,ru", "Updated field", "Измененное поле");

    Опции = Новый Структура;
    Опции.Вставить("url"       , URL);
    Опции.Вставить("fieldid"   , IDПоля);
    Опции.Вставить("externalid", ВнешнийКод);
    Опции.Вставить("label"     , Подпись);
    Опции.Вставить("token"     , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПользовательскоеПолеЗадачи", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDПоля = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);
    Опции.Вставить("fieldid"  , IDПоля);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользовательскоеПолеЗадачи", Опции);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDПоля = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("fieldid" , IDПоля);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользовательскоеПолеЗадачи", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"      , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользовательскихПолейЗадачи", Опции);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользовательскихПолейЗадачи", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDПоля = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("fieldid", IDПоля);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьПользовательскоеПолеЗадачи", Опции);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDПоля = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("fieldid", IDПоля);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьПользовательскоеПолеЗадачи", Опции);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Наименование = "Главное подразделение";
    IDРодителя   = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("title"   , Наименование);
    Опции.Вставить("parentid", IDРодителя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПодразделение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПодразделения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDepID", IDПодразделения);
    ПараметрыФункции.Вставить("Bitrix24_HookDepID", IDПодразделения);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Наименование   = "Подчиненное подразделение";
    IDРодителя     = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРуководителя = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("title"   , Наименование);
    Опции.Вставить("parentid", IDРодителя);
    Опции.Вставить("headid"  , IDРуководителя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПодразделение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПодразделения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DepID", IDПодразделения);
    ПараметрыФункции.Вставить("Bitrix24_DepID", IDПодразделения);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРодителя      = 7;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("depid"   , IDПодразделения);
    Опции.Вставить("parentid", IDРодителя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПодразделение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];
    Наименование    = "Новое подразделение";
    IDРодителя      = 1;
    IDРуководителя  = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("depid"   , IDПодразделения);
    Опции.Вставить("title"   , Наименование);
    Опции.Вставить("parentid", IDРодителя);
    Опции.Вставить("headid"  , IDРуководителя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПодразделение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьПодразделение(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("depid"   , IDПодразделения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьПодразделение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("depid"   , IDПодразделения);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьПодразделение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьПодразделение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПодразделения(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("depid"   , IDПодразделения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПодразделения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПодразделения (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDРуководителя = 1;

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("headid"  , IDРуководителя);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПодразделения", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПодразделения", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьЧат(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);

    B64Картинка = ПолучитьBase64СтрокуИзДвоичныхДанных(Картинка);

    МассивУчастников = Новый Массив;
    МассивУчастников.Добавить(10);
    МассивУчастников.Добавить(1);

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE"       , "OPEN");
    СтруктураЧата.Вставить("TITLE"      , "Новый чат");
    СтруктураЧата.Вставить("DESCRIPTION", "Это новый чат");
    СтруктураЧата.Вставить("COLOR"      , "GREEN");
    СтруктураЧата.Вставить("MESSAGE"    , "Добро пожаловать в новый чат");
    СтруктураЧата.Вставить("USERS"      , МассивУчастников);
    СтруктураЧата.Вставить("OWNER_ID"   , 1);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЧат (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЧата = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookChatID", IDЧата);
    ПараметрыФункции.Вставить("Bitrix24_HookChatID", IDЧата);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE"       , "CHAT");
    СтруктураЧата.Вставить("TITLE"      , "Закрытый чат");
    СтруктураЧата.Вставить("USERS"      , МассивУчастников);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураЧата);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЧат", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЧата = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatID", IDЧата);
    ПараметрыФункции.Вставить("Bitrix24_ChatID", IDЧата);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользователейЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователейЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользователейЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователейЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПокинутьЧат(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПокинутьЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПокинутьЧат (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПокинутьЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПокинутьЧат", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИсключитьПользователяИзЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("user"  , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИсключитьПользователяИзЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИсключитьПользователяИзЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("user"  , IDПользователя);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИсключитьПользователяИзЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИсключитьПользователяИзЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ДобавитьПользователейВЧат(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя  = 10;
    IDПользователей = Новый Массив;
    IDПользователей.Добавить(10);
    IDПользователей.Добавить(12);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("users" , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПользователейВЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПользователейВЧат (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("users" , IDПользователей);
    Опции.Вставить("hide"  , Истина);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ДобавитьПользователейВЧат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьПользователейВЧат", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьЗаголовокЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Заголовок = "Новый заголовок чата";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("title" , Заголовок);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЗаголовокЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЗаголовокЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Заголовок = "Другой заголовок чата";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("title" , Заголовок);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЗаголовокЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЗаголовокЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьЦветЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Цвет = "AZURE";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("color" , Цвет);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЦветЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЦветЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    OPI_Инструменты.Пауза(10);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Цвет = "PURPLE";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("chat"  , IDЧата);
    Опции.Вставить("color" , Цвет);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЦветЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЦветЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьКартинкуЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Картинка = ПараметрыФункции["Picture2"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("picture", Картинка);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКартинкуЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКартинкуЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("picture", Картинка);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКартинкуЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКартинкуЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтключитьУведомленияЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтключитьУведомленияЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтключитьУведомленияЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтключитьУведомленияЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтключитьУведомленияЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ВключитьУведомленияЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВключитьУведомленияЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВключитьУведомленияЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ВключитьУведомленияЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВключитьУведомленияЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СменитьВладельцаЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("user"   , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СменитьВладельцаЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СменитьВладельцаЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("user"   , IDПользователя);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СменитьВладельцаЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СменитьВладельцаЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat4";

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокСообщенийЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСообщенийЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат);

    IDСообщения = Результат["result"]["messages"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("first"  , 0);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокСообщенийЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСообщенийЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат);

    IDСообщения = Результат["result"]["messages"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("message", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтметитьСообщениеКакПрочитанное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтметитьСообщениеКакПрочитанное (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксДиалог(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтметитьСообщениеКакПрочитанное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтметитьСообщениеКакПрочитанное", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксДиалог(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("message", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтметитьСообщениеКакНепрочитанное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтметитьСообщениеКакНепрочитанное (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтметитьСообщениеКакНепрочитанное", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтметитьСообщениеКакНепрочитанное", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьДиалог(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьДиалог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДиалог (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьДиалог", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДиалог", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользователейДиалога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователейДиалога (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокПользователейДиалога", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокПользователейДиалога", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьУведомлениеОВводе", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьУведомлениеОВводе (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьУведомлениеОВводе", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьУведомлениеОВводе", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПрочитатьВсе(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПрочитатьВсе", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПрочитатьВсе (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПрочитатьВсе", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПрочитатьВсе", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтправитьСообщение(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЧата   = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;

    Опции = Новый Структура;
    Опции.Вставить("title" , "Картинка1");
    Опции.Вставить("url"   , Картинка);

    Вложение1 = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьБлокКартинки", Опции);

    Опции = Новый Структура;
    Опции.Вставить("title" , "Файл1.docx");
    Опции.Вставить("url"   , Файл);

    Вложение2 = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьБлокФайла", Опции);

    Вложения.Добавить(Вложение1);
    Вложения.Добавить(Вложение2);

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDПользователя);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("blocks" , Вложения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьСообщение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Текст = "Новый текст сообщения";

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("text"   , Текст);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСообщение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("text"   , Текст);
    Опции.Вставить("blocks" , Вложения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСообщение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСообщение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьРеакциюНаСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьРеакциюНаСообщение (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения = ПараметрыФункции["Bitrix24_UserMessageID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("message", IDСообщения);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьРеакциюНаСообщение", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьРеакциюНаСообщение", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЧата = ПараметрыФункции["Bitrix24_HookChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьКаталогФайловЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКаталогФайловЧата (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьКаталогФайловЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКаталогФайловЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ОтправитьФайл(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЧата   = ПараметрыФункции["Bitrix24_HookChatID"];
    Файл     = ПараметрыФункции["Document"]; // Двоичные данные, URL или путь к файлу
    Описание = "Очень важный файл";

    Опции = Новый Структура;
    Опции.Вставить("url"    , URL);
    Опции.Вставить("chat"   , IDЧата);

    Каталог    = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьКаталогФайловЧата", Опции);
    IDКаталога = Каталог["result"]["ID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("title"   , "Важный документ.docx");
    Опции.Вставить("file"    , Файл);
    Опции.Вставить("folderid", IDКаталога);

    ЗагруженныйФайл = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ЗагрузитьФайлВКаталог", Опции);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("chat"       , IDЧата);
    Опции.Вставить("fileid"     , IDФайла);
    Опции.Вставить("description", Описание);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Каталог    = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата, Токен);
    IDКаталога = Каталог["result"]["ID"];

    ЗагруженныйФайл = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, "Важный документ.docx", Файл, IDКаталога, Токен);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("chat"       , IDЧата);
    Опции.Вставить("fileid"     , IDФайла);
    Опции.Вставить("description", Описание);
    Опции.Вставить("token"      , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ОтправитьФайл", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьФайл", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПользователей(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПользователя      = 10;
    МассивПользователей = Новый Массив;

    МассивПользователей.Добавить(1);
    МассивПользователей.Добавить(10);

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("users"      , IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользователей (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("users"      , МассивПользователей);
    Опции.Вставить("token"      , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтатусПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("token"      , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УстановитьСтатусПользователя(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    Статус = "dnd";

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("status"     , Статус);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьСтатусПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    Статус = "away";

    Опции = Новый Структура;
    Опции.Вставить("url"        , URL);
    Опции.Вставить("status"     , Статус);
    Опции.Вставить("token"      , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьСтатусПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьБлокКартинки(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Picture"];

    Опции = Новый Структура;
    Опции.Вставить("title", Наименование);
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьБлокКартинки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьБлокКартинки", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьБлокФайла(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Document"];

    Опции = Новый Структура;
    Опции.Вставить("title", Наименование);
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьБлокФайла", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьБлокФайла", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруЧата(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруЧата", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьТекущегоПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьТекущегоПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТекущегоПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьТекущегоПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТекущегоПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтурктуруПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтурктуруПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтурктуруПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтурктуруПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьПользователя(ПараметрыФункции)

    URL   = ПараметрыФункции["Bitrix24_URL"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";
    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 7);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПользователя = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookUserID", IDПользователя);
    ПараметрыФункции.Вставить("Bitrix24_HookUserID", IDПользователя);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"          , Почта);
    СтруктураПользователя.Вставить("NAME"           , "Виталий");
    СтруктураПользователя.Вставить("LAST_NAME"      , "Альпака");
    СтруктураПользователя.Вставить("PERSONAL_MOBILE", "88003553535");
    СтруктураПользователя.Вставить("UF_DEPARTMENT"  , 1);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПользователя);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПользователя = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserID", IDПользователя);
    ПараметрыФункции.Вставить("Bitrix24_UserID", IDПользователя);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 1);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);
    Опции.Вставить("fields", СтруктураПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"          , Почта);
    СтруктураПользователя.Вставить("NAME"           , "Олег");
    СтруктураПользователя.Вставить("LAST_NAME"      , "Лама");
    СтруктураПользователя.Вставить("UF_DEPARTMENT"  , 7);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);
    Опции.Вставить("fields", СтруктураПользователя);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьСтатусПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);
    Опции.Вставить("fire"  , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСтатусПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);
    Опции.Вставить("fire"  , Истина);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСтатусПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСтатусПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользователя (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("userid", IDПользователя);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_НайтиПользователей(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("NAME"              , "Виталий");
    СтруктураФильтра.Вставить("LAST_NAME"         , "Альпака");
    СтруктураФильтра.Вставить("WORK_POSITION"     , "DevOps инженер");
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Отдел маркетинга");
    СтруктураФильтра.Вставить("USER_TYPE"         , "employee");

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("filter", СтруктураФильтра);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НайтиПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НайтиПользователей (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Битрикс");

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("filter", СтруктураФильтра);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "НайтиПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "НайтиПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыТеста)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраЛидов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЛидов", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруЛида(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруЛида", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЛида (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруЛида", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруЛида", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьЛид(ПараметрыФункции)

    МассивПочт = Новый Массив;
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "yo@example.com", "HOME"));
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "hi@example.com", "WORK"));

    МассивНомеров = Новый Массив;
    МассивНомеров.Добавить(Новый Структура("VALUE,VALUE_TYPE", "88005553535", "WORK"));

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Пушкина, д. 10");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Россия");
    СтруктураПолей.Вставить("EMAIL"          , МассивПочт);
    СтруктураПолей.Вставить("NAME"           , "Петр");
    СтруктураПолей.Вставить("LAST_NAME"      , "Петров");
    СтруктураПолей.Вставить("PHONE"          , МассивНомеров);
    СтруктураПолей.Вставить("TITLE"          , "Мегаклиент");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПолей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЛид (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookLeadID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_HookLeadID", IDЛида);

    СтруктураПолей.Вставить("NAME"           , "Иван");
    СтруктураПолей.Вставить("LAST_NAME"      , "Иванов");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПолей);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЛид", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_LeadID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_LeadID", IDЛида);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьЛид(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Лермонтова, д. 20");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Беларусь");
    СтруктураПолей.Вставить("TITLE"          , "Суперклиент");

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);
    Опции.Вставить("fields", СтруктураПолей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЛид (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    СтруктураПолей.Вставить("NAME"           , "Евгений");
    СтруктураПолей.Вставить("LAST_NAME"      , "Евгеньев");

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);
    Опции.Вставить("fields", СтруктураПолей);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЛид", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЛид (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЛид", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЛид (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("lead"  , IDЛида);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЛид", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЛид", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокЛидов(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокЛидов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЛидов (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"    , "Мегаклиент");
    Фильтр.Вставить("HAS_EMAIL", "Y");

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокЛидов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокЛидов", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраСделок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраСделок", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруСделки(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруСделки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруСделки (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруСделки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруСделки", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"         , "Плановая продажа");
    СтруктураПолей.Вставить("TYPE_ID"       , "GOODS");
    СтруктураПолей.Вставить("STAGE_ID"      , "NEW");
    СтруктураПолей.Вставить("COMPANY_ID"    , 1);
    СтруктураПолей.Вставить("CONTACT_ID"    , 3);
    СтруктураПолей.Вставить("OPENED"        , "Y");
    СтруктураПолей.Вставить("ASSIGNED_BY_ID", 1);
    СтруктураПолей.Вставить("PROBABILITY"   , 30);
    СтруктураПолей.Вставить("CURRENCY_ID"   , "USD");
    СтруктураПолей.Вставить("OPPORTUNITY"   , 5000);
    СтруктураПолей.Вставить("CATEGORY_ID"   , 5);
    СтруктураПолей.Вставить("BEGINDATE"     , "2024-01-01");
    СтруктураПолей.Вставить("CLOSEDATE"     , "2030-01-01");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПолей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСделку (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDealID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_HookDealID", IDЛида);

    СтруктураПолей.Вставить("TITLE"    , "Другая сделка");
    СтруктураПолей.Вставить("CLOSEDATE", "2031-01-01");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураПолей);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСделку", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DealID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_DealID", IDЛида);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"         , "Продажа в RUB");
    СтруктураПолей.Вставить("CURRENCY_ID"   , "RUB");
    СтруктураПолей.Вставить("OPPORTUNITY"   , 50000);

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);
    Опции.Вставить("fields", СтруктураПолей);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСделку (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    СтруктураПолей.Вставить("TITLE"    , "Будущая сделка в RUB");
    СтруктураПолей.Вставить("BEGINDATE", "2025-01-01");

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_DealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);
    Опции.Вставить("fields", СтруктураПолей);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСделку", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСделку (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСделку", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСделку (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_DealID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("deal"  , IDСделки);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСделку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСделку", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокСделок(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокСделок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСделок (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"      , "Продажа в RUB");
    Фильтр.Вставить("CURRENCY_ID", "RUB");

    Опции.Вставить("url"   , URL);
    Опции.Вставить("filter", Фильтр);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокСделок", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСделок", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьКалендарь(ПараметрыФункции)

    IDПользователя = 1;

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("type"       , "user");
    СтруктураКалендаря.Вставить("ownerId"    , IDПользователя);
    СтруктураКалендаря.Вставить("name"       , "Новый календарь");
    СтруктураКалендаря.Вставить("description", "Мой новый календарь");
    СтруктураКалендаря.Вставить("color"      , "#FFFFFF");
    СтруктураКалендаря.Вставить("text_color" , "#000000");

        СтруктураЭкспорта = Новый Структура;
        СтруктураЭкспорта.Вставить("ALLOW", "Истина");
        СтруктураЭкспорта.Вставить("SET"  , "all");

    СтруктураКалендаря.Вставить("export", СтруктураЭкспорта);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураКалендаря);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКалендарь (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                             // SKIP

    IDКалендаря = Результат["result"];                                                   // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCalendarID", IDКалендаря);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCalendarID", IDКалендаря);                   // SKIP

    СтруктураКалендаря.Вставить("name"       , "Другой календарь");
    СтруктураКалендаря.Вставить("description", "Мой другой новый календарь");

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураКалендаря);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКалендаря = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CalendarID", IDКалендаря);
    ПараметрыФункции.Вставить("Bitrix24_CalendarID", IDКалендаря);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьКалендарь(ПараметрыФункции)

    IDПользователя = 1;

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("type"       , "user");
    СтруктураКалендаря.Вставить("ownerId"    , IDПользователя);
    СтруктураКалендаря.Вставить("name"       , "Новое имя календаря");
    СтруктураКалендаря.Вставить("description", "Этот календарь был изменен");

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("calendar", IDКалендаря);
    Опции.Вставить("fields"  , СтруктураКалендаря);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКалендарь (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("calendar", IDКалендаря);
    Опции.Вставить("fields"  , СтруктураКалендаря);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьКалендарь(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];
    IDВладельца = 1;
    Тип         = "user";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("calendar", IDКалендаря);
    Опции.Вставить("owner"   , IDВладельца);
    Опции.Вставить("type"    , Тип);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСделку (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                         // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("calendar", IDКалендаря);
    Опции.Вставить("owner"   , IDВладельца);
    Опции.Вставить("type"    , Тип);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьКалендарь", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьКалендарь", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруКалендаря(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции.Вставить("empty" , Истина);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруКалендаря", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруКалендаря (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСписокКалендарей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDВладельца = 1;
    Тип         = "user";

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("owner"   , IDВладельца);
    Опции.Вставить("type"    , Тип);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКалендарей (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                    // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("owner"   , IDВладельца);
    Опции.Вставить("type"    , Тип);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСписокКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруНастроекКалендаря(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруНастроекКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруНастроекКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                        // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруНастроекКалендаря", Опции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруНастроекКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруПользовательскихНастроекКаледнаря(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруПользовательскихНастроекКаледнаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруПользовательскихНастроекКаледнаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции.Вставить("empty" , Истина);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруПользовательскихНастроекКаледнаря", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруПользовательскихНастроекКаледнаря (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьПользовательскиеНастройкиКалендаря(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url", URL);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользовательскиеНастройкиКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользовательскиеНастройкиКалендаря (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьПользовательскиеНастройкиКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПользовательскиеНастройкиКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_УстановитьПользовательскиеНастройкиКалендаря(ПараметрыФункции)

    СтруктураКалендаря = Новый Структура;
    СтруктураКалендаря.Вставить("view"              , "month");
    СтруктураКалендаря.Вставить("showDeclined"      , "Y");
    СтруктураКалендаря.Вставить("collapseOffHours"  , "N");
    СтруктураКалендаря.Вставить("showCompletedTasks", "N");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("settings", СтруктураКалендаря);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьПользовательскиеНастройкиКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьПользовательскиеНастройкиКалендаря (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Опции = Новый Структура;
    Опции.Вставить("url"     , URL);
    Опции.Вставить("settings", СтруктураКалендаря);
    Опции.Вставить("token"   , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьПользовательскиеНастройкиКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьПользовательскиеНастройкиКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьЗанятостьПользователей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Пользователь = 1;

    Неделя      = 604800;
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    ДатаНачала    = ТекущаяДата;
    ДатаОкончания = ТекущаяДата + Неделя;

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("users", Пользователь);
    Опции.Вставить("from" , ДатаНачала);
    Опции.Вставить("to"   , ДатаОкончания);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЗанятостьПользователей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗанятостьПользователей (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                          // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("url"  , URL);
    Опции.Вставить("users", Пользователь);
    Опции.Вставить("from" , ДатаНачала);
    Опции.Вставить("to"   , ДатаОкончания);
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьЗанятостьПользователей", Опции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗанятостьПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_СоздатьСобытиеКалендаря(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDКалендаря = ПараметрыФункции["Bitrix24_HookCalendarID"];

    Завтра = OPI_Инструменты.ПолучитьТекущуюДату() + 86400;
    Час    = 3600;

    СтруктураСобытия = Новый Структура;

    СтруктураСобытия.Вставить("type"         , "user");
    СтруктураСобытия.Вставить("ownerId"      , 1);
    СтруктураСобытия.Вставить("from"         , XMLСтрока(Завтра));
    СтруктураСобытия.Вставить("to"           , XMLСтрока(Завтра + Час));
    СтруктураСобытия.Вставить("section"      , IDКалендаря);
    СтруктураСобытия.Вставить("name"         , "Новое событие");
    СтруктураСобытия.Вставить("skip_time"    , "N");
    СтруктураСобытия.Вставить("timezone_from", "Europe/Minsk");
    СтруктураСобытия.Вставить("timezone_to"  , "Europe/Minsk");
    СтруктураСобытия.Вставить("description"  , "Описание события");
    СтруктураСобытия.Вставить("color"        , "%23000000>");
    СтруктураСобытия.Вставить("text_color"   , "%23FFFFFF");
    СтруктураСобытия.Вставить("accessibility", "busy");
    СтруктураСобытия.Вставить("importance"   , "high");
    СтруктураСобытия.Вставить("private_event", "N");

        СтруктураПовторяемости = Новый Структура;
        СтруктураПовторяемости.Вставить("FREQ"    , "DAILY");
        СтруктураПовторяемости.Вставить("COUNT"   , 3);
        СтруктураПовторяемости.Вставить("INTERVAL", 10);

            МассивДней = Новый Массив;
            МассивДней.Добавить("SA");
            МассивДней.Добавить("MO");

        СтруктураПовторяемости.Вставить("BYDAY"   , МассивДней);
        СтруктураПовторяемости.Вставить("UNTIL"   , XMLСтрока(Завтра + Час * 24 * 10));

    СтруктураСобытия.Вставить("rrule"     , СтруктураПовторяемости);
    СтруктураСобытия.Вставить("is_meeting", "Y");
    СтруктураСобытия.Вставить("location"  , "Офис");

        МассивНапоминаний = Новый Массив;

            СтруктураНапоминания = Новый Структура;
            СтруктураНапоминания.Вставить("type" , "day");
            СтруктураНапоминания.Вставить("count", 1);

        МассивНапоминаний.Добавить(СтруктураНапоминания);

    СтруктураСобытия.Вставить("remind"   , МассивНапоминаний);
    СтруктураСобытия.Вставить("attendees", СтрРазделить("1,10", ","));
    СтруктураСобытия.Вставить("host"     , 1);

        СтруктураВстречи = Новый Структура;
        СтруктураВстречи.Вставить("notify"      , "Y");
        СтруктураВстречи.Вставить("reinvite"    , "Y");
        СтруктураВстречи.Вставить("allow_invite", "N");
        СтруктураВстречи.Вставить("hide_guests" , "N");

    СтруктураСобытия.Вставить("meeting", СтруктураВстречи);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                    // SKIP

    IDСобытия = Результат["result"];                                                // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCEventID", IDСобытия); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCEventID", IDСобытия);                  // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    СтруктураСобытия.Вставить("section", IDКалендаря);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("fields", СтруктураСобытия);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "СоздатьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСобытия = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CEventID", IDСобытия);
    ПараметрыФункции.Вставить("Bitrix24_CEventID", IDСобытия);

КонецПроцедуры

Процедура CLI_Bitrix24_УдалитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УдалитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);                                 // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСобытияКалендарей(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDВладельца = 1;
    Тип         = "user";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("owner" , IDВладельца);
    Опции.Вставить("type"  , Тип);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСобытияКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытияКалендарей (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    URL          = ПараметрыФункции["Bitrix24_Domain"];
    Токен        = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия    = ПараметрыФункции["Bitrix24_CEventID"];
    IDКалендаря1 = ПараметрыФункции["Bitrix24_HookCalendarID"];
    IDКалендаря2 = ПараметрыФункции["Bitrix24_CalendarID"];

    Завтра      = OPI_Инструменты.ПолучитьТекущуюДату() + 86400;
    Послезавтра = Завтра + 86400;

    МассивКалендарей = Новый Массив;
    МассивКалендарей.Добавить(IDКалендаря1);
    МассивКалендарей.Добавить(IDКалендаря2);

    Фильтр = Новый Структура;
    Фильтр.Вставить("from"   , Завтра);
    Фильтр.Вставить("to"     , Послезавтра);
    Фильтр.Вставить("section", МассивКалендарей);

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("owner" , IDВладельца);
    Опции.Вставить("type"  , Тип);
    Опции.Вставить("filter", Фильтр);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСобытияКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСобытияКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ИзменитьСобытиеКалендаря(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    СтруктураСобытия = Новый Структура;

    СтруктураСобытия.Вставить("ownerId"      , 1);
    СтруктураСобытия.Вставить("type"         , "user");
    СтруктураСобытия.Вставить("name"         , "Измененное событие");
    СтруктураСобытия.Вставить("description"  , "Новое описание события");
    СтруктураСобытия.Вставить("importance"   , "low");
    СтруктураСобытия.Вставить("private_event", "Y");

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("fields", СтруктураСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСобытиеКалендаря (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                      // SKIP

    IDСобытия = Результат["result"];                                                // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCEventID", IDСобытия); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCEventID", IDСобытия);                  // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия   = ПараметрыФункции["Bitrix24_CEventID"];
    IDКалендаря = ПараметрыФункции["Bitrix24_CalendarID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("fields", СтруктураСобытия);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ИзменитьСобытиеКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСобытиеКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСобытия = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CEventID", IDСобытия);
    ПараметрыФункции.Вставить("Bitrix24_CEventID", IDСобытия);

КонецПроцедуры

Процедура CLI_Bitrix24_УстановитьСтатусУчастияПользователя(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];
    Статус    = "Y";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("status", Статус);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьСтатусУчастияПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьСтатусУчастияПользователя (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);                                               // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("status", Статус);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "УстановитьСтатусУчастияПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьСтатусУчастияПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтатусУчастияПользователя(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDСобытия = ПараметрыФункции["Bitrix24_HookCEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусУчастияПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусУчастияПользователя (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);                                        // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСобытия = ПараметрыФункции["Bitrix24_CEventID"];

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("event" , IDСобытия);
    Опции.Вставить("token" , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтатусУчастияПользователя", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусУчастияПользователя", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруСобытияКалендаря(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруСобытияКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруСобытияКалендаря", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции = Новый Структура;
    Опции.Вставить("empty" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруСобытияКалендаря", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруСобытияКалендаря (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

Процедура CLI_Bitrix24_ПолучитьСтруктуруФильтраСобытийКалендарей(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраСобытийКалендарей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраСобытийКалендарей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции = Новый Структура;
    Опции.Вставить("empty" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("bitrix24", "ПолучитьСтруктуруФильтраСобытийКалендарей", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраСобытийКалендарей (пустая)", "Bitrix24");

    Для Каждого Элемент Из Результат Цикл

        Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
            OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);
        КонецЕсли;

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура CLI_CDEK_ПолучитьТокен(ПараметрыФункции)

    Аккаунт = ПараметрыФункции["CDEK_Account"];
    Пароль  = ПараметрыФункции["CDEK_Password"];

    Опции = Новый Структура;
    Опции.Вставить("account", Аккаунт);
    Опции.Вставить("pass"   , Пароль);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьТокен", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТокен", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкТокен(Результат);

    Токен = Результат["access_token"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_Token", Токен);
    OPI_Инструменты.ДобавитьПоле("CDEK_Token", Токен, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьОписаниеЗаказа(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеЗаказа", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_CDEK_СоздатьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    ОписаниеЗаказа = Новый Структура;

        ЛокацияОтправления = Новый Структура;
        ЛокацияОтправления.Вставить("code"   , "44");
        ЛокацияОтправления.Вставить("city"   , "Москва");
        ЛокацияОтправления.Вставить("address", "пр. Ленинградский, д.4");

        ЛокацияНазначения = Новый Структура;
        ЛокацияНазначения.Вставить("code"   , "270");
        ЛокацияНазначения.Вставить("city"   , "Новосибирск");
        ЛокацияНазначения.Вставить("address", "ул. Блюхера, 32");

        Получатель = Новый Структура;

            Телефоны = Новый Массив;
            Телефоны.Добавить(Новый Структура("number", "+79134637228"));

        Получатель.Вставить("phones", Телефоны);
        Получатель.Вставить("name"  , "Иванов Иван");

        Отправитель = Новый Структура("name", "Петров Петр");

        Услуги = Новый Массив;

            Услуга = Новый Структура;
            Услуга.Вставить("code"     , "SECURE_PACKAGE_A2");
            Услуга.Вставить("parameter", 10);

        Услуги.Добавить(Услуга);

        Пакеты = Новый Массив;

            Пакет = Новый Структура;

                Позиции = Новый Массив;

                    Позиция = Новый Структура;

                        Оплата = Новый Структура;
                        Оплата.Вставить("value", 3000);

                    Позиция.Вставить("payment" , Оплата);
                    Позиция.Вставить("ware_key", "00055");
                    Позиция.Вставить("name"    , "Товар");
                    Позиция.Вставить("cost"    , 300);
                    Позиция.Вставить("amount"  , 2);
                    Позиция.Вставить("weight"  , 700);
                    Позиция.Вставить("url"     , "www.item.ru");

                Позиции.Добавить(Позиция);

            Пакет.Вставить("items"  , Позиции);
            Пакет.Вставить("number" , "bar-001");
            Пакет.Вставить("comment", "Упаковка");
            Пакет.Вставить("height" , 10);
            Пакет.Вставить("length" , 10);
            Пакет.Вставить("weight" , "4000");
            Пакет.Вставить("width"  , 10);

        Пакеты.Добавить(Пакет);

    ОписаниеЗаказа.Вставить("from_location", ЛокацияОтправления);
    ОписаниеЗаказа.Вставить("to_location"  , ЛокацияНазначения);
    ОписаниеЗаказа.Вставить("packages"     , Пакеты);
    ОписаниеЗаказа.Вставить("recipient"    , Получатель);
    ОписаниеЗаказа.Вставить("sender"       , Отправитель);
    ОписаниеЗаказа.Вставить("services"     , Услуги);

    ОписаниеЗаказа.Вставить("number"     , Строка(Новый УникальныйИдентификатор));
    ОписаниеЗаказа.Вставить("comment"    , "Новый заказ");
    ОписаниеЗаказа.Вставить("tariff_code", 139);

    ОписаниеЗаказа.Вставить("delivery_recipient_cost"    , Новый Структура("value"        , 50));
    ОписаниеЗаказа.Вставить("delivery_recipient_cost_adv", Новый Структура("sum,threshold", 3000, 200));

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("order"  , ОписаниеЗаказа);
    Опции.Вставить("ostore" , Истина);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СоздатьЗаказ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьЗаказ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

    ВнутреннийНомер = Результат["entity"]["number"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderIMN", ВнутреннийНомер);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderIMN", ВнутреннийНомер, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьЗаказПоНомеру(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    НомерЗаказа = ПараметрыФункции["CDEK_OrderIMN"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("number"  , НомерЗаказа);
    Опции.Вставить("internal", Истина);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьЗаказПоНомеру", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаказПоНомеру", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ИзменитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    ОписаниеЗаказа = Новый Структура("comment", "Новый комментарий");

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("order"   , ОписаниеЗаказа);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ИзменитьЗаказ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_УдалитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "УдалитьЗаказ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ОформитьКлиентскийВозврат(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тариф = 139;

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("tariff"  , Тариф);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ОформитьКлиентскийВозврат", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОформитьКлиентскийВозврат", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_СоздатьОтказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СоздатьОтказ", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьОтказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеЗаявкиКурьера", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеЗаявкиКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен       = ПараметрыФункции["CDEK_Token"];
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    ОписаниеЗаявки = Новый Структура;
    ОписаниеЗаявки.Вставить("intake_date"     , Формат(ТекущаяДата + 60 * 60 * 24, "ДФ=yyyy-MM-dd"));
    ОписаниеЗаявки.Вставить("intake_time_from", "10:00");
    ОписаниеЗаявки.Вставить("intake_time_to"  , "17:00");
    ОписаниеЗаявки.Вставить("name"            , "Консолидированный груз");
    ОписаниеЗаявки.Вставить("weight"          , 1000);
    ОписаниеЗаявки.Вставить("length"          , 10);
    ОписаниеЗаявки.Вставить("width"           , 10);
    ОписаниеЗаявки.Вставить("height"          , 10);
    ОписаниеЗаявки.Вставить("comment"         , "Комментарий курьеру");
    ОписаниеЗаявки.Вставить("need_call"       , Ложь);

        Отправитель = Новый Структура;
        Отправитель.Вставить("company", "Компания");
        Отправитель.Вставить("name"   , "Иванов Иван");

            Телефоны = Новый Массив;
            Телефон  = Новый Структура("number", "+79589441654");
            Телефоны.Добавить(Телефон);

        Отправитель.Вставить("phones", Телефоны);

    ОписаниеЗаявки.Вставить("sender", Отправитель);

        ТочкаОтправления = Новый Структура;
        ТочкаОтправления.Вставить("code"        , "44");
        ТочкаОтправления.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
        ТочкаОтправления.Вставить("postal_code" , "109004");
        ТочкаОтправления.Вставить("longitude"   , 37.6204);
        ТочкаОтправления.Вставить("latitude"    , 55.754);
        ТочкаОтправления.Вставить("country_code", "RU");
        ТочкаОтправления.Вставить("region"      , "Москва");
        ТочкаОтправления.Вставить("sub_region"  , "Москва");
        ТочкаОтправления.Вставить("city"        , "Москва");
        ТочкаОтправления.Вставить("kladr_code"  , "7700000000000");
        ТочкаОтправления.Вставить("address"     , "ул. Блюхера, 32");

    ОписаниеЗаявки.Вставить("from_location", ТочкаОтправления);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("intake" , ОписаниеЗаявки);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СоздатьЗаявкуНаВызовКурьера", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_IntakeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_IntakeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьЗаявкуНаВызовКурьера", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "УдалитьЗаявкуНаВызовКурьера", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_СформироватьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тип   = "tpl_russia";
    Копий = 1;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuids"  , UUID);
    Опции.Вставить("type"   , Тип);
    Опции.Вставить("count"  , Копий);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СформироватьКвитанцию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьКвитанцию", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrintUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrintUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrintUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьКвитанцию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКвитанцию", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("getfile", Истина);
    Опции.Вставить("testapi", Истина);
    Опции.Вставить("out"    , ИВФ);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьКвитанцию", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьКвитанцию (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 50000);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CLI_CDEK_СформироватьШтрихкод(ПараметрыФункции)

    Токен  = ПараметрыФункции["CDEK_Token"];
    UUID   = ПараметрыФункции["CDEK_OrderUUID"];
    Формат = "A5";
    Копий  = 1;

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuids"  , UUID);
    Опции.Вставить("count"  , Копий);
    Опции.Вставить("format" , Формат);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СформироватьШтрихкод", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьШтрихкод", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_BarcodeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_BarcodeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьШтрихкод(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_BarcodeUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьШтрихкод", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьШтрихкод", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("getfile", Истина);
    Опции.Вставить("testapi", Истина);
    Опции.Вставить("out"    , ИВФ);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьШтрихкод", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьШтрихкод (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьДоступныеИнтервалыДоставки", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДоступныеИнтервалыДоставки", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкИнтервалыДоставки(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьОписаниеДоговоренности(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеДоговоренности", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеДоговоренности", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции = Новый Структура;
    Опции.Вставить("empty", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеДоговоренности", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеДоговоренности (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    Заказ = ПараметрыФункции["CDEK_OrderUUID"];

    Сутки        = 60 * 60 * 24;
    ТекущаяДата  = НачалоДня(OPI_Инструменты.ПолучитьТекущуюДату());
    ДатаДоставки = ТекущаяДата + Сутки * 14;

    Пока ДеньНедели(ДатаДоставки) > 5 Цикл
        ДатаДоставки = ДатаДоставки + Сутки;
    КонецЦикла;

    Договоренность = Новый Структура;

    Договоренность.Вставить("cdek_number", "1106207236");
    Договоренность.Вставить("order_uuid" , Заказ);
    Договоренность.Вставить("date"       , Формат(ДатаДоставки, "ДФ=yyyy-MM-dd"));
    Договоренность.Вставить("time_from"  , "10:00");
    Договоренность.Вставить("time_to"    , "17:00");
    Договоренность.Вставить("comment"    , "Офис группы компаний");

        МестоДоставки = Новый Структура;
        МестоДоставки.Вставить("code"        , "270");
        МестоДоставки.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
        МестоДоставки.Вставить("postal_code" , "109004");
        МестоДоставки.Вставить("longitude"   , 37.6204);
        МестоДоставки.Вставить("latitude"    , 55.754);
        МестоДоставки.Вставить("country_code", "RU");
        МестоДоставки.Вставить("region"      , "Новосибирск");
        МестоДоставки.Вставить("sub_region"  , "Новосибирск");
        МестоДоставки.Вставить("city"        , "Новосибирск");
        МестоДоставки.Вставить("kladr_code"  , "7700000000000");
        МестоДоставки.Вставить("address"     , "ул. Блюхера, 33");

    Договоренность.Вставить("to_location", МестоДоставки);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("appt"   , Договоренность);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ЗафиксироватьДоговоренностьОДоставке", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗафиксироватьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_ApptUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_ApptUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_ApptUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("uuid"   , UUID);
    Опции.Вставить("testapi", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьДоговоренностьОДоставке", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_CDEK_СоздатьПреалерт(ПараметрыФункции)

    Токен        = ПараметрыФункции["CDEK_Token"];
    UUID         = ПараметрыФункции["CDEK_OrderUUID"];
    ПВЗ          = "NSK27";
    ДатаПередачи = OPI_Инструменты.ПолучитьТекущуюДату() + 60 * 60 * 24;

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuids"   , UUID);
    Опции.Вставить("date"    , ДатаПередачи);
    Опции.Вставить("point"   , ПВЗ);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "СоздатьПреалерт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrealertUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrealertUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьПреалерт(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrealertUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьПреалерт", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьСтатусПаспортныхДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтатусПаспортныхДанных", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкПаспорт(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьЧекЗаказа(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("uuid"    , UUID);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьЧекЗаказа", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧекЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьЧекиНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("date"    , ДатаПолучения);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьЧекиНаДату", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЧекиНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("date"    , ДатаПолучения);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьРеестрыПлатежейНаДату", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьРеестрыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("date"    , ДатаПолучения);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьПереводыПлатежейНаДату", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьПереводыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеФильтраОфисов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеФильтраОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции = Новый Структура;
    Опции.Вставить("empty", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьОписаниеФильтраОфисов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеФильтраОфисов (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьСписокОфисов(ПараметрыФункции)

    Токен  = ПараметрыФункции["CDEK_Token"];
    Фильтр = Новый Структура;
    Фильтр.Вставить("weight_max" , 50);
    Фильтр.Вставить("city_code"  , 270);
    Фильтр.Вставить("allowed_cod", Истина);

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("filter"  , Фильтр);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьСписокОфисов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура CLI_CDEK_ПолучитьСписокРегионов(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token"   , Токен);
    Опции.Вставить("testapi" , Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("cdek", "ПолучитьСписокРегионов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокРегионов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура CLI_YandexMetrika_ПолучитьСписокМеток(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСписокМеток", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокМеток", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетки(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_СоздатьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    Наименование = "Новая метка";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("title", Наименование);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "СоздатьМетку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);

    IDМетки = Результат["label"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_LabelID", IDМетки);
    OPI_Инструменты.ДобавитьПоле("Metrika_LabelID", IDМетки, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_YandexMetrika_УдалитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("label", IDМетки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "УдалитьМетку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ИзменитьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    IDМетки      = ПараметрыФункции["Metrika_LabelID"];
    Наименование = "Новое имя метки";

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("label", IDМетки);
    Опции.Вставить("title", Наименование);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ИзменитьМетку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);

КонецПроцедуры

Процедура CLI_YandexMetrika_ПолучитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Опции = Новый Структура;
    Опции.Вставить("token", Токен);
    Опции.Вставить("label", IDМетки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьМетку", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСтруктуруСчетчика", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруСчетчика", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_СоздатьСчетчик(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

        СтруктураНастроекКода = Новый Структура;
        СтруктураНастроекКода.Вставить("async"          , 0);
        СтруктураНастроекКода.Вставить("clickmap"       , 1);
        СтруктураНастроекКода.Вставить("ecommerce"      , 1);
        СтруктураНастроекКода.Вставить("in_one_line"    , 0);
        СтруктураНастроекКода.Вставить("track_hash"     , 1);
        СтруктураНастроекКода.Вставить("visor"          , 1);
        СтруктураНастроекКода.Вставить("xml_site"       , 0);
        СтруктураНастроекКода.Вставить("ytm"            , 0);
        СтруктураНастроекКода.Вставить("alternative_cdn", 1);

            СтруктураИнформера = Новый Структура;
            СтруктураИнформера.Вставить("color_arrow", 1);
            СтруктураИнформера.Вставить("color_end"  , "EFEFEFFE");
            СтруктураИнформера.Вставить("color_start", "EEEEEEEE");
            СтруктураИнформера.Вставить("color_text" , 0);
            СтруктураИнформера.Вставить("enabled"    , 1);
            СтруктураИнформера.Вставить("indicator"  , "uniques");
            СтруктураИнформера.Вставить("size"       , 2);
            СтруктураИнформера.Вставить("type"       , "ext");

        СтруктураНастроекКода.Вставить("informer", СтруктураИнформера);

    СтруктураСчетчика.Вставить("code_options", СтруктураНастроекКода);

        СтруктураФлагов = Новый Структура;
        СтруктураФлагов.Вставить("collect_first_party_data"             , Истина);
        СтруктураФлагов.Вставить("measurement_enabled"                  , Истина);
        СтруктураФлагов.Вставить("use_in_benchmarks"                    , Истина);
        СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Истина);

    СтруктураСчетчика.Вставить("counter_flags"          , СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"               , 1);
    СтруктураСчетчика.Вставить("filter_robots"          , 2);
    СтруктураСчетчика.Вставить("gdpr_agreement_accepted", 1);

        СтруктураДомена = Новый Структура("site", "openintegrations.dev");

    СтруктураСчетчика.Вставить("site2", СтруктураДомена);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("fields", СтруктураСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "СоздатьСчетчик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

    IDСчетчика = Результат["counter"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_CounterID", IDСчетчика);
    OPI_Инструменты.ДобавитьПоле("Metrika_CounterID", IDСчетчика, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CLI_YandexMetrika_УдалитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("counter", IDСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "УдалитьСчетчик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ИзменитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

        СтруктураФлагов = Новый Структура;
        СтруктураФлагов.Вставить("collect_first_party_data"             , Ложь);
        СтруктураФлагов.Вставить("measurement_enabled"                  , Ложь);
        СтруктураФлагов.Вставить("use_in_benchmarks"                    , Ложь);
        СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Ложь);

    СтруктураСчетчика.Вставить("counter_flags"          , СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"               , 0);
    СтруктураСчетчика.Вставить("filter_robots"          , 1);

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("counter", IDСчетчика);
    Опции.Вставить("fields" , СтруктураСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ИзменитьСчетчик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИзменитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ПолучитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("counter", IDСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСчетчик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ВосстановитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("counter", IDСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ВосстановитьСчетчик", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВосстановитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСписокСчетчиков", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСчетчиков", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);

    // Фильтр по списку ID

    Фильтр = Новый Структура;

    МассивСчетчиков = Новый Массив;
    МассивСчетчиков.Добавить(IDСчетчика);

    Фильтр.Вставить("counter_ids", МассивСчетчиков);

    Опции = Новый Структура;
    Опции.Вставить("token" , Токен);
    Опции.Вставить("filter", Фильтр);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСписокСчетчиков", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокСчетчиков (фильтр)", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);

КонецПроцедуры

Процедура CLI_YandexMetrika_ПолучитьСписокОпераций(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Опции = Новый Структура;
    Опции.Вставить("token"  , Токен);
    Опции.Вставить("counter", IDСчетчика);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("metrika", "ПолучитьСписокОпераций", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОпераций", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаОперации(Результат);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура CLI_S3_ПолучитьСтруктуруДанных(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруДанных", "S3");

КонецПроцедуры

Процедура CLI_S3_ОтправитьЗапросБезТела(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"] + "/opi-newbucket2";
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Метод = "GET";

    Опции = Новый Структура;
    Опции.Вставить("method", Метод);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ОтправитьЗапросБезТела", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьЗапросБезТела");

КонецПроцедуры

Процедура CLI_S3_ОтправитьЗапросСТелом(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Метод = "PUT";
    Тело  = "C:\test_data\document.docx";

    Опции = Новый Структура;
    Опции.Вставить("method", Метод);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("body"  , Тело);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ОтправитьЗапросСТелом", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтправитьЗапросСТелом");

КонецПроцедуры

Процедура CLI_S3_СоздатьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "СоздатьБакет", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБакет (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "СоздатьБакет", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УдалитьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьБакет", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьБакет (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьБакет", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьСписокБакетов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Опции = Новый Структура;
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСписокБакетов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокБакетов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПроверитьДоступностьБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПроверитьДоступностьБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьДоступностьБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("name"   , Наименование);
    Опции.Вставить("basic"  , ОсновныеДанные);
    Опции.Вставить("account", "1234");

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПроверитьДоступностьБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПроверитьДоступностьБакета (аккаунт)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "opi-newbucket2";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьШифрованиеБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьШифрованиеБакета", "S3");

КонецПроцедуры

Процедура CLI_S3_УдалитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "opi-newbucket2";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьШифрованиеБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УстановитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "opi-newbucket2";

    XMLКонфигурация = "<ServerSideEncryptionConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/"">
    |    <Rule>
    |        <ApplyServerSideEncryptionByDefault>
    |            <SSEAlgorithm>AES256</SSEAlgorithm>
    |        </ApplyServerSideEncryptionByDefault>
    |    </Rule>
    |</ServerSideEncryptionConfiguration>";

    XMLКонфигурация = ПолучитьДвоичныеДанныеИзСтроки(XMLКонфигурация);
    ИВФ             = ПолучитьИмяВременногоФайла("xml");
    XMLКонфигурация.Записать(ИВФ);

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("conf" , ИВФ);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьШифрованиеБакета", Опции);

    УдалитьФайлы(ИВФ);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3НеПоддерживается(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "УстановитьШифрованиеБакета", "S3", Истина);

КонецПроцедуры

Процедура CLI_S3_ПолучитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТегиБакета (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УстановитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    СтруктураТегов = Новый Структура;

    СтруктураТегов.Вставить("MyTag1", "SomeValue");
    СтруктураТегов.Вставить("MyTag2", "AnotherOne");

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("tagset", СтруктураТегов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьТегиБакета (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("tagset", СтруктураТегов);
    Опции.Вставить("dir"   , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УдалитьТегиБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТегиБакета (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьТегиБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТегиБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    Результат = OPI_S3.ПолучитьТегиБакета(Наименование, ОсновныеДанные, Ложь);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТегиБакета (получение)", "S3");

КонецПроцедуры

Процедура CLI_S3_ПолучитьНастройкийВерсионированияБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьНастройкийВерсионированияБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьНастройкийВерсионированияБакета (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name" , Наименование);
    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("dir"  , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьНастройкийВерсионированияБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьНастройкийВерсионированияБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УстановитьНастройкиВерсионированияБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);
    Статус         = Истина;

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("status", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьНастройкиВерсионированияБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьНастройкиВерсионированияБакета (DB)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("status", Истина);
    Опции.Вставить("dir"   , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьНастройкиВерсионированияБакета", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьНастройкиВерсионированияБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ЗагрузитьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("data"  , Содержимое);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ЗагрузитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные

    ОсновныеДанные.Вставить("ChunkSize", 5242880);

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("data"  , Содержимое);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ЗагрузитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьОбъект (частями)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура CLI_S3_ЗагрузитьОбъектЦеликом(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "pictureSmall.jpg";
    Бакет        = "opi-gpbucket3";
    Содержимое   = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("data"  , Содержимое);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ЗагрузитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьОбъектЦеликом", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура CLI_S3_УдалитьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьОписаниеОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьОписаниеОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОписаниеОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_КопироватьОбъект(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    ПутьИсточник  = "picture.jpg";
    БакетИсточник = "opi-gpbucket3";

    ПутьПриемник  = "new_picture.jpg";
    БакетПриемник = "opi-dirbucket3";

    Опции = Новый Структура;
    Опции.Вставить("sname"  , ПутьИсточник);
    Опции.Вставить("sbucket", БакетИсточник);
    Опции.Вставить("name"   , ПутьПриемник);
    Опции.Вставить("bucket" , БакетПриемник);
    Опции.Вставить("basic"  , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "КопироватьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "КопироватьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);
    OPI_S3.УдалитьОбъект(ПутьПриемник, БакетПриемник, ОсновныеДанные);

КонецПроцедуры

Процедура CLI_S3_УстановитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    СтруктураТегов = Новый Структура;

    СтруктураТегов.Вставить("MyTag1", "SomeValue");
    СтруктураТегов.Вставить("MyTag2", "AnotherOne");

    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("tagset", СтруктураТегов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УстановитьТегиОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УстановитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьТегиОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_УдалитьТегиОбъекта(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "УдалитьТегиОбъекта", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТегиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьСписокОбъектов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Бакет = "opi-gpbucket3";

    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСписокОбъектов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокОбъектов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьСписокВерсийОбъектов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Бакет   = "opi-gpbucket3";
    Префикс = "pic";

    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("prefix", Префикс);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСписокВерсийОбъектов", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСписокВерсийОбъектов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьОбъект(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    НеобходимыйРазмер = Картинка.Размер();

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбъект", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, НеобходимыйРазмер);

    ВременныйФайл = ПолучитьИмяВременногоФайла();
    ОсновныеДанные.Вставить("ChunkSize", 200000);

    Опции.Вставить("basic", ОсновныеДанные);
    Опции.Вставить("out"  , ВременныйФайл);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбъект (файл)", "S3");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Размер() = НеобходимыйРазмер);
    УдалитьФайлы(ВременныйФайл);

    Наименование = "bigfile.exe";
    Бакет        = "newbucket2";

    ВременныйФайлБольшой = ПолучитьИмяВременногоФайла();

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("out"   , ВременныйФайлБольшой);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбъект (большой, файл)", "S3");
    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат.Размер() = 34432400);
    УдалитьФайлы(ВременныйФайлБольшой);

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьОбъект", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьОбъект (большой, ДД)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 34432400);

КонецПроцедуры

Процедура CLI_S3_ИнициализироватьЗагрузкуЧастями(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Содержимое = ПараметрыФункции["Audio"]; // URL, Путь или Двоичные данные
    Содержимое = OPI_Инструменты.Get(Содержимое);

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ИнициализироватьЗагрузкуЧастями", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ИнициализироватьЗагрузкуЧастями", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    IDЗагрузки    = Результат["response"]["InitiateMultipartUploadResult"]["UploadId"];
    ОбщийРазмер   = Содержимое.Размер();
    РазмерУчастка = 5242880;
    ПрочитаноБайт = 0;
    НомерЧасти    = 1;

    ЧтениеДанных  = Новый ЧтениеДанных(Содержимое);
    ИсходныйПоток = ЧтениеДанных.ИсходныйПоток();
    МассивТегов   = Новый Массив;

    Пока ПрочитаноБайт < ОбщийРазмер Цикл

        ТекущееЧтение = ЧтениеДанных.Прочитать(РазмерУчастка);
        ТекущиеДанные = ТекущееЧтение.ПолучитьДвоичныеДанные();

        ИВФ = ПолучитьИмяВременногоФайла();
        ТекущиеДанные.Записать(ИВФ);

        Если ТекущиеДанные.Размер() = 0 Тогда
            Прервать;
        КонецЕсли;

        Опции = Новый Структура;
        Опции.Вставить("name"   , Наименование);
        Опции.Вставить("bucket" , Бакет);
        Опции.Вставить("basic"  , ОсновныеДанные);
        Опции.Вставить("upload" , IDЗагрузки);
        Опции.Вставить("part"   , НомерЧасти);
        Опции.Вставить("content", ИВФ);

        Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ЗагрузитьЧастьОбъекта", Опции);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗагрузитьЧастьОбъекта", "S3");
        OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

        ПрочитаноБайт = ИсходныйПоток.ТекущаяПозиция();

        ETag = Результат["headers"]["Etag"];
        ETag = ?(ETag = Неопределено, Результат["headers"]["ETag"], ETag);

        МассивТегов.Добавить(ETag);

        УдалитьФайлы(ИВФ);

        НомерЧасти = НомерЧасти + 1;

    КонецЦикла;

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("upload", IDЗагрузки);
    Опции.Вставить("tags"  , МассивТегов);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ЗавершитьЗагрузкуЧастями", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ЗавершитьЗагрузкуЧастями", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

Процедура CLI_S3_ОтменитьЗагрузкуЧастями(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "fileChunked.mp3";
    Бакет        = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);

    Начало     = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ИнициализироватьЗагрузкуЧастями", Опции);
    IDЗагрузки = Начало["response"]["InitiateMultipartUploadResult"]["UploadId"];

    Опции = Новый Структура;
    Опции.Вставить("name"  , Наименование);
    Опции.Вставить("bucket", Бакет);
    Опции.Вставить("basic" , ОсновныеДанные);
    Опции.Вставить("upload", IDЗагрузки);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ОтменитьЗагрузкуЧастями", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтменитьЗагрузкуЧастями", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура CLI_S3_ПолучитьСсылкуСкачиванияОбъекта(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    НеобходимыйРазмер = Картинка.Размер();

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "picture.jpg";
    Бакет        = "opi-gpbucket3";

    Опции = Новый Структура;
    Опции.Вставить("name"   , Наименование);
    Опции.Вставить("bucket" , Бакет);
    Опции.Вставить("basic"  , ОсновныеДанные);
    Опции.Вставить("expires", 7200);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСсылкуСкачиванияОбъекта", Опции);
    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуСкачиванияОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    Результат = OPI_Инструменты.Get(Результат);

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, НеобходимыйРазмер);

КонецПроцедуры

Процедура CLI_S3_ПолучитьСсылкуЗагрузкиОбъекта(ПараметрыФункции)

    Картинка          = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    НеобходимыйРазмер = Картинка.Размер();

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    Опции = Новый Структура;
    Опции.Вставить("url"   , URL);
    Опции.Вставить("access", AccessKey);
    Опции.Вставить("secret", SecretKey);
    Опции.Вставить("region", Region);

    ОсновныеДанные = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСтруктуруДанных", Опции);

    Наименование = "pictureU.jpg";
    Бакет        = "newbucket2";

    Опции = Новый Структура;
    Опции.Вставить("name"   , Наименование);
    Опции.Вставить("bucket" , Бакет);
    Опции.Вставить("basic"  , ОсновныеДанные);
    Опции.Вставить("expires", 7200);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("s3", "ПолучитьСсылкуЗагрузкиОбъекта", Опции);
    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуЗагрузкиОбъекта", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    Результат = OPI_Инструменты.Put(Результат, Картинка, , Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСсылкуЗагрузкиОбъекта (PUT)", "S3");

    Проверка = OPI_S3.ПолучитьОписаниеОбъекта(Наименование, Бакет, ОсновныеДанные);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "ПолучитьОписаниеОбъекта (Ссылка загрузки)", "S3");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(НеобходимыйРазмер = Число(Проверка["headers"]["Content-Length"])).Равно(Истина);

    OPI_S3.УдалитьОбъект(Наименование, Бакет, ОсновныеДанные);

КонецПроцедуры

#КонецОбласти

#Область TCP

Процедура CLI_TCP_ОбработатьЗапрос(ПараметрыФункции) Экспорт

    Адрес  = ПараметрыФункции["TCP_Address"];
    Данные = "Echo this!\n";

    Опции = Новый Структура;
    Опции.Вставить("address", Адрес);
    Опции.Вставить("data"   , Данные);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("tcp", "ОбработатьЗапрос", Опции);

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбработатьЗапрос", "TCP");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(СтрЗаменить(Результат, Символы.ПС, "\n"), Данные);

КонецПроцедуры

#КонецОбласти

#Область SQLite

Процедура CLI_SQLite_ВыполнитьЗапросSQL(ПараметрыФункции)

    ИВФ = ПолучитьИмяВременногоФайла("sqlite");

    ФайлКартинки = ПолучитьИмяВременногоФайла("png");

    Картинка = ПараметрыФункции["Picture"];
    КопироватьФайл(Картинка, ФайлКартинки);

    Блоб = Новый Структура("blob", ФайлКартинки);

    ТекстЗапроса = "
    |CREATE TABLE test_table (
    |id INTEGER PRIMARY KEY,
    |name TEXT,
    |age INTEGER,
    |salary REAL,
    |is_active BOOLEAN,
    |created_at DATETIME,
    |data BLOB
    |);";

    Опции = Новый Структура;
    Опции.Вставить("sql", СтрЗаменить(ТекстЗапроса, Символы.ПС, ""));
    Опции.Вставить("db" , ИВФ);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ВыполнитьЗапросSQL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Create)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    // INSERT с параметрами

    ТекстЗапроса = "
    |INSERT INTO test_table (name, age, salary, is_active, created_at, data)
    |VALUES (?1, ?2, ?3, ?4, ?5, ?6);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить("Vitaly");                              // TEXT
    МассивПараметров.Добавить(25);                                    // INTEGER
    МассивПараметров.Добавить(1000.12);                               // REAL
    МассивПараметров.Добавить(Истина);                                // BOOL
    МассивПараметров.Добавить(OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    МассивПараметров.Добавить(Блоб);                                  // BLOB

    Опции = Новый Структура;
    Опции.Вставить("sql"   , СтрЗаменить(ТекстЗапроса, Символы.ПС, ""));
    Опции.Вставить("params", МассивПараметров);
    Опции.Вставить("db"    , ИВФ);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ВыполнитьЗапросSQL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Insert)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT id, name, age, salary, is_active, created_at, data FROM test_table;";

    Опции = Новый Структура;
    Опции.Вставить("sql", СтрЗаменить(ТекстЗапроса, Символы.ПС, ""));
    Опции.Вставить("db" , ИВФ);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ВыполнитьЗапросSQL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Select, код)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Картинка = Новый ДвоичныеДанные(ФайлКартинки);
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Результат["data"][0]["data"]["blob"]).Размер(), Картинка.Размер());

    Попытка
       УдалитьФайлы(ИВФ);
       УдалитьФайлы(ФайлКартинки);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(ОписаниеОшибки(), "Ошибка удаления файла базы", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура CLI_SQLite_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьИнформациюОТаблице", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОТаблице", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура CLI_SQLite_СоздатьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("id"        , "INTEGER PRIMARY KEY");
    СтруктураКолонок.Вставить("name"      , "TEXT");
    СтруктураКолонок.Вставить("age"       , "INTEGER");
    СтруктураКолонок.Вставить("salary"    , "REAL");
    СтруктураКолонок.Вставить("is_active" , "BOOLEAN");
    СтруктураКолонок.Вставить("created_at", "DATETIME");
    СтруктураКолонок.Вставить("data"      , "BLOB");

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("cols" , СтруктураКолонок);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "СоздатьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СоответствиеКолонок = Новый Соответствие;
    СоответствиеКолонок.Вставить("id"                  , "INTEGER PRIMARY KEY");
    СоответствиеКолонок.Вставить("[Непонятная колонка]", "TEXT");

    Опции = Новый Структура;
    Опции.Вставить("table", "test1");
    Опции.Вставить("cols" , СоответствиеКолонок);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "СоздатьТаблицу", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТаблицу (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура CLI_SQLite_ДобавитьЗаписи(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка); // Картинка - Тип: ДвоичныеДанные

    ФайлКартинки = ПолучитьИмяВременногоФайла("png");
    Картинка.Записать(ФайлКартинки);                          // ФайлКартинки - Файл на диске

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    МассивДанных = Новый Массив;

    СтруктураСтроки1 = Новый Структура;
    СтруктураСтроки1.Вставить("name"      , "Vitaly");                              // TEXT
    СтруктураСтроки1.Вставить("age"       , 25);                                    // INTEGER
    СтруктураСтроки1.Вставить("salary"    , 1000.12);                               // REAL
    СтруктураСтроки1.Вставить("is_active" , Истина);                                // BOOL
    СтруктураСтроки1.Вставить("created_at", OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    СтруктураСтроки1.Вставить("data"      , Новый Структура("blob", ФайлКартинки)); // BLOB

    СтруктураСтроки2 = Новый Структура;
    СтруктураСтроки2.Вставить("name"      , "Lesha") ;                              // TEXT
    СтруктураСтроки2.Вставить("age"       , 20);                                    // INTEGER
    СтруктураСтроки2.Вставить("salary"    , 200.20) ;                               // REAL
    СтруктураСтроки2.Вставить("is_active" , Ложь)  ;                                // BOOL
    СтруктураСтроки2.Вставить("created_at", OPI_Инструменты.ПолучитьТекущуюДату()); // DATETIME
    СтруктураСтроки2.Вставить("data"      , Новый Структура("blob", ФайлКартинки)); // BLOB

    МассивДанных.Добавить(СтруктураСтроки1);
    МассивДанных.Добавить(СтруктураСтроки2);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , МассивДанных);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , МассивДанных);
    Опции.Вставить("trn"  , Ложь);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи (без транзакции)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураСтроки2.Вставить("error", "Lesha") ;
    МассивДанных.Добавить(СтруктураСтроки2);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , МассивДанных);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи (ошибка поля)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , МассивДанных);
    Опции.Вставить("trn"  , Ложь);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи (ошибка поля без транзакции)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteСтроки(Результат, 1);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , "not valid json");
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи (ошибка json)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    СоответствиеСтроки = Новый Соответствие;
    СоответствиеСтроки.Вставить("[Непонятная колонка]", "yo");

    Опции = Новый Структура;
    Опции.Вставить("table", "test1");
    Опции.Вставить("rows" , СоответствиеСтроки);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ДобавитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Попытка
       УдалитьФайлы(ФайлКартинки);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(ОписаниеОшибки(), "Ошибка удаления файла картинки", "SQLite");
    КонецПопытки;

КонецПроцедуры

Процедура CLI_SQLite_ПолучитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Поля = Новый Массив;
    Поля.Добавить("name");
    Поля.Добавить("salary");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "name");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Vitaly");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "age");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 30");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("created_at", "DESC");
    Количество = 1;

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", Поля);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("order" , Сортировка);
    Опции.Вставить("limit" , Количество);
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", "['name','age','salary','is_active','created_at']");
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи (без параметров)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураФильтра2.Вставить("type" , "BEETWEEN");
    Фильтры.Добавить(СтруктураФильтра2);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", "['name','age','salary','is_active','created_at']");
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи (ошибка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteОшибка(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , "test1");
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи (непонятная колонка)", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

КонецПроцедуры

Процедура CLI_SQLite_ОбновитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("name"  , "Vitaly A.");
    СтруктураПолей.Вставить("salary", "999999");

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "name");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", "Vitaly");
    СтруктураФильтра.Вставить("union", "AND");
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("values", СтруктураПолей);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ОбновитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    СтруктураФильтра.Вставить("value", "Vitaly A.");

    Фильтры = Новый Массив;
    Фильтры.Добавить(СтруктураФильтра);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", "['name','salary']");
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("db"    , База);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][0], СтруктураПолей);

КонецПроцедуры

Процедура CLI_SQLite_УдалитьЗаписи(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "name");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", "Vitaly A.");
    СтруктураФильтра.Вставить("union", "AND");
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("filter", СтруктураФильтра);
    Опции.Вставить("db"    , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "УдалитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаписи", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", "['name','salary']");
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("db"    , База);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteНетЗаписей(Проверка);

КонецПроцедуры

Процедура CLI_SQLite_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty" , Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьСтруктуруФильтраЗаписей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЗаписей", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции.Вставить("empty" , Истина);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьСтруктуруФильтраЗаписей", Опции);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "SQLite");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

Процедура CLI_SQLite_УдалитьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "УдалитьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьИнформациюОТаблице", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 0);

КонецПроцедуры

Процедура CLI_SQLite_ОчиститьТаблицу(ПараметрыФункции)

    База    = ПараметрыФункции["SQLite_DB"];
    Таблица = "test";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("db"   , База);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ОчиститьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьТаблицу", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_SQLiteУспех(Результат);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьИнформациюОТаблице", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 7);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("sqlite", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "Проверка", "SQLite");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], 0);

КонецПроцедуры

#КонецОбласти

#Область PostgreSQL

Процедура CLI_PostgreSQL_СформироватьСтрокуПодключения(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции);
    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    Результат = СтрЗаменить(Результат, Пароль, "***");
    Результат = СтрЗаменить(Результат, Адрес , "127.0.0.1");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СформироватьСтрокуПодключения", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Истина(СтрНачинаетсяС(Результат, "postgresql"));

КонецПроцедуры

Процедура CLI_PostgreSQL_ВыполнитьЗапросSQL(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    ИВФ      = ПолучитьИмяВременногоФайла();
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    Картинка.Записать(ИВФ);

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Опции = Новый Структура();
    Опции.Вставить("dbc" , СтрокаПодключения);

    Опции.Вставить("table", "users");
    OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьТаблицу", Опции, Ложь);

    Опции.Вставить("table", "test_data");
    OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьТаблицу", Опции, Ложь);

    Опции.Вставить("table", "test_table");
    OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьТаблицу", Опции, Ложь);

    // CREATE

    ТекстЗапроса = "
    |CREATE TABLE test_table (
    |id SERIAL PRIMARY KEY,
    |name NAME,
    |age INT,
    |salary REAL,
    |is_active BOOL,
    |created_at DATE,
    |data BYTEA
    |);";

    Опции = Новый Структура;
    Опции.Вставить("sql" , СтрЗаменить(ТекстЗапроса, Символы.ПС, " "));
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ВыполнитьЗапросSQL", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Create)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                 // SKIP

    // INSERT с параметрами

    ТекстЗапроса = "
    |INSERT INTO test_table (name, age, salary, is_active, created_at, data)
    |VALUES ($1, $2, $3, $4, $5, $6);";

    МассивПараметров = Новый Массив;
    МассивПараметров.Добавить(Новый Структура("NAME" , "Vitaly"));
    МассивПараметров.Добавить(Новый Структура("INT"  , 25));
    МассивПараметров.Добавить(Новый Структура("REAL" , 1000.12));
    МассивПараметров.Добавить(Новый Структура("BOOL" , Истина));
    МассивПараметров.Добавить(Новый Структура("DATE" , OPI_Инструменты.ПолучитьТекущуюДату()));
    МассивПараметров.Добавить(Новый Структура("BYTEA", ИВФ));

    Опции = Новый Структура;
    Опции.Вставить("sql"   , СтрЗаменить(ТекстЗапроса, Символы.ПС, " "));
    Опции.Вставить("params", МассивПараметров);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ВыполнитьЗапросSQL", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Insert)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                 // SKIP

    // SELECT (Результат этого запроса приведен в следующем блоке)

    ТекстЗапроса = "SELECT id, name, age, salary, is_active, created_at, data FROM test_table;";

    Опции = Новый Структура;
    Опции.Вставить("sql" , СтрЗаменить(ТекстЗапроса, Символы.ПС, " "));
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ВыполнитьЗапросSQL", Опции, Ложь);

    Blob = Результат["data"][0]["data"]["BYTEA"];                                                   // SKIP

    Результат["data"][0]["data"]["BYTEA"] = "Base64";                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL", "PostgreSQL");           // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                  // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_Равенство(Base64Значение(Blob).Размер(), Картинка.Размер()); // SKIP

    // DO + Транзакция

    ТекстЗапроса = "DO $$
    |BEGIN
    |    CREATE TABLE users (
    |        id SMALLSERIAL,
    |        name TEXT NOT NULL,
    |        age INT NOT NULL
    |    );
    |    INSERT INTO users (name, age) VALUES ('Alice', 30);
    |    INSERT INTO users (name, age) VALUES ('Bob', 25);
    |    INSERT INTO users (name, age) VALUES ('Charlie', 35);
    |    COMMIT;
    |END $$ LANGUAGE plpgsql;";

    Опции = Новый Структура;
    Опции.Вставить("sql" , СтрЗаменить(ТекстЗапроса, Символы.ПС, " "));
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ВыполнитьЗапросSQL", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (Transaction)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                                      // SKIP

    // SQL запрос из файла

    ФайлSQL = ПараметрыФункции["SQL"]; // Двоичные данные, URL или путь к файлу

    Опции = Новый Структура;
    Опции.Вставить("sql" , ФайлSQL);
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ВыполнитьЗапросSQL", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ВыполнитьЗапросSQL (файл)", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                               // SKIP

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(ОписаниеОшибки(), "Ошибка удаления файла картинки", "PostgreSQL");
    КонецПопытки;

КонецПроцедуры

Процедура CLI_PostgreSQL_СоздатьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    База = "testbase1";

    Опции = Новый Структура();
    Опции.Вставить("dbc" , СтрокаПодключения);
    Опции.Вставить("base", База);

    Удаление = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьБазуДанных", Опции, Ложь);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Удаление, "СоздатьБазуДанных (удаление)", "PostgreSQL");

    Опции = Новый Структура;
    Опции.Вставить("base" , База);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СоздатьБазуДанных", Опции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБазуДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СоздатьБазуДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьБазуДанных (существующая)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура CLI_PostgreSQL_СоздатьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "testtable";

    СтруктураКолонок = Новый Структура;
    СтруктураКолонок.Вставить("bool_field"       , "BOOL");
    СтруктураКолонок.Вставить("oldchar_field"    , """char""");
    СтруктураКолонок.Вставить("smallint_field"   , "SMALLINT");
    СтруктураКолонок.Вставить("smallserial_field", "SMALLSERIAL");
    СтруктураКолонок.Вставить("int_field"        , "INT");
    СтруктураКолонок.Вставить("serial_field"     , "SERIAL");
    СтруктураКолонок.Вставить("oid_field"        , "OID");
    СтруктураКолонок.Вставить("bigint_field"     , "BIGINT");
    СтруктураКолонок.Вставить("bigserial_field"  , "BIGSERIAL");
    СтруктураКолонок.Вставить("real_field"       , "REAL");
    СтруктураКолонок.Вставить("dp_field"         , "DOUBLE PRECISION");
    СтруктураКолонок.Вставить("text_field"       , "TEXT");
    СтруктураКолонок.Вставить("varchar_field"    , "VARCHAR");
    СтруктураКолонок.Вставить("charn_field"      , "CHAR(3)");
    СтруктураКолонок.Вставить("char_field"       , "CHAR");
    СтруктураКолонок.Вставить("name_field"       , "NAME");
    СтруктураКолонок.Вставить("bytea_field"      , "BYTEA");
    СтруктураКолонок.Вставить("ts_field"         , "TIMESTAMP");
    СтруктураКолонок.Вставить("tswtz_field"      , "TIMESTAMP WITH TIME ZONE");
    СтруктураКолонок.Вставить("ip_field"         , "INET");
    СтруктураКолонок.Вставить("json_field"       , "JSON");
    СтруктураКолонок.Вставить("jsonb_field"      , "JSONB");
    СтруктураКолонок.Вставить("date_field"       , "DATE");
    СтруктураКолонок.Вставить("time_field"       , "TIME");
    СтруктураКолонок.Вставить("uuid_field"       , "UUID");

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("cols" , СтруктураКолонок);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СоздатьТаблицу", Опции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СоздатьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "СоздатьТаблицу (существующая)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатЛожь(Результат);

КонецПроцедуры

Процедура CLI_PostgreSQL_ПолучитьИнформациюОТаблице(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "testtable";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьИнформациюОТаблице", Опции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОТаблице", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 25);

    Таблица = "heyho";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьИнформациюОТаблице", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьИнформациюОТаблице (ошибка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура CLI_PostgreSQL_ДобавитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица       = "testtable";
    МассивЗаписей = Новый Массив;

    Картинка = ПараметрыФункции["Picture"];
    ИВФ      = ПолучитьИмяВременногоФайла();
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    Картинка.Записать(ИВФ);

    СлучайнаяСтруктура = Новый Структура("key,value", "ItsKey", 10);

    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();
    ТекущаяДатаЧП = OPI_Инструменты.ДатаRFC3339(ТекущаяДата, "+05:00");

    СтруктураЗаписи = Новый Структура;
    СтруктураЗаписи.Вставить("bool_field"       , Новый Структура("BOOL"                    , Истина));
    СтруктураЗаписи.Вставить("oldchar_field"    , Новый Структура("OLDCHAR"                 , 1));                  // или "char"
    СтруктураЗаписи.Вставить("smallint_field"   , Новый Структура("SMALLINT"                , 5));
    СтруктураЗаписи.Вставить("smallserial_field", Новый Структура("SMALLSERIAL"             , 6));
    СтруктураЗаписи.Вставить("int_field"        , Новый Структура("INT"                     , 100));
    СтруктураЗаписи.Вставить("serial_field"     , Новый Структура("SERIAL"                  , 100));
    СтруктураЗаписи.Вставить("oid_field"        , Новый Структура("OID"                     , 24576));
    СтруктураЗаписи.Вставить("bigint_field"     , Новый Структура("BIGINT"                  , 9999999));
    СтруктураЗаписи.Вставить("bigserial_field"  , Новый Структура("BIGSERIAL"               , 9999999));
    СтруктураЗаписи.Вставить("real_field"       , Новый Структура("REAL"                    , 15.2));
    СтруктураЗаписи.Вставить("dp_field"         , Новый Структура("DOUBLE_PRECISION"        , 1.0002));             // или DOUBLE PRECISION
    СтруктураЗаписи.Вставить("text_field"       , Новый Структура("TEXT"                    , "Some text"));
    СтруктураЗаписи.Вставить("varchar_field"    , Новый Структура("VARCHAR"                 , "Some varchar"));
    СтруктураЗаписи.Вставить("charn_field"      , Новый Структура("CHAR"                    , "AAA"));
    СтруктураЗаписи.Вставить("char_field"       , Новый Структура("CHAR"                    , "A"));
    СтруктураЗаписи.Вставить("name_field"       , Новый Структура("NAME"                    , "Vitaly"));
    СтруктураЗаписи.Вставить("bytea_field"      , Новый Структура("BYTEA"                   , ИВФ));
    СтруктураЗаписи.Вставить("ts_field"         , Новый Структура("TIMESTAMP"               , ТекущаяДата));
    СтруктураЗаписи.Вставить("tswtz_field"      , Новый Структура("TIMESTAMP_WITH_TIME_ZONE", ТекущаяДатаЧП));      // или TIMESTAMP WITH TIME ZONE
    СтруктураЗаписи.Вставить("ip_field"         , Новый Структура("INET"                    , "127.0.0.1"));
    СтруктураЗаписи.Вставить("json_field"       , Новый Структура("JSON"                    , СлучайнаяСтруктура));
    СтруктураЗаписи.Вставить("jsonb_field"      , Новый Структура("JSONB"                   , СлучайнаяСтруктура));
    СтруктураЗаписи.Вставить("date_field"       , Новый Структура("DATE"                    , ТекущаяДата));
    СтруктураЗаписи.Вставить("time_field"       , Новый Структура("TIME"                    , ТекущаяДата));
    СтруктураЗаписи.Вставить("uuid_field"       , Новый Структура("UUID"                    , Строка(Новый УникальныйИдентификатор())));

    МассивЗаписей.Добавить(СтруктураЗаписи);

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("rows" , МассивЗаписей);
    Опции.Вставить("trn"  , Истина);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ДобавитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ДобавитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Попытка
        УдалитьФайлы(ИВФ);
    Исключение
        OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(ОписаниеОшибки(), "Ошибка удаления файла картинки", "PostgreSQL");
    КонецПопытки;

КонецПроцедуры

Процедура CLI_PostgreSQL_ПолучитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    // Все записи без отборов

    Таблица = "testtable";

    Опции = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("dbc"  , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    Если ЗначениеЗаполнено(Результат["data"]) Тогда                                   // SKIP
        Результат["data"][0]["bytea_field"]["BYTEA"]                                  // SKIP
 = Лев(Результат["data"][0]["bytea_field"]["BYTEA"], 10) + "...";          // SKIP
    КонецЕсли;                                                                        // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи", "PostgreSQL"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);                      // SKIP

    // Отборы, выбранные поля, количество и сортировка

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , "test_data");
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "test_data";

    Поля = Новый Массив;
    Поля.Добавить("first_name");
    Поля.Добавить("last_name");
    Поля.Добавить("email");

    Фильтры = Новый Массив;

    СтруктураФильтра1 = Новый Структура;

    СтруктураФильтра1.Вставить("field", "gender");
    СтруктураФильтра1.Вставить("type" , "=");
    СтруктураФильтра1.Вставить("value", "Male");
    СтруктураФильтра1.Вставить("union", "AND");
    СтруктураФильтра1.Вставить("raw"  , Ложь);

    СтруктураФильтра2 = Новый Структура;

    СтруктураФильтра2.Вставить("field", "id");
    СтруктураФильтра2.Вставить("type" , "BETWEEN");
    СтруктураФильтра2.Вставить("value", "20 AND 50");
    СтруктураФильтра2.Вставить("raw"  , Истина);

    Фильтры.Добавить(СтруктураФильтра1);
    Фильтры.Добавить(СтруктураФильтра2);

    Сортировка = Новый Структура("ip_address", "DESC");
    Количество = 5;

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", Поля);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("order" , Сортировка);
    Опции.Вставить("limit" , Количество);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьЗаписи (отборы)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 5);

КонецПроцедуры

Процедура CLI_PostgreSQL_ОбновитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "test_data";

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ip_address", Новый Структура("VARCHAR", "127.0.0.1"));

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Фильтры.Добавить(СтруктураФильтра);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Количество = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Количество, "ОбновитьЗаписи (количество)", "PostgreSQL"); // SKIP
    Количество = Количество["data"].Количество();                                                   // SKIP

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("values", СтруктураПолей);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ОбновитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОбновитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("fields", "['ip_address']");
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Проверка = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Проверка, "ОбновитьЗаписи (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Проверка);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Проверка["data"], Количество);

    Для Н = 0 По Проверка["data"].ВГраница() Цикл
        OPI_ПолучениеДанныхТестов.Проверка_SQLiteЗначенияПолей(Проверка["data"][Н], СтруктураПолей);
    КонецЦикла;

КонецПроцедуры

Процедура CLI_PostgreSQL_УдалитьЗаписи(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "test_data";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "test_data";

    Фильтры = Новый Массив;

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "gender");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "Male"));
    СтруктураФильтра.Вставить("raw"  , Ложь);
    СтруктураФильтра.Вставить("union", "AND");

    Фильтры.Добавить(СтруктураФильтра);

    СтруктураФильтра = Новый Структура;

    СтруктураФильтра.Вставить("field", "ip_address");
    СтруктураФильтра.Вставить("type" , "=");
    СтруктураФильтра.Вставить("value", Новый Структура("VARCHAR", "127.0.0.1"));
    СтруктураФильтра.Вставить("raw"  , Ложь);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Получение = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("filter", Фильтры);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьЗаписи", Опции);
    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Получение, "УдалитьЗаписи (получение)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Количество = Получение["data"].Количество();
    Остаток    = 100 - Количество;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаписи", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьЗаписи (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], Остаток);

КонецПроцедуры

Процедура CLI_PostgreSQL_ОчиститьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "testtable";

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ОчиститьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьЗаписи", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОчиститьТаблицу (проверка)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат["data"], 0);

КонецПроцедуры

Процедура CLI_PostgreSQL_УдалитьТаблицу(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Таблица = "testtable";

    Опции = Новый Структура;
    Опции.Вставить("table" , Таблица);
    Опции.Вставить("dbc"   , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьТаблицу", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТаблицу", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

    База    = "test_data";
    Таблица = "test_data";

    Опции             = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);
    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Опции  = Новый Структура;
    Опции.Вставить("table", Таблица);
    Опции.Вставить("dbc"  , СтрокаПодключения);
    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьТаблицу", Опции, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьТаблицу (тест)", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура CLI_PostgreSQL_ОтключитьВсеСоединенияБазыДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    Опции = Новый Структура;
    Опции.Вставить("base", База);
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ОтключитьВсеСоединенияБазыДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ОтключитьВсеСоединенияБазыДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура CLI_PostgreSQL_УдалитьБазуДанных(ПараметрыФункции)

    Адрес  = ПараметрыФункции["PG_IP"];
    Логин  = "bayselonarrend";
    Пароль = ПараметрыФункции["PG_Password"];
    База   = "postgres";

    Опции = Новый Структура;
    Опции.Вставить("addr" , Адрес);
    Опции.Вставить("db"   , База);
    Опции.Вставить("login", Логин);
    Опции.Вставить("pass" , Пароль);

    СтрокаПодключения = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "СформироватьСтрокуПодключения", Опции, Ложь);
    СтрокаПодключения = ПолучитьСтрокуИзДвоичныхДанных(СтрокаПодключения);

    База = "testbase1";

    Опции = Новый Структура;
    Опции.Вставить("base", База);
    Опции.Вставить("dbc" , СтрокаПодключения);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "УдалитьБазуДанных", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "УдалитьБазуДанных", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_РезультатИстина(Результат);

КонецПроцедуры

Процедура CLI_PostgreSQL_ПолучитьСтруктуруФильтраЗаписей(ПараметрыФункции)

    Опции = Новый Структура;
    Опции.Вставить("empty", Ложь);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьСтруктуруФильтраЗаписей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЗаписей", "PostgreSQL");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    Опции = Новый Структура;
    Опции.Вставить("empty", Истина);

    Результат = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI("postgres", "ПолучитьСтруктуруФильтраЗаписей", Опции);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛогCLI(Результат, "ПолучитьСтруктуруФильтраЗаписей (пустая)", "PostgreSQL");

    Для Каждого Элемент Из Результат Цикл

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Элемент.Значение);

    КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
