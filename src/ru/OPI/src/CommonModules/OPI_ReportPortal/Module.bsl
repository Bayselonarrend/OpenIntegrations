// OneScript: ./OInt/core/Modules/OPI_ReportPortal.os
// Lib: ReportPortal
// CLI: rportal
// Keywords: reportportal

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UnreachableCode-off
// BSLLS:CommentedCode-off
// BSLLS:UsingServiceTag-off
// BSLLS:NumberOfParams-off
// BSLLS:LineLength-off
// BSLLS:UsingSynchronousCalls-off
// BSLLS:MagicNumber-off

//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check wrong-string-literal-content

#Область ПрограммныйИнтерфейс

#Область Авторизация

Функция ПолучитьВременныйТокен(Знач URL, Знач Логин, Знач Пароль) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьСтроку(Логин);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Пароль);

    ДополнитьURL(URL, "uat/sso/oauth/token");

    Результат = OPI_ЗапросыHTTP.НовыйЗапрос()
        .Инициализировать()
        .УстановитьURL(URL)
        .ДобавитьBasicАвторизацию("ui", "uiman")
        .УстановитьFormТело(Новый Структура("grant_type,username,password", "password", Логин, Пароль))
        .ОбработатьЗапрос("POST")
        .ВернутьОтветКакJSONКоллекцию();

    Возврат Результат;

КонецФункции

Функция ПолучитьПостоянныйТокен(Знач URL, Знач Токен, Знач IDПользователя, Знач ИмяКлюча) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDПользователя);

    ДополнитьURL(URL, СтрШаблон("api/users/%1/api-keys", IDПользователя));

    Параметры = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("name", ИмяКлюча, "Строка", Параметры);

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);
    Результат = OPI_ЗапросыHTTP.PostСТелом(URL, Параметры, Заголовки);

    Возврат Результат;

КонецФункции

Функция УдалитьПостоянныйТокен(Знач URL, Знач Токен, Знач IDПользователя, Знач IDКлюча) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDПользователя);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDКлюча);

    ДополнитьURL(URL, СтрШаблон("api/users/%1/api-keys/%2", IDПользователя, IDКлюча));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.Delete(URL, , Заголовки);

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область УправлениеРезультатами

Функция СоздатьЗапуск(Знач URL, Знач Токен, Знач Проект, Знач СтруктураЗапуска) Экспорт

    ТекстОшибки = "Структура запуска не является корректной коллекцией КлючИЗначение";

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураЗапуска, ТекстОшибки);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Проект);

    ДополнитьURL(URL, СтрШаблон("api/v1/%1/launch", Проект));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.PostСТелом(URL, СтруктураЗапуска, Заголовки);

    Возврат Результат;

КонецФункции

Функция СоздатьЭлемент(Знач URL, Знач Токен, Знач Проект, Знач СтруктураЭлемента, Знач Родитель = "") Экспорт

    ТекстОшибки = "Структура элемента не является корректной коллекцией КлючИЗначение";

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураЭлемента, ТекстОшибки);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Проект);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Родитель);

    Родитель = ?(ЗначениеЗаполнено(Родитель), "/" + Родитель, "");

    ДополнитьURL(URL, СтрШаблон("api/v1/%1/item%2", Проект, Родитель));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.PostСТелом(URL, СтруктураЭлемента, Заголовки);

    Возврат Результат;

КонецФункции

Функция ЗавершитьЗапуск(Знач URL, Знач Токен, Знач Проект, Знач IDЗапуска, Знач СтруктураЗавершения) Экспорт

    ТекстОшибки = "Структура завершения не является корректной коллекцией КлючИЗначение";

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураЗавершения, ТекстОшибки);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Проект);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDЗапуска);

    ДополнитьURL(URL, СтрШаблон("api/v1/%1/launch/%2/finish", Проект, IDЗапуска));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.PutСТелом(URL, СтруктураЗавершения, Заголовки);

    Возврат Результат;

КонецФункции

Функция ЗавершитьЭлемент(Знач URL, Знач Токен, Знач Проект, Знач IDЭлемента, Знач СтруктураЗавершения) Экспорт

    ТекстОшибки = "Структура завершения не является корректной коллекцией КлючИЗначение";

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураЗавершения, ТекстОшибки);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Проект);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(IDЭлемента);

    ДополнитьURL(URL, СтрШаблон("api/v1/%1/item/%2", Проект, IDЭлемента));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.PutСТелом(URL, СтруктураЗавершения, Заголовки);

    Возврат Результат;

КонецФункции

Функция ПолучитьСтруктуруЗапуска(Знач Пустая = Ложь, Знач КакСоответствие = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);
    OPI_ПреобразованиеТипов.ПолучитьБулево(КакСоответствие);

    Если КакСоответствие Тогда
        СтруктураЗапуска = Новый Соответствие;
    Иначе
        СтруктураЗапуска = Новый Структура;
    КонецЕсли;

    СтруктураЗапуска.Вставить("name"       , "<название запуска>");
    СтруктураЗапуска.Вставить("startTime"  , "<время начала запуска>");
    СтруктураЗапуска.Вставить("description", "<описание запуска>");
    СтруктураЗапуска.Вставить("uuid"       , "<UUID запуска. Будет сгенерирован автоматически, если не заполнено>");
    СтруктураЗапуска.Вставить("attributes" , "<атрибуты запуска в виде ключ1:значение1, ключ2:значение2>");
    СтруктураЗапуска.Вставить("mode"       , "<режим: default или debug>");
    СтруктураЗапуска.Вставить("rerun"      , "<признак перезапуска>");
    СтруктураЗапуска.Вставить("rerunOf"    , "<UUID уже существующего запуска, если rerun = Истина>");

    Если Пустая Тогда
        СтруктураЗапуска = OPI_Инструменты.ОчиститьКоллекциюРекурсивно(СтруктураЗапуска);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураЗапуска;

КонецФункции

Функция ПолучитьСтруктуруЭлемента(Знач Пустая = Ложь, Знач КакСоответствие = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);
    OPI_ПреобразованиеТипов.ПолучитьБулево(КакСоответствие);

    Если КакСоответствие Тогда
        СтруктураЭлемента = Новый Соответствие;
    Иначе
        СтруктураЭлемента = Новый Структура;
    КонецЕсли;

    СтруктураЭлемента.Вставить("name"       , "<название элемента>");
    СтруктураЭлемента.Вставить("startTime"  , "<время начала>");
    СтруктураЭлемента.Вставить("type"       , "<тип элемента: suite, story, test, scenario, step, before_class, before_groups, before_method, before_suite, before_test, after_class, after_groups, after_method, after_suite, after_test>");
    СтруктураЭлемента.Вставить("launchUuid" , "<UUID запуска>");
    СтруктураЭлемента.Вставить("description", "<описание элемента>");
    СтруктураЭлемента.Вставить("attributes" , "<атрибуты элемента в виде ключ1:значение1, ключ2:значение2>");
    СтруктураЭлемента.Вставить("uuid"       , "<UUID элемента. Будет сгенерирован автоматически, если не заполнено>");
    СтруктураЭлемента.Вставить("codeRef"    , "<физическое расположение тестов>");
    СтруктураЭлемента.Вставить("parameters" , "<параметры для параметризированных тестов>");
    СтруктураЭлемента.Вставить("retry"      , "<является перезапуском>");

    Если Пустая Тогда
        СтруктураЭлемента = OPI_Инструменты.ОчиститьКоллекциюРекурсивно(СтруктураЭлемента);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураЭлемента;

КонецФункции

Функция ПолучитьСтруктуруЗавершенияЭлемента(Знач Пустая = Ложь, Знач КакСоответствие = Ложь) Экспорт

    OPI_ПреобразованиеТипов.ПолучитьБулево(Пустая);
    OPI_ПреобразованиеТипов.ПолучитьБулево(КакСоответствие);

    Если КакСоответствие Тогда
        СтруктураЭлемента = Новый Соответствие;
    Иначе
        СтруктураЭлемента = Новый Структура;
    КонецЕсли;

    СтруктураЭлемента.Вставить("endTime"    , "<время окончания>");
    СтруктураЭлемента.Вставить("launchUuid" , "<UUID запуска>");
    СтруктураЭлемента.Вставить("status"     , "<статус завершения: passed, failed, stopped, skipped, interrupted, cancelled>");
    СтруктураЭлемента.Вставить("description", "<описание элемента. Перезаписывает указанное при создании>");
    СтруктураЭлемента.Вставить("attributes" , "<атрибуты элемента. Перезаписывает указанное при создании>");
    СтруктураЭлемента.Вставить("retry"      , "<флаг завершения повторной попытки>");
    СтруктураЭлемента.Вставить("issue"      , "<информация о проблеме>");

    Если Пустая Тогда
        СтруктураЭлемента = OPI_Инструменты.ОчиститьКоллекциюРекурсивно(СтруктураЭлемента);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураЭлемента;

КонецФункции

Функция ПолучитьСтруктуруЗавершенияЗапуска(Знач Время, Знач Статус = "", Знач Описание = "", Знач Артибуты = "") Экспорт

    СтруктураЗавершения = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("endTime"    , Время   , "ДатаISO", СтруктураЗавершения);
    OPI_Инструменты.ДобавитьПоле("status"     , Статус  , "Строка" , СтруктураЗавершения);
    OPI_Инструменты.ДобавитьПоле("description", Описание, "Строка" , СтруктураЗавершения);
    OPI_Инструменты.ДобавитьПоле("attributes" , Артибуты, "Строка" , СтруктураЗавершения);

    Возврат СтруктураЗавершения;

КонецФункции

#КонецОбласти

#Область ЗаписьЛогов

Функция ЗаписатьЛог(Знач URL, Знач Токен, Знач Проект, Знач СтруктураЛога) Экспорт

    ТекстОшибки = "Структура лога не является корректной коллекцией КлючИЗначение";

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураЛога, ТекстОшибки);
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Проект);

    ДополнитьURL(URL, СтрШаблон("/api/v1/%1/log", Проект));

    Заголовки = ПолучитьЗаголовокАвторизации(Токен);

    Результат = OPI_ЗапросыHTTP.PostСТелом(URL, СтруктураЛога, Заголовки);

    Возврат Результат;

КонецФункции

Функция ПолучитьСтруктуруЛога(Знач IDЗапуска, Знач IDЭлемента, Знач Время, Знач Текст = "", Знач Уровень = "info") Экспорт

    СтруктураЛога = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("launchUuid", IDЗапуска , "Строка", СтруктураЛога);
    OPI_Инструменты.ДобавитьПоле("itemUuid"  , IDЭлемента, "Строка", СтруктураЛога);
    OPI_Инструменты.ДобавитьПоле("time"      , Время     , "Дата"  , СтруктураЛога);
    OPI_Инструменты.ДобавитьПоле("message"   , Текст     , "Строка", СтруктураЛога);
    OPI_Инструменты.ДобавитьПоле("level"     , Уровень   , "Строка", СтруктураЛога);

    Возврат СтруктураЛога;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьURL(URL, Знач Путь)

    OPI_ПреобразованиеТипов.ПолучитьСтроку(URL);

    URL = ?(СтрЗаканчиваетсяНа(URL, "/"), URL, URL + "/");
    URL = URL + Путь;

КонецПроцедуры

Функция ПолучитьЗаголовокАвторизации(Знач Токен)

    OPI_ПреобразованиеТипов.ПолучитьСтроку(Токен);

    Заголовки = Новый Соответствие;
    OPI_Инструменты.ДобавитьПоле("Authorization", СтрШаблон("Bearer %1", Токен), "Строка", Заголовки);

    Возврат Заголовки;

КонецФункции

#КонецОбласти
