// OneScript: ./OInt/tests/Modules/internal/OPI_Тесты.os

// MIT License

// Copyright (c) 2023 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// Набор тестов для YAxUnit

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingServiceTag-off
// BSLLS:UnusedParameters-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:UsingHardcodePath-off
// BSLLS:UnusedLocalVariable-off
// BSLLS:DeprecatedMessage-off
// BSLLS:LineLength-off
// BSLLS:MagicNumber-off
// BSLLS:CommentedCode-off

//@skip-check undefined-variable
//@skip-check wrong-string-literal-content
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content
//@skip-check module-unused-local-variable

// Раскомментировать, если выполняется OneScript
#Использовать "../../../tools"
#Использовать "../../../core"
#Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

// Для YaxUnit

Процедура ИсполняемыеСценарии() Экспорт

    OPI_ПолучениеДанныхТестов.СформироватьТестыЯкс();

КонецПроцедуры

// Для Asserts

Функция ПолучитьСписокТестов(ЮнитТестирование) Экспорт

   Возврат OPI_ПолучениеДанныхТестов.СформироватьТестыАссертс();

КонецФункции

#Область ЗапускаемыеТесты

#Область Telegram

Процедура Телеграм_ПолучитьИнформациюБота() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_ПолучитьИнформациюБота(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьОбновления() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_УдалитьWebhook(ПараметрыТеста);
    Telegram_ПолучитьОбновления(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_УстановитьWebhook() Экспорт

     ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_URL"  , ПараметрыТеста);

    Telegram_УстановитьWebhook(ПараметрыТеста);
    Telegram_УдалитьWebhook(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьТекстовоеСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);

    Telegram_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);

    Telegram_ОтправитьКартинку(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
     OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);

    Telegram_ОтправитьВидео(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьАудио() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio"             , ПараметрыТеста);

    Telegram_ОтправитьАудио(ПараметрыТеста);
    Telegram_СкачатьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьДокумент() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    Telegram_ОтправитьДокумент(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьГифку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"               , ПараметрыТеста);

    Telegram_ОтправитьГифку(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьМедиагруппу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"          , ПараметрыТеста);

    Telegram_ОтправитьМедиагруппу(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьМестоположение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Long"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Lat"               , ПараметрыТеста);

    Telegram_ОтправитьМестоположение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьКонтакт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Name"              , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Surname"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Phone"             , ПараметрыТеста);

    Telegram_ОтправитьКонтакт(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ОтправитьОпрос() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_ОтправитьОпрос(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПереслатьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    Telegram_ПереслатьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_БанРазбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChatID"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);

    Telegram_Бан(ПараметрыТеста);
    Telegram_Разбан(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СоздатьСсылкуПриглашение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_СоздатьСсылкуПриглашение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ЗакрепитьОткрепитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"           , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelMessageID", ПараметрыТеста);

    Telegram_ЗакрепитьСообщение(ПараметрыТеста);
    Telegram_ОткрепитьСообщение(ПараметрыТеста);
    Telegram_УдалитьСообщение(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьЧислоУчастников() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ChannelID", ПараметрыТеста);

    Telegram_ПолучитьЧислоУчастников(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ПолучитьСписокАватаровФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token", ПараметрыТеста);

    Telegram_ПолучитьСписокИконокАватаров(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СоздатьУдалитьТемуФорума() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("String"          , ПараметрыТеста);

    Telegram_СоздатьТемуФорума(ПараметрыТеста);
    Telegram_ИзменитьТемуФорума(ПараметрыТеста);
    Telegram_ЗакрытьТемуФорума(ПараметрыТеста);
    Telegram_ОткрытьТемуФорума(ПараметрыТеста);
    Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыТеста);
    Telegram_УдалитьТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_СкрытьПоказатьГлавнуюТему() Экспорт

     ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    Telegram_СкрытьГлавнуюТемуФорума(ПараметрыТеста);
    Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыТеста);

КонецПроцедуры

Процедура Телеграм_ИзменитьИмяГлавнойТемы() Экспорт

     ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Telegram_ForumID", ПараметрыТеста);

    Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура ВК_СоздатьСсылкуТокена() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AppID", ПараметрыТеста);

    VK_СоздатьСсылкуПолученияТокена(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьУдалитьПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_СоздатьПост(ПараметрыТеста);
    VK_УдалитьПост(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьСоставнойПост() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"   , ПараметрыТеста);

    VK_СоздатьСоставнойПост(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьОпрос() Экспорт

    VK_СоздатьОпрос();

КонецПроцедуры

Процедура ВК_СохранитьУдалитьКартинку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    VK_СоздатьАльбом(ПараметрыТеста);
    VK_СохранитьКартинкуВАльбом(ПараметрыТеста);
    VK_УдалитьКартинку(ПараметрыТеста);
    VK_УдалитьАльбом(ПараметрыТеста);
    VK_ЗагрузитьФотоНаСервер(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_СоздатьИсторию() Экспорт

    ПараметрыТеста = Новый Соответствие;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);

    VK_СоздатьИсторию(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_МетодыОбсуждений() Экспорт

    ПараметрыТеста = Новый Структура;
    Параметры      = ПолучитьПараметрыВК();

    VK_СоздатьОбсуждение(ПараметрыТеста);
    VK_ЗакрытьОбсуждение(ПараметрыТеста);
    VK_ОткрытьОбсуждение(ПараметрыТеста);
    VK_НаписатьВОбсуждение(ПараметрыТеста);

    OPI_VK.ЗакрытьОбсуждение(ПараметрыТеста["VK_ConvID"], Истина, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ЛайкРепостКоммент() Экспорт

    ПараметрыТеста  = Новый Структура();
    Параметры       = ПолучитьПараметрыВК();
    Текст           = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID", ПараметрыТеста);

    VK_ПоставитьЛайк(ПараметрыТеста);
    VK_СделатьРепост(ПараметрыТеста);
    VK_НаписатьКомментарий(ПараметрыТеста);
    VK_СократитьСсылку(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста                 , Параметры);
    OPI_VK.УдалитьПост(ПараметрыТеста["Repost"], Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьСтатистику() Экспорт

    ПараметрыТеста = Новый Структура();

    VK_ПолучитьСтатистику(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьСтатистикуПостов() Экспорт

    ПараметрыТеста = Новый Структура();

    VK_ПолучитьСтатистикуПостов(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьРекламнуюКампанию() Экспорт

    Параметры       = ПолучитьПараметрыВК();
    Текст           = "Пост из автотеста";

    Результат = OPI_VK.СоздатьПост(Текст, Новый Массив, , , Параметры);
    ИДПоста   = Результат["response"]["post_id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ИДПоста);

    ПараметрыТеста  = Новый Структура();
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_AdsCabinetID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_PostID"      , ПараметрыТеста);

    VK_СоздатьРекламнуюКампанию(ПараметрыТеста);
    VK_СоздатьРекламноеОбъявление(ПараметрыТеста);
    VK_ПриостановитьРекламноеОбъявление(ПараметрыТеста);
    VK_ПолучитьСписокРекламныхКатегорий(ПараметрыТеста);

    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ОтправитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VK_CommunityToken", ПараметрыТеста);

    VK_СформироватьКлавиатуру(ПараметрыТеста);
    VK_НаписатьСообщение(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_ПолучитьКатегорииТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокКатегорийТоваров(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьТоварПодборку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_СоздатьПодборкуТоваров(ПараметрыТеста);
    VK_ИзменитьПодборкуТоваров(ПараметрыТеста);
    VK_ПолучитьПодборкиПоИД(ПараметрыТеста);
    VK_ДобавитьТовар(ПараметрыТеста);
    VK_ИзменитьТовар(ПараметрыТеста);
    VK_ДобавитьТоварВПодборку(ПараметрыТеста);
    VK_УдалитьТоварИзПодборки(ПараметрыТеста);
    VK_УдалитьТовар(ПараметрыТеста);
    VK_УдалитьПодборку(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ВК_СоздатьТоварСоСвойствами() Экспорт

    Параметры      = ПолучитьПараметрыВК();

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);

    VK_ПолучитьОписаниеТовара(ПараметрыТеста);
    VK_СоздатьСвойствоТовара(ПараметрыТеста);
    VK_ИзменитьСвойствоТовара(ПараметрыТеста);
    VK_ДобавитьВариантСвойстваТовара(ПараметрыТеста);
    VK_ИзменитьВариантСвойстваТовара(ПараметрыТеста);
    VK_СоздатьТоварСоСвойством(ПараметрыТеста);
    VK_ПолучитьТоварыПоИД(ПараметрыТеста);
    VK_СгруппироватьТовары(ПараметрыТеста);

    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID2"], Параметры);
    OPI_VK.УдалитьТовар(ПараметрыТеста["VK_MarketItemID3"], Параметры);

    VK_УдалитьВариантСвойстваТовара(ПараметрыТеста);
    VK_УдалитьСвойствоТовара(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокТоваров() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокТоваров(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокПодборок() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокПодборок(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокСвойств() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокСвойств(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ПолучитьСписокЗаказов() Экспорт

    ПараметрыТеста = Новый Структура;

    VK_ПолучитьСписокЗаказов(ПараметрыТеста);

КонецПроцедуры

Процедура ВК_ЗагрузитьВидео() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video", ПараметрыТеста);

    VK_ЗагрузитьВидеоНаСервер(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура ЯДиск_ПолучитьИнформациюОДиске() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьИнформациюОДиске(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_СоздатьПапку() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    YandexDisk_ЗагрузитьФайлПоURL(ПараметрыТеста);
    YandexDisk_ПолучитьОбъект(ПараметрыТеста);
    YandexDisk_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    YandexDisk_ЗагрузитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_СоздатьКопиюОбъекта() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен           = ПараметрыТеста["YandexDisk_Token"];
    URL             = ПараметрыТеста["Picture"];

    ПутьОригинала   = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_СоздатьКопиюОбъекта(ПараметрыТеста);

    ПутьКопии = ПараметрыТеста["YandexDisk_CopyFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьКопии    , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСсылкуНаСкачивание() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен = ПараметрыТеста["YandexDisk_Token"];
    URL   = ПараметрыТеста["Picture"];

    Путь  = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, Путь, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PathForLink", Путь);
    ПараметрыТеста.Вставить("YandexDisk_PathForLink", Путь);

    YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыТеста);
    YandexDisk_СкачатьФайл(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСписокФайлов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьСписокФайлов(ПараметрыТеста);

КонецПроцедуры

Процедура ЯДиск_ПереместитьОбъект() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен           = ПараметрыТеста["YandexDisk_Token"];
    URL             = ПараметрыТеста["Picture"];

    ПутьОригинала   = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_ПереместитьОбъект(ПараметрыТеста);

    ПутьНового = ПараметрыТеста["YandexDisk_NewFilePath"];

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);
    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьНового   , Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ДействияПубличныхОбъектов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"         , ПараметрыТеста);

    Токен           = ПараметрыТеста["YandexDisk_Token"];
    URL             = ПараметрыТеста["Picture"];

    ПутьОригинала   = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, ПутьОригинала, URL);
    OPI_Инструменты.Пауза(35);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_OriginalFilePath", ПутьОригинала);
    ПараметрыТеста.Вставить("YandexDisk_OriginalFilePath", ПутьОригинала);

    YandexDisk_ОпубликоватьОбъект(ПараметрыТеста);
    YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыТеста);
    YandexDisk_ПолучитьПубличныйОбъект(ПараметрыТеста);
    YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыТеста);
    YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыТеста);

    OPI_YandexDisk.УдалитьОбъект(Токен, ПутьОригинала, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ЯДиск_ПолучитьСписокОпубликованных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("YandexDisk_Token", ПараметрыТеста);

    YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура Вайбер_ПолучениеИнформации() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);

    Viber_ПолучитьИнформациюОКанале(ПараметрыТеста);
    Viber_ПолучитьДанныеПользователя(ПараметрыТеста);
    Viber_ПолучитьОнлайнПользователей(ПараметрыТеста);
    Viber_УстановитьWebhook(ПараметрыТеста);

КонецПроцедуры

Процедура Вайбер_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelToken"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_ChannelAdminID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_Token"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Viber_UserID"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"            , ПараметрыТеста);

    Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыТеста);
    Viber_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    Viber_ОтправитьКартинку(ПараметрыТеста);
    Viber_ОтправитьФайл(ПараметрыТеста);
    Viber_ОтправитьКонтакт(ПараметрыТеста);
    Viber_ОтправитьЛокацию(ПараметрыТеста);
    Viber_ОтправитьСсылку(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура ГВ_Авторизация() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_ClientSecret", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Code"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Refresh"     , ПараметрыТеста);

    GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыТеста);
    GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыТеста);
    GoogleWorkspace_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура ГК_ПолучитьСписокКалендарей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыТеста);

КонецПроцедуры

Процедура ГК_СоздатьУдалитьКалендарь() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыТеста);
    GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыТеста);
    GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыТеста);
    GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыТеста);
    GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыТеста);
    GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ГК_СоздатьУдалитьСобытие() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_NewCalendarID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_CalendarID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"             , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"            , ПараметрыТеста);

    GoogleCalendar_СоздатьКалендарь(ПараметрыТеста);
    GoogleCalendar_СоздатьСобытие(ПараметрыТеста);
    GoogleCalendar_ИзменитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПолучитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПереместитьСобытие(ПараметрыТеста);
    GoogleCalendar_ПолучитьСписокСобытий(ПараметрыТеста);
    GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыТеста);
    GoogleCalendar_УдалитьСобытие(ПараметрыТеста);
    GoogleCalendar_УдалитьКалендарь(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура ГД_ПолучитьСписокКаталогов() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleDrive_ПолучитьСписокКаталогов(ПараметрыТеста);
    GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);

КонецПроцедуры

Процедура ГД_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"    , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);
    GoogleDrive_СкопироватьОбъект(ПараметрыТеста);
    GoogleDrive_СкачатьФайл(ПараметрыТеста);
    GoogleDrive_ОбновитьФайл(ПараметрыТеста);
    GoogleDrive_ПолучитьСписокФайлов(ПараметрыТеста);
    GoogleDrive_УдалитьОбъект(ПараметрыТеста);
    GoogleDrive_ПолучитьОписаниеФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура ГД_СоздатьУдалитьКомментарий() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"     , ПараметрыТеста);

    ПараметрыТеста.Вставить("МассивУдаляемых", Новый Массив);

    GoogleDrive_ЗагрузитьФайл(ПараметрыТеста);

    GoogleDrive_СоздатьКомментарий(ПараметрыТеста);
    GoogleDrive_ПолучитьКомментарий(ПараметрыТеста);
    GoogleDrive_ПолучитьСписокКомментариев(ПараметрыТеста);
    GoogleDrive_УдалитьКомментарий(ПараметрыТеста);

    GoogleDrive_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ГД_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GD_Catalog"  , ПараметрыТеста);

    GoogleDrive_СоздатьПапку(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура ГТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token", ПараметрыТеста);

    GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    GoogleSheets_ПолучитьКнигу(ПараметрыТеста);
    GoogleSheets_КопироватьЛист(ПараметрыТеста);
    GoogleSheets_ДобавитьЛист(ПараметрыТеста);
    GoogleSheets_УдалитьЛист(ПараметрыТеста);
    GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыТеста);
    GoogleSheets_ПолучитьТаблицу(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

Процедура ГТ_ЗаполнитьОчиститьЯчейки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Google_Token"  , ПараметрыТеста);

    GoogleSheets_СоздатьКнигу(ПараметрыТеста);
    GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыТеста);
    GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыТеста);
    GoogleSheets_ОчиститьЯчейки(ПараметрыТеста);

    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet"]);
    OPI_GoogleDrive.УдалитьОбъект(ПараметрыТеста["Google_Token"], ПараметрыТеста["GS_Spreadsheet2"]);

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура Твиттер_ДанныеАккаунта() Экспорт

    ПараметрыТеста = Новый Структура;

    Twitter_ПолучитьТокен(ПараметрыТеста);
    Twitter_ПолучитьСсылкуАвторизации(ПараметрыТеста);
    Twitter_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура Твиттер_Твиты() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("GIF"     , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Video"   , ПараметрыТеста);

    Twitter_СоздатьТекстовыйТвит(ПараметрыТеста);
    Twitter_ЗагрузитьМассивВложений(ПараметрыТеста);
    Twitter_СоздатьТвитВидео(ПараметрыТеста);
    Twitter_СоздатьТвитКартинки(ПараметрыТеста);
    Twitter_СоздатьТвитГифки(ПараметрыТеста);
    Twitter_СоздатьТвитОпрос(ПараметрыТеста);
    Twitter_СоздатьПроизвольныйТвит(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура НоушнАпи_СоздатьСтраницу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"     , ПараметрыТеста);

    Notion_СоздатьСтраницу(ПараметрыТеста);
    Notion_ПолучитьСтраницу(ПараметрыТеста);
    Notion_ИзменитьСвойстваСтраницы(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_СоздатьИзменитьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);

    Notion_СоздатьБазуДанных(ПараметрыТеста);
    Notion_ИзменитьСвойстваБазы(ПараметрыТеста);
    Notion_ПолучитьБазуДанных(ПараметрыТеста);
    Notion_СоздатьСтраницуВБазу(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_СоздатьУдалитьБлок() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Parent", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Block" , ПараметрыТеста);

    Notion_ВернутьБлок(ПараметрыТеста);
    Notion_СоздатьБлок(ПараметрыТеста);
    Notion_ВернутьДочерниеБлоки(ПараметрыТеста);
    Notion_УдалитьБлок(ПараметрыТеста);

КонецПроцедуры

Процедура НоушнАпи_ПолучитьПользователей() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Notion_User" , ПараметрыТеста);

    Notion_СписокПользователей(ПараметрыТеста);
    Notion_ПолучитьДанныеПользователя(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура Слак_ПолучитьИнформацию() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token", ПараметрыТеста);

    Slack_ПолучитьИнформациюОБоте(ПараметрыТеста);
    Slack_ПолучитьСписокПользователей(ПараметрыТеста);
    Slack_ПолучитьСписокРабочихОбластей(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ОтправитьУдалитьСообщение() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    Slack_ОтправитьСообщение(ПараметрыТеста);
    Slack_ИзменитьСообщение(ПараметрыТеста);
    Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыТеста);
    Slack_ПолучитьСсылкуНаСообщение(ПараметрыТеста);
    Slack_УдалитьСообщение(ПараметрыТеста);
    Slack_ОтправитьЭфемерноеСообщение(ПараметрыТеста);
    Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыТеста);
    Slack_СформироватьБлокКартинку(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_СоздатьАрхивироватьКанал() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    Slack_СоздатьКанал(ПараметрыТеста);
    Slack_УстановитьТемуКанала(ПараметрыТеста);
    Slack_УстановитьЦельКанала(ПараметрыТеста);
    Slack_ПолучитьКанал(ПараметрыТеста);
    Slack_ПригласитьПользователейВКанал(ПараметрыТеста);
    Slack_ВыгнатьПользователяИзКанала(ПараметрыТеста);
    Slack_ПолучитьИсториюКанала(ПараметрыТеста);
    Slack_ПолучитьСписокПользователейКанала(ПараметрыТеста);
    Slack_ПокинутьКанал(ПараметрыТеста);
    Slack_ВступитьВКанал(ПараметрыТеста);
    Slack_ПереименоватьКанал(ПараметрыТеста);
    Slack_АрхивироватьКанал(ПараметрыТеста);
    Slack_ПолучитьСписокКаналов(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ОткрытьЗакрытьДиалог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_User"   , ПараметрыТеста);

    Slack_ОткрытьДиалог(ПараметрыТеста);
    Slack_ЗакрытьДиалог(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ЗагрузитьУдалитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Slack_ПолучитьСписокФайлов(ПараметрыТеста);
    Slack_ЗагрузитьФайл(ПараметрыТеста);
    Slack_СделатьФайлПубличным(ПараметрыТеста);
    Slack_СделатьФайлПриватным(ПараметрыТеста);
    Slack_ПолучитьДанныеФайла(ПараметрыТеста);
    Slack_УдалитьФайл(ПараметрыТеста);

КонецПроцедуры

Процедура Слак_ЗагрузитьУдалитьВФ() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Token"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Slack_Channel", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Slack_ПолучитьСписокВнешнихФайлов(ПараметрыТеста);
    Slack_ДобавитьВнешнийФайл(ПараметрыТеста);
    Slack_ПолучитьВнешнийФайл(ПараметрыТеста);
    Slack_ОтправитьВнешнийФайл(ПараметрыТеста);
    Slack_УдалитьВнешнийФайл(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура АТ_СоздатьБазу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Workspace", ПараметрыТеста);

    Airtable_СоздатьБазу(ПараметрыТеста);
    Airtable_ПолучитьТаблицыБазы(ПараметрыТеста);
    Airtable_ПолучитьСписокБаз(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьТаблицу() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);

    Airtable_ПолучитьПолеНомера(ПараметрыТеста);
    Airtable_ПолучитьПолеСтроковое(ПараметрыТеста);
    Airtable_ПолучитьПолеВложения(ПараметрыТеста);
    Airtable_ПолучитьПолеФлажка(ПараметрыТеста);
    Airtable_ПолучитьПолеДаты(ПараметрыТеста);
    Airtable_ПолучитьПолеТелефона(ПараметрыТеста);
    Airtable_ПолучитьПолеПочты(ПараметрыТеста);
    Airtable_ПолучитьПолеСсылки(ПараметрыТеста);
    Airtable_СоздатьТаблицу(ПараметрыТеста);
    Airtable_ИзменитьТаблицу(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьПоле() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    Airtable_СоздатьПоле(ПараметрыТеста);
    Airtable_ИзменитьПоле(ПараметрыТеста);

КонецПроцедуры

Процедура АТ_СоздатьУдалитьЗаписи() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Base" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Airtable_Table", ПараметрыТеста);

    Airtable_СоздатьЗаписи(ПараметрыТеста);
    Airtable_ПолучитьЗапись(ПараметрыТеста);
    Airtable_СоздатьКомментарий(ПараметрыТеста);
    Airtable_ИзменитьКомментарий(ПараметрыТеста);
    Airtable_ПолучитьКомментарии(ПараметрыТеста);
    Airtable_УдалитьКомментарий(ПараметрыТеста);
    Airtable_ПолучитьСписокЗаписей(ПараметрыТеста);
    Airtable_УдалитьЗаписи(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура ДропБокс_ПолучитьОбновитьТокен() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appkey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Appsecret", ПараметрыТеста);

    Dropbox_ПолучитьСсылкуАвторизации(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Code", ПараметрыТеста);

    Dropbox_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Refresh", ПараметрыТеста);

    Dropbox_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ЗагрузитьФайл() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"      , ПараметрыТеста);

    Dropbox_ЗагрузитьФайл(ПараметрыТеста);
    Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыТеста);
    Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыТеста);
    Dropbox_ВосстановитьОбъектКВерсии(ПараметрыТеста);
    Dropbox_ПолучитьПревью(ПараметрыТеста);
    Dropbox_СкачатьФайл(ПараметрыТеста);
    Dropbox_ПереместитьОбъект(ПараметрыТеста);
    Dropbox_КопироватьОбъект(ПараметрыТеста);
    Dropbox_УдалитьОбъект(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_СоздатьКаталог() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_СоздатьПапку(ПараметрыТеста);
    Dropbox_СкачатьПапку(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ПолучитьСписокФайловПапки() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ПолучитьСписокФайловПапки(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ЗагрузитьФайлПоURL() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"     , ПараметрыТеста);

    Dropbox_ЗагрузитьФайлПоURL(ПараметрыТеста);
    Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_СоздатьУдалитьТег() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ДобавитьТег(ПараметрыТеста);
    Dropbox_ПолучитьСписокТегов(ПараметрыТеста);
    Dropbox_УдалитьТег(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_ПолучитьАккаунт() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token", ПараметрыТеста);

    Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыТеста);
    Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыТеста);

КонецПроцедуры

Процедура ДропБокс_РаботаСДоступами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_OtherUser", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Dropbox_FileID"   , ПараметрыТеста);

    Dropbox_ДобавитьПользователейКФайлу(ПараметрыТеста);
    Dropbox_ОпубликоватьПапку(ПараметрыТеста);
    Dropbox_ДобавитьПользователейКПапке(ПараметрыТеста);
    Dropbox_ОтменитьПубликациюПапки(ПараметрыТеста);
    Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыТеста);
    Dropbox_ОтменитьПубликациюФайла(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура Б24_РаботаСТокеном() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"      , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientID"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_ClientSecret", ПараметрыТеста);

    Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Code", ПараметрыТеста);

    Bitrix24_ПолучитьТокен(ПараметрыТеста);

    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Refresh", ПараметрыТеста);

    Bitrix24_ОбновитьТокен(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_СерверноеВремя() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_СерверноеВремя(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСНовостями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    Bitrix24_СоздатьНовость(ПараметрыТеста);
    Bitrix24_ИзменитьНовость(ПараметрыТеста);
    Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыТеста);
    Bitrix24_ПолучитьНовости(ПараметрыТеста);
    Bitrix24_ДобавитьКомментарийНовости(ПараметрыТеста);
    Bitrix24_ДобавитьПолучателейКНовости(ПараметрыТеста);
    Bitrix24_УдалитьНовость(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЗадачами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_UserID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыТеста);
    Bitrix24_СоздатьЗадачу(ПараметрыТеста);
    Bitrix24_СоздатьЗависимостьЗадач(ПараметрыТеста);
    Bitrix24_УдалитьЗависимостьЗадач(ПараметрыТеста);
    Bitrix24_ИзменитьЗадачу(ПараметрыТеста);
    Bitrix24_ПолучитьЗадачу(ПараметрыТеста);
    Bitrix24_ОтключитьЗвукЗадачи(ПараметрыТеста);
    Bitrix24_ВключитьЗвукЗадачи(ПараметрыТеста);
    Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыТеста);
    Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыТеста);
    Bitrix24_ДелегироватьЗадачу(ПараметрыТеста);
    Bitrix24_ОтложитьЗадачу(ПараметрыТеста);
    Bitrix24_ЗавершитьЗадачу(ПараметрыТеста);
    Bitrix24_ОтклонитьЗадачу(ПараметрыТеста);
    Bitrix24_ПринятьЗадачу(ПараметрыТеста);
    Bitrix24_ВозобновитьЗадачу(ПараметрыТеста);
    Bitrix24_НачатьВыполнениеЗадачи(ПараметрыТеста);
    Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыТеста);
    Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыТеста);
    Bitrix24_ПриостановитьЗадачу(ПараметрыТеста);
    Bitrix24_ПолучитьИсториюЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокЗадач(ПараметрыТеста);
    Bitrix24_ПроверитьДоступКЗадаче(ПараметрыТеста);
    Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыТеста);

    Наименование  = "Картинка задачи.jpg";
    Картинка      = ПараметрыТеста["Picture"];
    IDПриемника   = 3;

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование, Картинка, IDПриемника);
    IDФайла   = Результат["result"]["ID"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskFileID", IDФайла);
    ПараметрыТеста.Вставить("Bitrix24_TaskFileID", IDФайла);

    Bitrix24_ДобавитьФайлВЗадачу(ПараметрыТеста);

    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    Bitrix24_УдалитьЗадачу(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСДиском() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);

    Bitrix24_ПолучитьСписокХранилищ(ПараметрыТеста);
    Bitrix24_ПолучитьХранилищеПриложения(ПараметрыТеста);
    Bitrix24_ПереименоватьХранилище(ПараметрыТеста);
    Bitrix24_ПолучитьХранилище(ПараметрыТеста);
    Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыТеста);
    Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыТеста);
    Bitrix24_ПолучитьИнформациюОФайле(ПараметрыТеста);
    Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыТеста);
    Bitrix24_ПереименоватьФайл(ПараметрыТеста);
    Bitrix24_ПоместитьФайлВКорзину(ПараметрыТеста);
    Bitrix24_ВосстановитьФайл(ПараметрыТеста);
    Bitrix24_СоздатьКаталогВХранилище(ПараметрыТеста);
    Bitrix24_ПереименоватьКаталог(ПараметрыТеста);
    Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыТеста);
    Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыТеста);
    Bitrix24_СоздатьПодкаталог(ПараметрыТеста);
    Bitrix24_ПереместитьФайлВКаталог(ПараметрыТеста);
    Bitrix24_СкопироватьКаталог(ПараметрыТеста);
    Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыТеста);
    Bitrix24_СкопироватьФайл(ПараметрыТеста);
    Bitrix24_УдалитьФайл(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыТеста);
    Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыТеста);
    Bitrix24_ПереместитьКаталог(ПараметрыТеста);
    Bitrix24_ПоместитьКаталогВКорзину(ПараметрыТеста);
    Bitrix24_ВосстановитьКаталог(ПараметрыТеста);
    Bitrix24_УдалитьКаталог(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСКомментариями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentsTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_CommentsTaskID", IDЗадачи);

    Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_СоздатьРезультатИзКомментария(ПараметрыТеста);
    Bitrix24_ПолучитьСписокРезультатов(ПараметрыТеста);
    Bitrix24_УдалитьРезультатИзКомментария(ПараметрыТеста);
    Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьКомментарийЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура Б24_УчетРабочегоВремени() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ElapsedTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_ElapsedTaskID", IDЗадачи);

    Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыТеста);
    Bitrix24_НачатьУчетВремени(ПараметрыТеста);
    Bitrix24_ПриостановитьУчетВремени(ПараметрыТеста);
    Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыТеста);
    Bitrix24_ЗавершитьУчетВремени(ПараметрыТеста);
    Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

КонецПроцедуры

Процедура Б24_Канбан() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыТеста["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);
    IDЗадачи  = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_KanbanTaskID", IDЗадачи);
    ПараметрыТеста.Вставить("Bitrix24_KanbanTaskID", IDЗадачи);

    Bitrix24_ДобавитьСтадиюКанбана(ПараметрыТеста);
    Bitrix24_ПолучитьСтадииКанбана(ПараметрыТеста);
    Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыТеста);
    Bitrix24_ИзменитьСтадиюКанбана(ПараметрыТеста);

    OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

    Bitrix24_УдалитьСтадиюКанбана(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    Bitrix24_ПолучитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_УстановитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьПользователей(ПараметрыТеста);
    Bitrix24_СоздатьЧат(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыТеста);
    Bitrix24_ИсключитьПользователяИзЧата(ПараметрыТеста);
    Bitrix24_ДобавитьПользователейВЧат(ПараметрыТеста);
    Bitrix24_ИзменитьЗаголовокЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ИзменитьЦветЧата(ПараметрыТеста);
    Bitrix24_ИзменитьКартинкуЧата(ПараметрыТеста);
    Bitrix24_ОтключитьУведомленияЧата(ПараметрыТеста);
    Bitrix24_ВключитьУведомленияЧата(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыТеста);
    Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыТеста);
    Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыТеста);
    Bitrix24_ПолучитьДиалог(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыТеста);
    Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыТеста);
    Bitrix24_ОтправитьСообщение(ПараметрыТеста);
    Bitrix24_ИзменитьСообщение(ПараметрыТеста);
    Bitrix24_ПолучитьБлокКартинки(ПараметрыТеста);
    Bitrix24_ПолучитьБлокФайла(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыТеста);
    Bitrix24_УдалитьСообщение(ПараметрыТеста);
    Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыТеста);
    Bitrix24_ОтправитьФайл(ПараметрыТеста);

    OPI_Инструменты.Пауза(5);

    Bitrix24_ПрочитатьВсе(ПараметрыТеста);
    Bitrix24_СменитьВладельцаЧата(ПараметрыТеста);
    Bitrix24_ПокинутьЧат(ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруЧата(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСУведомлениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"        , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"       , ПараметрыТеста);

    Bitrix24_СоздатьПерсональноеУведомление(ПараметрыТеста);
    Bitrix24_СоздатьСистемноеУведомление(ПараметрыТеста);
    Bitrix24_УдалитьУведомление(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСПолямиЗадач() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"            , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token"          , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_HookTaskFieldID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_TaskFieldID"    , ПараметрыТеста);

    Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыТеста);
    Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыТеста);
    Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_УправлениеПодразделениями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_СоздатьПодразделение(ПараметрыТеста);
    Bitrix24_ПолучитьПодразделения(ПараметрыТеста);
    Bitrix24_ИзменитьПодразделение(ПараметрыТеста);
    Bitrix24_УдалитьПодразделение(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_УправлениеПользователями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьТекущегоПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыТеста);
    Bitrix24_СоздатьПользователя(ПараметрыТеста);
    Bitrix24_НайтиПользователей(ПараметрыТеста);
    Bitrix24_ИзменитьПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьПользователя(ПараметрыТеста);
    Bitrix24_ИзменитьСтатусПользователя(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСЛидами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьСписокЛидов(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруЛида(ПараметрыТеста);
    Bitrix24_СоздатьЛид(ПараметрыТеста);
    Bitrix24_ПолучитьЛид(ПараметрыТеста);
    Bitrix24_ИзменитьЛид(ПараметрыТеста);
    Bitrix24_УдалитьЛид(ПараметрыТеста);

КонецПроцедуры

Процедура Б24_РаботаСоСделками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_URL"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Domain", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Bitrix24_Token" , ПараметрыТеста);

    Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыТеста);
    Bitrix24_ПолучитьСтруктуруСделки(ПараметрыТеста);
    Bitrix24_СоздатьСделку(ПараметрыТеста);
    Bitrix24_ПолучитьСделку(ПараметрыТеста);
    Bitrix24_ИзменитьСделку(ПараметрыТеста);
    Bitrix24_УдалитьСделку(ПараметрыТеста);
    Bitrix24_ПолучитьСписокСделок(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область VkTeams

Процедура ВКТ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_FileID", ПараметрыТеста);

    VkTeams_ПроверитьТокен(ПараметрыТеста);
    VkTeams_ПолучитьСобытия(ПараметрыТеста);
    VKTeams_ПолучитьИнформациюОФайле(ПараметрыТеста);

КонецПроцедуры

Процедура ВКТ_ОтправкаСообщений() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_MessageID", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Document"         , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Audio2"           , ПараметрыТеста);

    VkTeams_ОтправитьТекстовоеСообщение(ПараметрыТеста);
    OPI_Инструменты.Пауза(60);

    VKTeams_ОтветитьНаСобытиеКлавиатуры(ПараметрыТеста);
    VKTeams_ПереслатьСообщение(ПараметрыТеста);
    VKTeams_ОтправитьФайл(ПараметрыТеста);
    VKTeams_ПереслатьФайл(ПараметрыТеста);
    VKTeams_ИзменитьТекстСообщения(ПараметрыТеста);
    VKTeams_ЗакрепитьСообщение(ПараметрыТеста);
    VKTeams_ОткрепитьСообщение(ПараметрыТеста);
    VKTeams_УдалитьСообщение(ПараметрыТеста);
    VKTeams_ОтправитьГолосовоеСообщение(ПараметрыТеста);
    VKTeams_ПереслатьГолосовоеСообщение(ПараметрыТеста);
    VKTeams_СформироватьКнопкуДействия(ПараметрыТеста);

КонецПроцедуры

Процедура ВКТ_УправлениеЧатами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_Token"    , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("VkTeams_ChatID2"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture3"         , ПараметрыТеста);

    VKTeams_ИсключитьПользователейЧата(ПараметрыТеста);
    VKTeams_ИзменитьАватарЧата(ПараметрыТеста);
    VKTeams_ПолучитьИнформациюОЧате(ПараметрыТеста);
    VKTeams_ПолучитьАдминистраторовЧата(ПараметрыТеста);
    VKTeams_ПолучитьПользователейЧата(ПараметрыТеста);
    VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыТеста);
    VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыТеста);
    VKTeams_ЗаблокироватьПользователяЧата(ПараметрыТеста);
    VKTeams_РазблокироватьПользователяЧата(ПараметрыТеста);
    VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыТеста);
    VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыТеста);
    VKTeams_УстановитьЗаголовокЧата(ПараметрыТеста);
    VKTeams_УстановитьОписаниеЧата(ПараметрыТеста);
    VKTeams_УстановитьПравилаЧата(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область OzonSeller

Процедура ОзонАПИ_АтрибутыИХарактеристики() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыТеста);
    Ozon_ПолучитьХарактеристикиКатегории(ПараметрыТеста);
    Ozon_ПолучитьЗначенияХарактеристики(ПараметрыТеста);
    Ozon_НайтиЗначенияХарактеристики(ПараметрыТеста);
    Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_ЗагрузкаИОбновлениеТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"       , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2"      , ПараметрыТеста);

    Сообщить("Проверка товаров Ozon недоступна");
    Возврат;

    // BSLLS:UnreachableCode-off

    Ozon_ПолучитьСтруктуруТовара(ПараметрыТеста);
    Ozon_СоздатьОбновитьТовары(ПараметрыТеста);
    Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыТеста);
    Ozon_ДобавитьВидеоТовара(ПараметрыТеста);
    Ozon_ДобавитьВидеообложкуТовара(ПараметрыТеста);
    Ozon_ДополнитьКомплексныйАтрибут(ПараметрыТеста);
    Ozon_СоздатьТоварыПоOzonID(ПараметрыТеста);
    Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыТеста);
    Ozon_ОбновитьХарактеристикиТоваров(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыТеста);
    Ozon_ПолучитьСписокТоваров(ПараметрыТеста);
    Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыТеста);
    Ozon_ПолучитьИнформациюОТоварах(ПараметрыТеста);
    Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыТеста);
    Ozon_ПолучитьОписаниеТовара(ПараметрыТеста);
    Ozon_ОбновитьИзображенияТовара(ПараметрыТеста);
    Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыТеста);
    Ozon_ИзменитьАртикулыТоваров(ПараметрыТеста);
    Ozon_АрхивироватьТовары(ПараметрыТеста);
    Ozon_РазархивироватьТовары(ПараметрыТеста);
    Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыТеста);
    Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыТеста);
    Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыТеста);
    Ozon_ПолучитьСвязанныеSKU(ПараметрыТеста);
    Ozon_УдалитьТоварыБезSKU(ПараметрыТеста);

    // BSLLS:UnreachableCode-on

КонецПроцедуры

Процедура ОзонАПИ_Штрихкоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    Ozon_ПривязатьШтрихкоды(ПараметрыТеста);
    Ozon_СоздатьШтрихкоды(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_ЦеныИОстаткиТоваров() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ProductID", ПараметрыТеста);

    Ozon_ПолучитьКоличествоТоваров(ПараметрыТеста);
    Ozon_ОбновитьЦеныТоваров(ПараметрыТеста);
    Ozon_ОбновитьКоличествоТоваров(ПараметрыТеста);
    Ozon_ПолучитьЦеныТоваров(ПараметрыТеста);
    Ozon_ПолучитьИнформациюОбУценке(ПараметрыТеста);
    Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыТеста);
    Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_РаботаСоСкладами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    Ozon_ПолучитьСписокСкладов(ПараметрыТеста);

КонецПроцедуры

Процедура ОзонАПИ_РаботаСАкциями() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ClientID" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Ozon_ApiKey"   , ПараметрыТеста);

    Ozon_ПолучитьСписокАкций(ПараметрыТеста);
    Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыТеста);
    Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура НС_РаботаСФайлами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Picture2" , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Gif"      , ПараметрыТеста);

    Neocities_ЗагрузитьФайл(ПараметрыТеста);
    Neocities_ЗагрузитьФайлы(ПараметрыТеста);
    Neocities_ПолучитьСписокФайлов(ПараметрыТеста);
    Neocities_УдалитьВыбранныеФайлы(ПараметрыТеста);
    Neocities_СинхронизироватьКаталоги(ПараметрыТеста);

КонецПроцедуры

Процедура НС_ПолучениеДанных() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Token"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Login"   , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("NC_Password", ПараметрыТеста);

    Neocities_ПолучитьДанныеОСайте(ПараметрыТеста);
    Neocities_ПолучитьТокен(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура СдэкАПИ_ОбщиеМетоды() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Account"  , ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Password" , ПараметрыТеста);

    CDEK_ПолучитьТокен(ПараметрыТеста);
    CDEK_ПолучитьЧекиНаДату(ПараметрыТеста);
    CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыТеста);
    CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыТеста);
    CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыТеста);
    CDEK_ПолучитьСписокОфисов(ПараметрыТеста);

КонецПроцедуры

Процедура СдэкАПИ_РаботаСЗаказами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token", ПараметрыТеста);

    CDEK_ПолучитьОписаниеЗаказа(ПараметрыТеста);
    CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьЗаказ(ПараметрыТеста);
    CDEK_ПолучитьЗаказПоНомеру(ПараметрыТеста);
    CDEK_СформироватьКвитанцию(ПараметрыТеста);
    CDEK_СформироватьШтрихкод(ПараметрыТеста);
    CDEK_СоздатьПреалерт(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьКвитанцию(ПараметрыТеста);
    CDEK_ПолучитьШтрихкод(ПараметрыТеста);
    CDEK_ПолучитьПреалерт(ПараметрыТеста);
    CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыТеста);
    CDEK_ПолучитьЧекЗаказа(ПараметрыТеста);
    CDEK_ИзменитьЗаказ(ПараметрыТеста);
    CDEK_ОформитьКлиентскийВозврат(ПараметрыТеста);
    CDEK_СоздатьОтказ(ПараметрыТеста);
    CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

Процедура СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("CDEK_Token"    , ПараметрыТеста);

    CDEK_СоздатьЗаказ(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыТеста);
    CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыТеста);
    CDEK_ПолучитьОписаниеДоговоренности(ПараметрыТеста);

    CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыТеста);
    CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыТеста);

    OPI_Инструменты.Пауза(25);

    CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыТеста);
    CDEK_УдалитьЗаказ(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура ЯМетрика_УправлениеМетками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    YandexMetrika_СоздатьМетку(ПараметрыТеста);
    YandexMetrika_ПолучитьСписокМеток(ПараметрыТеста);
    YandexMetrika_ИзменитьМетку(ПараметрыТеста);
    YandexMetrika_ПолучитьМетку(ПараметрыТеста);
    YandexMetrika_УдалитьМетку(ПараметрыТеста);

КонецПроцедуры

Процедура ЯМетрика_УправлениеСчетчиками() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("Metrika_Token", ПараметрыТеста);

    YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыТеста);
    YandexMetrika_СоздатьСчетчик(ПараметрыТеста);
    YandexMetrika_ПолучитьСчетчик(ПараметрыТеста);
    YandexMetrika_ИзменитьСчетчик(ПараметрыТеста);
    YandexMetrika_УдалитьСчетчик(ПараметрыТеста);
    YandexMetrika_ВосстановитьСчетчик(ПараметрыТеста);
    YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыТеста);
    YandexMetrika_УдалитьСчетчик(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура AWS_РаботаСБакетами() Экспорт

    ПараметрыТеста = Новый Структура;
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_AccessKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_SecretKey", ПараметрыТеста);
    OPI_ПолучениеДанныхТестов.ПараметрВКоллекцию("S3_URL"      , ПараметрыТеста);

    S3_СоздатьБакет(ПараметрыТеста);
    S3_ПолучитьСписокБакетов(ПараметрыТеста);
    S3_ПроверитьДоступностьБакета(ПараметрыТеста);
    S3_УстановитьШифрованиеБакета(ПараметрыТеста);
    S3_ПолучитьШифрованиеБакета(ПараметрыТеста);
    S3_УдалитьБакет(ПараметрыТеста);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыВК()

    Параметры   = Новый Структура;
    НомерГруппы = OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_GroupID");

    Параметры.Вставить("access_token"  , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_Token"));
    Параметры.Вставить("owner_id"      , "-" + НомерГруппы);
    Параметры.Вставить("app_id"        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("VK_AppID"));
    Параметры.Вставить("group_id"      , НомерГруппы);

    Возврат Параметры;

КонецФункции

Функция ПолучитьПараметрыАвторизацииТвиттер()

    Параметры = Новый Соответствие;

    Параметры.Вставить("redirect_uri"          , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Redirect"));
    Параметры.Вставить("client_id"             , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClinetID"));
    Параметры.Вставить("client_secret"         , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_ClientSecret"));
    Параметры.Вставить("access_token"          , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Token"));
    Параметры.Вставить("refresh_token"         , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_Refresh"));
    Параметры.Вставить("oauth_token"           , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthToken"));
    Параметры.Вставить("oauth_token_secret"    , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthSecret"));

    Параметры.Вставить("oauth_consumer_key"
        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthConsumerKey"));
    Параметры.Вставить("oauth_consumer_secret"
        , OPI_ПолучениеДанныхТестов.ПолучитьПараметр("Twitter_OAuthConsumerSecret"));

    Возврат Параметры;

КонецФункции

#Область АтомарныеТесты

#Область Telegram

Процедура Telegram_ПолучитьИнформациюБота(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    Результат   = OPI_Telegram.ПолучитьИнформациюБота(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюБота", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИнформацияБота(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьОбновления(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Результат      = OPI_Telegram.ПолучитьОбновления(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбновления", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УстановитьWebhook(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    URL         = ПараметрыФункции["Telegram_URL"];

    Результат   = OPI_Telegram.УстановитьWebhook(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУстановкаВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УдалитьWebhook(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Результат = OPI_Telegram.УдалитьWebhook(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьWebhook", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмУдалениеВебхук(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

    IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_ChannelMessageID", IDСообщения);

    Текст = "<b>Текст html %F0%9F%93%9E 10%</b>";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст, , "HTML");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (HTML)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    Текст = "%F0%9F%A4%BC";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (emoji)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    Текст = "Текст %F0%9F%A5%9D и emoji \(10%\)";

    Результат = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, IDКанала, Текст, , "MarkdownV2");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (текст и emoji)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СформироватьКлавиатуруПоМассивуКнопок(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Кнопка1");
    МассивКнопок.Добавить("Кнопка2");
    МассивКнопок.Добавить("Кнопка3");

    Результат = OPI_Telegram.СформироватьКлавиатуруПоМассивуКнопок(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКлавиатуруПоМассивуКнопок", "Telegram");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура Telegram_ОтправитьКартинку(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Картинка = ПараметрыФункции["Picture"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    КартинкаДД   = Новый ДвоичныеДанные(КартинкаПуть);

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDЧата, Текст, Картинка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDКанала, Текст, КартинкаПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьКартинку(Токен, IDКанала, Текст, КартинкаДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКартинка(Результат, Текст);

    УдалитьФайлы(КартинкаПуть);

    IDФайла = Результат["result"]["photo"][0]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьВидео(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Видео    = ПараметрыФункции["Video"];

    ВидеоПуть = ПолучитьИмяВременногоФайла("mp4");
    КопироватьФайл(Видео, ВидеоПуть);

    ВидеоДД   = Новый ДвоичныеДанные(ВидеоПуть);

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDЧата, Текст, Видео);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDКанала, Текст, ВидеоПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьВидео(Токен, IDКанала, Текст, ВидеоДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВидео (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмВидео(Результат, Текст);

    УдалитьФайлы(ВидеоПуть);

    IDФайла = Результат["result"]["video"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьАудио(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Аудио    = ПараметрыФункции["Audio"];

    АудиоПуть = ПолучитьИмяВременногоФайла("mp3");
    КопироватьФайл(Аудио, АудиоПуть);

    АудиоДД   = Новый ДвоичныеДанные(АудиоПуть);

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDЧата, Текст, Аудио);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDКанала, Текст, АудиоПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьАудио(Токен, IDКанала, Текст, АудиоДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьАудио (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмАудио(Результат, Текст);

    УдалитьФайлы(АудиоПуть);

    IDФайла = Результат["result"]["audio"]["file_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_FileID", IDФайла);

    ПараметрыФункции.Вставить("Telegram_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьДокумент(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Документ = ПараметрыФункции["Document"];

    ДокументПуть = ПолучитьИмяВременногоФайла("docx");
    КопироватьФайл(Документ, ДокументПуть);

    ДокументДД   = Новый ДвоичныеДанные(ДокументПуть);

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDЧата, Текст, Документ);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDЧата, Текст, Документ, , , "customname.docx");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (с именем)", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDКанала, Текст, ДокументПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьДокумент(Токен, IDКанала, Текст, ДокументДД, , , "customname.docx");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьДокумент (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмДокумент(Результат, Текст);

    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьГифку(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Текст    = ПараметрыФункции["String"];
    Гифка    = ПараметрыФункции["GIF"];

    ГифкаПуть = ПолучитьИмяВременногоФайла("gif");
    КопироватьФайл(Гифка, ГифкаПуть);

    ГифкаДД   = Новый ДвоичныеДанные(ГифкаПуть);

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDЧата, Текст, Гифка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDКанала, Текст, ГифкаПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку (Путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст); // SKIP

    Результат = OPI_Telegram.ОтправитьГифку(Токен, IDКанала, Текст, ГифкаДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГифку (ДД)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмГифка(Результат, Текст);

    УдалитьФайлы(ГифкаПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьМедиагруппу(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    Текст    = ПараметрыФункции["String"];
    Картинка = ПараметрыФункции["Picture"];
    Видео    = ПараметрыФункции["Video"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    ВидеоПуть = ПолучитьИмяВременногоФайла("mp4");
    КопироватьФайл(Видео, ВидеоПуть);

    ВидеоДД   = Новый ДвоичныеДанные(ВидеоПуть);

    Медиагруппа    = Новый Соответствие;
    Медиагруппа.Вставить(КартинкаПуть, "photo");
    Медиагруппа.Вставить(ВидеоДД     , "video");

    Результат = OPI_Telegram.ОтправитьМедиагруппу(Токен, IDЧата, Текст, Медиагруппа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМедиагруппу", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    ДокументURL  = ПараметрыФункции["Document"];
    ДокументПуть = ПолучитьИмяВременногоФайла("docx");
    IDКанала     = ПараметрыФункции["Telegram_ChannelID"];

    КопироватьФайл(ДокументURL, ДокументПуть);

    МедиаГруппа = Новый Соответствие;
    Медиагруппа.Вставить(ДокументURL , "document");
    Медиагруппа.Вставить(ДокументПуть, "document");

    Результат = OPI_Telegram.ОтправитьМедиагруппу(Токен, IDКанала, Текст, Медиагруппа);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМедиагруппу (доки)", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМедиагруппа(Результат);

    УдалитьФайлы(ВидеоПуть);
    УдалитьФайлы(КартинкаПуть);
    УдалитьФайлы(ДокументПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьМестоположение(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Ширина   = ПараметрыФункции["Lat"];
    Долгота  = ПараметрыФункции["Long"];

    Результат = OPI_Telegram.ОтправитьМестоположение(Токен, IDЧата, Ширина, Долгота);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМестоположение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат); // SKIP

    Результат = OPI_Telegram.ОтправитьМестоположение(Токен, IDКанала, Ширина, Долгота);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьМестоположение (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмМестоположение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьКонтакт(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Имя      = ПараметрыФункции["Name"];
    Фамилия  = ПараметрыФункции["Surname"];
    Телефон  = ПараметрыФункции["Phone"];

    Результат = OPI_Telegram.ОтправитьКонтакт(Токен, IDЧата  , Имя, Фамилия, Телефон);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя); // SKIP
    OPI_Инструменты.Пауза(20);                // SKIP

    Результат = OPI_Telegram.ОтправитьКонтакт(Токен, IDКанала, Имя, Фамилия, Телефон);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмКонтакт(Результат, Имя);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОтправитьОпрос(ПараметрыФункции)

    Токен    = ПараметрыФункции["Telegram_Token"];
    IDЧата   = ПараметрыФункции["Telegram_ChatID"];
    IDКанала = ПараметрыФункции["Telegram_ChannelID"];
    Вопрос   = "Какой ваш любимый цвет?";

    МассивОтветов     = Новый Массив;
    МассивОтветов.Добавить("Красный");
    МассивОтветов.Добавить("Желтый");
    МассивОтветов.Добавить("Зеленый");
    МассивОтветов.Добавить("Синий");

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDЧата  , Вопрос, МассивОтветов, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос); // SKIP

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDКанала, Вопрос, МассивОтветов, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос (канал)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос); // SKIP

    // END

    СтрочныйМассив    = "['Красный', 'Желтый','Зеленый' ,'Синий']";

    Результат = OPI_Telegram.ОтправитьОпрос(Токен, IDКанала, Вопрос, СтрочныйМассив, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьОпрос (строчный массив)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмОпрос(Результат, Вопрос);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СкачатьФайл(ПараметрыФункции)

    IDФайла = ПараметрыФункции["Telegram_FileID"];
    Токен   = ПараметрыФункции["Telegram_Token"];

    Результат = OPI_Telegram.СкачатьФайл(Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "Telegram");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

КонецПроцедуры

Процедура Telegram_ПереслатьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDЧата      = ПараметрыФункции["Telegram_ChatID"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ПереслатьСообщение(Токен, IDСообщения, IDКанала, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПереслать(Результат, IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_Бан(ПараметрыФункции)

    Токен             = ПараметрыФункции["Telegram_Token"];
    IDПользователя    = ПараметрыФункции["Telegram_ChatID"];
    IDКанала          = ПараметрыФункции["Telegram_ChannelID"];

    Результат = OPI_Telegram.Бан(Токен, IDКанала, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Бан", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_Разбан(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    IDПользователя = ПараметрыФункции["Telegram_ChatID"];
    IDКанала       = ПараметрыФункции["Telegram_ChannelID"];

    Результат = OPI_Telegram.Разбан(Токен, IDКанала, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "Разбан", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмБан(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СоздатьСсылкуПриглашение(ПараметрыФункции)

    Токен         = ПараметрыФункции["Telegram_Token"];
    IDКанала      = ПараметрыФункции["Telegram_ChannelID"];
    Сутки         = 86400;
    ТекущаяДата   = OPI_Инструменты.ПолучитьТекущуюДату();

    Заголовок     = "Ссылка " + Строка(ТекущаяДата);
    Истечение     = ТекущаяДата + Сутки;
    UnixИстечение = OPI_Инструменты.UNIXTime(Истечение);

    Результат = OPI_Telegram.СоздатьСсылкуПриглашение(Токен, IDКанала, Заголовок, Истечение, 200);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСсылкуПриглашение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмПриглашение(Результат, Заголовок, UnixИстечение);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ЗакрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ЗакрепитьСообщение(Токен, IDКанала, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрепитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ОткрепитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.ОткрепитьСообщение(Токен, IDКанала, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрепитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьЧислоУчастников(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    IDКанала    = ПараметрыФункции["Telegram_ChannelID"];

    Результат  = OPI_Telegram.ПолучитьЧислоУчастников(Токен, IDКанала);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧислоУчастников", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПолучитьСписокИконокАватаров(ПараметрыФункции)

    Токен       = ПараметрыФункции["Telegram_Token"];
    Результат   = OPI_Telegram.ПолучитьСписокИконокАватаров(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокИконокАватаров", "Telegram");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СоздатьТемуФорума(ПараметрыФункции)

    Токен     = ПараметрыФункции["Telegram_Token"];
    Чат       = ПараметрыФункции["Telegram_ForumID"];
    Иконка    = "5357419403325481346";
    Имя       = "Тестовая тема " + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Telegram.СоздатьТемуФорума(Токен, Чат, Имя, Иконка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТемуФорума", "Telegram");

    Тема = Результат["result"]["message_thread_id"];

    ПараметрыФункции.Вставить("Telegram_TopicID", Тема);
    OPI_Инструменты.ДобавитьПоле("Telegram_TopicID", Тема, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_TopicID", ПараметрыФункции["Telegram_TopicID"]);

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСозданиеТемы(Результат, Имя, Иконка);

    ЧатТема      = Чат + "*" + Тема;
    Текст        = ПараметрыФункции["String"];
    Результат    = OPI_Telegram.ОтправитьТекстовоеСообщение(Токен, ЧатТема, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (форум)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмСообщение(Результат, Текст);

КонецПроцедуры

Процедура Telegram_ИзменитьТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];
    Тема           = ПараметрыФункции["Telegram_TopicID"];
    НовоеИмя       = "Новый тестовый заголовок";
    НовяИконка     = "5310132165583840589";

    Результат = OPI_Telegram.ИзменитьТемуФорума(Токен, Чат, Тема, НовоеИмя, НовяИконка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ЗакрытьТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];
    Тема           = ПараметрыФункции["Telegram_TopicID"];

    OPI_Telegram.ОткрытьТемуФорума(Токен, Чат); // SKIP

    Результат = OPI_Telegram.ЗакрытьТемуФорума(Токен, Чат);       // Закрывает главную тему

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьТемуФорума (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ЗакрытьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_ОткрытьТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];
    Тема           = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.ОткрытьТемуФорума(Токен, Чат);       // Открывает главную тему

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьТемуФорума (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ОткрытьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_УдалитьТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];
    Тема           = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.УдалитьТемуФорума(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(25);

КонецПроцедуры

Процедура Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];
    Тема           = ПараметрыФункции["Telegram_TopicID"];

    Результат = OPI_Telegram.ОчиститьСписокЗакрепленныхСообщенийТемы(Токен, Чат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы (главная)");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат); // SKIP

    Результат = OPI_Telegram.ОчиститьСписокЗакрепленныхСообщенийТемы(Токен, Чат, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьСписокЗакрепленныхСообщенийТемы", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_СкрытьГлавнуюТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.СкрытьГлавнуюТемуФорума(Токен, Чат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкрытьГлавнуюТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ПоказатьГлавнуюТемуФорума(ПараметрыФункции)

    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.ПоказатьГлавнуюТемуФорума(Токен, Чат);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоказатьГлавнуюТемуФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_ИзменитьИмяГлавнойТемыФорума(ПараметрыФункции)

    Заголовок      = "Новое имя главной темы " + Строка(Новый УникальныйИдентификатор);
    Токен          = ПараметрыФункции["Telegram_Token"];
    Чат            = ПараметрыФункции["Telegram_ForumID"];

    Результат = OPI_Telegram.ИзменитьИмяГлавнойТемыФорума(Токен, Чат, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьИмяГлавнойТемыФорума", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Telegram_УдалитьСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["Telegram_Token"];
    IDЧата       = ПараметрыФункции["Telegram_ChannelID"];
    IDСообщения  = ПараметрыФункции["Telegram_ChannelMessageID"];

    Результат = OPI_Telegram.УдалитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Telegram");

    OPI_ПолучениеДанныхТестов.Проверка_ТелеграмИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область VK

Процедура VK_СоздатьСсылкуПолученияТокена(ПараметрыФункции)

    Приложение = ПараметрыФункции["VK_AppID"];
    Результат  = OPI_VK.СоздатьСсылкуПолученияТокена(Приложение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСсылкуПолученияТокена", "VK");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка  = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка2, ИВФ);

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(ИВФ);

    Результат = OPI_VK.СоздатьПост(Текст, МассивКартинок, Истина, URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);                         // SKIP
    ИДПоста   = Результат["response"]["post_id"];       // SKIP
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры); // SKIP

    Результат = OPI_VK.СоздатьПост(Текст, Картинка, Ложь  ,    , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост (одна картинка)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста   = Результат["response"]["post_id"];
    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(5);

    Результат = OPI_VK.СоздатьПост(Текст, ИВФ     , Истина, URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПост (один путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста = Результат["response"]["post_id"];
    OPI_Инструменты.ДобавитьПоле("VK_PostID", ИДПоста, "Строка", ПараметрыФункции);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PostID", ПараметрыФункции["VK_PostID"]);

    УдалитьФайлы(ИВФ);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДПоста   = ПараметрыФункции["VK_PostID"];

    Результат = OPI_VK.УдалитьПост(ИДПоста, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_СоздатьСоставнойПост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Текст     = "Пост из автотеста";
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Видео    = ПараметрыФункции["Video"];   // URL, Путь или Двоичные данные

    ИВФ = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);

    ЗагрузкаКартинки = OPI_VK.ЗагрузитьФотоНаСервер(ИВФ, Параметры)["response"][0];
    ЗагрузкаВидео    = OPI_VK.ЗагрузитьВидеоНаСервер(Видео, "Новое видео", , , Параметры);

    ВладелецКартинки = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["owner_id"]);
    ВладелецВидео    = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["owner_id"]);

    IDКартинки       = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаКартинки["id"]);
    IDВидео          = OPI_Инструменты.ЧислоВСтроку(ЗагрузкаВидео["video_id"]);

    МассивВложений = Новый Массив;
    МассивВложений.Добавить("photo" + ВладелецКартинки + "_" + IDКартинки);
    МассивВложений.Добавить("video" + ВладелецВидео + "_" + IDВидео);

    Результат = OPI_VK.СоздатьСоставнойПост(Текст, МассивВложений, Ложь, URL, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСоставнойПост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);
    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьОпрос()

    Параметры = ПолучитьПараметрыВК();
    Вопрос    = "Какой ваш любимый цвет?";

    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Красный");
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Зеленый");

    Результат = OPI_VK.СоздатьОпрос(Вопрос, МассивВариантов, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОпрос", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПост(Результат);

    ИДПоста  = Результат["response"]["post_id"];
    OPI_VK.УдалитьПост(ИДПоста, Параметры);

    OPI_Инструменты.Пауза(10);

КонецПроцедуры

Процедура VK_СоздатьАльбом(ПараметрыФункции)

    Параметры        = ПолучитьПараметрыВК();
    Имя              = "Альбом из автотеста";
    Описание         = "Новый альбом из автотеста";

    Результат = OPI_VK.СоздатьАльбом(Имя, Описание, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКАльбом(Результат, Описание);

    ИДАльбома  = Результат["response"]["id"];
    ПараметрыФункции.Вставить("VK_AlbumID", ИДАльбома);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AlbumID", ИДАльбома);

КонецПроцедуры

Процедура VK_СохранитьКартинкуВАльбом(ПараметрыФункции)

    Параметры        = ПолучитьПараметрыВК();
    ОписаниеКартинки = "Картинка автотест";
    ИДАльбома        = ПараметрыФункции["VK_AlbumID"];

    Картинка  = ПараметрыФункции["Picture"];       // URL, Путь к файлу или Двоичные данные
    ИВФ       = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);

    Картинка  = Новый ДвоичныеДанные(ИВФ);

    Результат = OPI_VK.СохранитьКартинкуВАльбом(ИДАльбома, Картинка, ОписаниеКартинки, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьКартинкуВАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, ОписаниеКартинки, ИДАльбома); // SKIP

    ИДКартинки   = Результат["response"][0]["id"];                       // SKIP
    Результат    = OPI_VK.УдалитьКартинку(ИДКартинки, Параметры);       // SKIP

    Результат = OPI_VK.СохранитьКартинкуВАльбом(ИДАльбома, ИВФ, ОписаниеКартинки, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьКартинкуВАльбом (путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, ОписаниеКартинки, ИДАльбома); // SKIP

    ИДКартинки  = Результат["response"][0]["id"];
    ПараметрыФункции.Вставить("VK_PictureID", ИДКартинки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PictureID", ИДКартинки);

    УдалитьФайлы(ИВФ);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьКартинку(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    ИДКартинки = ПараметрыФункции["VK_PictureID"];

    Результат  = OPI_VK.УдалитьКартинку(ИДКартинки, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКартинку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьАльбом(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    ИДАльбома = ПараметрыФункции["VK_AlbumID"];

    Результат = OPI_VK.УдалитьАльбом(ИДАльбома, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьАльбом", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьИсторию(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    URL       = "https://github.com/Bayselonarrend/OpenIntegrations";

    Картинка  = ПараметрыФункции["Picture"];       // URL, Путь к файлу или Двоичные данные
    ИВФ       = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, ИВФ);
    Картинка  = Новый ДвоичныеДанные(ИВФ);

    Результат = OPI_VK.СоздатьИсторию(Картинка , URL, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьИсторию", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат); // SKIP

    Результат = OPI_VK.СоздатьИсторию(ИВФ, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьИсторию (путь)");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстория(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьОбсуждение(ПараметрыФункции)

    Параметры       = ПолучитьПараметрыВК();
    Название        = "Обсуждаем: какой цвет лучше?";
    Сообщение       = "Красный, желтый, синий или какой-то другой?";

    Результат = OPI_VK.СоздатьОбсуждение(Название, Сообщение, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

    ИДОбсуждения = Результат["response"];
    ПараметрыФункции.Вставить("VK_ConvID", ИДОбсуждения);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_ConvID", ИДОбсуждения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗакрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Результат    = OPI_VK.ЗакрытьОбсуждение(ИДОбсуждения, Ложь, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ОткрытьОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Результат    = OPI_VK.ОткрытьОбсуждение(ИДОбсуждения, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_НаписатьВОбсуждение(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();
    ИДОбсуждения = ПараметрыФункции["VK_ConvID"];
    Сообщение    = "Мне больше нравится желтый";

    Результат = OPI_VK.НаписатьВОбсуждение(ИДОбсуждения, Сообщение, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьВОбсуждение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКОбсуждение(Результат);

КонецПроцедуры

Процедура VK_ПоставитьЛайк(ПараметрыФункции)

    Параметры   = ПолучитьПараметрыВК();
    IDПоста     = ПараметрыФункции["VK_PostID"];

    Результат = OPI_VK.ПоставитьЛайк(IDПоста, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоставитьЛайк", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЛайк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СделатьРепост(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    IDПоста   = 2571;
    IDСтены   = -218704372;

    Результат = OPI_VK.СделатьРепост(IDПоста, IDСтены, , , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьРепост", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКРепост(Результат);

    ПараметрыФункции.Вставить("Repost", Результат["response"]["post_id"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_НаписатьКомментарий(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    Текст      = "Новый комментарий";
    IDПоста    = ПараметрыФункции["VK_PostID"];
    IDСтены    = Параметры["owner_id"];

    Результат  = OPI_VK.НаписатьКомментарий(IDПоста, IDСтены, Текст, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьКомментарий", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВККомментарий(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСтатистику(ПараметрыФункции)

    Параметры       = ПолучитьПараметрыВК();

    ТекущаяДата     = OPI_Инструменты.ПолучитьТекущуюДату();
    ДатаНачала      = НачалоДня(ТекущаяДата);
    ДатаОкончания   = КонецДня(ДатаНачала);

    Результат = OPI_VK.ПолучитьСтатистику(ДатаНачала, ДатаОкончания, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатистику", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистика(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСтатистикуПостов(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    МассивПостов = Новый Массив;
    МассивПостов.Добавить(214);
    МассивПостов.Добавить(215);

    Результат = OPI_VK.ПолучитьСтатистикуПостов(МассивПостов, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатистикуПостов", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСтатистикаПостов(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьРекламнуюКампанию(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();

    IDКабинета   = ПараметрыФункции["VK_AdsCabinetID"];
    Наименование = "Новая кампания";

    Результат    = OPI_VK.СоздатьРекламнуюКампанию(IDКабинета, Наименование, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРекламнуюКампанию", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДКампании  = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsCampaignID", ИДКампании);
    ПараметрыФункции.Вставить("VK_AdsCampaignID", ИДКампании);

КонецПроцедуры

Процедура VK_СоздатьРекламноеОбъявление(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();

    НомерКампании   = ПараметрыФункции["VK_AdsCampaignID"];
    ДневнойЛимит    = 150;
    НомерКатегории  = 126;
    IDПоста         = ПараметрыФункции["VK_PostID"];
    IDКабинета      = ПараметрыФункции["VK_AdsCabinetID"];

    Результат   = OPI_VK.СоздатьРекламноеОбъявление(НомерКампании
        , ДневнойЛимит
        , НомерКатегории
        , IDПоста
        , IDКабинета
        , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРекламноеОбъявление", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    ИДОбъявления = Результат["response"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_AdsPostID", ИДОбъявления);
    ПараметрыФункции.Вставить("VK_AdsPostID", ИДОбъявления);

КонецПроцедуры

Процедура VK_ПриостановитьРекламноеОбъявление(ПараметрыФункции)

    Параметры     = ПолучитьПараметрыВК();

    IDКабинета    = ПараметрыФункции["VK_AdsCabinetID"];
    IDОбъявления  = ПараметрыФункции["VK_AdsPostID"];

    Результат    = OPI_VK.ПриостановитьРекламноеОбъявление(IDКабинета, IDОбъявления, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьРекламноеОбъявление", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура VK_СформироватьКлавиатуру(ПараметрыФункции)

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Клавиатура = OPI_VK.СформироватьКлавиатуру(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Клавиатура);

КонецПроцедуры

Процедура VK_НаписатьСообщение(ПараметрыФункции)

    Параметры      = ПолучитьПараметрыВК();

    Текст          = "Сообщение из автотеста";
    IDПользователя = ПараметрыФункции["VK_UserID"];
    Communitytoken = ПараметрыФункции["VK_CommunityToken"];

    МассивКнопок = Новый Массив;
    МассивКнопок.Добавить("Button 1");
    МассивКнопок.Добавить("Button 2");

    Клавиатура = OPI_VK.СформироватьКлавиатуру(МассивКнопок);
    Результат  = OPI_VK.НаписатьСообщение(Текст, IDПользователя, Communitytoken, Клавиатура, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НаписатьСообщение", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокКатегорийТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.ПолучитьСписокКатегорийТоваров(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКатегорийТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура VK_СоздатьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название = "Тестовая подборка";
    Картинка = ПараметрыФункции["Picture"];
    Основная = Истина;
    Скрытая  = Ложь;

    Результат = OPI_VK.СоздатьПодборкуТоваров(Название
        , Картинка
        , Основная
        , Скрытая
        , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодборкуТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКПодборка(Результат);

    OPI_Инструменты.Пауза(5);

    ИДПодборки = Результат["response"]["market_album_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketAlbumID", ИДПодборки);
    ПараметрыФункции.Вставить("VK_MarketAlbumID", ИДПодборки);

КонецПроцедуры

Процедура VK_ИзменитьПодборкуТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название  = "Измененная подборка";
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат  = OPI_VK.ИзменитьПодборкуТоваров(Название, Подборка, , , , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодборкуТоваров", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьПодборкиПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.ПолучитьПодборкиПоИД(Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодборкиПоИД", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКЭлементы(Результат);

КонецПроцедуры

Процедура VK_ДобавитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    ОписаниеТовара = Новый Соответствие();
    ОписаниеТовара.Вставить("Имя"                , "Тестовый товар");
    ОписаниеТовара.Вставить("Описание"           , "Описание товара");
    ОписаниеТовара.Вставить("Категория"          , "20173");
    ОписаниеТовара.Вставить("Цена"               , 1);
    ОписаниеТовара.Вставить("СтараяЦена"         , 15);
    ОписаниеТовара.Вставить("ОсновноеФото"       , Картинка1);
    ОписаниеТовара.Вставить("URL"                , "https://github.com/Bayselonarrend/OpenIntegrations");
    ОписаниеТовара.Вставить("ДополнительныеФото" , МассивКартинок);
    ОписаниеТовара.Вставить("ГлавныйВГруппе"     , Истина);
    ОписаниеТовара.Вставить("Ширина"             , 20);
    ОписаниеТовара.Вставить("Высота"             , 30);
    ОписаниеТовара.Вставить("Глубина"            , 40);
    ОписаниеТовара.Вставить("Вес"                , 100);
    ОписаниеТовара.Вставить("SKU"                , "12345");
    ОписаниеТовара.Вставить("ДоступныйОстаток"   , "10");

    Результат = OPI_VK.ДобавитьТовар(ОписаниеТовара, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара  = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID", ИДТовара);

КонецПроцедуры

Процедура VK_ИзменитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар = ПараметрыФункции["VK_MarketItemID"];

    ОписаниеТовара = Новый Соответствие;
    ОписаниеТовара.Вставить("Имя", "Тестовый товар измененный");

    Результат = OPI_VK.ИзменитьТовар(Товар, ОписаниеТовара, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ДобавитьТоварВПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар     = ПараметрыФункции["VK_MarketItemID"];
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.ДобавитьТоварВПодборку(Товар, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТоварВПодборку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКЧисло(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьТоварИзПодборки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар     = ПараметрыФункции["VK_MarketItemID"];
    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.УдалитьТоварИзПодборки(Товар, Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТоварИзПодборки", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьТовар(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар     = ПараметрыФункции["VK_MarketItemID"];

    Результат = OPI_VK.УдалитьТовар(Товар, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТовар", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьПодборку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Подборка  = ПараметрыФункции["VK_MarketAlbumID"];

    Результат = OPI_VK.УдалитьПодборку(Подборка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодборку", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СоздатьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название  = "Цвет";

    Результат = OPI_VK.СоздатьСвойствоТовара(Название, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСвойствоТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКСвойство(Результат);

    OPI_Инструменты.Пауза(5);

    Свойство  = Результат["response"]["property_id"];
    Свойство  = OPI_Инструменты.ЧислоВСтроку(Свойство);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PropID", Свойство);
    ПараметрыФункции.Вставить("VK_PropID", Свойство);

КонецПроцедуры

Процедура VK_ИзменитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Название  = "Цвет (изм.)";
    Свойство  = ПараметрыФункции["VK_PropID"];

    Результат = OPI_VK.ИзменитьСвойствоТовара(Название, Свойство, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойствоТовара", "VK");

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ДобавитьВариантСвойстваТовара(ПараметрыФункции)

    Счетчик   = 1; // SKIP
    Параметры = ПолучитьПараметрыВК();

    Свойство        = ПараметрыФункции["VK_PropID"];
    МассивВариантов = Новый Массив;
    МассивВариантов.Добавить("Желтый");
    МассивВариантов.Добавить("Синий");
    МассивВариантов.Добавить("Красный");

    Для Каждого Значение Из МассивВариантов Цикл

        Результат = OPI_VK.ДобавитьВариантСвойстваТовара(Значение, Свойство, Параметры);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьВариантСвойстваТовара", "VK");

        OPI_ПолучениеДанныхТестов.Проверка_ВКВариантСвойства(Результат);                                // SKIP
        OPI_Инструменты.Пауза(5);                                             // SKIP

        ИДВарианта   = Результат["response"]["variant_id"];                   // SKIP
        ИмяПараметра = "VK_PropVarID" + Строка(Счетчик);                      // SKIP

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПараметра, ИДВарианта); // SKIP
        ПараметрыФункции.Вставить(ИмяПараметра, ИДВарианта);
        Счетчик = Счетчик + 1;                                                // SKIP

    КонецЦикла;

    // END

КонецПроцедуры

Процедура VK_ИзменитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство  = ПараметрыФункции["VK_PropID"];
    Вариант   = ПараметрыФункции["VK_PropVarID1"];
    Значение  = "Новое имя варианта";

    Результат = OPI_VK.ИзменитьВариантСвойстваТовара(Значение
            , Свойство
            , Вариант
            , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьВариантСвойстваТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_СоздатьТоварСоСвойством(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Картинка1        = ПараметрыФункции["Picture"];
    Картинка2        = ПараметрыФункции["Picture2"];
    ВариантСвойства1 = ПараметрыФункции["VK_PropVarID1"];
    ВариантСвойства2 = ПараметрыФункции["VK_PropVarID2"];

    МассивКартинок   = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Товар = Новый Соответствие();
    Товар.Вставить("Имя"                , "Тестовый товар (со свойством)");
    Товар.Вставить("Описание"           , "Описание товара");
    Товар.Вставить("Категория"          , "20173");
    Товар.Вставить("Цена"               , 1);
    Товар.Вставить("СтараяЦена"         , 15);
    Товар.Вставить("ОсновноеФото"       , Картинка1);
    Товар.Вставить("URL"                , "https://github.com/Bayselonarrend/OpenIntegrations");
    Товар.Вставить("ДополнительныеФото" , МассивКартинок);
    Товар.Вставить("ГлавныйВГруппе"     , Истина);
    Товар.Вставить("НомерГруппы"        , Неопределено);
    Товар.Вставить("Ширина"             , 20);
    Товар.Вставить("Высота"             , 30);
    Товар.Вставить("Глубина"            , 40);
    Товар.Вставить("Вес"                , 100);
    Товар.Вставить("SKU"                , 12345);
    Товар.Вставить("ДоступныйОстаток"   , "10");
    Товар.Вставить("ЗначенияСвойств"    , ВариантСвойства1);

    Результат = OPI_VK.ДобавитьТовар(Товар, , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ТоварСоСвойством1");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара  = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID2", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID2", ИДТовара);

    Товар.Вставить("Имя"            , "Тестовый товар (другой)");
    Товар.Вставить("ЗначенияСвойств", ВариантСвойства2);

    Результат  = OPI_VK.ДобавитьТовар(Товар, , Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ТоварСоСвойством2");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТовар(Результат);

    ИДТовара  = Результат["response"]["market_item_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_MarketItemID3", ИДТовара);
    ПараметрыФункции.Вставить("VK_MarketItemID3", ИДТовара);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьТоварыПоИД(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Результат = OPI_VK.ПолучитьТоварыПоИД(МассивТоваров, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТоварыПоИД", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИнформацияОТоварах(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_СгруппироватьТовары(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Товар1 = ПараметрыФункции["VK_MarketItemID2"];
    Товар2 = ПараметрыФункции["VK_MarketItemID3"];

    МассивТоваров = Новый Массив;
    МассивТоваров.Добавить(Товар1);
    МассивТоваров.Добавить(Товар2);

    Результат = OPI_VK.СгруппироватьТовары(МассивТоваров, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СгруппироватьТовары", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКГруппаТоваров(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьВариантСвойстваТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Вариант   = ПараметрыФункции["VK_PropVarID1"];

    Результат = OPI_VK.УдалитьВариантСвойстваТовара(Вариант, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВариантСвойстваТовара", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_УдалитьСвойствоТовара(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Свойство  = ПараметрыФункции["VK_PropID"];

    Результат = OPI_VK.УдалитьСвойствоТовара(Свойство, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСвойствоТовара");

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.Проверка_ВКИстина(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокТоваров(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокТоваров(, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТоваров", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокПодборок(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();
    Результат = OPI_VK.ПолучитьСписокПодборок(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПодборок", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокСвойств(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    Результат  = OPI_VK.ПолучитьСписокСвойств(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСвойств", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ПолучитьСписокЗаказов(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыВК();
    Результат  = OPI_VK.ПолучитьСписокЗаказов(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗаказов", "VK");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗагрузитьВидеоНаСервер(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();

    Видео        = ПараметрыФункции["Video"]; // URL, Двоичные данные или Путь к файлу
    Наименование = "Новое видео";
    Описание     = "Описание видео";

    Результат = OPI_VK.ЗагрузитьВидеоНаСервер(Видео, Наименование, Описание, , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВКВидео(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VK_ЗагрузитьФотоНаСервер(ПараметрыФункции)

    Параметры    = ПолучитьПараметрыВК();

    Картинка = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу
    Вид      = "Пост";

    Результат = OPI_VK.ЗагрузитьФотоНаСервер(Картинка, Параметры, Вид);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьВидеоНаСервер", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККартинкаАльбома(Результат, "");

КонецПроцедуры

Процедура VK_СократитьСсылку(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.СократитьСсылку("https://github.com/Bayselonarrend/OpenIntegrations", Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СократитьСсылку", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

КонецПроцедуры

Процедура VK_ПолучитьСписокРекламныхКатегорий(ПараметрыФункции)

    Параметры = ПолучитьПараметрыВК();

    Результат = OPI_VK.ПолучитьСписокРекламныхКатегорий(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРекламныхКатегорий", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_ВККатегории(Результат);

КонецПроцедуры

Процедура VK_ПолучитьОписаниеТовара(ПараметрыФункции)

    Результат = OPI_VK.ПолучитьОписаниеТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеТовара", "VK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

#КонецОбласти

#Область YandexDisk

Процедура YandexDisk_ПолучитьИнформациюОДиске(ПараметрыФункции)

    Токен     = ПараметрыФункции["YandexDisk_Token"];
    Результат = OPI_YandexDisk.ПолучитьИнформациюОДиске(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОДиске", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискДиск(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СоздатьПапку(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = "/" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_YandexDisk.СоздатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискКаталог(Результат, Путь);

    OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Токен   = ПараметрыФункции["YandexDisk_Token"];
    Адрес   = ПараметрыФункции["Picture"];
    Путь    = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.ЗагрузитьФайлПоURL(Токен, Путь, Адрес);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлПоURL", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПроцедура(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_FileByURLPath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_FileByURLPath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Результат = OPI_YandexDisk.ПолучитьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

КонецПроцедуры

Процедура YandexDisk_УдалитьОбъект(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_FileByURLPath"];

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь, Ложь);

    // END

    OPI_Инструменты.Пауза(5);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура YandexDisk_ЗагрузитьФайл(ПараметрыФункции)

    Путь1     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";
    Путь2     = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Картинка = ПараметрыФункции["Picture"]; // URL

    ИВФ      = ПолучитьИмяВременногоФайла("png"); // Путь
    КопироватьФайл(Картинка, ИВФ);

    Результат = OPI_YandexDisk.ЗагрузитьФайл(Токен, Путь1, Картинка, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (URL)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат); // SKIP

    OPI_Инструменты.Пауза(5);  // SKIP

    Результат = OPI_YandexDisk.ЗагрузитьФайл(Токен, Путь2, ИВФ, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь1, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект (URL)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Результат = OPI_YandexDisk.УдалитьОбъект(Токен, Путь2, Ложь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект (Путь)", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    УдалитьФайлы(ИВФ);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СоздатьКопиюОбъекта(ПараметрыФункции)

    Токен     = ПараметрыФункции["YandexDisk_Token"];
    Оригинал  = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь      = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.СоздатьКопиюОбъекта(Токен, Оригинал, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКопиюОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_CopyFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_CopyFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСсылкуДляСкачивания(ПараметрыФункции)

    Токен    = ПараметрыФункции["YandexDisk_Token"];
    Путь     = ПараметрыФункции["YandexDisk_PathForLink"];

    Результат = OPI_YandexDisk.ПолучитьСсылкуДляСкачивания(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуДляСкачивания", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_СкачатьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["YandexDisk_Token"];
    Путь  = ПараметрыФункции["YandexDisk_PathForLink"];

    Результат = OPI_YandexDisk.СкачатьФайл(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен            = ПараметрыФункции["YandexDisk_Token"];
    Количество       = 2;
    СмещениеОтНачала = 1;
    ОтборПоТипу      = "image";

    Результат = OPI_YandexDisk.ПолучитьСписокФайлов(Токен, Количество, СмещениеОтНачала, ОтборПоТипу);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПереместитьОбъект(ПараметрыФункции)

    Токен     = ПараметрыФункции["YandexDisk_Token"];
    Оригинал  = ПараметрыФункции["YandexDisk_OriginalFilePath"];
    Путь      = "/" + Строка(Новый УникальныйИдентификатор) + ".png";

    Результат = OPI_YandexDisk.ПереместитьОбъект(Токен, Оригинал, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_NewFilePath", Путь);
    ПараметрыФункции.Вставить("YandexDisk_NewFilePath", Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСписокОпубликованныхОбъектов(ПараметрыФункции)

    Токен             = ПараметрыФункции["YandexDisk_Token"];
    Количество        = 2;
    СмещениеОтНачала  = 1;

    Результат = OPI_YandexDisk.ПолучитьСписокОпубликованныхОбъектов(Токен, Количество, СмещениеОтНачала);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОпубликованныхОбъектов", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСписокФайлов(Результат, Количество, СмещениеОтНачала);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура YandexDisk_ОпубликоватьОбъект(ПараметрыФункции)

    Токен  = ПараметрыФункции["YandexDisk_Token"];
    Путь   = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Результат = OPI_YandexDisk.ОпубликоватьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОпубликоватьОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Истина);

    URL = Результат["public_url"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("YandexDisk_PublicURL", URL);
    ПараметрыФункции.Вставить("YandexDisk_PublicURL", URL);

КонецПроцедуры

Процедура YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(ПараметрыФункции)

    Токен  = ПараметрыФункции["YandexDisk_Token"];
    URL    = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат  = OPI_YandexDisk.ПолучитьСсылкуСкачиванияПубличногоОбъекта(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуСкачиванияПубличногоОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискСсылка(Результат);

КонецПроцедуры

Процедура YandexDisk_ПолучитьПубличныйОбъект(ПараметрыФункции)

    Токен  = ПараметрыФункции["YandexDisk_Token"];
    URL    = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат   = OPI_YandexDisk.ПолучитьПубличныйОбъект(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПубличныйОбъект", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Истина);

КонецПроцедуры

Процедура YandexDisk_СохранитьПубличныйОбъектНаДиск(ПараметрыФункции)

    Токен  = ПараметрыФункции["YandexDisk_Token"];
    URL    = ПараметрыФункции["YandexDisk_PublicURL"];

    Результат   = OPI_YandexDisk.СохранитьПубличныйОбъектНаДиск(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СохранитьПубличныйОбъектНаДиск", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, "", Ложь);

КонецПроцедуры

Процедура YandexDisk_ОтменитьПубликациюОбъекта(ПараметрыФункции)

    Токен  = ПараметрыФункции["YandexDisk_Token"];
    Путь   = ПараметрыФункции["YandexDisk_OriginalFilePath"];

    Результат = OPI_YandexDisk.ОтменитьПубликациюОбъекта(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюОбъекта", "YandexDisk");

    OPI_ПолучениеДанныхТестов.Проверка_ЯДискПуть(Результат, Путь, Ложь);

КонецПроцедуры

#КонецОбласти

#Область Viber

Процедура Viber_УстановитьWebhook(ПараметрыФункции)

    Токен     = ПараметрыФункции["Viber_ChannelToken"];
    URL       = "http://api.athenaeum.digital/hs/viber";

    Результат = OPI_Viber.УстановитьWebhook(Токен, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьWebhook", "Viber");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Viber_ПолучитьИнформациюОКанале(ПараметрыФункции)

    Токен     = ПараметрыФункции["Viber_ChannelToken"];
    Результат = OPI_Viber.ПолучитьИнформациюОКанале(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКанале", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберОк(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Результат    = OPI_Viber.ПолучитьДанныеПользователя(Токен, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеПользователя", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ПолучитьОнлайнПользователей(ПараметрыФункции)

    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];

    Результат    = OPI_Viber.ПолучитьОнлайнПользователей(Токен, IDПользователя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОнлайнПользователей", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберОнлайн(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_СформироватьКлавиатуруИзМассиваКнопок(ПараметрыФункции)

    МассивКнопок  = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Результат = OPI_Viber.СформироватьКлавиатуруИзМассиваКнопок(МассивКнопок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКлавиатуруИзМассиваКнопок", "Viber");

КонецПроцедуры

Процедура Viber_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Текст = "Тестовое сообщение";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    МассивКнопок  = Новый Массив;
    МассивКнопок.Добавить("Кнопка 1");
    МассивКнопок.Добавить("Кнопка 2");
    МассивКнопок.Добавить("Кнопка 3");

    Клавиатура = OPI_Viber.СформироватьКлавиатуруИзМассиваКнопок(МассивКнопок);

    Результат  = OPI_Viber.ОтправитьТекстовоеСообщение(Токен, Текст, IDПользователя, ОтправкаВКанал, Клавиатура);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                                      // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьТекстовоеСообщение(Токен, Текст, IDПользователя, ОтправкаВКанал, Клавиатура);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьКартинку(ПараметрыФункции)

    Описание = "Тестовое сообщение";
    URL      = ПараметрыФункции["Picture"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат  = OPI_Viber.ОтправитьКартинку(Токен, URL, IDПользователя, ОтправкаВКанал, Описание);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                            // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьКартинку(Токен, URL, IDПользователя, ОтправкаВКанал, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКартинку (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьФайл(ПараметрыФункции)

    Расширение = "docx";
    URL        = ПараметрыФункции["Document"];

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат  = OPI_Viber.ОтправитьФайл(Токен, URL, IDПользователя, ОтправкаВКанал, Расширение);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                        // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьФайл(Токен, URL, IDПользователя, ОтправкаВКанал, Расширение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьКонтакт(ПараметрыФункции)

    Имя     = "Петр Петров";
    Телефон = "+123456789";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат  = OPI_Viber.ОтправитьКонтакт(Токен, Имя, Телефон, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                           // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьКонтакт(Токен, Имя, Телефон, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьКонтакт (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьЛокацию(ПараметрыФункции)

    Широта  = "48.87373649724122";
    Долгота = "2.2954639195323967";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат  = OPI_Viber.ОтправитьЛокацию(Токен, Широта, Долгота, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                           // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьЛокацию(Токен, Широта, Долгота, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЛокацию (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Viber_ОтправитьСсылку(ПараметрыФункции)

    URL = "https://github.com/Bayselonarrend/OpenIntegrations";

    IDПользователя = ПараметрыФункции["Viber_UserID"];
    Токен          = ПараметрыФункции["Viber_Token"];
    ОтправкаВКанал = Ложь;

    Результат  = OPI_Viber.ОтправитьСсылку(Токен, URL, IDПользователя, ОтправкаВКанал);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСсылку", "Viber"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);                                          // SKIP

    IDПользователя = ПараметрыФункции["Viber_ChannelAdminID"];
    Токен          = ПараметрыФункции["Viber_ChannelToken"];
    ОтправкаВКанал = Истина;

    Результат  = OPI_Viber.ОтправитьСсылку(Токен, URL, IDПользователя, ОтправкаВКанал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСсылку (канал)", "Viber");

    OPI_ПолучениеДанныхТестов.Проверка_ВайберСообщение(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleWorkspace

Процедура GoogleWorkspace_СформироватьСсылкуПолученияКода(ПараметрыФункции)

    ClientID  = ПараметрыФункции["Google_ClientID"];
    Результат = OPI_GoogleWorkspace.СформироватьСсылкуПолученияКода(ClientID);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Link", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleWorkspace_ПолучитьТокенПоКоду(ПараметрыФункции)

    ClientID      = ПараметрыФункции["Google_ClientID"];
    ClientSecret  = ПараметрыФункции["Google_ClientSecret"];
    Code          = ПараметрыФункции["Google_Code"];

    Результат = OPI_GoogleWorkspace.ПолучитьТокенПоКоду(ClientID, ClientSecret, Code);

    // END

    Если ЗначениеЗаполнено(Результат["access_token"])
        И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleWorkspace_ОбновитьТокен(ПараметрыФункции)

    ClientID      = ПараметрыФункции["Google_ClientID"];
    ClientSecret  = ПараметрыФункции["Google_ClientSecret"];
    RefreshToken  = ПараметрыФункции["Google_Refresh"];

    Результат = OPI_GoogleWorkspace.ОбновитьТокен(ClientID, ClientSecret, RefreshToken);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_ГуглТокен(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_Token", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

#КонецОбласти

#Область GoogleCalendar

Процедура GoogleCalendar_ПолучитьСписокКалендарей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Результат = OPI_GoogleCalendar.ПолучитьСписокКалендарей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКалендарей", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleCalendar_СоздатьКалендарь(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовый календарь";

    Результат = OPI_GoogleCalendar.СоздатьКалендарь(Токен, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКалендарь", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКалендарь(Результат, Наименование);

    Календарь = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_NewCalendarID", Календарь);
    OPI_Инструменты.ДобавитьПоле("Google_NewCalendarID", Календарь, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьМетаданныеКалендаря(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];
    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    Результат = OPI_GoogleCalendar.ИзменитьМетаданныеКалендаря(Токен, Календарь, Наименование, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьМетаданныеКалендаря", "GoogleCalendar");

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьМетаданныеКалендаря(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьМетаданныеКалендаря(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьМетаданныеКалендаря", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ДобавитьКалендарьВСписок(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Календарь    = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ДобавитьКалендарьВСписок(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКалендарьВСписок", "GoogleCalendar");

    Наименование = "Новое наименование";
    Описание     = "Новое описание";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьКалендарьСписка(ПараметрыФункции)

    Токен              = ПараметрыФункции["Google_Token"];
    Календарь          = ПараметрыФункции["Google_NewCalendarID"];
    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";
    Скрытый            = Ложь;

    Результат = OPI_GoogleCalendar.ИзменитьКалендарьСписка(Токен
        , Календарь
        , ОсновнойЦвет
        , ДополнительныйЦвет
        , Скрытый);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКалендарьСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьКалендарьСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьКалендарьСписка(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКалендарьСписка", "GoogleCalendar");

    ОсновнойЦвет       = "#000000";
    ДополнительныйЦвет = "#ffd800";

    OPI_ПолучениеДанныхТестов.Проверка_ГуглЦветКалендаря(Результат, ОсновнойЦвет, ДополнительныйЦвет);

КонецПроцедуры

Процедура GoogleCalendar_ОчиститьОсновнойКалендарь(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];

    Результат = OPI_GoogleCalendar.ОчиститьОсновнойКалендарь(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьОсновнойКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьКалендарьИзСписка(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.УдалитьКалендарьИзСписка(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКалендарьИзСписка", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьКалендарь(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.УдалитьКалендарь(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКалендарь", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_СоздатьСобытие(ПараметрыФункции)

    ТекущаяДата    = OPI_Инструменты.ПолучитьТекущуюДату();
    Токен          = ПараметрыФункции["Google_Token"];
    Календарь      = ПараметрыФункции["Google_NewCalendarID"];
    Наименование   = "Новое событие";
    Описание       = "Описание тестового события";
    Час            = 3600;

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу
    Вложения  = Новый Соответствие;

    Вложения.Вставить("Картинка1", Картинка1);
    Вложения.Вставить("Картинка2", Картинка2);

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание"                 , Описание);
    ОписаниеСобытия.Вставить("Заголовок"                , Наименование);
    ОписаниеСобытия.Вставить("МестоПроведения"          , "В офисе");
    ОписаниеСобытия.Вставить("ДатаНачала"               , ТекущаяДата);
    ОписаниеСобытия.Вставить("ДатаОкончания"            , ОписаниеСобытия["ДатаНачала"] + Час);
    ОписаниеСобытия.Вставить("МассивURLФайловВложений"  , Вложения);
    ОписаниеСобытия.Вставить("ОтправлятьУведомления"    , Истина);

    Результат = OPI_GoogleCalendar.СоздатьСобытие(Токен, Календарь, ОписаниеСобытия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСобытие", "GoogleCalendar");

    Событие = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Google_EventID", Событие);
    OPI_Инструменты.ДобавитьПоле("Google_EventID", Событие, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ИзменитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];
    Описание  = "Новое описание события";

    ОписаниеСобытия = Новый Соответствие;
    ОписаниеСобытия.Вставить("Описание", Описание);

    Результат = OPI_GoogleCalendar.ИзменитьСобытие(Токен, Календарь, ОписаниеСобытия, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Результат = OPI_GoogleCalendar.ПолучитьСобытие(Токен, Календарь, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

КонецПроцедуры

Процедура GoogleCalendar_ПереместитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Событие   = ПараметрыФункции["Google_EventID"];

    КалендарьИсточник = ПараметрыФункции["Google_NewCalendarID"];
    КалендарьПриемник = ПараметрыФункции["Google_CalendarID"];

    Результат = OPI_GoogleCalendar.ПереместитьСобытие(Токен, КалендарьИсточник, КалендарьПриемник, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьСобытие", "GoogleCalendar");

    Наименование = "Новое событие";
    Описание     = "Новое описание события";

    OPI_ПолучениеДанныхТестов.Проверка_ГКОбъект(Результат, Наименование, Описание);

    OPI_GoogleCalendar.ПереместитьСобытие(Токен, КалендарьПриемник, КалендарьИсточник, Событие);

КонецПроцедуры

Процедура GoogleCalendar_УдалитьСобытие(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];
    Событие   = ПараметрыФункции["Google_EventID"];

    Результат = OPI_GoogleCalendar.УдалитьСобытие(Токен, Календарь, Событие);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСобытие", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьСписокСобытий(ПараметрыФункции)

    Токен     = ПараметрыФункции["Google_Token"];
    Календарь = ПараметрыФункции["Google_NewCalendarID"];

    Результат = OPI_GoogleCalendar.ПолучитьСписокСобытий(Токен, Календарь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСобытий", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GoogleCalendar_ПолучитьОписаниеСобытия(ПараметрыФункции)

    Результат = OPI_GoogleCalendar.ПолучитьОписаниеСобытия();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеСобытия", "GoogleCalendar");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

#КонецОбласти

#Область GoogleDrive

Процедура GoogleDrive_ПолучитьСписокКаталогов(ПараметрыФункции)

    Имя       = "Тестовая папка";
    Токен     = ПараметрыФункции["Google_Token"];

    Результат = OPI_GoogleDrive.ПолучитьСписокКаталогов(Токен, Имя, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКаталогов", "GoogleDrive");

    Результат = Результат[0];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталоги(Результат);

    Идентификатор = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Catalog", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Catalog", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_Catalog"];

    Результат   = OPI_GoogleDrive.ПолучитьИнформациюОбОбъекте(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбОбъекте", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ЗагрузитьФайл(ПараметрыФункции)

    Токен    = ПараметрыФункции["Google_Token"];
    Картинка = ПараметрыФункции["Picture"];
    Каталог  = ПараметрыФункции["GD_Catalog"];

    Описание = OPI_GoogleDrive.ПолучитьОписаниеФайла();
    Описание.Вставить("Родитель", Каталог);

    Результат = OPI_GoogleDrive.ЗагрузитьФайл(Токен, Картинка, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_File", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_File", Идентификатор, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GoogleDrive_СкопироватьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    НовоеИмя      = "Скопированный файл.jpeg";
    НовыйРодитель = "root";

    Результат = OPI_GoogleDrive.СкопироватьОбъект(Токен, Идентификатор, НовоеИмя, НовыйРодитель);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьОбъект", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    Идентификатор   = Результат["id"];

    МассивУдаляемых = ПараметрыФункции["МассивУдаляемых"];
    МассивУдаляемых.Добавить(Идентификатор);
    ПараметрыФункции.Вставить("МассивУдаляемых", МассивУдаляемых);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_СкачатьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.СкачатьФайл(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "GoogleDrive");

    Размер      = OPI_Инструменты.Get(ПараметрыФункции["Picture"]).Размер();
    ЛишниеБайты = 2;

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, Размер + ЛишниеБайты);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ОбновитьФайл(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    НовоеИмя      = "Обновленный файл.jpg";
    Идентификатор = ПараметрыФункции["GD_File"];
    Файл          = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    Результат = OPI_GoogleDrive.ОбновитьФайл(Токен, Идентификатор, Файл, НовоеИмя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьФайл", "GoogleDrive");

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбъект(Результат, Описание);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен       = ПараметрыФункции["Google_Token"];
    Каталог     = "root";
    ИмяСодержит = "data";

    Результат   = OPI_GoogleDrive.ПолучитьСписокФайлов(Токен, ИмяСодержит, Каталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

Процедура GoogleDrive_УдалитьОбъект(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.УдалитьОбъект(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Для Каждого Удаляемый Из ПараметрыФункции["МассивУдаляемых"] Цикл

        Результат = OPI_GoogleDrive.УдалитьОбъект(Токен, Удаляемый);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект");

        OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);
        OPI_Инструменты.Пауза(2);

    КонецЦикла;

КонецПроцедуры

Процедура GoogleDrive_ПолучитьОписаниеФайла(ПараметрыФункции)

    Результат = OPI_GoogleDrive.ПолучитьОписаниеФайла();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФайла", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура GoogleDrive_СоздатьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    Комментарий   = "Текст комментария";

    Результат   = OPI_GoogleDrive.СоздатьКомментарий(Токен, Идентификатор, Комментарий);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, Комментарий);

    Идентификатор = Результат["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GD_Comment", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Comment", Идентификатор, "Строка", ПараметрыФункции);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура GoogleDrive_ПолучитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Результат = OPI_GoogleDrive.ПолучитьКомментарий(Токен, Идентификатор, ИДКомментария);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(Результат, "Текст комментария");

КонецПроцедуры

Процедура GoogleDrive_ПолучитьСписокКомментариев(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];

    Результат = OPI_GoogleDrive.ПолучитьСписокКомментариев(Токен, Идентификатор);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариев", "GoogleDrive");

    Комментарии       = Результат["comments"];
    ОбъектКомментарий = Комментарии[Комментарии.ВГраница()];

    OPI_ПолучениеДанныхТестов.Проверка_ГуглКомментарий(ОбъектКомментарий, "Текст комментария");

КонецПроцедуры

Процедура GoogleDrive_УдалитьКомментарий(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GD_File"];
    ИДКомментария = ПараметрыФункции["GD_Comment"];

    Результат = OPI_GoogleDrive.УдалитьКомментарий(Токен, Идентификатор, ИДКомментария);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарий", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура GoogleDrive_СоздатьПапку(ПараметрыФункции)

    Токен    = ПараметрыФункции["Google_Token"];
    Каталог  = ПараметрыФункции["GD_Catalog"];
    Имя      = "Тестовая папка";

    Результат = OPI_GoogleDrive.СоздатьПапку(Токен, Имя, Каталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "GoogleDrive");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

    Результат = OPI_GoogleDrive.СоздатьПапку(Токен, Имя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку (корень)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКаталог(Результат);

    ИДКаталога = Результат["id"];
    OPI_GoogleDrive.УдалитьОбъект(Токен, ИДКаталога);

КонецПроцедуры

#КонецОбласти

#Область GoogleSheets

Процедура GoogleSheets_СоздатьКнигу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    Результат = OPI_GoogleSheets.СоздатьКнигу(Токен, Наименование, МассивЛистов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

    Книга = Результат["spreadsheetId"];
    Лист  = Результат["sheets"][0]["properties"]["sheetId"];
    Лист  = OPI_Инструменты.ЧислоВСтроку(Лист);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet", Книга);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Sheet"      , Лист);

    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet", Книга, "Строка", ПараметрыФункции);
    OPI_Инструменты.ДобавитьПоле("GS_Sheet"      , Лист , "Строка", ПараметрыФункции);

    Наименование = "Тестовая таблица (доп.)";
    Результат    = OPI_GoogleSheets.СоздатьКнигу(Токен, Наименование, МассивЛистов);

    Книга = Результат["spreadsheetId"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet2", Книга);
    OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet2", Книга, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура GoogleSheets_ПолучитьКнигу(ПараметрыФункции)

    Токен         = ПараметрыФункции["Google_Token"];
    Идентификатор = ПараметрыФункции["GS_Spreadsheet"];

    Результат = OPI_GoogleSheets.ПолучитьКнигу(Токен, Идентификатор);

    // END

    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКнигу", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглКнига(Результат, Наименование, МассивЛистов);

КонецПроцедуры

Процедура GoogleSheets_КопироватьЛист(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Откуда = ПараметрыФункции["GS_Spreadsheet"];
    Куда   = ПараметрыФункции["GS_Spreadsheet2"];
    Лист   = ПараметрыФункции["GS_Sheet"];

    Результат = OPI_GoogleSheets.КопироватьЛист(Токен, Откуда, Куда, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(Результат);

КонецПроцедуры

Процедура GoogleSheets_ДобавитьЛист(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовый лист";

    Результат = OPI_GoogleSheets.ДобавитьЛист(Токен, Книга, Наименование);

    // END

    НовыйЛист = Результат["replies"][0]["addSheet"]["properties"];

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЛист(НовыйЛист);

КонецПроцедуры

Процедура GoogleSheets_УдалитьЛист(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Книга  = ПараметрыФункции["GS_Spreadsheet"];
    Лист   = ПараметрыФункции["GS_Sheet"];

    Результат = OPI_GoogleSheets.УдалитьЛист(Токен, Книга, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛист", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ИзменитьНаименованиеКниги(ПараметрыФункции)

    Токен        = ПараметрыФункции["Google_Token"];
    Книга        = ПараметрыФункции["GS_Spreadsheet"];
    Наименование = "Тестовая таблица (изм.)";

    Результат    = OPI_GoogleSheets.ИзменитьНаименованиеКниги(Токен, Книга, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНаименованиеКниги", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ПолучитьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Google_Token"];
    Книга = ПараметрыФункции["GS_Spreadsheet"];

    Результат = OPI_GoogleSheets.ПолучитьКнигу(Токен, Книга);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТаблицу", "GoogleSheets");

    Наименование = "Тестовая таблица (изм.)";
    OPI_ПолучениеДанныхТестов.Проверка_ГуглИмяТаблицы(Результат, Наименование);

КонецПроцедуры

Процедура GoogleSheets_УстановитьЗначенияЯчеек(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Книга  = ПараметрыФункции["GS_Spreadsheet"];
    Лист   = "Лист2";

    СоответствиеЗначений = Новый Соответствие;
    СоответствиеЗначений.Вставить("A1", "Это A1");
    СоответствиеЗначений.Вставить("A2", "Это A2");
    СоответствиеЗначений.Вставить("B2", "Это B2");
    СоответствиеЗначений.Вставить("B3", "Это B3");
    СоответствиеЗначений.Вставить("A3", "Это A3");
    СоответствиеЗначений.Вставить("A4", "Это A4");
    СоответствиеЗначений.Вставить("B1", "Это B1");
    СоответствиеЗначений.Вставить("B4", "Это B4");

    Результат = OPI_GoogleSheets.УстановитьЗначенияЯчеек(Токен, Книга, СоответствиеЗначений, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОбновлениеЯчеек(Результат, СоответствиеЗначений.Количество());

КонецПроцедуры

Процедура GoogleSheets_ПолучитьЗначенияЯчеек(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Книга  = ПараметрыФункции["GS_Spreadsheet"];
    Лист   = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Результат = OPI_GoogleSheets.ПолучитьЗначенияЯчеек(Токен, Книга, МассивЯчеек, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияЯчеек", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЗначенияЯчеек(Результат, МассивЯчеек.Количество());

    Результат = OPI_GoogleSheets.ПолучитьЗначенияЯчеек(Токен, Книга, , Лист);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияЯчеек (все)");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглЭлементКниги(Результат, Книга);

КонецПроцедуры

Процедура GoogleSheets_ОчиститьЯчейки(ПараметрыФункции)

    Токен  = ПараметрыФункции["Google_Token"];
    Книга  = ПараметрыФункции["GS_Spreadsheet"];
    Лист   = "Лист2";

    МассивЯчеек = Новый Массив;
    МассивЯчеек.Добавить("B2");
    МассивЯчеек.Добавить("A3");
    МассивЯчеек.Добавить("B4");

    Результат = OPI_GoogleSheets.ОчиститьЯчейки(Токен, Книга, МассивЯчеек, Лист);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОчиститьЯчейки", "GoogleSheets");
    OPI_ПолучениеДанныхТестов.Проверка_ГуглОчисткаЯчеек(Результат, МассивЯчеек.Количество());

КонецПроцедуры

#КонецОбласти

#Область Slack

Процедура Slack_ПолучитьИнформациюОБоте(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьИнформациюОБоте(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОБоте", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакБот(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокПользователей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьСписокПользователей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователи(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокРабочихОбластей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Результат = OPI_Slack.ПолучитьСписокРабочихОбластей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРабочихОбластей", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОбласти(Результат);

КонецПроцедуры

Процедура Slack_ОтправитьСообщение(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    // Текстовое

    Текст     = "Тестовое сообщение 1";
    Результат = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение", "Slack");        // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);              // SKIP

    Отметка = Результат["ts"];                                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_MessageTS", Отметка);                 // SKIP
    OPI_Инструменты.ДобавитьПоле("Slack_MessageTS", Отметка, "Строка", ПараметрыФункции);   // SKIP

    // С вложениями (в примере: блок с картинкой)

    Текст        = "Сообщение с картинкой";
    Картинка     = ПараметрыФункции["Picture"];
    МассивБлоков = Новый Массив;

    Блок = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");
    МассивБлоков.Добавить(Блок);

    Результат = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст, , МассивБлоков);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (картинка)");      // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);              // SKIP

    // Отложенное

    Текст = "Отложенное сообщение";
    Час   = 3600;
    Сутки = 24;

    ДатаОтправки  = OPI_Инструменты.ПолучитьТекущуюДату() + (Сутки * Час);
    Результат     = OPI_Slack.ОтправитьСообщение(Токен, Канал, Текст, ДатаОтправки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенноеСообщение(Результат, Канал);

    Отметка   = Результат["scheduled_message_id"];
    Результат = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение (отложенное)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_СформироватьБлокКартинку(ПараметрыФункции)

    Картинка  = ПараметрыФункции["Picture"];

    Результат = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьБлокКартинку", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_ИзменитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Текст = "Тестовое сообщение 2";

    Результат = OPI_Slack.ИзменитьСообщение(Токен, Канал, Отметка, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщение(Результат, Текст, Канал);

КонецПроцедуры

Процедура Slack_ПолучитьСписокОтветовНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.ПолучитьСписокОтветовНаСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОтветовНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСообщения(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСсылкуНаСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.ПолучитьСсылкуНаСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуНаСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСсылкаСообщения(Результат, Канал);

КонецПроцедуры

Процедура Slack_УдалитьСообщение(ПараметрыФункции)

    Токен   = ПараметрыФункции["Slack_Token"];
    Канал   = ПараметрыФункции["Slack_Channel"];
    Отметка = ПараметрыФункции["Slack_MessageTS"];

    Результат = OPI_Slack.УдалитьСообщение(Токен, Канал, Отметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ОтправитьЭфемерноеСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_Channel"];
    Пользователь = ПараметрыФункции["Slack_User"];
    Картинка     = ПараметрыФункции["Picture"];
    Текст        = "Эфимерное сообщение";

    Блок      = OPI_Slack.СформироватьБлокКартинку(Картинка, "Картинка");
    Результат = OPI_Slack.ОтправитьЭфемерноеСообщение(Токен, Канал, Текст, Пользователь, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьЭфемерноеСообщение", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакЭфемерное(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокОтложенныхСообщений(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокОтложенныхСообщений(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОтложенныхСообщений", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОтложенные(Результат);

КонецПроцедуры

Процедура Slack_СоздатьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Имя   = "testconv" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Slack.СоздатьКанал(Токен, Имя);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Имя);

    Канал  = Результат["channel"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannel", Канал);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannel", Канал, "Строка", ПараметрыФункции);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_NewChannelName", Имя);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannelName", Имя, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Slack_УстановитьТемуКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Тема  = "Тестовая тема";

    Результат = OPI_Slack.УстановитьТемуКанала(Токен, Канал, Тема);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьТемуКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакТемаКанала(Результат, Тема);

КонецПроцедуры

Процедура Slack_УстановитьЦельКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];
    Цель  = "Тестовая цель";

    Результат = OPI_Slack.УстановитьЦельКанала(Токен, Канал, Цель);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЦельКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ПригласитьПользователейВКанал(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ПригласитьПользователейВКанал(Токен, Канал, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПригласитьПользователейВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ВыгнатьПользователяИзКанала(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Канал        = ПараметрыФункции["Slack_NewChannel"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ВыгнатьПользователяИзКанала(Токен, Канал, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыгнатьПользователяИзКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьИсториюКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьИсториюКанала(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакИсторияКанала(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокПользователейКанала(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПолучитьСписокПользователейКанала(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейКанала", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакПользователиКанала(Результат);

КонецПроцедуры

Процедура Slack_ПокинутьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ПокинутьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ВступитьВКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.ВступитьВКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВступитьВКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, ПараметрыФункции["Slack_NewChannelName"]);

КонецПроцедуры

Процедура Slack_ПереименоватьКанал(ПараметрыФункции)

    Токен    = ПараметрыФункции["Slack_Token"];
    Канал    = ПараметрыФункции["Slack_NewChannel"];
    Название = "testconv" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Slack.ПереименоватьКанал(Токен, Канал, Название);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакКанал(Результат, Название);

КонецПроцедуры

Процедура Slack_АрхивироватьКанал(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_NewChannel"];

    Результат = OPI_Slack.АрхивироватьКанал(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьКанал", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокКаналов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];

    Результат = OPI_Slack.ПолучитьСписокКаналов(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКаналов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокКаналов(Результат);

КонецПроцедуры

Процедура Slack_ОткрытьДиалог(ПараметрыФункции)

    Токен        = ПараметрыФункции["Slack_Token"];
    Пользователь = ПараметрыФункции["Slack_User"];

    Результат = OPI_Slack.ОткрытьДиалог(Токен, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакДиалог(Результат);

    Диалог = Результат["channel"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_Dialog", Диалог);
    OPI_Инструменты.ДобавитьПоле("Slack_Dialog", Диалог, "Строка", ПараметрыФункции);

    Результат = OPI_Slack.ОтправитьСообщение(Токен, Диалог, "Тест диалог");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (диалог)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ЗакрытьДиалог(ПараметрыФункции)

    Токен  = ПараметрыФункции["Slack_Token"];
    Диалог = ПараметрыФункции["Slack_Dialog"];

    Результат = OPI_Slack.ЗакрытьДиалог(Токен, Диалог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрытьДиалог", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокФайлов(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Результат = OPI_Slack.ПолучитьСписокФайлов(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура Slack_ЗагрузитьФайл(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];
    Файл  = ПараметрыФункции["Document"]; // URL, Двоичные данные или Путь к файлу

    ИмяФайла     = "megadoc.docx";
    Заголовок    = "Новый файл";

    Результат = OPI_Slack.ЗагрузитьФайл(Токен, Файл, ИмяФайла, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл"       , "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьФайлПубличным", "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СделатьФайлПриватным", "Slack");                 // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);                           // SKIP

    ЗагруженныйФайл = Результат["files"][0]["id"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_FileID", ЗагруженныйФайл);                // SKIP
    OPI_Инструменты.ДобавитьПоле("Slack_FileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);  // SKIP

    Результат = OPI_Slack.ЗагрузитьФайл(Токен, Файл, ИмяФайла, Заголовок, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл (в канал)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, ИмяФайла);
    OPI_Slack.УдалитьФайл(Токен, Результат["files"][0]["id"]);

КонецПроцедуры

Процедура Slack_СделатьФайлПубличным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.СделатьФайлПубличным(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_СделатьФайлПриватным(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.СделатьФайлПриватным(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьДанныеФайла(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.ПолучитьДанныеФайла(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеФайла", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакФайл(Результат, "megadoc.docx");

КонецПроцедуры

Процедура Slack_УдалитьФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_FileID"];

    Результат = OPI_Slack.УдалитьФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_ПолучитьСписокВнешнихФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["Slack_Token"];
    Канал = ПараметрыФункции["Slack_Channel"];

    Результат = OPI_Slack.ПолучитьСписокВнешнихФайлов(Токен, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВнешнихФайлов", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

    Результат = OPI_Slack.ПолучитьСписокВнешнихФайлов(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВнешнихФайлов (все)");
    OPI_ПолучениеДанныхТестов.Проверка_СлакСписокФайлов(Результат);

КонецПроцедуры

Процедура Slack_ДобавитьВнешнийФайл(ПараметрыФункции)

    Токен     = ПараметрыФункции["Slack_Token"];
    Заголовок = "Новый файл";
    Файл      = ПараметрыФункции["Document"];

    Результат = OPI_Slack.ДобавитьВнешнийФайл(Токен, Файл, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, Заголовок);

    ЗагруженныйФайл = Результат["file"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Slack_ExtFileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_ExtFileID", ЗагруженныйФайл, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Slack_ПолучитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.ПолучитьВнешнийФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакВнешнийФайл(Результат, "Новый файл");

КонецПроцедуры

Процедура Slack_ОтправитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    Канал              = ПараметрыФункции["Slack_Channel"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.ОтправитьВнешнийФайл(Токен, ИдентификаторФайла, Канал);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

Процедура Slack_УдалитьВнешнийФайл(ПараметрыФункции)

    Токен              = ПараметрыФункции["Slack_Token"];
    ИдентификаторФайла = ПараметрыФункции["Slack_ExtFileID"];

    Результат = OPI_Slack.УдалитьВнешнийФайл(Токен, ИдентификаторФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВнешнийФайл", "Slack");
    OPI_ПолучениеДанныхТестов.Проверка_СлакОк(Результат);

КонецПроцедуры

#КонецОбласти

#Область Airtable

Процедура Airtable_СоздатьБазу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    Область      = ПараметрыФункции["Airtable_Workspace"];
    Наименование = "Тестовая база";

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));

    ИмяТаблицы = "Тестовая таблица";

    СоответствиеТаблиц = Новый Соответствие;
    СоответствиеТаблиц.Вставить(ИмяТаблицы, МассивПолей);

    Результат = OPI_Airtable.СоздатьБазу(Токен, Область, Наименование, СоответствиеТаблиц);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТБазаСТаблицей(Результат, ИмяТаблицы);

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Base", База);
    OPI_Инструменты.ДобавитьПоле("Airtable_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ПолучитьТаблицыБазы(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    Результат = OPI_Airtable.ПолучитьТаблицыБазы(Токен, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТаблицыБазы", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокТаблиц(Результат);

КонецПроцедуры

Процедура Airtable_ПолучитьСписокБаз(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];

    Результат = OPI_Airtable.ПолучитьСписокБаз(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокБаз", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТСписокБаз(Результат);

КонецПроцедуры

Процедура Airtable_ПолучитьПолеНомера(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеНомера("Номер");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеНомера", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеСтроковое(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеСтроковое("Строковое");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеСтроковое", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеВложения(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеВложения("Вложение");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеВложения", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеФлажка(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеФлажка("Флажок");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеФлажка", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеДаты(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеДаты("Дата");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеДаты", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеТелефона(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеТелефона("Телефон");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеТелефона", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеПочты(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеПочты("Почта");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеПочты", "Airtable");

КонецПроцедуры

Процедура Airtable_ПолучитьПолеСсылки(ПараметрыФункции)

    Результат = OPI_Airtable.ПолучитьПолеСсылки("Ссылка");

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПолеСсылки", "Airtable");

КонецПроцедуры

Процедура Airtable_СоздатьТаблицу(ПараметрыФункции)

    Токен = ПараметрыФункции["Airtable_Token"];
    База  = ПараметрыФункции["Airtable_Base"];

    МассивПолей = Новый Массив;
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеНомера("Номер"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСтроковое("Строковое"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеВложения("Вложение"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеФлажка("Флажок"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеДаты("Дата"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеТелефона("Телефон"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеПочты("Почта"));
    МассивПолей.Добавить(OPI_Airtable.ПолучитьПолеСсылки("Ссылка"));

    Наименование = "Тестовая таблица 2";
    Описание     = "Новая таблица";

    Результат = OPI_Airtable.СоздатьТаблицу(Токен, База, Наименование, МассивПолей, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

    Таблица = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Table", Таблица);
    OPI_Инструменты.ДобавитьПоле("Airtable_Table", Таблица, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьТаблицу(ПараметрыФункции)

    Токен        = ПараметрыФункции["Airtable_Token"];
    База         = ПараметрыФункции["Airtable_Base"];
    Таблица      = ПараметрыФункции["Airtable_Table"];
    Наименование = "Тестовая таблица 2 (изм.)";
    Описание     = "Новая таблица (изм.)";

    Результат = OPI_Airtable.ИзменитьТаблицу(Токен, База, Таблица, Наименование, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТаблицу", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Наименование, Описание);

КонецПроцедуры

Процедура Airtable_СоздатьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Имя     = Строка(Новый УникальныйИдентификатор);

    Поле      = OPI_Airtable.ПолучитьПолеНомера(Имя);
    Результат = OPI_Airtable.СоздатьПоле(Токен, База, Таблица, Поле);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТПоле(Результат, Имя);

    Поле = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Field", Поле);
    OPI_Инструменты.ДобавитьПоле("Airtable_Field", Поле, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьПоле(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Поле    = ПараметрыФункции["Airtable_Field"];

    Имя       = Строка(Новый УникальныйИдентификатор) + "(изм.)";
    Описание  = "Новое описание";

    Результат = OPI_Airtable.ИзменитьПоле(Токен, База, Таблица, Поле, Имя, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПоле", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТаблица(Результат, Имя, Описание);

КонецПроцедуры

Процедура Airtable_СоздатьЗаписи(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];

    Номер     = 10;
    Строковое = "Привет";

    ОписаниеСтроки1 = Новый Структура("Номер,Строковое", Номер, Строковое);
    ОписаниеСтроки2 = Новый Структура("Номер,Строковое", Номер, Строковое);

    МассивОписаний  = Новый Массив;
    МассивОписаний.Добавить(ОписаниеСтроки1);
    МассивОписаний.Добавить(ОписаниеСтроки2);

    Результат = OPI_Airtable.СоздатьЗаписи(Токен, База, Таблица, МассивОписаний);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

    МассивУдаляемых = Новый Массив;

    Для Каждого Запись Из Результат["records"] Цикл

        ТекущаяЗапись = Запись["id"];
        МассивУдаляемых.Добавить(ТекущаяЗапись);

    КонецЦикла;

    OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, МассивУдаляемых);

    // Одиночное

    Результат = OPI_Airtable.СоздатьЗаписи(Токен, База, Таблица, ОписаниеСтроки1);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаписи (одна)");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписьНомерСтрока(Результат, Номер, Строковое);

    Запись = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Record", Запись);
    OPI_Инструменты.ДобавитьПоле("Airtable_Record", Запись, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ПолучитьЗапись(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.ПолучитьЗапись(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗапись", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗапись(Результат, Запись);

КонецПроцедуры

Процедура Airtable_СоздатьКомментарий(ПараметрыФункции)

    Токен   = ПараметрыФункции["Airtable_Token"];
    База    = ПараметрыФункции["Airtable_Base"];
    Таблица = ПараметрыФункции["Airtable_Table"];
    Запись  = ПараметрыФункции["Airtable_Record"];
    Текст   = "Тестовый комментарий";

    Результат = OPI_Airtable.СоздатьКомментарий(Токен, База, Таблица, Запись, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

    Комментарий   = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Comment", Комментарий);
    OPI_Инструменты.ДобавитьПоле("Airtable_Comment", Комментарий, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Airtable_ИзменитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Текст     = "Тестовый комментарий (изм.)";
    Результат = OPI_Airtable.ИзменитьКомментарий(Токен, База, Таблица, Запись, Комментарий, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТТекст(Результат, Текст);

КонецПроцедуры

Процедура Airtable_ПолучитьКомментарии(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.ПолучитьКомментарии(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомментарии", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТКомментарии(Результат);

КонецПроцедуры

Процедура Airtable_УдалитьКомментарий(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];
    Комментарий = ПараметрыФункции["Airtable_Comment"];

    Результат = OPI_Airtable.УдалитьКомментарий(Токен, База, Таблица, Запись, Комментарий);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарий", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТУдалениеКомментария(Результат, Комментарий);

КонецПроцедуры

Процедура Airtable_ПолучитьСписокЗаписей(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];

    Результат = OPI_Airtable.ПолучитьСписокЗаписей(Токен, База, Таблица);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗаписей", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

Процедура Airtable_УдалитьЗаписи(ПараметрыФункции)

    Токен       = ПараметрыФункции["Airtable_Token"];
    База        = ПараметрыФункции["Airtable_Base"];
    Таблица     = ПараметрыФункции["Airtable_Table"];
    Запись      = ПараметрыФункции["Airtable_Record"];

    Результат = OPI_Airtable.УдалитьЗаписи(Токен, База, Таблица, Запись);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаписи", "Airtable");
    OPI_ПолучениеДанныхТестов.Проверка_АТЗаписи(Результат);

КонецПроцедуры

#КонецОбласти

#Область Twitter

Процедура Twitter_ПолучитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Код       = "123456";

    Результат = OPI_Twitter.ПолучитьТокен(Код, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Twitter_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Результат = OPI_Twitter.ПолучитьСсылкуАвторизации(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизации", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_URL", Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_ОбновитьТокен(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Результат = OPI_Twitter.ОбновитьТокен(Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТокен(Результат);

    Рефреш = Результат["refresh_token"];
    Токен  = Результат["access_token"];

    Если ЗначениеЗаполнено(Рефреш) И Не Рефреш = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Refresh", Рефреш);
    КонецЕсли;

    Если ЗначениеЗаполнено(Токен) И Не Токен = "null" Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Twitter_Token"  , Токен);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_СоздатьТекстовыйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Результат = OPI_Twitter.СоздатьТекстовыйТвит(Текст, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТекстовыйТвит", "Twitter");

    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Twitter_СоздатьТвитКартинки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка   = ПараметрыФункции["Picture"];  // URL, Двоичные или Путь к файлу
    Картинка2  = ПараметрыФункции["Picture2"]; // URL, Двоичные или Путь к файлу

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка);
    МассивКартинок.Добавить(Картинка2);

    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, МассивКартинок, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                            // SKIP
    OPI_Инструменты.Пауза(15);                                                          // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, Картинка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Картинка = OPI_Инструменты.Get(Картинка);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитКартинки(Текст, Картинка, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитКартинки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитВидео(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Видео   = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу
    Видео2  = ПараметрыФункции["Video"]; // URL, Двоичные или Путь к файлу

    МассивВидео = Новый Массив;
    МассивВидео.Добавить(Видео);
    МассивВидео.Добавить(Видео2);

    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, МассивВидео, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                         // SKIP
    OPI_Инструменты.Пауза(15);                                                       // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, Видео, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Видео = OPI_Инструменты.Get(Видео);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитВидео(Текст, Видео, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитВидео (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитГифки(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Гифка   = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу
    Гифка2  = ПараметрыФункции["GIF"]; // URL, Двоичные или Путь к файлу

    МассивГифок = Новый Массив;
    МассивГифок.Добавить(Гифка);
    МассивГифок.Добавить(Гифка2);

    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, МассивГифок, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки", "Twitter"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);                                         // SKIP
    OPI_Инструменты.Пауза(15);                                                       // SKIP

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, Гифка, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки (одиночная)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    Гифка = OPI_Инструменты.Get(Гифка);

    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);
    Результат = OPI_Twitter.СоздатьТвитГифки(Текст, Гифка, Параметры);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитГифки (ИВФ)");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);
    OPI_Инструменты.Пауза(15);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьТвитОпрос(ПараметрыФункции)

    Параметры  = ПолучитьПараметрыАвторизацииТвиттер();
    Текст      = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    МассивОтветов = Новый Массив;
    МассивОтветов.Добавить("Вариант 1");
    МассивОтветов.Добавить("Вариант 2");

    Результат = OPI_Twitter.СоздатьТвитОпрос(Текст, МассивОтветов, 60, Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТвитОпрос", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_СоздатьПроизвольныйТвит(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();
    Текст     = "Тестовый твитт" + Строка(Новый УникальныйИдентификатор);

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив();
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    МассивМедиа = OPI_Twitter.ЗагрузитьМассивВложений(МассивКартинок, "tweet_image", Параметры);
    Результат   = OPI_Twitter.СоздатьПроизвольныйТвит(Текст, МассивМедиа, , , Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПроизвольныйТвит", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_ТвиттерТекст(Результат, Текст);

    OPI_Инструменты.Пауза(20);

КонецПроцедуры

Процедура Twitter_ЗагрузитьМассивВложений(ПараметрыФункции)

    Параметры = ПолучитьПараметрыАвторизацииТвиттер();

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Двоичные данные или Путь к файлу
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Двоичные данные или Путь к файлу

    МассивКартинок = Новый Массив();
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    Результат = OPI_Twitter.ЗагрузитьМассивВложений(МассивКартинок, "tweet_image", Параметры);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьМассивВложений", "Twitter");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

#КонецОбласти

#Область Notion

Процедура Notion_СоздатьСтраницу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Результат = OPI_Notion.СоздатьСтраницу(Токен, Родитель, Заголовок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

    Страница = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Page", Страница);
    OPI_Инструменты.ДобавитьПоле("Notion_Page", Страница, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_СоздатьБазуДанных(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Заголовок = "Тестовый заголовок";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"            , "title");
    Свойства.Вставить("Описание"       , "rich_text");
    Свойства.Вставить("Номер"          , "number");
    Свойства.Вставить("Статус"         , "status");
    Свойства.Вставить("Дата создания"  , "date");
    Свойства.Вставить("Картинка"       , "files");
    Свойства.Вставить("Активен"        , "checkbox");
    Свойства.Вставить("Сайт"           , "url");
    Свойства.Вставить("Почта"          , "email");
    Свойства.Вставить("Телефон"        , "phone_number");
    Свойства.Вставить("Пользователь"   , "people");

    ВыборЗначения = Новый Соответствие;
    ВыборЗначения.Вставить("Новый"    , "green");
    ВыборЗначения.Вставить("В работе" , "yellow");
    ВыборЗначения.Вставить("Удаленный", "red");

    Свойства.Вставить("Статус", ВыборЗначения);

    Результат = OPI_Notion.СоздатьБазуДанных(Токен, Родитель, Заголовок, Свойства);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

    База = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_Base", База);
    OPI_Инструменты.ДобавитьПоле("Notion_Base", База, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_ИзменитьСвойстваБазы(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    База      = ПараметрыФункции["Notion_Base"];

    Заголовок    = "Тестовый заголовок";
    Описание     = "Тестовое описание";

    Свойства = Новый Соответствие;
    Свойства.Вставить("Почта", "rich_text"); // Тип поля "Почта" будет изменен с email на текст
    Свойства.Вставить("Сайт");               // Поле "Сайт" будет удалено

    Результат = OPI_Notion.ИзменитьСвойстваБазы(Токен, База, Свойства, Заголовок, Описание);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойстваБазы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура Notion_ПолучитьСтраницу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Страница  = ПараметрыФункции["Notion_Page"];

    Результат = OPI_Notion.ПолучитьСтраницу(Токен, Страница);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтраницу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура Notion_ПолучитьБазуДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["Notion_Token"];
    База  = ПараметрыФункции["Notion_Base"];

    Результат = OPI_Notion.ПолучитьБазуДанных(Токен, База);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБазуДанных", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "database");

КонецПроцедуры

Процедура Notion_СоздатьСтраницуВБазу(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    База      = ПараметрыФункции["Notion_Base"];
    Картинка_ = ПараметрыФункции["Picture"]; // URL, Двоичные данные или Путь к файлу

    Картинка = Новый Соответствие;
    Картинка.Вставить("Лого", Картинка_);

    Свойства = Новый Соответствие;
    Свойства.Вставить("Имя"               , "ООО Вектор");
    Свойства.Вставить("Описание"          , "Наш первый клиент");
    Свойства.Вставить("Номер"             , 1);
    Свойства.Вставить("Статус"            , "Обычный");
    Свойства.Вставить("Дата создания"     , OPI_Инструменты.ПолучитьТекущуюДату());
    Свойства.Вставить("Картинка"          , Картинка);
    Свойства.Вставить("Активен"           , Истина);
    Свойства.Вставить("Сайт"              , "https://vector.ru");
    Свойства.Вставить("Почта"             , "mail@vector.ru");
    Свойства.Вставить("Телефон"           , "88005553535");
    Свойства.Вставить("Статус"            , "Новый");

    Результат = OPI_Notion.СоздатьСтраницуВБазу(Токен, База, Свойства);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСтраницуВБазу", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнСтраницаБазы(Результат, База);

КонецПроцедуры

Процедура Notion_ИзменитьСвойстваСтраницы(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Страница     = ПараметрыФункции["Notion_Page"];
    Иконка       = ПараметрыФункции["Picture"];
    Обложка      = ПараметрыФункции["Picture2"];
    Архивировать = Ложь;

    Свойства = Новый Соответствие;
    Свойства.Вставить("Активен"     , Ложь);
    Свойства.Вставить("Почта"       , "vector@mail.ru");

    Результат = OPI_Notion.ИзменитьСвойстваСтраницы(Токен
        , Страница
        , Свойства
        , Иконка
        , Обложка
        , Архивировать);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСвойстваСтраницы", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат);

КонецПроцедуры

Процедура Notion_ВернутьБлок(ПараметрыФункции)

    Токен  = ПараметрыФункции["Notion_Token"];
    Блок   = ПараметрыФункции["Notion_Block"];

    Результат = OPI_Notion.ВернутьБлок(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура Notion_СоздатьБлок(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Родитель  = ПараметрыФункции["Notion_Parent"];
    Блок      = ПараметрыФункции["Notion_Block"];

    ДанныеБлока = OPI_Notion.ВернутьБлок(Токен, Блок);
    Результат   = OPI_Notion.СоздатьБлок(Токен, Родитель, ДанныеБлока);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

    Блок = Результат["results"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Notion_NewBlock", Блок);
    OPI_Инструменты.ДобавитьПоле("Notion_NewBlock", Блок, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура Notion_ВернутьДочерниеБлоки(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];
    Блок      = ПараметрыФункции["Notion_NewBlock"];

    Результат    = OPI_Notion.ВернутьДочерниеБлоки(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВернутьДочерниеБлоки", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура Notion_УдалитьБлок(ПараметрыФункции)

    Токен  = ПараметрыФункции["Notion_Token"];
    Блок   = ПараметрыФункции["Notion_NewBlock"];

    Результат = OPI_Notion.УдалитьБлок(Токен, Блок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБлок", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "block");

КонецПроцедуры

Процедура Notion_СписокПользователей(ПараметрыФункции)

    Токен     = ПараметрыФункции["Notion_Token"];

    Результат = OPI_Notion.СписокПользователей(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СписокПользователей", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "list");

КонецПроцедуры

Процедура Notion_ПолучитьДанныеПользователя(ПараметрыФункции)

    Токен        = ПараметрыФункции["Notion_Token"];
    Пользователь = ПараметрыФункции["Notion_User"];

    Результат    = OPI_Notion.ПолучитьДанныеПользователя(Токен, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеПользователя", "Notion");
    OPI_ПолучениеДанныхТестов.Проверка_НоушнОбъект(Результат, "user");

КонецПроцедуры

#КонецОбласти

#Область Dropbox

Процедура Dropbox_ПолучитьСсылкуАвторизации(ПараметрыФункции)

    КлючПриложения = ПараметрыФункции["Dropbox_Appkey"];
    Результат      = OPI_Dropbox.ПолучитьСсылкуАвторизации(КлючПриложения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизации", "Dropbox");

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Результат).ИмеетТип("Строка");

КонецПроцедуры

Процедура Dropbox_ПолучитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    Код              = ПараметрыФункции["Dropbox_Code"];

    Результат = OPI_Dropbox.ПолучитьТокен(КлючПриложения, СекретПриложения, Код);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен");

    Токен  = Результат["access_token"];
    Рефреш = Результат["refresh_token"];

    Если ЗначениеЗаполнено(Токен) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);
    КонецЕсли;

    Если ЗначениеЗаполнено(Рефреш) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Refresh", Рефреш);
    КонецЕсли;

КонецПроцедуры

Процедура Dropbox_ОбновитьТокен(ПараметрыФункции)

    КлючПриложения   = ПараметрыФункции["Dropbox_Appkey"];
    СекретПриложения = ПараметрыФункции["Dropbox_Appsecret"];
    РефрешТокен      = ПараметрыФункции["Dropbox_Refresh"];

    Результат = OPI_Dropbox.ОбновитьТокен(КлючПриложения, СекретПриложения, РефрешТокен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен");

    Токен = Результат["access_token"];

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(Токен).Заполнено();

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Token", Токен);

КонецПроцедуры

Процедура Dropbox_ПолучитьИнформациюОбОбъекте(ПараметрыФункции)

    Путь      = "/New/pic.png";
    Токен     = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьИнформациюОбОбъекте(Токен, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбОбъекте", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьПревью(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/mydoc.docx";

    Результат = OPI_Dropbox.ПолучитьПревью(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПревью", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 120000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ЗагрузитьФайл(ПараметрыФункции)

    Путь      = "/New/pic.png";
    Токен     = ПараметрыФункции["Dropbox_Token"];
    Картинка  = ПараметрыФункции["Picture"];

    КартинкаПуть = ПолучитьИмяВременногоФайла("png");
    КопироватьФайл(Картинка, КартинкаПуть);

    Результат = OPI_Dropbox.ЗагрузитьФайл(Токен, КартинкаПуть, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);
    УдалитьФайлы(КартинкаПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ЗагрузитьФайлПоURL(ПараметрыФункции)

    Путь  = "/New/url_doc.docx";
    Токен = ПараметрыФункции["Dropbox_Token"];
    URL   = ПараметрыФункции["Document"];

    Результат = OPI_Dropbox.ЗагрузитьФайлПоURL(Токен, URL, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлПоURL", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксРабота(Результат);

    Работа = Результат["async_job_id"];

    ПараметрыФункции.Вставить("Dropbox_Job", Работа);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_Job", Работа);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСтатусЗагрузкиПоURL(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    ИДРаботы = ПараметрыФункции["Dropbox_Job"];
    Статус   = "in_progress";

    Пока Статус = "in_progress" Цикл

        Результат = OPI_Dropbox.ПолучитьСтатусЗагрузкиПоURL(Токен, ИДРаботы);
        Статус    = Результат[".tag"];

        OPI_Инструменты.Пауза(5);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусЗагрузкиПоURL", "Dropbox");

    КонецЦикла;

    // END

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    Путь      = "/New/url_doc.docx";
    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);
    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_УдалитьОбъект(ПараметрыФункции)

    Путь      = "/New/pic.png";
    Токен     = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_КопироватьОбъект(ПараметрыФункции)

    Оригинал  = "/New/pic.png";
    Копия     = "/New/pic_copy.png";
    Токен     = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.КопироватьОбъект(Токен, Оригинал, Копия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "КопироватьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Копия);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Копия);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПереместитьОбъект(ПараметрыФункции)

    ОригиналныйПуть  = "/New/pic.png";
    ЦелевойПуть      = "/pic.png";
    Токен            = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПереместитьОбъект(Токен, ОригиналныйПуть, ЦелевойПуть);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьОбъект", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ЦелевойПуть);

    Результат = OPI_Dropbox.ПереместитьОбъект(Токен, ЦелевойПуть, ОригиналныйПуть);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, ОригиналныйПуть);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СоздатьПапку(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/Новый каталог";

    Результат = OPI_Dropbox.СоздатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    Результат = OPI_Dropbox.УдалитьОбъект(Токен, Путь);
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМетаданные(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СкачатьФайл(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/pic.png";

    Результат = OPI_Dropbox.СкачатьФайл(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьФайл", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 2000000);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_СкачатьПапку(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New";

    Результат = OPI_Dropbox.СкачатьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкачатьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокФайловПапки(ПараметрыФункции)

    Путь      = "/New";
    Токен     = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьСписокФайловПапки(Токен, Путь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайловПапки", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокВерсийОбъекта(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/pic.png";

    Результат = OPI_Dropbox.ПолучитьСписокВерсийОбъекта(Токен, Путь, 1);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокВерсийОбъекта", "Dropbox");

   OPI_ПолучениеДанныхТестов.Проверка_ДропБоксМассив(Результат, 1);

   Ревизия = Результат["entries"][0]["rev"];

   ПараметрыФункции.Вставить("Dropbox_FileRevision", Ревизия);
   OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_FileRevision", Ревизия);

   OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ВосстановитьОбъектКВерсии(ПараметрыФункции)

    Версия    = ПараметрыФункции["Dropbox_FileRevision"];
    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/pic.png";

    Результат = OPI_Dropbox.ВосстановитьОбъектКВерсии(Токен, Путь, Версия);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьОбъектКВерсии", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксФайл(Результат, Путь);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСписокТегов(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    МассивПутей = Новый Массив;
    МассивПутей.Добавить("/New/Dogs.mp3");
    МассивПутей.Добавить("/New/mydoc.docx");

    Результат = OPI_Dropbox.ПолучитьСписокТегов(Токен, МассивПутей);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТегов", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, МассивПутей.Количество());

    Результат = OPI_Dropbox.ПолучитьСписокТегов(Токен, "/New/mydoc.docx");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТегов (одиночный)");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксТеги(Результат, 1);

    ЕстьТег = Ложь;

    Для Каждого Тег Из Результат["paths_to_tags"][0]["tags"] Цикл
        Если Тег["tag_text"] = "важное" Тогда
            ЕстьТег          = Истина;
        КонецЕсли;
    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ОжидаетЧто(ЕстьТег).Равно(Истина);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ДобавитьТег(ПараметрыФункции)

    Тег       = "Важное";
    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/mydoc.docx";

    Результат = OPI_Dropbox.ДобавитьТег(Токен, Путь, Тег);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТег", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_УдалитьТег(ПараметрыФункции)

    Тег       = "Важное";
    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New/mydoc.docx";

    Результат = OPI_Dropbox.УдалитьТег(Токен, Путь, Тег);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТег", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьИнформациюОбАккаунте(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьИнформациюОбАккаунте(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбАккаунте", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    Результат = OPI_Dropbox.ПолучитьИнформациюОбАккаунте(Токен, Результат["account_id"]);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбАккаунте (сторонний)");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксАккаунт(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьДанныеИспользованияПространства(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];

    Результат = OPI_Dropbox.ПолучитьДанныеИспользованияПространства(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеИспользованияПространства", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксПространство(Результат);

КонецПроцедуры

Процедура Dropbox_ДобавитьПользователейКФайлу(ПараметрыФункции)

    Токен = ПараметрыФункции["Dropbox_Token"];
    Почта = ПараметрыФункции["Dropbox_OtherUser"];
    Файл  = ПараметрыФункции["Dropbox_FileID"];

    Результат = OPI_Dropbox.ДобавитьПользователейКФайлу(Токен, Файл, Почта, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКФайлу", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Ложь);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Результат = OPI_Dropbox.ДобавитьПользователейКФайлу(Токен, Файл, Почты, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКФайлу (доп.) ");

    OPI_ПолучениеДанныхТестов.Проверка_ДропбоксУчастник(Результат, Почта, Истина);

КонецПроцедуры

Процедура Dropbox_ОпубликоватьПапку(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    Путь      = "/New";

    Результат = OPI_Dropbox.ОпубликоватьПапку(Токен, Путь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОпубликоватьПапку", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксПубличнаяПапка(Результат);

    IDПапки = Результат["shared_folder_id"];

    ПараметрыФункции.Вставить("Dropbox_SharedFolder", IDПапки);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_SharedFolder", IDПапки);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ОтменитьПубликациюПапки(ПараметрыФункции)

    Токен  = ПараметрыФункции["Dropbox_Token"];
    Папка  = ПараметрыФункции["Dropbox_SharedFolder"];

    Результат     = OPI_Dropbox.ОтменитьПубликациюПапки(Токен, Папка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюПапки", "Dropbox");

    ТекущийСтатус = "in_progress";
    IDРаботы      = Результат["async_job_id"];

    Пока ТекущийСтатус = "in_progress" Цикл
        Результат      = OPI_Dropbox.ПолучитьСтатусАсинхронногоИзменения(Токен, IDРаботы);
        ТекущийСтатус  = Результат[".tag"];
        OPI_Инструменты.Пауза(3);
    КонецЦикла;

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусАсинхронногоИзменения", "Dropbox");
    OPI_ПолучениеДанныхТестов.Проверка_ДропБоксСтатус(Результат);

    ПараметрыФункции.Вставить("Dropbox_NewJobID", IDРаботы);
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Dropbox_NewJobID", IDРаботы);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Dropbox_ПолучитьСтатусАсинхронногоИзменения(ПараметрыФункции)

    Токен     = ПараметрыФункции["Dropbox_Token"];
    IDРаботы  = ПараметрыФункции["Dropbox_NewJobID"];

    Результат = OPI_Dropbox.ПолучитьСтатусАсинхронногоИзменения(Токен, IDРаботы);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

КонецПроцедуры

Процедура Dropbox_ДобавитьПользователейКПапке(ПараметрыФункции)

    Токен  = ПараметрыФункции["Dropbox_Token"];
    Почта  = ПараметрыФункции["Dropbox_OtherUser"];
    Папка  = ПараметрыФункции["Dropbox_SharedFolder"]; // shared_folder_id

    Результат = OPI_Dropbox.ДобавитьПользователейКПапке(Токен, Папка, Почта, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейКПапке", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

    Почты = Новый Массив;
    Почты.Добавить(Почта);

    Результат = OPI_Dropbox.ДобавитьПользователейКПапке(Токен, Папка, Почты, Истина);

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

Процедура Dropbox_ОтменитьПубликациюФайла(ПараметрыФункции)

    Токен    = ПараметрыФункции["Dropbox_Token"];
    Файл     = ПараметрыФункции["Dropbox_FileID"];

    Результат = OPI_Dropbox.ОтменитьПубликациюФайла(Токен, Файл);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтменитьПубликациюФайла", "Dropbox");

    OPI_ПолучениеДанныхТестов.Проверка_Пусто(Результат);

КонецПроцедуры

#КонецОбласти

#Область Bitrix24

Процедура Bitrix24_ПолучитьСсылкуАвторизацииПриложения(ПараметрыФункции)

    Домен    = ПараметрыФункции["Bitrix24_Domain"];
    ClientID = ПараметрыФункции["Bitrix24_ClientID"];

    Результат = OPI_Bitrix24.ПолучитьСсылкуАвторизацииПриложения(Домен, ClientID);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСсылкуАвторизацииПриложения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Строка(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_AuthURL", Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Code         = ПараметрыФункции["Bitrix24_Code"];

    Результат = OPI_Bitrix24.ПолучитьТокен(ClientID, ClientSecret, Code);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Bitrix24");

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура Bitrix24_ОбновитьТокен(ПараметрыФункции)

    ClientID     = ПараметрыФункции["Bitrix24_ClientID"];
    ClientSecret = ПараметрыФункции["Bitrix24_ClientSecret"];
    Refresh      = ПараметрыФункции["Bitrix24_Refresh"];

    Результат = OPI_Bitrix24.ОбновитьТокен(ClientID, ClientSecret, Refresh);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьТокен", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксАвторизация(Результат);

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);
    КонецЕсли;

КонецПроцедуры

Процедура Bitrix24_СерверноеВремя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СерверноеВремя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СерверноеВремя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СерверноеВремя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СерверноеВремя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВремя(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьНовость(ПараметрыФункции)

    Текст     = "Текст новости";
    Заголовок = "Заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные

    Файлы     = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);
    Файлы.Вставить("2.png", Картинка2);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьНовость(URL, Текст, , Файлы, Заголовок, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);                                             // SKIP

    IDНовости = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookPostID", IDНовости); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookPostID", IDНовости);                  // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьНовость(URL, Текст, , Файлы, Заголовок, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDНовости = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PostID", IDНовости);
    ПараметрыФункции.Вставить("Bitrix24_PostID", IDНовости);

КонецПроцедуры

Процедура Bitrix24_ИзменитьНовость(ПараметрыФункции)

    Текст     = "Новый текст новости";
    Заголовок = "Новый заголовок новости";
    Картинка1 = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];

    Файлы     = Новый Соответствие;
    Файлы.Вставить("1.png", Картинка1);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ИзменитьНовость(URL, IDНовости, Текст, , Файлы, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];

    Результат = OPI_Bitrix24.ИзменитьНовость(URL, IDНовости, Текст, , Файлы, Заголовок, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьНовость(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.УдалитьНовость(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьНовость (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьНовость(URL, IDНовости, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьНовость", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПросмотревшихВажное(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_HookPostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокПросмотревшихВажное(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПросмотревшихВажное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокПросмотревшихВажное(URL, IDНовости, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПросмотревшихВажное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьНовости(ПараметрыФункции)

    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьНовости(URL, IDНовости);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьНовости(URL, IDНовости, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьКомментарийНовости(ПараметрыФункции)

    Текст     = "Комментарий к новости";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьКомментарийНовости(URL, IDНовости, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    Текст     = "Другой комментарий к новости";
    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьКомментарийНовости(URL, IDНовости, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПолучателейКНовости(ПараметрыФункции)

    Видимость = "UA";
    IDНовости = ПараметрыФункции["Bitrix24_PostID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьПолучателейКНовости(URL, IDНовости, Видимость);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПолучателейКНовости (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьПолучателейКНовости(URL, IDНовости, Видимость, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПолучателейКНовости", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЗадачи(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЗадачи(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксПоля(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();
    Час         = 3600;
    Сутки       = 24;
    Исполнитель = 1;

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"         , "Новая задача");
    СтруктураЗадачи.Вставить("DESCRIPTION"   , "Новое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"      , "2");
    СтруктураЗадачи.Вставить("DEADLINE"      , ТекущаяДата + Час * Сутки);
    СтруктураЗадачи.Вставить("RESPONSIBLE_ID", Исполнитель);

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);                                           // SKIP

    IDЗадачи = Результат["result"]["task"]["id"];                                // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTaskID", IDЗадачи); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookTaskID", IDЗадачи);                  // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗадачу(URL, СтруктураЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

    IDЗадачи = Результат["result"]["task"]["id"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Bitrix24_TaskID", IDЗадачи);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЗадачу(ПараметрыФункции)

    // Полную структуру полей можно получить функцией ПолучитьСтруктуруЗадачи()

    СтруктураЗадачи = Новый Структура;
    СтруктураЗадачи.Вставить("TITLE"      , "Другой заголовок задачи");
    СтруктураЗадачи.Вставить("DESCRIPTION", "Другое описание задачи");
    СтруктураЗадачи.Вставить("PRIORITY"   , "1");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ИзменитьЗадачу(URL, IDЗадачи, СтруктураЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ИзменитьЗадачу(URL, IDЗадачи, СтруктураЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПринятьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПринятьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПринятьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПринятьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПринятьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтклонитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтклонитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат); // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗадачу (хук)", "Bitrix24");

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтклонитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗадачу", "Bitrix24");

КонецПроцедуры

Процедура Bitrix24_ЗавершитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ЗавершитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ЗавершитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗавершитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ВозобновитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ВозобновитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ВозобновитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтложитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтложитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтложитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтложитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтложитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьВыполнениеЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.НачатьВыполнениеЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьВыполнениеЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.НачатьВыполнениеЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьВыполнениеЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.НачатьНаблюдатьЗаЗадачей(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьНаблюдатьЗаЗадачей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.НачатьНаблюдатьЗаЗадачей(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НачатьНаблюдатьЗаЗадачей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПрекратитьНаблюдатьЗаЗадачей(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрекратитьНаблюдатьЗаЗадачей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПрекратитьНаблюдатьЗаЗадачей(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрекратитьНаблюдатьЗаЗадачей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ПриостановитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПриостановитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПриостановитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПриостановитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.УдалитьЗадачу(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДелегироватьЗадачу(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи       = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ДелегироватьЗадачу(URL, IDЗадачи, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДелегироватьЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДелегироватьЗадачу(URL, IDЗадачи, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДелегироватьЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьЗадачуВИзбранное(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ДобавитьЗадачуВИзбранное(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗадачуВИзбранное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьЗадачуВИзбранное(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЗадачуВИзбранное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УбратьЗадачуИзИзбранного(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.УбратьЗадачуИзИзбранного(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УбратьЗадачуИзИзбранного (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.УбратьЗадачуИзИзбранного(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УбратьЗадачуИзИзбранного", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИсториюЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьИсториюЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьИсториюЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИсториюЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписок(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокЗадач(ПараметрыФункции)

    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    // Полную структуру фильтра можно найти в функции ПолучитьСтруктуруФильтраЗадач
    Фильтр = Новый Соответствие;
    Фильтр.Вставить("CREATED_BY"     , 1);                            // Постановщик с ID 1
    Фильтр.Вставить("!RESPONSIBLE_ID", 10);                           // Исполнители с ID не равным 10
    Фильтр.Вставить(">=CREATED_DATE ", ТекущаяДата - 60 * 60 * 24);   // Дата создания >= вчера

    Поля = Новый Массив;
    Поля.Добавить("UF_CRM_TASK");
    Поля.Добавить("CREATED_BY");

    Отступ   = 1;
    URL      = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокЗадач(URL, Фильтр, , , Поля);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗадач (хук)", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокЗадач(URL, , Отступ, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокЗадач(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокХранилищ(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    Результат = OPI_Bitrix24.ПолучитьСписокХранилищ(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокХранилищ (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокХранилищ(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокХранилищ", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксХранилища(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьХранилищеПриложения(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьХранилищеПриложения(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилищеПриложения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDХранилища = Результат["result"]["ID"];                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StorageID", IDХранилища); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_StorageID", IDХранилища);                  // SKIP

КонецПроцедуры

Процедура Bitrix24_ЗагрузитьФайлВХранилище(ПараметрыФункции)

    Наименование2  = "Картинка2.jpg";
    Наименование   = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = 3;

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование2, Картинка2, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                            // SKIP

    IDФайла = Результат["result"]["ID"];                                        // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFileID", IDФайла); // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookFileID", IDФайла);                  // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВХранилище(URL, Наименование, Картинка, IDПриемника, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла = Результат["result"]["ID"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FileID", IDФайла);
    ПараметрыФункции.Вставить("Bitrix24_FileID", IDФайла);

КонецПроцедуры

Процедура Bitrix24_УдалитьФайл(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDФайла   = ПараметрыФункции["Bitrix24_HookFileID"];

    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDФайла   = ПараметрыФункции["Bitrix24_FileID"];

    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьКаталогВХранилище(ПараметрыФункции)

    IDХранилища   = 3;
    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьКаталогВХранилище(URL, IDХранилища, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКаталогВХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                                  // SKIP

    IDКаталога = Результат["result"]["ID"];                                           // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookFolderID", IDКаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookFolderID", IDКаталога);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьКаталогВХранилище(URL, IDХранилища, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьКаталогВХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDКаталога = Результат["result"]["ID"];                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_FolderID", IDКаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_FolderID", IDКаталога);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_УдалитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];

    Результат = OPI_Bitrix24.УдалитьКаталог(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];
    IDКаталога  = ПараметрыФункции["Bitrix24_FolderID"];

    Результат = OPI_Bitrix24.УдалитьКаталог(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьХранилище(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища    = 3;

    Результат = OPI_Bitrix24.ПолучитьХранилище(URL, IDХранилища);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилище (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьХранилище(URL, IDХранилища, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСодержимоеХранилища(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDХранилища = 3;

    Результат   = OPI_Bitrix24.ПолучитьСодержимоеХранилища(URL, IDХранилища);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСодержимоеХранилища (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСодержимоеХранилища(URL, IDХранилища, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСодержимоеХранилища", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьХранилище(ПараметрыФункции)

    Наименование = "Новое имя хранилища";
    URL          = ПараметрыФункции["Bitrix24_Domain"];
    Токен        = ПараметрыФункции["Bitrix24_Token"];
    IDХранилища  = ПараметрыФункции["Bitrix24_StorageID"];

    Результат = OPI_Bitrix24.ПереименоватьХранилище(URL, IDХранилища, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьХранилище", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИнформациюОКаталоге(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат  = OPI_Bitrix24.ПолучитьИнформациюОКаталоге(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКаталоге (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОКаталоге(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОКаталоге", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПодкаталог(ПараметрыФункции)

    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];
    Наименование  = "Новый подкаталог";
    Наименование2 = "Новый подкаталог 2";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьПодкаталог(URL, IDКаталога, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодкаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                                        // SKIP

    IDПодкаталога = Результат["result"]["ID"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookSubfolderID", IDПодкаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookSubfolderID", IDПодкаталога);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьПодкаталог(URL, IDКаталога, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодкаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDПодкаталога = Результат["result"]["ID"];                                          // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SubfolderID", IDПодкаталога);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_SubfolderID", IDПодкаталога);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_СкопироватьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookSubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СкопироватьКаталог(URL, IDКаталога, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDПриемника = ПараметрыФункции["Bitrix24_SubfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СкопироватьКаталог(URL, IDКаталога, IDПриемника, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьВнешнююСсылкуКаталога(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];

    Результат  = OPI_Bitrix24.ПолучитьВнешнююСсылкуКаталога(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуКаталога(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраКаталога(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];

    Результат  = OPI_Bitrix24.ПолучитьСтруктуруФильтраКаталога(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраКаталога(URL, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьДочерниеЭлементыКаталога(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];

    Результат  = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДочерниеЭлементыКаталога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьДочерниеЭлементыКаталога(URL, IDКаталога, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДочерниеЭлементыКаталога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПоместитьКаталогВКорзину(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога    = ПараметрыФункции["Bitrix24_FolderID"];

    Результат  = OPI_Bitrix24.ПоместитьКаталогВКорзину(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьКаталогВКорзину (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПоместитьКаталогВКорзину(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьКаталогВКорзину", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВосстановитьКаталог(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    Результат  = OPI_Bitrix24.ВосстановитьКаталог(URL, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВосстановитьКаталог(URL, IDКаталога, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереместитьКаталог(ПараметрыФункции)

    IDПриемника = ПараметрыФункции["Bitrix24_HookfolderID"];
    IDКаталога  = ПараметрыФункции["Bitrix24_SubfolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереместитьКаталог(URL, IDКаталога, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога  = ПараметрыФункции["Bitrix24_HookSubfolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереместитьКаталог(URL, IDКаталога, IDПриемника, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьКаталог(ПараметрыФункции)

    Наименование  = "Новый каталог";
    Наименование2 = "Новый каталог 2";

    IDКаталога2  = ПараметрыФункции["Bitrix24_HookFolderID"];
    URL          = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереименоватьКаталог(URL, IDКаталога2, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога  = ПараметрыФункции["Bitrix24_FolderID"];
    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереименоватьКаталог(URL, IDКаталога, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ЗагрузитьФайлВКаталог(ПараметрыФункции)

    Наименование2  = "Картинка2.jpg";
    Наименование   = "Картинка1.jpg";

    Картинка2 = ПараметрыФункции["Picture"];  // Локальный путь, URL или Двоичные данные
    Картинка  = ПараметрыФункции["Picture2"]; // Локальный путь, URL или Двоичные данные

    IDПриемника = ПараметрыФункции["Bitrix24_FolderID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, Наименование2, Картинка2, IDПриемника);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);                                            // SKIP

    IDФайла = Результат["result"]["ID"];                                        // SKIP
    OPI_Bitrix24.УдалитьФайл(URL, IDФайла);                                     // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, Наименование, Картинка, IDПриемника, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлВКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

    IDФайла   = Результат["result"]["ID"];
    Результат = OPI_Bitrix24.УдалитьФайл(URL, IDФайла, Токен);

КонецПроцедуры

Процедура Bitrix24_СкопироватьФайл(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СкопироватьФайл(URL, IDФайла, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_FolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СкопироватьФайл(URL, IDФайла, IDКаталога, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СкопироватьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьИнформациюОФайле(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат  = OPI_Bitrix24.ПолучитьИнформациюОФайле(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьИнформациюОФайле(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьВнешнююСсылкуФайла(ПараметрыФункции)

    OPI_Инструменты.Пауза(20); // SKIP

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат  = OPI_Bitrix24.ПолучитьВнешнююСсылкуФайла(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуФайла (хук)", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьВнешнююСсылкуФайла(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьВнешнююСсылкуФайла", "Bitrix24");

    // OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_ПоместитьФайлВКорзину(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат  = OPI_Bitrix24.ПоместитьФайлВКорзину(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьФайлВКорзину (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПоместитьФайлВКорзину(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПоместитьФайлВКорзину", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВосстановитьФайл(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDФайла = ПараметрыФункции["Bitrix24_FileID"];

    Результат  = OPI_Bitrix24.ВосстановитьФайл(URL, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL         = ПараметрыФункции["Bitrix24_Domain"];
    Токен       = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВосстановитьФайл(URL, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереименоватьФайл(ПараметрыФункции)

    Наименование  = "Новое имя файла.jpg";
    Наименование2 = "Новое имя файла 2.jpg";

    IDФайла2  = ПараметрыФункции["Bitrix24_HookFileID"];
    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереименоватьФайл(URL, IDФайла2, Наименование2);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDФайла  = ПараметрыФункции["Bitrix24_FileID"];
    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереименоватьФайл(URL, IDФайла, Наименование, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереименоватьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПереместитьФайлВКаталог(ПараметрыФункции)

    IDКаталога = ПараметрыФункции["Bitrix24_HookSubFolderID"];
    IDФайла    = ПараметрыФункции["Bitrix24_FileID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПереместитьФайлВКаталог(URL, IDФайла, IDКаталога);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьФайлВКаталог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDКаталога = ПараметрыФункции["Bitrix24_SubFolderID"];

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПереместитьФайлВКаталог(URL, IDФайла, IDКаталога, Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереместитьФайлВКаталог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьФайлВЗадачу(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDФайла  = ПараметрыФункции["Bitrix24_TaskFileID"];

    Результат = OPI_Bitrix24.ДобавитьФайлВЗадачу(URL, IDЗадачи, IDФайла);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьФайлВЗадачу (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьФайлВЗадачу(URL, IDЗадачи, IDФайла, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьФайлВЗадачу", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксВложение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПроверитьДоступКЗадаче(ПараметрыФункции)

    МассивПользователей = Новый Массив;
    МассивПользователей.Добавить("1");
    МассивПользователей.Добавить("10");

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПроверитьДоступКЗадаче(URL, IDЗадачи, МассивПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступКЗадаче (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество()); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПроверитьДоступКЗадаче(URL, IDЗадачи, МассивПользователей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступКЗадаче", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДоступныеДействия(Результат, МассивПользователей.Количество());

КонецПроцедуры

Процедура Bitrix24_ОтключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ОтключитьЗвукЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьЗвукЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ОтключитьЗвукЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьЗвукЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ВключитьЗвукЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ВключитьЗвукЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьЗвукЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ВключитьЗвукЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьЗвукЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЗадача(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьКомментарийЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Текст     = "Задача невыполнима, расходимся";

    Результат = OPI_Bitrix24.ДобавитьКомментарийЗадачи(URL, IDЗадачи, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDКомментария = Результат["result"];                                                  // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCommentID", IDКомментария);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCommentID", IDКомментария);                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Текст     = "Задача выполнима, не расходимся";

    Результат = OPI_Bitrix24.ДобавитьКомментарийЗадачи(URL, IDЗадачи, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDКомментария = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CommentID", IDКомментария);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_CommentID", IDКомментария);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_УдалитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.УдалитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.УдалитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьРезультатИзКомментария(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.СоздатьРезультатИзКомментария(URL, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРезультатИзКомментария (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.СоздатьРезультатИзКомментария(URL, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьРезультатИзКомментария", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксРезультат(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьРезультатИзКомментария(ПараметрыФункции) Экспорт

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Результат = OPI_Bitrix24.УдалитьРезультатИзКомментария(URL, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьРезультатИзКомментария (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.УдалитьРезультатИзКомментария(URL, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьРезультатИзКомментария", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокРезультатов(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокРезультатов(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРезультатов (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокРезультатов(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокРезультатов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокРезультатов(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокКомментариевЗадачи(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи    = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокКомментариевЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариевЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокКомментариевЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокКомментариевЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСписокКомментариев(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьКомменатрийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];

    Результат = OPI_Bitrix24.ПолучитьКомменатрийЗадачи(URL, IDЗадачи, IDКомментария);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомменатрийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Результат = OPI_Bitrix24.ПолучитьКомменатрийЗадачи(URL, IDЗадачи, IDКомментария, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКомменатрийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксКомментарий(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьКомментарийЗадачи(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи      = ПараметрыФункции["Bitrix24_CommentsTaskID"];
    IDКомментария = ПараметрыФункции["Bitrix24_HookCommentID"];

    Текст     = "Задача изменена, не расходимся";

    Результат = OPI_Bitrix24.ИзменитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарийЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDКомментария = ПараметрыФункции["Bitrix24_CommentID"];

    Текст     = "Задача изменена, расходимся";

    Результат = OPI_Bitrix24.ИзменитьКомментарийЗадачи(URL, IDЗадачи, IDКомментария, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКомментарийЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL         = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗависимостьЗадач (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                   // SKIP

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);     // SKIP

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

КонецПроцедуры

Процедура Bitrix24_УдалитьЗависимостьЗадач(ПараметрыФункции)

    IDИсточника = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_TaskID"];
    ТипСвязи    = 0;

    URL         = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);     // SKIP
    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗависимостьЗадач (хук)", "Bitrix24"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);                                   // SKIP

    IDИсточника = ПараметрыФункции["Bitrix24_TaskID"];
    IDПриемника = ПараметрыФункции["Bitrix24_HookTaskID"];
    ТипСвязи    = 2;

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен); // SKIP
    Результат = OPI_Bitrix24.УдалитьЗависимостьЗадач(URL, IDИсточника, IDПриемника, ТипСвязи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗависимостьЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новая стадия";
    Цвет         = "0026FF";

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ДобавитьСтадиюКанбана(URL, Наименование, Цвет, 6);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПредыдущей = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookStageID", IDПредыдущей);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookStageID", IDПредыдущей);                   // SKIP

    Наименование = "Новая стадия 2";
    Цвет         = "0026FF";

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ДобавитьСтадиюКанбана(URL, Наименование, Цвет, IDПредыдущей, , Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСтадии = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_StageID", IDСтадии);
    ПараметрыФункции.Вставить("Bitrix24_StageID", IDСтадии);

КонецПроцедуры

Процедура Bitrix24_УдалитьСтадиюКанбана(ПараметрыФункции)

    IDСтадии  = ПараметрыФункции["Bitrix24_HookStageID"];

    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.УдалитьСтадиюКанбана(URL, IDСтадии, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDСтадии  = ПараметрыФункции["Bitrix24_StageID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьСтадиюКанбана(URL, IDСтадии, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтадииКанбана(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтадииКанбана(URL, , Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтадииКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтадииКанбана(URL, , , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтадииКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПеренестиЗадачуВСтадиюКанбана(ПараметрыФункции)

    IDЗадачи  = ПараметрыФункции["Bitrix24_KanbanTaskID"];
    IDСтадии  = ПараметрыФункции["Bitrix24_HookStageID"];

    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, IDСтадии);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПеренестиЗадачуВСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDСтадии  = ПараметрыФункции["Bitrix24_StageID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, IDСтадии, , , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПеренестиЗадачуВСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

    OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(URL, IDЗадачи, 2, , , Токен);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСтадиюКанбана(ПараметрыФункции)

    Наименование = "Новое имя стадии стадии";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_HookStageID"];

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ИзменитьСтадиюКанбана(URL, Наименование, IDСтадии, Цвет);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтадиюКанбана (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    Наименование = "Новое имя стадии стадии 2";
    Цвет         = "000000";
    IDСтадии     = ПараметрыФункции["Bitrix24_StageID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ИзменитьСтадиюКанбана(URL, Наименование, IDСтадии, Цвет, 6, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтадиюКанбана", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи = ПараметрыФункции["Bitrix24_HookTaskID"];

    Текст    = "Пункт чек-листа";

    Результат = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(URL, IDЗадачи, Текст, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЭлемента = Результат["result"];                                                       // SKIP

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookCheckElementID", IDЭлемента);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookCheckElementID", IDЭлемента);                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ДобавитьЭлементЧеклистаЗадачи(URL, IDЗадачи, Текст, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЭлемента = Результат["result"];

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_CheckElementID", IDЭлемента);
    ПараметрыФункции.Вставить("Bitrix24_CheckElementID", IDЭлемента);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Текст    = "Новый текст пункта чек-листа";

    Результат = OPI_Bitrix24.ИзменитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL        = ПараметрыФункции["Bitrix24_Domain"];
    Токен      = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    Результат = OPI_Bitrix24.ИзменитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Текст, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.УдалитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЧеклистЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_HookTaskID"];

    Результат = OPI_Bitrix24.ПолучитьЧеклистЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧеклистЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_TaskID"];

    Результат = OPI_Bitrix24.ПолучитьЧеклистЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧеклистЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ПолучитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ВыполнитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВыполнитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВыполнитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(ПараметрыФункции)

    URL        = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи   = ПараметрыФункции["Bitrix24_HookTaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_HookCheckElementID"];

    Результат = OPI_Bitrix24.ВозобновитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЭлементЧеклистаЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    IDЗадачи   = ПараметрыФункции["Bitrix24_TaskID"];
    IDЭлемента = ПараметрыФункции["Bitrix24_CheckElementID"];

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ВозобновитьЭлементЧеклистаЗадачи(URL, IDЗадачи, IDЭлемента, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВозобновитьЭлементЧеклистаЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьТрудозатратыЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Время     = 3600;

    Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(URL, IDЗадачи, Время);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЗатрат = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookTimeID", IDЗатрат);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookTimeID", IDЗатрат);                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Текст          = "Трудозатраты по обработке";
    IDПользователя = 10;
    Время          = 7200;
    ДатаУстановки  = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(URL
        , IDЗадачи
        , Время
        , IDПользователя
        , Текст
        , ДатаУстановки
        , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЗатрат = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_TimeID", IDЗатрат);
    ПараметрыФункции.Вставить("Bitrix24_TimeID", IDЗатрат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьТрудозатратыЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_HookTimeID"];

    Текст     = "Забытый в прошлый раз текст";
    Время     = 4800;

    Результат = OPI_Bitrix24.ИзменитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Время, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_TimeID"];

    Текст          = "Новые трудозатраты по обработке";
    Время          = 4800;
    ДатаУстановки  = ДобавитьМесяц(OPI_Инструменты.ПолучитьТекущуюДату(), -1);

    Результат = OPI_Bitrix24.ИзменитьТрудозатратыЗадачи(URL
        , IDЗадачи
        , IDЗаписи
        , Время
        , Текст
        , ДатаУстановки
        , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьТрудозатратыЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_HookTimeID"];

    Результат = OPI_Bitrix24.УдалитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_TimeID"];

    Результат = OPI_Bitrix24.УдалитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксНеопределено(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТрудозатратыЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_ElapsedTaskID"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_HookTimeID"];

    Результат = OPI_Bitrix24.ПолучитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТрудозатратыЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЗаписи  = ПараметрыФункции["Bitrix24_TimeID"];

    Результат = OPI_Bitrix24.ПолучитьТрудозатратыЗадачи(URL, IDЗадачи, IDЗаписи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТрудозатратыЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокТрудозатратЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];
    IDЗадачи  = ПараметрыФункции["Bitrix24_ElapsedTaskID"];

    Результат = OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(URL, IDЗадачи);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТрудозатратЗадачи (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(URL, IDЗадачи, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТрудозатратЗадачи", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассивОбъектов(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПланЗадачНаДень(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьПланЗадачНаДень(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПланЗадачНаДень (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьПланЗадачНаДень(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПланЗадачНаДень", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЧат(ПараметрыФункции)

    Картинка = ПараметрыФункции["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);

    B64Картинка = ПолучитьBase64СтрокуИзДвоичныхДанных(Картинка);

    МассивУчастников = Новый Массив;
    МассивУчастников.Добавить(10);
    МассивУчастников.Добавить(1);

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE"       , "OPEN");
    СтруктураЧата.Вставить("TITLE"      , "Новый чат");
    СтруктураЧата.Вставить("DESCRIPTION", "Это новый чат");
    СтруктураЧата.Вставить("COLOR"      , "GREEN");
    СтруктураЧата.Вставить("MESSAGE"    , "Добро пожаловать в новый чат");
    СтруктураЧата.Вставить("USERS"      , МассивУчастников);
    СтруктураЧата.Вставить("AVATAR"     , B64Картинка);
    СтруктураЧата.Вставить("OWNER_ID"   , 1);

    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЧат(URL, СтруктураЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЧата = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookChatID", IDЧата);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookChatID", IDЧата);                   // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];

    СтруктураЧата = Новый Структура;
    СтруктураЧата.Вставить("TYPE"       , "CHAT");
    СтруктураЧата.Вставить("TITLE"      , "Закрытый чат");
    СтруктураЧата.Вставить("USERS"      , МассивУчастников);

    Результат = OPI_Bitrix24.СоздатьЧат(URL, СтруктураЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЧата = Результат["result"];                                           // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatID", IDЧата);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatID", IDЧата);                   // SKIP

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользователейЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЧата    = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПокинутьЧат(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПокинутьЧат(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDЧата    = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПокинутьЧат(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПокинутьЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИсключитьПользователяИзЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Результат = OPI_Bitrix24.ИсключитьПользователяИзЧата(URL, IDЧата, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователяИзЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ИсключитьПользователяИзЧата(URL, IDЧата, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователяИзЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПользователейВЧат(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователей = Новый Массив;
    IDПользователей.Добавить(10);
    IDПользователей.Добавить(12);

    Результат = OPI_Bitrix24.ДобавитьПользователейВЧат(URL, IDЧата, IDПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейВЧат (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ДобавитьПользователейВЧат(URL, IDЧата, IDПользователя, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ДобавитьПользователейВЧат", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЗаголовокЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Заголовок = "Новый заголовок чата";

    Результат = OPI_Bitrix24.ИзменитьЗаголовокЧата(URL, IDЧата, Заголовок);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаголовокЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Заголовок      = "Другой заголовок чата";

    Результат = OPI_Bitrix24.ИзменитьЗаголовокЧата(URL, IDЧата, Заголовок, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаголовокЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЦветЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Цвет    = "AZURE";

    Результат = OPI_Bitrix24.ИзменитьЦветЧата(URL, IDЧата, Цвет);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЦветЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    OPI_Инструменты.Пауза(10); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Цвет           = "PURPLE";

    Результат = OPI_Bitrix24.ИзменитьЦветЧата(URL, IDЧата, Цвет, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЦветЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьКартинкуЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Картинка = ПараметрыФункции["Picture2"];

    Результат = OPI_Bitrix24.ИзменитьКартинкуЧата(URL, IDЧата, Картинка);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКартинкуЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ИзменитьКартинкуЧата(URL, IDЧата, Картинка, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьКартинкуЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтключитьУведомленияЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ОтключитьУведомленияЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьУведомленияЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ОтключитьУведомленияЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтключитьУведомленияЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ВключитьУведомленияЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ВключитьУведомленияЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьУведомленияЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ВключитьУведомленияЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВключитьУведомленияЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СменитьВладельцаЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = ПараметрыФункции["Bitrix24_HookChatID"];

    IDПользователя = 10;

    Результат = OPI_Bitrix24.СменитьВладельцаЧата(URL, IDЧата, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СменитьВладельцаЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.СменитьВладельцаЧата(URL, IDЧата, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СменитьВладельцаЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокСообщенийЧата(ПараметрыФункции)

    URL     = ПараметрыФункции["Bitrix24_URL"];
    IDЧата  = "chat4";

    Результат = OPI_Bitrix24.ПолучитьСписокСообщенийЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСообщенийЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат); // SKIP

    IDСообщения = Результат["result"]["messages"][0]["id"];                             // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьСписокСообщенийЧата(URL, IDПользователя, , 0, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСообщенийЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщения(Результат);

    IDСообщения = Результат["result"]["messages"][0]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_ОтметитьСообщениеКакПрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакПрочитанное(URL, IDЧата, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакПрочитанное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДиалог(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакПрочитанное(URL, IDПользователя, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакПрочитанное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксДиалог(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтметитьСообщениеКакНепрочитанное(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакНепрочитанное(URL, IDЧата, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакНепрочитанное (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.ОтметитьСообщениеКакНепрочитанное(URL, IDПользователя, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтметитьСообщениеКакНепрочитанное", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьДиалог(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьДиалог(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДиалог (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьДиалог(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДиалог", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСообщение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользователейДиалога(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейДиалога(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейДиалога (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ПолучитьСписокПользователейДиалога(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокПользователейДиалога", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьУведомлениеОВводе(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ОтправитьУведомлениеОВводе(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьУведомлениеОВводе (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ОтправитьУведомлениеОВводе(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьУведомлениеОВводе", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПрочитатьВсе(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПрочитатьВсе(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьВсе (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПрочитатьВсе(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПрочитатьВсе", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьСообщение(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDЧата   = "chat" + ПараметрыФункции["Bitrix24_HookChatID"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.ОтправитьСообщение(URL, IDЧата, Текст, Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                  // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_ChatMessageID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_ChatMessageID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 10;

    Результат = OPI_Bitrix24.ОтправитьСообщение(URL, IDПользователя, Текст, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserMessageID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_UserMessageID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Текст    = "Новый текст сообщения";

    Результат = OPI_Bitrix24.ИзменитьСообщение(URL, IDСообщения, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.ИзменитьСообщение(URL, IDСообщения, Текст, Вложения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.УдалитьСообщение(URL, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.УдалитьСообщение(URL, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьРеакциюНаСообщение(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDСообщения = ПараметрыФункции["Bitrix24_ChatMessageID"];

    Результат = OPI_Bitrix24.УстановитьРеакциюНаСообщение(URL, IDСообщения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьРеакциюНаСообщение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDСообщения    = ПараметрыФункции["Bitrix24_UserMessageID"];

    Результат = OPI_Bitrix24.УстановитьРеакциюНаСообщение(URL, IDСообщения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьРеакциюНаСообщение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьКаталогФайловЧата(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = ПараметрыФункции["Bitrix24_HookChatID"];

    Результат = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКаталогФайловЧата (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDЧата         = ПараметрыФункции["Bitrix24_ChatID"];

    Результат = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКаталогФайловЧата", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ОтправитьФайл(ПараметрыФункции)

    URL         = ПараметрыФункции["Bitrix24_URL"];
    IDЧата      = ПараметрыФункции["Bitrix24_HookChatID"];
    Файл        = ПараметрыФункции["Document"]; // Двоичные данные, URL или путь к файлу
    Описание    = "Очень важный файл";

    Каталог    = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата);
    IDКаталога = Каталог["result"]["ID"];

    ЗагруженныйФайл = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, "Важный документ.docx", Файл, IDКаталога);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Результат = OPI_Bitrix24.ОтправитьФайл(URL, IDЧата, IDФайла, Описание);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЧата = ПараметрыФункции["Bitrix24_ChatID"];

    Каталог    = OPI_Bitrix24.ПолучитьКаталогФайловЧата(URL, IDЧата, Токен);
    IDКаталога = Каталог["result"]["ID"];

    ЗагруженныйФайл = OPI_Bitrix24.ЗагрузитьФайлВКаталог(URL, "Важный документ.docx", Файл, IDКаталога, Токен);
    IDФайла         = ЗагруженныйФайл["result"]["ID"];

    Результат = OPI_Bitrix24.ОтправитьФайл(URL, IDЧата, IDФайла, Описание, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксФайлСообщение(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользователей(ПараметрыФункции)

    URL                 = ПараметрыФункции["Bitrix24_URL"];
    МассивПользователей = Новый Массив;

    МассивПользователей.Добавить(1);
    МассивПользователей.Добавить(10);

    Результат = OPI_Bitrix24.ПолучитьПользователей(URL, МассивПользователей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDПользователей = 10;

    Результат = OPI_Bitrix24.ПолучитьПользователей(URL, IDПользователей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСоответствие(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтатусПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтатусПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтатусПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСтрока(Результат);

КонецПроцедуры

Процедура Bitrix24_УстановитьСтатусПользователя(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    Статус = "dnd";

    Результат = OPI_Bitrix24.УстановитьСтатусПользователя(URL, Статус);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    Статус   = "away";

    Результат = OPI_Bitrix24.УстановитьСтатусПользователя(URL, Статус, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПерсональноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.СоздатьПерсональноеУведомление(URL, IDПользователя, Текст, , Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПерсональноеУведомление (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                        // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalHookNotifyID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_PersoalHookNotifyID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Результат = OPI_Bitrix24.СоздатьПерсональноеУведомление(URL, IDПользователя, Текст, Тег, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПерсональноеУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_PersoalNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_PersoalNotifyID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_СоздатьСистемноеУведомление(ПараметрыФункции)

    IDПользователя = 1;

    URL      = ПараметрыФункции["Bitrix24_URL"];
    Текст    = "Текст сообщения";
    Картинка = "https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/main/service/test_data/picture.jpg";
    Файл     = "https://github.com/Bayselonarrend/OpenIntegrations/raw/main/service/test_data/document.docx";

    Вложения = Новый Массив;
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокКартинки("Картинка1", Картинка));
    Вложения.Добавить(OPI_Bitrix24.ПолучитьБлокФайла("Файл1.docx"  , Файл));

    Результат = OPI_Bitrix24.СоздатьСистемноеУведомление(URL, IDПользователя, Текст, , Вложения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСистемноеУведомление (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDСообщения = Результат["result"];                                                       // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemHookNotifyID", IDСообщения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_SystemHookNotifyID", IDСообщения);                   // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    Тег            = "Новый";
    IDПользователя = 10;

    Результат = OPI_Bitrix24.СоздатьСистемноеУведомление(URL, IDПользователя, Текст, Тег, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСистемноеУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDСообщения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_SystemNotifyID", IDСообщения);
    ПараметрыФункции.Вставить("Bitrix24_SystemNotifyID", IDСообщения);

КонецПроцедуры

Процедура Bitrix24_УдалитьУведомление(ПараметрыФункции)

    URL           = ПараметрыФункции["Bitrix24_URL"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalHookNotifyID"];

    Результат = OPI_Bitrix24.УдалитьУведомление(URL, IDУведомления);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьУведомление", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL           = ПараметрыФункции["Bitrix24_Domain"];
    Токен         = ПараметрыФункции["Bitrix24_Token"];
    IDУведомления = ПараметрыФункции["Bitrix24_PersoalNotifyID"];

    Результат = OPI_Bitrix24.УдалитьУведомление(URL, IDУведомления, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьУведомление (приложение)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксБулево(Результат);

КонецПроцедуры

Процедура Bitrix24_ДобавитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Тип = "date";
    Имя = "BIRTHDAY_FIELD";

    Результат = OPI_Bitrix24.ДобавитьПользовательскоеПолеЗадачи(URL, Тип, Имя);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    Тип        = "string";
    Имя        = "TEXT_FIELD";
    ВнешнийКод = "BITRIX_TEXT_FIELD";
    Заголовок  = "Поле для текста";
    Подпись    = Новый Структура("en,ru", "Some field", "Некоторое поле");

    Результат = OPI_Bitrix24.ДобавитьПользовательскоеПолеЗадачи(URL, Тип, Имя, ВнешнийКод, Заголовок, Подпись, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ИзменитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПоля    = ПараметрыФункции["Bitrix24_HookTaskFieldID"];
    Заголовок = "Новый заголовок";

    Результат = OPI_Bitrix24.ИзменитьПользовательскоеПолеЗадачи(URL, IDПоля, , Заголовок);

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    IDПоля     = ПараметрыФункции["Bitrix24_TaskFieldID"];
    ВнешнийКод = "NEW_TEXT_FIELD";
    Подпись    = Новый Структура("en,ru", "Updated field", "Измененное поле");

    Результат = OPI_Bitrix24.ИзменитьПользовательскоеПолеЗадачи(URL, IDПоля, ВнешнийКод, , Подпись, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDПоля   = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскоеПолеЗадачи(URL, IDПоля);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDПоля   = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Результат = OPI_Bitrix24.ПолучитьПользовательскоеПолеЗадачи(URL, IDПоля, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокПользовательскихПолейЗадачи(ПараметрыФункции)

    URL       = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользовательскихПолейЗадачи(URL);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСписокПользовательскихПолейЗадачи(URL, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_УдалитьПользовательскоеПолеЗадачи(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDПоля = ПараметрыФункции["Bitrix24_HookTaskFieldID"];

    Результат = OPI_Bitrix24.УдалитьПользовательскоеПолеЗадачи(URL, IDПоля);

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDПоля   = ПараметрыФункции["Bitrix24_TaskFieldID"];

    Результат = OPI_Bitrix24.УдалитьПользовательскоеПолеЗадачи(URL, IDПоля, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_СоздатьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Наименование = "Главное подразделение";
    IDРодителя   = 1;

    Результат = OPI_Bitrix24.СоздатьПодразделение(URL, Наименование, IDРодителя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПодразделения = Результат["result"];                                              // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDepID", IDПодразделения);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookDepID", IDПодразделения);                   // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];

    Наименование   = "Подчиненное подразделение";
    IDРодителя     = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРуководителя = 1;

    Результат = OPI_Bitrix24.СоздатьПодразделение(URL, Наименование, IDРодителя, IDРуководителя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПодразделения = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DepID", IDПодразделения);
    ПараметрыФункции.Вставить("Bitrix24_DepID", IDПодразделения);

КонецПроцедуры

Процедура Bitrix24_ИзменитьПодразделение(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];
    IDРодителя      = 7;

    Результат = OPI_Bitrix24.ИзменитьПодразделение(URL, IDПодразделения, , IDРодителя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];

    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];
    Наименование    = "Новое подразделение";
    IDРодителя      = 1;
    IDРуководителя  = 10;

    Результат = OPI_Bitrix24.ИзменитьПодразделение(URL
        , IDПодразделения
        , Наименование
        , IDРодителя
        , IDРуководителя
        , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьПодразделение(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Результат = OPI_Bitrix24.УдалитьПодразделение(URL, IDПодразделения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодразделение (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDПодразделения = ПараметрыФункции["Bitrix24_HookDepID"];

    Результат = OPI_Bitrix24.УдалитьПодразделение(URL, IDПодразделения, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьПодразделение", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПодразделения(ПараметрыФункции)

    URL             = ПараметрыФункции["Bitrix24_URL"];
    IDПодразделения = ПараметрыФункции["Bitrix24_DepID"];

    Результат = OPI_Bitrix24.ПолучитьПодразделения(URL, IDПодразделения);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодразделения (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL             = ПараметрыФункции["Bitrix24_Domain"];
    Токен           = ПараметрыФункции["Bitrix24_Token"];
    IDРуководителя  = 1;

    Результат = OPI_Bitrix24.ПолучитьПодразделения(URL, , , , IDРуководителя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПодразделения", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьТекущегоПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьТекущегоПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТекущегоПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьТекущегоПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТекущегоПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтурктуруПользователя(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтурктуруПользователя(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтурктуруПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтурктуруПользователя(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтурктуруПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксОбъект(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьПользователя(ПараметрыФункции)

    URL   = ПараметрыФункции["Bitrix24_URL"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";
    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 7);

    Результат = OPI_Bitrix24.СоздатьПользователя(URL, СтруктураПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDПользователя = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookUserID", IDПользователя);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookUserID", IDПользователя);                   // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];
    Почта = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"          , Почта);
    СтруктураПользователя.Вставить("NAME"           , "Виталий");
    СтруктураПользователя.Вставить("LAST_NAME"      , "Альпака");
    СтруктураПользователя.Вставить("PERSONAL_MOBILE", "88003553535");
    СтруктураПользователя.Вставить("UF_DEPARTMENT"  , 1);

    Результат = OPI_Bitrix24.СоздатьПользователя(URL, СтруктураПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDПользователя = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_UserID", IDПользователя);
    ПараметрыФункции.Вставить("Bitrix24_UserID", IDПользователя);

КонецПроцедуры

Процедура Bitrix24_ИзменитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    // Полную структуру можно получить функцией ПолучитьСтурктуруПользователя

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"        , Почта);
    СтруктураПользователя.Вставить("UF_DEPARTMENT", 1);

    Результат = OPI_Bitrix24.ИзменитьПользователя(URL, IDПользователя, СтруктураПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];
    Почта          = Строка(Новый УникальныйИдентификатор) + "@exepmple.org";

    СтруктураПользователя = Новый Структура;
    СтруктураПользователя.Вставить("EMAIL"          , Почта);
    СтруктураПользователя.Вставить("NAME"           , "Олег");
    СтруктураПользователя.Вставить("LAST_NAME"      , "Лама");
    СтруктураПользователя.Вставить("UF_DEPARTMENT"  , 7);

    Результат = OPI_Bitrix24.ИзменитьПользователя(URL, IDПользователя, СтруктураПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСтатусПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Результат = OPI_Bitrix24.ИзменитьСтатусПользователя(URL, IDПользователя, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтатусПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ИзменитьСтатусПользователя(URL, IDПользователя, Истина, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСтатусПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьПользователя(ПараметрыФункции)

    URL            = ПараметрыФункции["Bitrix24_URL"];
    IDПользователя = ПараметрыФункции["Bitrix24_HookUserID"];

    Результат = OPI_Bitrix24.ПолучитьПользователя(URL, IDПользователя);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователя (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = ПараметрыФункции["Bitrix24_UserID"];

    Результат = OPI_Bitrix24.ПолучитьПользователя(URL, IDПользователя, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователя", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_НайтиПользователей(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("NAME"              , "Виталий");
    СтруктураФильтра.Вставить("LAST_NAME"         , "Альпака");
    СтруктураФильтра.Вставить("WORK_POSITION"     , "DevOps инженер");
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Отдел маркетинга");
    СтруктураФильтра.Вставить("USER_TYPE"         , "employee");

    Результат = OPI_Bitrix24.НайтиПользователей(URL, СтруктураФильтра);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиПользователей (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL   = ПараметрыФункции["Bitrix24_Domain"];
    Токен = ПараметрыФункции["Bitrix24_Token"];

    СтруктураФильтра = Новый Структура;
    СтруктураФильтра.Вставить("UF_DEPARTMENT_NAME", "Битрикс");

    Результат = OPI_Bitrix24.НайтиПользователей(URL, СтруктураФильтра, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиПользователей", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_НачатьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.НачатьУчетВремени(URL);

    Час = 3600;

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату() - Час;
    Отчет          = "Опоздание";

    Результат = OPI_Bitrix24.НачатьУчетВремени(URL, IDПользователя, Время, Отчет, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ЗавершитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ЗавершитьУчетВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;
    Время          = OPI_Инструменты.ПолучитьТекущуюДату();
    Отчет          = "Отгул";

    Результат = OPI_Bitrix24.ЗавершитьУчетВремени(URL, IDПользователя, Время, Отчет, Токен);

КонецПроцедуры

Процедура Bitrix24_ПриостановитьУчетВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПриостановитьУчетВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПриостановитьУчетВремени(URL, IDПользователя, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтатусУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтатусУчетаВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПолучитьСтатусУчетаВремени(URL, IDПользователя, Токен);

КонецПроцедуры

Процедура Bitrix24_ПолучитьНастройкиУчетаВремени(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьНастройкиУчетаВремени(URL);

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];
    IDПользователя = 1;

    Результат = OPI_Bitrix24.ПолучитьНастройкиУчетаВремени(URL, IDПользователя, Токен);

    // END

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраЛидов(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраЛидов();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЛидов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЛида(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЛида(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЛида (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЛида(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЛида", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьЛид(ПараметрыФункции)

    МассивПочт = Новый Массив;
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "yo@example.com", "HOME"));
    МассивПочт.Добавить(Новый Структура("VALUE,VALUE_TYPE", "hi@example.com", "WORK"));

    МассивНомеров = Новый Массив;
    МассивНомеров.Добавить(Новый Структура("VALUE,VALUE_TYPE", "88005553535", "WORK"));

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Пушкина, д. 10");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Россия");
    СтруктураПолей.Вставить("EMAIL"          , МассивПочт);
    СтруктураПолей.Вставить("NAME"           , "Петр");
    СтруктураПолей.Вставить("LAST_NAME"      , "Петров");
    СтруктураПолей.Вставить("PHONE"          , МассивНомеров);
    СтруктураПолей.Вставить("TITLE"          , "Мегаклиент");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьЛид(URL, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЛида = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookLeadID", IDЛида);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookLeadID", IDЛида);                   // SKIP

    СтруктураПолей.Вставить("NAME"           , "Иван");
    СтруктураПолей.Вставить("LAST_NAME"      , "Иванов");

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьЛид(URL, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_LeadID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_LeadID", IDЛида);

КонецПроцедуры

Процедура Bitrix24_ИзменитьЛид(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("ADDRESS"        , "ул. Лермонтова, д. 20");
    СтруктураПолей.Вставить("ADDRESS_COUNTRY", "Беларусь");
    СтруктураПолей.Вставить("TITLE"          , "Суперклиент");

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.ИзменитьЛид(URL, IDЛида, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    СтруктураПолей.Вставить("NAME"           , "Евгений");
    СтруктураПолей.Вставить("LAST_NAME"      , "Евгеньев");

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.ИзменитьЛид(URL, IDЛида, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.УдалитьЛид(URL, IDЛида);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.УдалитьЛид(URL, IDЛида, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьЛид(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];
    IDЛида = ПараметрыФункции["Bitrix24_HookLeadID"];

    Результат = OPI_Bitrix24.ПолучитьЛид(URL, IDЛида);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛид (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];
    IDЛида = ПараметрыФункции["Bitrix24_LeadID"];

    Результат = OPI_Bitrix24.ПолучитьЛид(URL, IDЛида, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛид", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЛид(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокЛидов(ПараметрыФункции)

    URL    = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокЛидов(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЛидов (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"    , "Мегаклиент");
    Фильтр.Вставить("HAS_EMAIL", "Y");

    Результат = OPI_Bitrix24.ПолучитьСписокЛидов(URL, Фильтр, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокЛидов", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраСделок(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраСделок();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраСделок", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруСделки(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСделки(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСделки (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат); // SKIP

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.ПолучитьСтруктуруСделки(URL, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСделки", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура Bitrix24_СоздатьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"         , "Плановая продажа");
    СтруктураПолей.Вставить("TYPE_ID"       , "GOODS");
    СтруктураПолей.Вставить("STAGE_ID"      , "NEW");
    СтруктураПолей.Вставить("COMPANY_ID"    , 1);
    СтруктураПолей.Вставить("CONTACT_ID"    , 3);
    СтруктураПолей.Вставить("OPENED"        , "Y");
    СтруктураПолей.Вставить("ASSIGNED_BY_ID", 1);
    СтруктураПолей.Вставить("PROBABILITY"   , 30);
    СтруктураПолей.Вставить("CURRENCY_ID"   , "USD");
    СтруктураПолей.Вставить("OPPORTUNITY"   , 5000);
    СтруктураПолей.Вставить("CATEGORY_ID"   , 5);
    СтруктураПолей.Вставить("BEGINDATE"     , "2024-01-01");
    СтруктураПолей.Вставить("CLOSEDATE"     , "2030-01-01");

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.СоздатьСделку(URL, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат); // SKIP

    IDЛида = Результат["result"];                                               // SKIP
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_HookDealID", IDЛида);  // SKIP
    ПараметрыФункции.Вставить("Bitrix24_HookDealID", IDЛида);                   // SKIP

    СтруктураПолей.Вставить("TITLE"    , "Другая сделка");
    СтруктураПолей.Вставить("CLOSEDATE", "2031-01-01");

    URL            = ПараметрыФункции["Bitrix24_Domain"];
    Токен          = ПараметрыФункции["Bitrix24_Token"];

    Результат = OPI_Bitrix24.СоздатьСделку(URL, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксЧисло(Результат);

    IDЛида = Результат["result"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Bitrix24_DealID", IDЛида);
    ПараметрыФункции.Вставить("Bitrix24_DealID", IDЛида);

КонецПроцедуры

Процедура Bitrix24_ИзменитьСделку(ПараметрыФункции)

    СтруктураПолей = Новый Структура;
    СтруктураПолей.Вставить("TITLE"         , "Продажа в RUB");
    СтруктураПолей.Вставить("CURRENCY_ID"   , "RUB");
    СтруктураПолей.Вставить("OPPORTUNITY"   , 50000);

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ИзменитьСделку(URL, IDСделки, СтруктураПолей);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    СтруктураПолей.Вставить("TITLE"    , "Будущая сделка в RUB");
    СтруктураПолей.Вставить("BEGINDATE", "2025-01-01");

    URL       = ПараметрыФункции["Bitrix24_Domain"];
    Токен     = ПараметрыФункции["Bitrix24_Token"];
    IDСделки  = ПараметрыФункции["Bitrix24_DealID"];

    Результат = OPI_Bitrix24.ИзменитьСделку(URL, IDСделки, СтруктураПолей, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ПолучитьСделку(URL, IDСделки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.ПолучитьСделку(URL, IDСделки, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксСделка(Результат);

КонецПроцедуры

Процедура Bitrix24_УдалитьСделку(ПараметрыФункции)

    URL      = ПараметрыФункции["Bitrix24_URL"];
    IDСделки = ПараметрыФункции["Bitrix24_HookDealID"];

    Результат = OPI_Bitrix24.УдалитьСделку(URL, IDСделки);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСделку (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат); // SKIP

    URL      = ПараметрыФункции["Bitrix24_Domain"];
    Токен    = ПараметрыФункции["Bitrix24_Token"];
    IDСделки = ПараметрыФункции["Bitrix24_DealID"];

    Результат = OPI_Bitrix24.УдалитьСделку(URL, IDСделки, Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСделку", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксИстина(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСписокСделок(ПараметрыФункции)

    URL = ПараметрыФункции["Bitrix24_URL"];

    Результат = OPI_Bitrix24.ПолучитьСписокСделок(URL);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСделок (хук)", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат); // SKIP

    URL    = ПараметрыФункции["Bitrix24_Domain"];
    Токен  = ПараметрыФункции["Bitrix24_Token"];

    Фильтр = Новый Структура;
    Фильтр.Вставить("TITLE"      , "Продажа в RUB");
    Фильтр.Вставить("CURRENCY_ID", "RUB");

    Результат = OPI_Bitrix24.ПолучитьСписокСделок(URL, Фильтр, , Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСделок", "Bitrix24");

    OPI_ПолучениеДанныхТестов.Проверка_БитриксМассив(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраЗадач(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраЗадач();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраЗадач", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруКомментария(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруКомментария();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруКомментария", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруЧата(ПараметрыФункции)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруЧата();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЧата", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьБлокКартинки(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Picture"];

    Результат = OPI_Bitrix24.ПолучитьБлокКартинки(Наименование, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБлокКартинки", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьБлокФайла(ПараметрыФункции)

    Наименование = "Картинка";
    URL          = ПараметрыФункции["Document"];

    Результат = OPI_Bitrix24.ПолучитьБлокФайла(Наименование, URL);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьБлокФайла", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Bitrix24_ПолучитьСтруктуруФильтраПользователей(ПараметрыТеста)

    Результат = OPI_Bitrix24.ПолучитьСтруктуруФильтраПользователей();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраПользователей", "Bitrix24");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

#КонецОбласти

#Область VKTeams

Процедура VKTeams_ПроверитьТокен(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    Результат    = OPI_VKTeams.ПроверитьТокен(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьТокен", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТПользователь(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПолучитьСобытия(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDПоследнего = 0;

    Для Н = 1 По 5 Цикл // В реальной работе - бесконечный цикл

        Результат = OPI_VKTeams.ПолучитьСобытия(Токен, IDПоследнего, 3);

        OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСобытия", "VkTeams");
        OPI_ПолучениеДанныхТестов.Проверка_ВКТСобытия(Результат); // SKIP

        События   = Результат["events"];

        // Обработка событий...

        Если Не События.Количество() = 0 Тогда

            IDПоследнего = События[События.ВГраница()]["eventId"];

        КонецЕсли;

    КонецЦикла;

    // END

    OPI_Инструменты.Пауза(3);

КонецПроцедуры

Процедура VKTeams_ОтправитьТекстовоеСообщение(ПараметрыФункции)

    Токен     = ПараметрыФункции["VkTeams_Token"];
    IDЧата    = ПараметрыФункции["VkTeams_ChatID"];
    Текст     = "Текст сообщения";

    Результат = OPI_VKTeams.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];
    Текст         = "<b>Полужирный текст сообщения</b>";
    Разметка      = "HTML";

    Клавиатура         = Новый Массив;
    МассивСтрокиКнопок = Новый Массив;

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка1", "НажатиеКнопки1", , "attention"));

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка2", , "https://openintegrations.dev"));

    Клавиатура.Добавить(МассивСтрокиКнопок);
    Клавиатура.Добавить(МассивСтрокиКнопок);

    Результат = OPI_VKTeams.ОтправитьТекстовоеСообщение(Токен, IDЧата, Текст, IDЦитируемого, Клавиатура, Разметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьТекстовоеСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    IDСообщения = Результат["msgId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_MessageID", IDСообщения);
    ПараметрыФункции.Вставить("VkTeams_MessageID", IDСообщения);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьСообщение(ПараметрыФункции)

    Токен           = ПараметрыФункции["VkTeams_Token"];
    IDЧата          = ПараметрыФункции["VkTeams_ChatID"];
    IDЧатаИсточника = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения     = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ПереслатьСообщение(Токен, IDСообщения, IDЧатаИсточника, IDЧата);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Текст = "Дополнительный текст";

    Результат = OPI_VKTeams.ПереслатьСообщение(Токен, IDСообщения, IDЧатаИсточника, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ОтправитьФайл(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];
    Текст    = "Подпись к файлу";

    Файл     = ПараметрыФункции["Document"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("docx");  // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД   = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, ФайлПуть, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьФайл(Токен, IDЧата, ФайлДД, Текст, "ВажныйДокумент.docx");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьФайл", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_FileID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_FileID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьФайл(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла  = ПараметрыФункции["VkTeams_FileID"];
    Текст    = "Подпись к файлу";

    Результат = OPI_VKTeams.ПереслатьФайл(Токен, IDЧата, IDФайла, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьФайл", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ПолучитьИнформациюОФайле(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDФайла  = ПараметрыФункции["VkTeams_FileID"];

    Результат = OPI_VKTeams.ПолучитьИнформациюОФайле(Токен, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОФайле", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТФайл(Результат);

КонецПроцедуры

Процедура VKTeams_ИзменитьТекстСообщения(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];
    Текст       = "Новый текст сообщения";

    Результат = OPI_VKTeams.ИзменитьТекстСообщения(Токен, IDЧата, IDСообщения, Текст);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТекстСообщения (простое)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Текст         = "<b>Новый полужирный текст сообщения</b>";
    Разметка      = "HTML";

    Результат = OPI_VKTeams.ИзменитьТекстСообщения(Токен, IDЧата, IDСообщения, Текст, Разметка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьТекстСообщения", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_УдалитьСообщение(ПараметрыФункции)

    Токен       = ПараметрыФункции["VkTeams_Token"];
    IDЧата      = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.УдалитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ОтправитьГолосовоеСообщение(ПараметрыФункции)

    Токен         = ПараметрыФункции["VkTeams_Token"];
    IDЧата        = ПараметрыФункции["VkTeams_ChatID2"];
    IDЦитируемого = ПараметрыФункции["VkTeams_MessageID"];

    Файл     = ПараметрыФункции["Audio2"]  ;        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("m4a");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД   = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, ФайлПуть, , IDЦитируемого);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат); // SKIP

    Результат = OPI_VKTeams.ОтправитьГолосовоеСообщение(Токен, IDЧата, ФайлДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтправитьГолосовоеСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

    УдалитьФайлы(ФайлПуть);

    IDФайла = Результат["fileId"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VkTeams_VoiceID", IDФайла);
    ПараметрыФункции.Вставить("VkTeams_VoiceID", IDФайла);

    OPI_Инструменты.Пауза(5);

КонецПроцедуры

Процедура VKTeams_ПереслатьГолосовоеСообщение(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];
    IDФайла  = ПараметрыФункции["VkTeams_VoiceID"];

    Результат = OPI_VKTeams.ПереслатьГолосовоеСообщение(Токен, IDЧата, IDФайла);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПереслатьГолосовоеСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСообщение(Результат);

КонецПроцедуры

Процедура VKTeams_ИсключитьПользователейЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ИсключитьПользователейЧата(Токен, IDЧата, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИсключитьПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ИзменитьАватарЧата(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Файл     = ПараметрыФункции["Picture3"];        // URL
    ФайлПуть = ПолучитьИмяВременногоФайла("png");   // Путь

    КопироватьФайл(Файл, ФайлПуть);

    ФайлДД   = Новый ДвоичныеДанные(ФайлПуть);      // Двоичные

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, Файл);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата (URL)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, ФайлПуть);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата (Путь)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

    Результат = OPI_VKTeams.ИзменитьАватарЧата(Токен, IDЧата, ФайлДД);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАватарЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

    УдалитьФайлы(ФайлПуть);

КонецПроцедуры

Процедура VKTeams_ПолучитьИнформациюОЧате(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьИнформациюОЧате(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОЧате", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЧат(Результат);

КонецПроцедуры

Процедура VKTeams_ПолучитьАдминистраторовЧата(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьАдминистраторовЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьАдминистраторовЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "admins");

КонецПроцедуры

Процедура VKTeams_ПолучитьПользователейЧата(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьПользователейЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "members");

КонецПроцедуры

Процедура VKTeams_ПолучитьЗаблокированныхПользователейЧата(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьЗаблокированныхПользователейЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаблокированныхПользователейЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура VKTeams_ПолучитьЗапросыВступленияЧата(ПараметрыФункции)

    Токен    = ПараметрыФункции["VkTeams_Token"];
    IDЧата   = ПараметрыФункции["VkTeams_ChatID"];

    Результат = OPI_VKTeams.ПолучитьЗапросыВступленияЧата(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗапросыВступленияЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТСписок(Результат, "users");

КонецПроцедуры

Процедура VKTeams_ЗаблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ЗаблокироватьПользователяЧата(Токен, IDЧата, Пользователь, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗаблокироватьПользователяЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_РазблокироватьПользователяЧата(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.РазблокироватьПользователяЧата(Токен, IDЧата, Пользователь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазблокироватьПользователяЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ЗакрепитьСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения  = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ЗакрепитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗакрепитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОткрепитьСообщение(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    IDСообщения  = ПараметрыФункции["VkTeams_MessageID"];

    Результат = OPI_VKTeams.ОткрепитьСообщение(Токен, IDЧата, IDСообщения);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОткрепитьСообщение", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОдобритьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ОдобритьЗаявкуНаВступление(Токен, IDЧата, Пользователь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОдобритьЗаявкуНаВступление (один)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат); // SKIP

    Результат = OPI_VKTeams.ОдобритьЗаявкуНаВступление(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОдобритьЗаявкуНаВступление", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура VKTeams_ОтклонитьЗаявкуНаВступление(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDЧата       = ПараметрыФункции["VkTeams_ChatID2"];
    Пользователь = 1011987091;

    Результат = OPI_VKTeams.ОтклонитьЗаявкуНаВступление(Токен, IDЧата, Пользователь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗаявкуНаВступление (один)", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат); // SKIP

    Результат = OPI_VKTeams.ОтклонитьЗаявкуНаВступление(Токен, IDЧата);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтклонитьЗаявкуНаВступление", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТЗаявки(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьЗаголовокЧата(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID2"];
    Текст   = "Новый заголовок";

    Результат = OPI_VKTeams.УстановитьЗаголовокЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьЗаголовокЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьОписаниеЧата(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID2"];
    Текст   = "Новое описание";

    Результат = OPI_VKTeams.УстановитьОписаниеЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьОписаниеЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_УстановитьПравилаЧата(ПараметрыФункции)

    Токен   = ПараметрыФункции["VkTeams_Token"];
    IDЧата  = ПараметрыФункции["VkTeams_ChatID2"];
    Текст   = "Текст новых правил";

    Результат = OPI_VKTeams.УстановитьПравилаЧата(Токен, IDЧата, Текст);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьПравилаЧата", "VkTeams");

    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат);

КонецПроцедуры

Процедура VKTeams_ОтветитьНаСобытиеКлавиатуры(ПараметрыФункции)

    Токен        = ПараметрыФункции["VkTeams_Token"];
    IDПоследнего = 0;

    Для Н = 1 По 5 Цикл

        Результат = OPI_VKTeams.ПолучитьСобытия(Токен, IDПоследнего, 3);
        События   = Результат["events"];

        Если Не События.Количество() = 0 Тогда

            Для Каждого Событие Из События Цикл

                ДанныеСобытия = Событие["payload"];

                Если ДанныеСобытия["callbackData"] = "НажатиеКнопки1" Тогда

                    IDСобытия = ДанныеСобытия["queryId"];
                    Результат = OPI_VKTeams.ОтветитьНаСобытиеКлавиатуры(Токен, IDСобытия, "Получено!");

                    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОтветитьНаСобытиеКлавиатуры", "VkTeams");

                    OPI_ПолучениеДанныхТестов.Проверка_ВКТИстина(Результат); // SKIP

                КонецЕсли;

            КонецЦикла;

            IDПоследнего = События[События.ВГраница()]["eventId"];

        КонецЕсли;

    КонецЦикла;

    // END

    OPI_Инструменты.Пауза(3);

КонецПроцедуры

Процедура VKTeams_СформироватьКнопкуДействия(ПараметрыФункции)

    Клавиатура         = Новый Массив;
    МассивСтрокиКнопок = Новый Массив;

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка1", "НажатиеКнопки1", , "attention"));

    МассивСтрокиКнопок.Добавить(OPI_VKTeams.СформироватьКнопкуДействия("Кнопка2", , "https://openintegrations.dev"));

    Клавиатура.Добавить(МассивСтрокиКнопок);
    Клавиатура.Добавить(МассивСтрокиКнопок);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Клавиатура, "СформироватьКнопкуДействия", "VkTeams");

КонецПроцедуры

#КонецОбласти

#Область Ozon

Процедура Ozon_ПолучитьДеревоКатегорийИТиповТоваров(ПараметрыФункции)

    IDКлиента    = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI      = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьДеревоКатегорийИТиповТоваров(IDКлиента, КлючAPI, "EN");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДеревоКатегорийИТиповТоваров (EN)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат); // SKIP

    Результат = OPI_Ozon.ПолучитьДеревоКатегорийИТиповТоваров(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДеревоКатегорийИТиповТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокКатегорий(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьХарактеристикиКатегории(ПараметрыФункции)

    IDКлиента      = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI        = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории    = 17029016;
    IDТипа         = 970778135;

    Результат = OPI_Ozon.ПолучитьХарактеристикиКатегории(IDКлиента, КлючAPI, IDКатегории, IDТипа);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьХарактеристикиКатегории", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокХарактеристик(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;

    Результат = OPI_Ozon.ПолучитьЗначенияХарактеристики(IDКлиента, КлючAPI, IDКатегории, IDТипа, IDХарактеристики);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗначенияХарактеристики", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура Ozon_НайтиЗначенияХарактеристики(ПараметрыФункции)

    IDКлиента        = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI          = ПараметрыФункции["Ozon_ApiKey"];
    IDКатегории      = 17054869;
    IDТипа           = 97311;
    IDХарактеристики = 85;
    Значение         = "Sunshine";

    Результат = OPI_Ozon.НайтиЗначенияХарактеристики(IDКлиента
        , КлючAPI
        , IDКатегории
        , IDТипа
        , IDХарактеристики
        , Значение);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "НайтиЗначенияХарактеристики", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонСписокЗначенийХарактеристики(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_СоздатьОбновитьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];
    Видео     = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    МассивКартинок = Новый Массив;
    МассивКартинок.Добавить(Картинка1);
    МассивКартинок.Добавить(Картинка2);

    // Стандартные реквизиты

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210609");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1300");
    СтруктураТовара.Вставить("old_price"              , "1300");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");
    СтруктураТовара.Вставить("images"                 , МассивКартинок);

    // Видео

    OPI_Ozon.ДобавитьВидеоТовара(СтруктураТовара, Видео, "viedo1");

    // Атрибуты, индивидуальные для разных категорий

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050  , "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576    , "серый");
    АтрибутКатегории4 = Новый Структура("dictionary_value_id,value", 95911    , "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    АтрибутКатегории5 = Новый Структура("value", "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 10096, 0, АтрибутКатегории3);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 8229 , 0, АтрибутКатегории4);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 9048 , 0, АтрибутКатегории5);

    Результат = OPI_Ozon.СоздатьОбновитьТовары(IDКлиента, КлючAPI, СтруктураТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОбновитьТовары", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадания = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_TaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_TaskID", IDЗадания);

    СтруктураТовара.Вставить("offer_id", "1432106010");
    OPI_Ozon.СоздатьОбновитьТовары(IDКлиента, КлючAPI, СтруктураТовара);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура Ozon_ДобавитьВидеоТовара(ПараметрыФункции)

    Видео     = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видео

    OPI_Ozon.ДобавитьВидеоТовара(СтруктураТовара, Видео, "viedo1");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДобавитьВидеоТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ДобавитьВидеообложкуТовара(ПараметрыФункции)

    Видео     = "https://rutube.ru/video/c6cc4d620b1d4338901770a44b3e82f4/";

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    // Видеообложка

    OPI_Ozon.ДобавитьВидеообложкуТовара(СтруктураТовара, Видео);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДобавитьВидеообложкуТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ДополнитьКомплексныйАтрибут(ПараметрыФункции)

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("description_category_id", 17028922);
    СтруктураТовара.Вставить("name"                   , "Комплект защитных плёнок для X3 NFC. Темный хлопок");
    СтруктураТовара.Вставить("offer_id"               , "143210608");
    СтруктураТовара.Вставить("barcode"                , "112772873170");
    СтруктураТовара.Вставить("price"                  , "1000");
    СтруктураТовара.Вставить("old_price"              , "1100");
    СтруктураТовара.Вставить("vat"                    , "0.1");
    СтруктураТовара.Вставить("height"                 , 250);
    СтруктураТовара.Вставить("width"                  , 150);
    СтруктураТовара.Вставить("depth"                  , 10);
    СтруктураТовара.Вставить("dimension_unit"         , "mm");
    СтруктураТовара.Вставить("weight"                 , 100);
    СтруктураТовара.Вставить("weight_unit"            , "g");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");

    АтрибутКатегории2 = Новый Структура("value", "Комплект защитных плёнок для X3 NFC. Темный хлопок");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураТовара, 9048 , 0, АтрибутКатегории2);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(СтруктураТовара, "ДополнитьКомплексныйАтрибут", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(СтруктураТовара);

КонецПроцедуры

Процедура Ozon_ПолучитьСтатусДобавленияТовара(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи   = ПараметрыФункции["Ozon_TaskID"];

    Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара", "Ozon");

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура Ozon_СоздатьТоварыПоOzonID(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураТовара = Новый Структура;
    СтруктураТовара.Вставить("name"         , "Новый импортированный товар");
    СтруктураТовара.Вставить("sku"          , 1626044001);
    СтруктураТовара.Вставить("offer_id"     , "91132");
    СтруктураТовара.Вставить("price"        , "1100");
    СтруктураТовара.Вставить("old_price"    , "1100");
    СтруктураТовара.Вставить("vat"          , "0.1");
    СтруктураТовара.Вставить("currency_code", "RUB");

    Результат = OPI_Ozon.СоздатьТоварыПоOzonID(IDКлиента, КлючAPI, СтруктураТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьТоварыПоOzonID", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    IDЗадачи = Результат["result"]["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_SkuTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_SkuTaskID", IDЗадачи);

    Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара (SKU)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСокращеннуюСтруктуруТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСокращеннуюСтруктуруТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСокращеннуюСтруктуруТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруОбновленияХарактеристик(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруОбновленияХарактеристик();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруОбновленияХарактеристик", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьХарактеристикиТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    СтруктураХаракетристик = Новый Структура("offer_id", "143210609");

    АтрибутКатегории1 = Новый Структура("dictionary_value_id,value", 971082156, "Стойка для акустической системы");
    АтрибутКатегории2 = Новый Структура("dictionary_value_id,value", 5060050  , "Samsung");
    АтрибутКатегории3 = Новый Структура("dictionary_value_id,value", 61576    , "красный");

    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 5076 , 0, АтрибутКатегории1);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 85   , 0, АтрибутКатегории2);
    OPI_Ozon.ДополнитьКомплексныйАтрибут(СтруктураХаракетристик, 10096, 0, АтрибутКатегории3);

    Результат = OPI_Ozon.ОбновитьХарактеристикиТоваров(IDКлиента, КлючAPI, СтруктураХаракетристик);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьХарактеристикиТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат, Ложь);

    IDЗадачи = Результат["task_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_AttUpdateTaskID", IDЗадачи);
    ПараметрыФункции.Вставить("Ozon_AttUpdateTaskID", IDЗадачи);

    Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    Пока Результат["result"]["items"][0]["status"] = "pending" Цикл

        OPI_Инструменты.Пауза(30);
        Результат  = OPI_Ozon.ПолучитьСтатусДобавленияТовара(IDКлиента, КлючAPI, IDЗадачи);

    КонецЦикла;

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияТовара (хар.)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонНовыеТовары(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруФильтраТоваров(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруФильтраТоваров();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруФильтраТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility"   , "ALL");
    Фильтр.Вставить("offer_id"     , МассивID);

    Результат = OPI_Ozon.ПолучитьСписокТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбъектов(Результат);

    IDТовара = Результат["result"]["items"][0]["product_id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_ProductID", IDТовара);
    ПараметрыФункции.Вставить("Ozon_ProductID", IDТовара);

КонецПроцедуры

Процедура Ozon_ПолучитьОписанияХарактеристикТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210609");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility", "ALL");
    Фильтр.Вставить("offer_id"  , МассивID);

    Результат = OPI_Ozon.ПолучитьОписанияХарактеристикТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписанияХарактеристикТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКонтентРейтингТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    SKU        = 1626044001;

    Результат = OPI_Ozon.ПолучитьКонтентРейтингТоваров(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКонтентРейтингТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивРейтингов(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьИнформациюОТоварах(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    Артикул    = "143210609";

    Результат = OPI_Ozon.ПолучитьИнформациюОТоварах(IDКлиента, КлючAPI, , , Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОТоварах", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовары(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьОписаниеТовара(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    Артикул    = "143210609";

    Результат = OPI_Ozon.ПолучитьОписаниеТовара(IDКлиента, КлючAPI, , Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонТовар(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьЛимитыРаботыСТоварами(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьЛимитыРаботыСТоварами(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЛимитыРаботыСТоварами", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонЛимиты(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьИзображенияТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Картинка1 = ПараметрыФункции["Picture"];
    Картинка2 = ПараметрыФункции["Picture2"];

    МаркетинговыйЦвет = "GREEN";

    МассивИзображений = Новый Массив;
    МассивИзображений.Добавить(Картинка1);
    МассивИзображений.Добавить(Картинка2);

    Результат = OPI_Ozon.ОбновитьИзображенияТовара(IDКлиента
        , КлючAPI
        , IDТовара
        , МассивИзображений
        ,
        , МаркетинговыйЦвет);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьИзображенияТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонКартинки(Результат);

КонецПроцедуры

Процедура Ozon_ПроверитьЗагрузкуИзображенийТоваров(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.ПроверитьЗагрузкуИзображенийТоваров(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьЗагрузкуИзображенийТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонКартинки(Результат);

КонецПроцедуры

Процедура Ozon_ИзменитьАртикулыТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210609", "143210612");

    Результат = OPI_Ozon.ИзменитьАртикулыТоваров(IDКлиента, КлючAPI, СоответствиеАртикулов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАртикулыТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

    СоответствиеАртикулов = Новый Соответствие;
    СоответствиеАртикулов.Вставить("143210612", "143210609");

    Результат = OPI_Ozon.ИзменитьАртикулыТоваров(IDКлиента, КлючAPI, СоответствиеАртикулов);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьАртикулыТоваров (обратный)", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура Ozon_АрхивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьТовары", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура Ozon_РазархивироватьТовары(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.РазархивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "РазархивироватьТовары", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонИстина(Результат);

КонецПроцедуры

Процедура Ozon_УдалитьТоварыБезSKU(ПараметрыФункции)

    OPI_Инструменты.Пауза(30);

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.АрхивироватьТовары(IDКлиента, КлючAPI, IDТовара);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "АрхивироватьТовары (для удаления)", "Ozon");  // SKIP
    OPI_Инструменты.Пауза(15);                                                                      // SKIP

    Артикул   = "143210609";

    Результат = OPI_Ozon.УдалитьТоварыБезSKU(IDКлиента, КлючAPI, Артикул);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьТоварыБезSKU", "Ozon");

КонецПроцедуры

Процедура Ozon_ЗагрузитьКодыАктивацииТовара(ПараметрыФункции)

    IDКлиента = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI   = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара  = ПараметрыФункции["Ozon_ProductID"];

    Коды = Новый Массив;
    Коды.Добавить("11111111");
    Коды.Добавить("22222222");

    Результат = OPI_Ozon.ЗагрузитьКодыАктивацииТовара(IDКлиента, КлючAPI, IDТовара, Коды);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьКодыАктивацииТовара", "Ozon");

    // OPI_ПолучениеДанныхТестов.Проверка_ОзонЗаданиеЗагрузки(Результат);

    // IDЗадания = Результат["result"]["task_id"];

    IDЗадания = 1;
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Ozon_CodesTaskID", IDЗадания);
    ПараметрыФункции.Вставить("Ozon_CodesTaskID", IDЗадания);

    OPI_Инструменты.Пауза(120);

КонецПроцедуры

Процедура Ozon_ПолучитьСтатусДобавленияКодов(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    IDЗадачи   = ПараметрыФункции["Ozon_CodesTaskID"];

    Результат  = OPI_Ozon.ПолучитьСтатусДобавленияКодов(IDКлиента, КлючAPI, IDЗадачи);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусДобавленияКодов", "Ozon");

    Если ЗначениеЗаполнено(Результат["result"]) Тогда
        Пока Результат["result"]["status"] = "pending" Цикл

            OPI_Инструменты.Пауза(30);
            Результат  = OPI_Ozon.ПолучитьСтатусДобавленияКодов(IDКлиента, КлючAPI, IDЗадачи);

        КонецЦикла;
    КонецЕсли;

    //OPI_ПолучениеДанныхТестов.Проверка_ОзонДобавлениеКодов(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКоличествоПодписчиковТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    SKU        = 1626044001;

    Результат = OPI_Ozon.ПолучитьКоличествоПодписчиковТоваров(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКоличествоПодписчиковТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонПодписчики(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСвязанныеSKU(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    SKU        = 1626044001;

    Результат = OPI_Ozon.ПолучитьСвязанныеSKU(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСвязанныеSKU", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонSKU(Результат);

КонецПроцедуры

Процедура Ozon_ПривязатьШтрихкоды(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    СоответствиеШтрихкодов = Новый Соответствие;
    СоответствиеШтрихкодов.Вставить(1626044001, "112233");

    Результат = OPI_Ozon.ПривязатьШтрихкоды(IDКлиента, КлючAPI, СоответствиеШтрихкодов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПривязатьШтрихкоды", "Ozon");

КонецПроцедуры

Процедура Ozon_СоздатьШтрихкоды(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара   = ПараметрыФункции["Ozon_ProductID"];

    Результат = OPI_Ozon.СоздатьШтрихкоды(IDКлиента, КлючAPI, IDТовара);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьШтрихкоды", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонБезОшибок(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСписокСкладов(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьСписокСкладов(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСкладов", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    МассивID = Новый Массив;
    МассивID.Добавить("143210608");

    Фильтр = Новый Структура;
    Фильтр.Вставить("visibility"   , "ALL");
    Фильтр.Вставить("offer_id"     , МассивID);

    Результат = OPI_Ozon.ПолучитьКоличествоТоваров(IDКлиента, КлючAPI, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКоличествоТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбъектов(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьЦеныТоваров(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара      = ПараметрыФункции["Ozon_ProductID"];

    Цены = Новый Структура;
    Цены.Вставить("auto_action_enabled"   , "DISABLED");
    Цены.Вставить("currency_code"         , "RUB");
    Цены.Вставить("min_price"             , "1300");
    Цены.Вставить("offer_id"              , "143210610");
    Цены.Вставить("old_price"             , "1400");
    Цены.Вставить("price"                 , "1300");
    Цены.Вставить("price_strategy_enabled", "DISABLED");
    Цены.Вставить("product_id"            , IDТовара);

    Результат = OPI_Ozon.ОбновитьЦеныТоваров(IDКлиента, КлючAPI, Цены);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьЦеныТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбновлено(Результат);

КонецПроцедуры

Процедура Ozon_ОбновитьКоличествоТоваров(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара      = ПараметрыФункции["Ozon_ProductID"];

    Остатки = Новый Структура;
    Остатки.Вставить("offer_id"    , "143210610");
    Остатки.Вставить("product_id"  , IDТовара);
    Остатки.Вставить("stock"       , 20);
    Остатки.Вставить("warehouse_id", 1);

    Результат = OPI_Ozon.ОбновитьКоличествоТоваров(IDКлиента, КлючAPI, Остатки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОбновитьКоличествоТоваров", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьЦеныТоваров(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьЦеныТоваров(IDКлиента, КлючAPI, Новый Структура);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЦеныТоваров", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассивОбъектов(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьИнформациюОбУценке(ПараметрыФункции)

    IDКлиента  = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI    = ПараметрыФункции["Ozon_ApiKey"];
    SKU        = 1626044001;

    Результат = OPI_Ozon.ПолучитьИнформациюОбУценке(IDКлиента, КлючAPI, SKU);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьИнформациюОбУценке", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат, "items");

КонецПроцедуры

Процедура Ozon_УстановитьСкидкуНаУцененныйТовар(ПараметрыФункции)

    IDКлиента    = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI      = ПараметрыФункции["Ozon_ApiKey"];
    IDТовара     = 1156646653;

    Скидка = 10;

    Результат = OPI_Ozon.УстановитьСкидкуНаУцененныйТовар(IDКлиента, КлючAPI, IDТовара, Скидка);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьСкидкуНаУцененныйТовар", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьСписокАкций(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];

    Результат = OPI_Ozon.ПолучитьСписокАкций(IDКлиента, КлючAPI);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокАкций", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_ОзонМассив(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьДоступныеТоварыАкции(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции       = 111111111;

    Результат = OPI_Ozon.ПолучитьДоступныеТоварыАкции(IDКлиента, КлючAPI, IDАкции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоступныеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьУчаствующиеТоварыАкции(ПараметрыФункции)

    IDКлиента     = ПараметрыФункции["Ozon_ClientID"];
    КлючAPI       = ПараметрыФункции["Ozon_ApiKey"];
    IDАкции       = 111111111;

    Результат = OPI_Ozon.ПолучитьУчаствующиеТоварыАкции(IDКлиента, КлючAPI, IDАкции);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьУчаствующиеТоварыАкции", "Ozon");

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруОстатковТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруОстатковТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруОстатковТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура Ozon_ПолучитьСтруктуруЦеныТовара(ПараметрыФункции)

    Результат = OPI_Ozon.ПолучитьСтруктуруЦеныТовара();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруЦеныТовара", "Ozon");

    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

#КонецОбласти

#Область Neocities

Процедура Neocities_ЗагрузитьФайл(ПараметрыФункции)

    Токен  = ПараметрыФункции["NC_Token"];
    Данные = ПараметрыФункции["Picture"]; // URL, Путь или Двоичные данные
    Путь   = "testfolder/test_pic.png";

    Результат = OPI_Neocities.ЗагрузитьФайл(Токен, Путь, Данные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайл", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ЗагрузитьФайлы(ПараметрыФункции)

    Токен     = ПараметрыФункции["NC_Token"];

    Картинка1 = ПараметрыФункции["Picture"];  // URL, Путь или Двоичные данные
    Картинка2 = ПараметрыФункции["Picture2"]; // URL, Путь или Двоичные данные
    Гифка     = ПараметрыФункции["Gif"];      // URL, Путь или Двоичные данные

    СоответствиеФайлов = Новый Соответствие;
    СоответствиеФайлов.Вставить("test/pic1.png", Картинка1);
    СоответствиеФайлов.Вставить("test/gif.gif" , Картинка2);
    СоответствиеФайлов.Вставить("pic2.png"     , Гифка);

    Результат = OPI_Neocities.ЗагрузитьФайлы(Токен, СоответствиеФайлов);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗагрузитьФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_УдалитьВыбранныеФайлы(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    Пути = Новый Массив;
    Пути.Добавить("/test/pic1.png");
    Пути.Добавить("/test/gif.gif");
    Пути.Добавить("/pic2.png");

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, Пути);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/testfolder");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы (каталог 1)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

    Результат = OPI_Neocities.УдалитьВыбранныеФайлы(Токен, "/test");

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьВыбранныеФайлы (каталог 2)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьСписокФайлов(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Путь  = "test";

    Результат = OPI_Neocities.ПолучитьСписокФайлов(Токен, Путь);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов", "Neocities"); // SKIP

    OPI_ПолучениеДанныхТестов.Проверка_НСФайлыКаталога(Результат, 2); // SKIP

    Результат = OPI_Neocities.ПолучитьСписокФайлов(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокФайлов (Все)");

    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьДанныеОСайте(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];
    Сайт  = "2athenaeum";

    Результат = OPI_Neocities.ПолучитьДанныеОСайте(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеОСайте", "Neocities"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат); // SKIP

    Результат = OPI_Neocities.ПолучитьДанныеОСайте(Токен, Сайт);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДанныеОСайте (Сайт)");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_ПолучитьТокен(ПараметрыФункции)

    Логин  = ПараметрыФункции["NC_Login"];
    Пароль = ПараметрыФункции["NC_Password"];

    Результат = OPI_Neocities.ПолучитьТокен(Логин, Пароль);

    // END

    Результат["api_key"] = "***";

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НСУспех(Результат);

КонецПроцедуры

Процедура Neocities_СинхронизироватьКаталоги(ПараметрыФункции)

    Токен = ПараметрыФункции["NC_Token"];

    ЛокальныйКаталог  = "C:\test_site";
    УдаленныйКаталог  = "test_sync";

    Результат = OPI_Neocities.СинхронизироватьКаталоги(Токен, ЛокальныйКаталог, УдаленныйКаталог);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СинхронизироватьКаталоги", "Neocities");
    OPI_ПолучениеДанныхТестов.Проверка_НССинхронизация(Результат);

КонецПроцедуры

#КонецОбласти

#Область CDEK

Процедура CDEK_ПолучитьТокен(ПараметрыФункции)

    Аккаунт = ПараметрыФункции["CDEK_Account"];
    Пароль  = ПараметрыФункции["CDEK_Password"];

    Результат = OPI_CDEK.ПолучитьТокен(Аккаунт, Пароль, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьТокен", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкТокен(Результат);

    Токен = Результат["access_token"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_Token", Токен);
    OPI_Инструменты.ДобавитьПоле("CDEK_Token", Токен, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеЗаказа(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеЗаказа();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеЗаказа(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    ОписаниеЗаказа = Новый Структура;

        ЛокацияОтправления = Новый Структура;
        ЛокацияОтправления.Вставить("code"   , "44");
        ЛокацияОтправления.Вставить("city"   , "Москва");
        ЛокацияОтправления.Вставить("address", "пр. Ленинградский, д.4");

        ЛокацияНазначения = Новый Структура;
        ЛокацияНазначения.Вставить("code"   , "270");
        ЛокацияНазначения.Вставить("city"   , "Новосибирск");
        ЛокацияНазначения.Вставить("address", "ул. Блюхера, 32");

        Получатель = Новый Структура;

            Телефоны = Новый Массив;
            Телефоны.Добавить(Новый Структура("number", "+79134637228"));

        Получатель.Вставить("phones", Телефоны);
        Получатель.Вставить("name"  , "Иванов Иван");

        Отправитель = Новый Структура("name", "Петров Петр");

        Услуги = Новый Массив;

            Услуга = Новый Структура;
            Услуга.Вставить("code"     , "SECURE_PACKAGE_A2");
            Услуга.Вставить("parameter", 10);

        Услуги.Добавить(Услуга);

        Пакеты = Новый Массив;

            Пакет = Новый Структура;

                Позиции = Новый Массив;

                    Позиция = Новый Структура;

                        Оплата = Новый Структура;
                        Оплата.Вставить("value", 3000);

                    Позиция.Вставить("payment" , Оплата);
                    Позиция.Вставить("ware_key", "00055");
                    Позиция.Вставить("name"    , "Товар");
                    Позиция.Вставить("cost"    , 300);
                    Позиция.Вставить("amount"  , 2);
                    Позиция.Вставить("weight"  , 700);
                    Позиция.Вставить("url"     , "www.item.ru");

                Позиции.Добавить(Позиция);

            Пакет.Вставить("items"  , Позиции);
            Пакет.Вставить("number" , "bar-001");
            Пакет.Вставить("comment", "Упаковка");
            Пакет.Вставить("height" , 10);
            Пакет.Вставить("length" , 10);
            Пакет.Вставить("weight" , "4000");
            Пакет.Вставить("width"  , 10);

        Пакеты.Добавить(Пакет);

    ОписаниеЗаказа.Вставить("from_location", ЛокацияОтправления);
    ОписаниеЗаказа.Вставить("to_location"  , ЛокацияНазначения);
    ОписаниеЗаказа.Вставить("packages"     , Пакеты);
    ОписаниеЗаказа.Вставить("recipient"    , Получатель);
    ОписаниеЗаказа.Вставить("sender"       , Отправитель);
    ОписаниеЗаказа.Вставить("services"     , Услуги);

    ОписаниеЗаказа.Вставить("number"     , Строка(Новый УникальныйИдентификатор));
    ОписаниеЗаказа.Вставить("comment"    , "Новый заказ");
    ОписаниеЗаказа.Вставить("tariff_code", 139);

    ОписаниеЗаказа.Вставить("delivery_recipient_cost"    , Новый Структура("value"        , 50));
    ОписаниеЗаказа.Вставить("delivery_recipient_cost_adv", Новый Структура("sum,threshold", 3000, 200));

    Результат = OPI_CDEK.СоздатьЗаказ(Токен, ОписаниеЗаказа, Истина, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьЗаказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

    ВнутреннийНомер = Результат["entity"]["number"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_OrderIMN", ВнутреннийНомер);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderIMN", ВнутреннийНомер, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаказПоНомеру(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];

    НомерЗаказа = ПараметрыФункции["CDEK_OrderIMN"];
    Результат   = OPI_CDEK.ПолучитьЗаказПоНомеру(Токен, НомерЗаказа, Истина, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаказПоНомеру", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкДанныеЗаказа(Результат);

КонецПроцедуры

Процедура CDEK_ИзменитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    ОписаниеЗаказа = Новый Структура("comment", "Новый комментарий");

    Результат = OPI_CDEK.ИзменитьЗаказ(Токен, UUID, ОписаниеЗаказа, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_УдалитьЗаказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.УдалитьЗаказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ОформитьКлиентскийВозврат(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тариф = 139;

    Результат = OPI_CDEK.ОформитьКлиентскийВозврат(Токен, UUID, Тариф, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ОформитьКлиентскийВозврат", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьОтказ(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.СоздатьОтказ(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьОтказ", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеЗаявкиКурьера(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеЗаявкиКурьера();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаявкиКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеЗаявкиКурьера(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеЗаказа (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен       = ПараметрыФункции["CDEK_Token"];
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату();

    ОписаниеЗаявки = Новый Структура;
    ОписаниеЗаявки.Вставить("intake_date"     , Формат(ТекущаяДата + 60 * 60 * 24, "ДФ=yyyy-MM-dd"));
    ОписаниеЗаявки.Вставить("intake_time_from", "10:00");
    ОписаниеЗаявки.Вставить("intake_time_to"  , "17:00");
    ОписаниеЗаявки.Вставить("name"            , "Консолидированный груз");
    ОписаниеЗаявки.Вставить("weight"          , 1000);
    ОписаниеЗаявки.Вставить("length"          , 10);
    ОписаниеЗаявки.Вставить("width"           , 10);
    ОписаниеЗаявки.Вставить("height"          , 10);
    ОписаниеЗаявки.Вставить("comment"         , "Комментарий курьеру");
    ОписаниеЗаявки.Вставить("need_call"       , Ложь);

        Отправитель = Новый Структура;
        Отправитель.Вставить("company", "Компания");
        Отправитель.Вставить("name"   , "Иванов Иван");

            Телефоны = Новый Массив;
            Телефон  = Новый Структура("number", "+79589441654");
            Телефоны.Добавить(Телефон);

        Отправитель.Вставить("phones", Телефоны);

    ОписаниеЗаявки.Вставить("sender", Отправитель);

        ТочкаОтправления = Новый Структура;
        ТочкаОтправления.Вставить("code"        , "44");
        ТочкаОтправления.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
        ТочкаОтправления.Вставить("postal_code" , "109004");
        ТочкаОтправления.Вставить("longitude"   , 37.6204);
        ТочкаОтправления.Вставить("latitude"    , 55.754);
        ТочкаОтправления.Вставить("country_code", "RU");
        ТочкаОтправления.Вставить("region"      , "Москва");
        ТочкаОтправления.Вставить("sub_region"  , "Москва");
        ТочкаОтправления.Вставить("city"        , "Москва");
        ТочкаОтправления.Вставить("kladr_code"  , "7700000000000");
        ТочкаОтправления.Вставить("address"     , "ул. Блюхера, 32");

    ОписаниеЗаявки.Вставить("from_location", ТочкаОтправления);

    Результат = OPI_CDEK.СоздатьЗаявкуНаВызовКурьера(Токен, ОписаниеЗаявки, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_IntakeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_IntakeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Результат = OPI_CDEK.ПолучитьЗаявкуНаВызовКурьера(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_УдалитьЗаявкуНаВызовКурьера(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_IntakeUUID"];

    Результат = OPI_CDEK.УдалитьЗаявкуНаВызовКурьера(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьЗаявкуНаВызовКурьера", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_СформироватьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];
    Тип   = "tpl_russia";
    Копий = 1;

    Результат = OPI_CDEK.СформироватьКвитанцию(Токен, UUID, Тип, Копий, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьКвитанцию", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrintUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrintUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьКвитанцию(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrintUUID"];

    Результат = OPI_CDEK.ПолучитьКвитанцию(Токен, UUID, , Истина); // Ответ сервера с ссылкой

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКвитанцию", "CDEK"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);                   // SKIP

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Результат = OPI_CDEK.ПолучитьКвитанцию(Токен, UUID, Истина, Истина); // PDF
    Результат.Записать(ИВФ);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьКвитанцию (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CDEK_СформироватьШтрихкод(ПараметрыФункции)

    Токен  = ПараметрыФункции["CDEK_Token"];
    UUID   = ПараметрыФункции["CDEK_OrderUUID"];
    Формат = "A5";
    Копий  = 1;

    Результат = OPI_CDEK.СформироватьШтрихкод(Токен, UUID, Копий, Формат, , Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СформироватьШтрихкод", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_BarcodeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_BarcodeUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьШтрихкод(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_BarcodeUUID"];

    Результат = OPI_CDEK.ПолучитьШтрихкод(Токен, UUID, , Истина); // Ответ сервера с ссылкой

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШтрихкод", "CDEK"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_СдэкКвитанция(Результат);                  // SKIP

    ИВФ = ПолучитьИмяВременногоФайла("pdf");

    Результат = OPI_CDEK.ПолучитьШтрихкод(Токен, UUID, Истина, Истина); // PDF
    Результат.Записать(ИВФ);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШтрихкод (файл)");
    OPI_ПолучениеДанныхТестов.Проверка_ДвоичныеДанные(Результат, 0);
    УдалитьФайлы(ИВФ);

КонецПроцедуры

Процедура CDEK_ПолучитьДоступныеИнтервалыДоставки(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьДоступныеИнтервалыДоставки(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоступныеИнтервалыДоставки", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкИнтервалыДоставки(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеДоговоренности(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеДоговоренности();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеДоговоренности", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеДоговоренности(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеДоговоренности (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_ЗафиксироватьДоговоренностьОДоставке(ПараметрыФункции)

    Токен       = ПараметрыФункции["CDEK_Token"];
    UUIDЗаказа  = ПараметрыФункции["CDEK_OrderUUID"];

    Сутки        = 60 * 60 * 24;
    ТекущаяДата  = НачалоДня(OPI_Инструменты.ПолучитьТекущуюДату());
    ДатаДоставки = ТекущаяДата + Сутки * 14;

    Пока ДеньНедели(ДатаДоставки) > 5 Цикл
        ДатаДоставки = ДатаДоставки + Сутки;
    КонецЦикла;

    Договоренность = Новый Структура;

    Договоренность.Вставить("cdek_number", "1106207236");
    Договоренность.Вставить("order_uuid" , UUIDЗаказа);
    Договоренность.Вставить("date"       , Формат(ДатаДоставки, "ДФ=yyyy-MM-dd"));
    Договоренность.Вставить("time_from"  , "10:00");
    Договоренность.Вставить("time_to"    , "17:00");
    Договоренность.Вставить("comment"    , "Офис группы компаний");

        МестоДоставки = Новый Структура;
        МестоДоставки.Вставить("code"        , "270");
        МестоДоставки.Вставить("fias_guid"   , "0c5b2444-70a0-4932-980c-b4dc0d3f02b5");
        МестоДоставки.Вставить("postal_code" , "109004");
        МестоДоставки.Вставить("longitude"   , 37.6204);
        МестоДоставки.Вставить("latitude"    , 55.754);
        МестоДоставки.Вставить("country_code", "RU");
        МестоДоставки.Вставить("region"      , "Новосибирск");
        МестоДоставки.Вставить("sub_region"  , "Новосибирск");
        МестоДоставки.Вставить("city"        , "Новосибирск");
        МестоДоставки.Вставить("kladr_code"  , "7700000000000");
        МестоДоставки.Вставить("address"     , "ул. Блюхера, 33");

    Договоренность.Вставить("to_location", МестоДоставки);

    Результат = OPI_CDEK.ЗафиксироватьДоговоренностьОДоставке(Токен, Договоренность, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ЗафиксироватьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_ApptUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_ApptUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьДоговоренностьОДоставке(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_ApptUUID"];

    Результат = OPI_CDEK.ПолучитьДоговоренностьОДоставке(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьДоговоренностьОДоставке", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_СоздатьПреалерт(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    UUID          = ПараметрыФункции["CDEK_OrderUUID"];
    ПВЗ           = "NSK27";
    ДатаПередачи  = OPI_Инструменты.ПолучитьТекущуюДату() + 60 * 60 * 24;

    Результат = OPI_CDEK.СоздатьПреалерт(Токен, UUID, ДатаПередачи, ПВЗ, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

    UUID = Результат["entity"]["uuid"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("CDEK_PrealertUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrealertUUID", UUID, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура CDEK_ПолучитьПреалерт(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_PrealertUUID"];

    Результат = OPI_CDEK.ПолучитьПреалерт(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПреалерт", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкЗаказ(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьСтатусПаспортныхДанных(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьСтатусПаспортныхДанных(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтатусПаспортныхДанных", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_СдэкПаспорт(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьЧекЗаказа(ПараметрыФункции)

    Токен = ПараметрыФункции["CDEK_Token"];
    UUID  = ПараметрыФункции["CDEK_OrderUUID"];

    Результат = OPI_CDEK.ПолучитьЧекЗаказа(Токен, UUID, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧекЗаказа", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьЧекиНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьЧекиНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьЧекиНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьРеестрыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьРеестрыПлатежейНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьРеестрыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьПереводыПлатежейНаДату(ПараметрыФункции)

    Токен         = ПараметрыФункции["CDEK_Token"];
    ДатаПолучения = OPI_Инструменты.ПолучитьТекущуюДату();

    Результат = OPI_CDEK.ПолучитьПереводыПлатежейНаДату(Токен, ДатаПолучения, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьПереводыПлатежейНаДату", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат, Ложь);

КонецПроцедуры

Процедура CDEK_ПолучитьОписаниеФильтраОфисов(ПараметрыФункции)

    Результат = OPI_CDEK.ПолучитьОписаниеФильтраОфисов();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФильтраОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

    Результат = OPI_CDEK.ПолучитьОписаниеФильтраОфисов(Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьОписаниеФильтраОфисов (Пустая)", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура CDEK_ПолучитьСписокОфисов(ПараметрыФункции)

    Токен     = ПараметрыФункции["CDEK_Token"];
    Фильтр    = Новый Структура;
    Фильтр.Вставить("weight_max" , 50);
    Фильтр.Вставить("city_code"  , 270);
    Фильтр.Вставить("allowed_cod", Истина);

    Результат = OPI_CDEK.ПолучитьСписокОфисов(Токен, Фильтр, Истина);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокОфисов", "CDEK");
    OPI_ПолучениеДанныхТестов.Проверка_Массив(Результат);

КонецПроцедуры

#КонецОбласти

#Область YandexMetrika

Процедура YandexMetrika_ПолучитьСписокМеток(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    Результат = OPI_YandexMetrika.ПолучитьСписокМеток(Токен);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокМеток", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетки(Результат);

КонецПроцедуры

Процедура YandexMetrika_СоздатьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    Наименование = "Новая метка";

    Результат = OPI_YandexMetrika.СоздатьМетку(Токен, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);

    IDМетки = Результат["label"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_LabelID", IDМетки);
    OPI_Инструменты.ДобавитьПоле("Metrika_LabelID", IDМетки, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура YandexMetrika_УдалитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Результат = OPI_YandexMetrika.УдалитьМетку(Токен, IDМетки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ИзменитьМетку(ПараметрыФункции)

    Токен        = ПараметрыФункции["Metrika_Token"];
    IDМетки      = ПараметрыФункции["Metrika_LabelID"];
    Наименование = "Новое имя метки";

    Результат = OPI_YandexMetrika.ИзменитьМетку(Токен, IDМетки, Наименование);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат, Наименование);


КонецПроцедуры

Процедура YandexMetrika_ПолучитьМетку(ПараметрыФункции)

    Токен   = ПараметрыФункции["Metrika_Token"];
    IDМетки = ПараметрыФункции["Metrika_LabelID"];

    Результат = OPI_YandexMetrika.ПолучитьМетку(Токен, IDМетки);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьМетку", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаМетка(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСтруктуруСчетчика(ПараметрыФункции)

    Результат = OPI_YandexMetrika.ПолучитьСтруктуруСчетчика();

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСтруктуруСчетчика", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_Структура(Результат);

КонецПроцедуры

Процедура YandexMetrika_СоздатьСчетчик(ПараметрыФункции)

    Токен = ПараметрыФункции["Metrika_Token"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

        СтруктураНастроекКода = Новый Структура;
        СтруктураНастроекКода.Вставить("async"          , 0);
        СтруктураНастроекКода.Вставить("clickmap"       , 1);
        СтруктураНастроекКода.Вставить("ecommerce"      , 1);
        СтруктураНастроекКода.Вставить("in_one_line"    , 0);
        СтруктураНастроекКода.Вставить("track_hash"     , 1);
        СтруктураНастроекКода.Вставить("visor"          , 1);
        СтруктураНастроекКода.Вставить("xml_site"       , 0);
        СтруктураНастроекКода.Вставить("ytm"            , 0);
        СтруктураНастроекКода.Вставить("alternative_cdn", 1);

            СтруктураИнформера = Новый Структура;
            СтруктураИнформера.Вставить("color_arrow", 1);
            СтруктураИнформера.Вставить("color_end"  , "EFEFEFFE");
            СтруктураИнформера.Вставить("color_start", "EEEEEEEE");
            СтруктураИнформера.Вставить("color_text" , 0);
            СтруктураИнформера.Вставить("enabled"    , 1);
            СтруктураИнформера.Вставить("indicator"  , "uniques");
            СтруктураИнформера.Вставить("size"       , 2);
            СтруктураИнформера.Вставить("type"       , "ext");

        СтруктураНастроекКода.Вставить("informer", СтруктураИнформера);

    СтруктураСчетчика.Вставить("code_options", СтруктураНастроекКода);

        СтруктураФлагов = Новый Структура;
        СтруктураФлагов.Вставить("collect_first_party_data"             , Истина);
        СтруктураФлагов.Вставить("measurement_enabled"                  , Истина);
        СтруктураФлагов.Вставить("use_in_benchmarks"                    , Истина);
        СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Истина);

    СтруктураСчетчика.Вставить("counter_flags"          , СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"               , 1);
    СтруктураСчетчика.Вставить("filter_robots"          , 2);
    СтруктураСчетчика.Вставить("gdpr_agreement_accepted", 1);

        СтруктураДомена = Новый Структура("site", "openintegrations.dev");

    СтруктураСчетчика.Вставить("site2", СтруктураДомена);

    Результат = OPI_YandexMetrika.СоздатьСчетчик(Токен, СтруктураСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

    IDСчетчика = Результат["counter"]["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Metrika_CounterID", IDСчетчика);
    OPI_Инструменты.ДобавитьПоле("Metrika_CounterID", IDСчетчика, "Строка", ПараметрыФункции);

КонецПроцедуры

Процедура YandexMetrika_УдалитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.УдалитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ИзменитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    СтруктураСчетчика = Новый Структура;
    СтруктураСчетчика.Вставить("autogoals_enabled", Истина);

        СтруктураФлагов = Новый Структура;
        СтруктураФлагов.Вставить("collect_first_party_data"             , Ложь);
        СтруктураФлагов.Вставить("measurement_enabled"                  , Ложь);
        СтруктураФлагов.Вставить("use_in_benchmarks"                    , Ложь);
        СтруктураФлагов.Вставить("direct_allow_use_goals_without_access", Ложь);

    СтруктураСчетчика.Вставить("counter_flags"          , СтруктураФлагов);
    СтруктураСчетчика.Вставить("favorite"               , 0);
    СтруктураСчетчика.Вставить("filter_robots"          , 1);


    Результат = OPI_YandexMetrika.ИзменитьСчетчик(Токен, IDСчетчика, СтруктураСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ИзменитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ПолучитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчик(Результат);

КонецПроцедуры

Процедура YandexMetrika_ВосстановитьСчетчик(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ВосстановитьСчетчик(Токен, IDСчетчика);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ВосстановитьСчетчик", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаУспех(Результат);

КонецПроцедуры

Процедура YandexMetrika_ПолучитьСписокСчетчиков(ПараметрыФункции)

    Токен      = ПараметрыФункции["Metrika_Token"];
    IDСчетчика = ПараметрыФункции["Metrika_CounterID"];

    Результат = OPI_YandexMetrika.ПолучитьСписокСчетчиков(Токен);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСчетчиков", "YandexMetrika"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);                                // SKIP

    // Фильтр по списку ID

    Фильтр = Новый Структура;

    МассивСчетчиков = Новый Массив;
    МассивСчетчиков.Добавить(IDСчетчика);

    Фильтр.Вставить("counter_ids", МассивСчетчиков);

    Результат = OPI_YandexMetrika.ПолучитьСписокСчетчиков(Токен, Фильтр);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокСчетчиков (фильтр)", "YandexMetrika");
    OPI_ПолучениеДанныхТестов.Проверка_МетрикаСчетчики(Результат);

КонецПроцедуры

#КонецОбласти

#Область S3

Процедура S3_СоздатьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Наименование = "opi-dirbucket3";

    Результат = OPI_S3.СоздатьБакет(Наименование, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                       // SKIP
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);                  // SKIP

    // General purpose bucket

    Наименование = "opi-gpbucket3";

    Результат = OPI_S3.СоздатьБакет(Наименование, ОсновныеДанные, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "СоздатьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_УдалитьБакет(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    // Directory bucket

    Имя = "opi-dirbucket3";

    Результат = OPI_S3.УдалитьБакет(Имя, ОсновныеДанные);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБакет (DB)", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                       // SKIP
    ОсновныеДанные.Вставить("URL", ПараметрыФункции["S3_URL"]);                  // SKIP

    // General purpose bucket

    Имя = "opi-gpbucket3";

    Результат = OPI_S3.УдалитьБакет(Имя, ОсновныеДанные, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УдалитьБакет", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПолучитьСписокБакетов(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Результат = OPI_S3.ПолучитьСписокБакетов(ОсновныеДанные);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьСписокБакетов", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);

КонецПроцедуры

Процедура S3_ПроверитьДоступностьБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);
    Наименование   = "opi-dirbucket3";

    Результат = OPI_S3.ПроверитьДоступностьБакета(Наименование, ОсновныеДанные, Истина);

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступностьБакета", "S3"); // SKIP
    OPI_ПолучениеДанныхТестов.Проверка_S3Успех(Результат);                                // SKIP

    Результат = OPI_S3.ПроверитьДоступностьБакета(Наименование, ОсновныеДанные, Истина, "1234");

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПроверитьДоступностьБакета (аккаунт)", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3НеНайдено(Результат);

КонецПроцедуры

Процедура S3_ПолучитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Имя = "opi-newbucket2";

    Результат = OPI_S3.ПолучитьШифрованиеБакета(Имя, ОсновныеДанные, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "ПолучитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_Соответствие(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "ПолучитьШифрованиеБакета", "S3");

КонецПроцедуры

Процедура S3_УстановитьШифрованиеБакета(ПараметрыФункции)

    URL       = ПараметрыФункции["S3_URL"];
    AccessKey = ПараметрыФункции["S3_AccessKey"];
    SecretKey = ПараметрыФункции["S3_SecretKey"];
    Region    = "BTC";

    ОсновныеДанные = OPI_S3.ПолучитьСтруктуруДанных(URL, AccessKey, SecretKey, Region);

    Имя = "opi-newbucket2";

    XMLКонфигурация = "<ServerSideEncryptionConfiguration xmlns=""http://s3.amazonaws.com/doc/2006-03-01/"">
    |    <Rule>
    |        <ApplyServerSideEncryptionByDefault>
    |            <SSEAlgorithm>AES256</SSEAlgorithm>
    |        </ApplyServerSideEncryptionByDefault>
    |    </Rule>
    |</ServerSideEncryptionConfiguration>";

    Результат = OPI_S3.УстановитьШифрованиеБакета(Имя, ОсновныеДанные, XMLКонфигурация, Ложь);

    // END

    OPI_ПолучениеДанныхТестов.ЗаписатьЛог(Результат, "УстановитьШифрованиеБакета", "S3");
    OPI_ПолучениеДанныхТестов.Проверка_S3НеПоддерживается(Результат);
    OPI_ПолучениеДанныхТестов.ЗаписатьФайлЛога("", "УстановитьШифрованиеБакета", "S3");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
