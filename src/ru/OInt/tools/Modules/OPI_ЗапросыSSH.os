// OneScript: ./OInt/tools/Modules/OPI_ЗапросыSSH.os

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:NumberOfOptionalParams-off
// BSLLS:UsingServiceTag-off
// BSLLS:LineLength-off
// BSLLS:QueryParseError-off
// BSLLS:AssignAliasFieldsInQuery-off
// BSLLS:NumberOfParams-off
// BSLLS:UsingSynchronousCalls-off
// BSLLS:MagicNumber-off

//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check wrong-string-literal-content
//@skip-check method-too-many-params
//@skip-check constructor-function-return-section

// Раскомментировать, если выполняется OneScript
#Использовать "./internal"

#Область СлужебныйПрограммныйИнтерфейс

Функция ОткрытьСоединение(Знач НастройкиSSH, Знач Прокси = "") Экспорт

    Result_ = "result";

    Если ЭтоКоннектор(НастройкиSSH) Тогда
        Возврат НастройкиSSH;
    КонецЕсли;

    Коннектор = OPI_Компоненты.ПолучитьКомпоненту("SSH");

    УстановкаКонфигурации = УстановитьНастройки(Коннектор, НастройкиSSH);

    Если Не OPI_Инструменты.ПолучитьИли(УстановкаКонфигурации, Result_, Ложь) Тогда
        Возврат УстановкаКонфигурации;
    КонецЕсли;

    УстановкаПрокси = УстановитьПрокси(Коннектор, Прокси);

     Если Не OPI_Инструменты.ПолучитьИли(УстановкаПрокси, Result_, Ложь) Тогда
        Возврат УстановкаПрокси;
    КонецЕсли;

    Результат = Коннектор.Connect();
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат ?(Результат[Result_], Коннектор, Результат);

КонецФункции

Функция ПолучитьКонфигурациюСоединения(Знач НастройкиSSH, Знач Прокси = Неопределено) Экспорт

    СтруктураКонфигурации = Новый Структура;

    OPI_Инструменты.ДобавитьПоле("set"  , НастройкиSSH, "Коллекция", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("proxy", Прокси      , "Коллекция", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

Функция ВыполнитьКоманду(Знач Соединение, Знач Команда) Экспорт

    ЗакрыватьСоединение = ПроверитьСоздатьСоединение(Соединение);

    Если Не ЭтоКоннектор(Соединение) Тогда
        Возврат Соединение;
    Иначе

        OPI_ПреобразованиеТипов.ПолучитьСтроку(Команда);

        Результат = Соединение.Execute(Команда);
        Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

        Вывод = Результат["stdout"];

        Если Вывод <> Неопределено Тогда
            Если СтрЗаканчиваетсяНа(Вывод, Символы.ПС) Тогда
                Результат["stdout"] = Лев(Вывод, СтрДлина(Вывод) - 1);
            КонецЕсли;
        КонецЕсли;

    КонецЕсли;

    Если ЗакрыватьСоединение Тогда
        Результат.Вставить("close_connection", ЗакрытьСоединение(Соединение));
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция ЗакрытьСоединение(Знач Соединение) Экспорт

    ПроверитьСоздатьСоединение(Соединение);

    Если Не ЭтоКоннектор(Соединение) Тогда
        Возврат Соединение;
    КонецЕсли;

    Результат = Соединение.Disconnect();
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    //@skip-check constructor-function-return-section
    Возврат Результат;

КонецФункции

Функция ЭтоКоннектор(Знач Значение) Экспорт

    Возврат Строка(ТипЗнч(Значение)) = "AddIn.OPI_SSH.Main";

КонецФункции

Функция ПолучитьНастройкиЛогинПароль(Знач Хост, Знач Порт, Знач Логин, Знач Пароль = "") Экспорт

    Строка_ = "Строка";

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("auth_type", "password", Строка_ , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("host"     , Хост      , Строка_ , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"     , Порт      , "Число" , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username" , Логин     , Строка_ , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("password" , Пароль    , Строка_ , СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

Функция ПолучитьНастройкиПриватныйКлюч(Знач Хост
    , Знач Порт
    , Знач Логин
    , Знач Приватный
    , Знач Публичный = ""
    , Знач Пароль    = "") Экспорт

    Строка_ = "Строка";

    OPI_ПреобразованиеТипов.ПолучитьФайлНаДиске(Приватный);
    Приватный_ = Приватный.Путь;

    Если ЗначениеЗаполнено(Публичный) Тогда
        OPI_ПреобразованиеТипов.ПолучитьФайлНаДиске(Публичный);
        Публичный_ = Публичный.Путь;
    Иначе
        Публичный_ = Неопределено;
    КонецЕсли;

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("auth_type" , "private_key"     , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("host"      , Хост              , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"      , Порт              , "Число", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username"  , Логин             , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("key_path"  , Приватный_        , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("pub_path"  , Публичный_        , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("passphrase", Пароль            , Строка_, СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

Функция ПолучитьНастройкиЧерезАгента(Знач Хост, Знач Порт, Знач Логин) Экспорт

    Строка_ = "Строка";

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("auth_type" , "agent", Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("host"      , Хост   , Строка_, СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"      , Порт   , "Число", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username"  , Логин  , Строка_, СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

Функция ПолучитьНастройкиПрокси(Знач Адрес
    , Знач Порт
    , Знач Вид    = "socks5"
    , Знач Логин  = Неопределено
    , Знач Пароль = Неопределено) Экспорт

    //@skip-check constructor-function-return-section
    Возврат OPI_Компоненты.ПолучитьНастройкиПрокси(Адрес, Порт, Вид, Логин, Пароль);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьСоздатьСоединение(Соединение)

    Если Не ЭтоКоннектор(Соединение) Тогда

        ЗакрыватьСоединение = Истина;
        Соединение          = ОткрытьСоединениеПоКонфигурации(Соединение);

    Иначе
        ЗакрыватьСоединение = Ложь;
    КонецЕсли;

    Возврат ЗакрыватьСоединение;

КонецФункции

Функция ОткрытьСоединениеПоКонфигурации(Знач СтруктураКонфигурации)

    Если ЭтоКоннектор(СтруктураКонфигурации) Тогда
        Возврат СтруктураКонфигурации;
    КонецЕсли;

    ШаблонОшибки = "Передана некорректная конфигурация соединения: %1";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураКонфигурации);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
        Возврат Результат;

    КонецПопытки;

    Если Не OPI_Инструменты.ПолеКоллекцииСуществует(СтруктураКонфигурации, "set") Тогда

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, "отсутствуют основные параметры соединения"));
        Возврат Результат;

    КонецЕсли;

    НастройкиSSH = СтруктураКонфигурации["set"];
    Прокси       = OPI_Инструменты.ПолучитьИли(СтруктураКонфигурации, "proxy", Неопределено);

    Возврат ОткрытьСоединение(НастройкиSSH, Прокси);

КонецФункции

Функция УстановитьНастройки(Знач Коннектор, Знач НастройкиSSH)

    ШаблонОшибки = "Передана некорректная конфигурация соединения: %1";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(НастройкиSSH);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
        Возврат Результат;

    КонецПопытки;

    СтрокаНастроек = OPI_Инструменты.JSONСтрокой(НастройкиSSH);

    Результат = Коннектор.SetSettings(СтрокаНастроек);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

Функция УстановитьПрокси(Знач Коннектор, Знач Прокси)

    Если Не ЗначениеЗаполнено(Прокси) Тогда
        Возврат Новый Структура("result", Истина);
    КонецЕсли;

    ШаблонОшибки = "Передана некорректная конфигурация прокси: %1";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Прокси);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
        Возврат Результат;

    КонецПопытки;

    СтрокаПрокси = OPI_Инструменты.JSONСтрокой(Прокси);

    Результат = Коннектор.SetProxy(СтрокаПрокси);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

#КонецОбласти
