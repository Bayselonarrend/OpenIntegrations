// OneScript: ./OInt/tools/Modules/OPI_ПолучениеДанныхТестов.os

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingHardcodePath-off
// BSLLS:Typo-off
// BSLLS:DeprecatedMessage-off
// BSLLS:UsingServiceTag-off
// BSLLS:ExecuteExternalCodeInCommonModule-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off
// BSLLS:UsingHardcodeNetworkAddress-off
// BSLLS:UsingSynchronousCalls-off
// BSLLS:UnusedLocalMethod-off
// BSLLS:MissingTemporaryFileDeletion-off
// BSLLS:MethodSize-off
// BSLLS:IfElseIfEndsWithElse-off

//@skip-check use-non-recommended-method
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content
//@skip-check module-unused-method

// Раскомментировать, если выполняется OneScript
#Использовать "./internal"
#Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

Функция ВыполнитьТестCLI(Знач Библиотека, Знач Метод, Знач Опции, Знач Записывать = Истина) Экспорт

    Если OPI_Инструменты.ЭтоWindows() Тогда

        Если OPI_Инструменты.ЭтоOneScript() Тогда
            Oint = """C:\Program Files (x86)\OInt\bin\oint.bat""";
        Иначе
            Oint = """C:\Program Files\OneScript\bin\oint.bat""";
        КонецЕсли;

    Иначе

        Oint = "oint";

    КонецЕсли;

    ФайлРезультата = ПолучитьИмяВременногоФайла();

    СтрокаЗапуска = Oint + " " + Библиотека + " " + Метод;
    ДопОпции      = Новый Структура;
    ОпцииЗаписи   = Новый Структура;

    Для Каждого Опция Из Опции Цикл

        Если Опция.Значение = Неопределено Или Строка(Опция.Значение) = "" Тогда
            Продолжить;
        КонецЕсли;

        ТекущееЗначение = ПолучитьЗначениеДляCLI(Опция.Значение, , ДопОпции);

        СтрокаЗапуска = СтрокаЗапуска
            + " --"
            + Опция.Ключ
            + " "
            + ТекущееЗначение;

        ОпцииЗаписи.Вставить(Опция.Ключ, ТекущееЗначение);

    КонецЦикла;

    Для Каждого ДопОпция Из ДопОпции Цикл

        ТекущееЗначение = ПолучитьЗначениеДляCLI(ДопОпция.Значение);

        СтрокаЗапуска = СтрокаЗапуска
            + " --"
            + ДопОпция.Ключ
            + " "
            + ТекущееЗначение;

        ОпцииЗаписи.Вставить(ДопОпция.Ключ, ТекущееЗначение);

    КонецЦикла;

    // BSLLS:ExternalAppStarting-off
    ЗапуститьПриложение(СтрокаЗапуска + " --out """ + ФайлРезультата + """ --debug" , , Истина);
    // BSLLS:ExternalAppStarting-on

    Результат = ПрочестьРезультатCLI(ФайлРезультата);

    Если Записывать Тогда
        ЗаписатьВызовCLI(Библиотека, Метод, ОпцииЗаписи);
    КонецЕсли;

    Попытка
        УдалитьФайлы(ФайлРезультата);
    Исключение
        Сообщить("Не удалось удалить временный файл после теста!");
    КонецПопытки;

    Возврат Результат;

КонецФункции

Функция ПолучитьСоответствиеРазделовТестирования() Экспорт

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , 5);
    Разделы.Вставить("VK"             , 5);
    Разделы.Вставить("Viber"          , 5);
    Разделы.Вставить("Twitter"        , 4);
    Разделы.Вставить("FTP"            , 5);
    Разделы.Вставить("PostgreSQL"     , 5);
    Разделы.Вставить("MySQL"          , 5);
    Разделы.Вставить("MSSQL"          , 5);
    Разделы.Вставить("SQLite"         , 5);
    Разделы.Вставить("RCON"           , 5);
    Разделы.Вставить("YandexDisk"     , 5);
    Разделы.Вставить("GoogleWorkspace", 2);
    Разделы.Вставить("GoogleCalendar" , 5);
    Разделы.Вставить("GoogleDrive"    , 5);
    Разделы.Вставить("GoogleSheets"   , 5);
    Разделы.Вставить("Notion"         , 5);
    Разделы.Вставить("Slack"          , 5);
    Разделы.Вставить("Airtable"       , 5);
    Разделы.Вставить("Dropbox"        , 5);
    Разделы.Вставить("Bitrix24"       , 5);
    Разделы.Вставить("VkTeams"        , 5);
    Разделы.Вставить("Ozon"           , 5);
    Разделы.Вставить("Neocities"      , 5);
    Разделы.Вставить("CDEK"           , 5);
    Разделы.Вставить("YandexMetrika"  , 5);
    Разделы.Вставить("S3"             , 5);
    Разделы.Вставить("TCP"            , 5);
    Разделы.Вставить("GreenAPI"       , 5);
    Разделы.Вставить("Ollama"         , 5);
    Разделы.Вставить("HTTPКлиент"     , 5);
    Разделы.Вставить("OpenAI"         , 5);
    Разделы.Вставить("ReportPortal"   , 5);

    Возврат Разделы;

КонецФункции

Функция ПолучитьСоответствиеРазделовТестированияGA() Экспорт

    СтандартныеЗависимости = "[Decode, Build]";
    ЗависимостиГугл        = "Testing-GoogleWorkspace";

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , СтандартныеЗависимости);
    Разделы.Вставить("VK"             , СтандартныеЗависимости);
    Разделы.Вставить("Viber"          , СтандартныеЗависимости);
    Разделы.Вставить("Twitter"        , СтандартныеЗависимости);
    Разделы.Вставить("FTP"            , СтандартныеЗависимости);
    Разделы.Вставить("PostgreSQL"     , СтандартныеЗависимости);
    Разделы.Вставить("MySQL"          , СтандартныеЗависимости);
    Разделы.Вставить("MSSQL"          , СтандартныеЗависимости);
    Разделы.Вставить("SQLite"         , СтандартныеЗависимости);
    Разделы.Вставить("RCON"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexDisk"     , СтандартныеЗависимости);
    Разделы.Вставить("GoogleWorkspace", СтандартныеЗависимости);
    Разделы.Вставить("GoogleCalendar" , ЗависимостиГугл);
    Разделы.Вставить("GoogleDrive"    , ЗависимостиГугл);
    Разделы.Вставить("GoogleSheets"   , ЗависимостиГугл);
    Разделы.Вставить("Notion"         , СтандартныеЗависимости);
    Разделы.Вставить("Slack"          , СтандартныеЗависимости);
    Разделы.Вставить("Airtable"       , СтандартныеЗависимости);
    Разделы.Вставить("Dropbox"        , СтандартныеЗависимости);
    Разделы.Вставить("Bitrix24"       , СтандартныеЗависимости);
    Разделы.Вставить("VkTeams"        , СтандартныеЗависимости);
    Разделы.Вставить("Ozon"           , СтандартныеЗависимости);
    Разделы.Вставить("Neocities"      , СтандартныеЗависимости);
    Разделы.Вставить("CDEK"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexMetrika"  , СтандартныеЗависимости);
    Разделы.Вставить("S3"             , СтандартныеЗависимости);
    Разделы.Вставить("TCP"            , СтандартныеЗависимости);
    Разделы.Вставить("GreenAPI"       , СтандартныеЗависимости);
    Разделы.Вставить("Ollama"         , СтандартныеЗависимости);
    Разделы.Вставить("HTTPКлиент"     , СтандартныеЗависимости);
    Разделы.Вставить("OpenAI"         , СтандартныеЗависимости);
    Разделы.Вставить("ReportPortal"   , СтандартныеЗависимости);

    Возврат Разделы;

КонецФункции

Функция ПолучитьТаблицуТестов() Экспорт

    Телеграм  = "Telegram";
    ВКонтакте = "VK";
    ЯДиск     = "YandexDisk";
    Календарь = "GoogleCalendar";
    Твиттер   = "Twitter";
    Вайбер    = "Viber";
    Драйв     = "GoogleDrive";
    ВСпейс    = "GoogleWorkspace";
    Ноушн     = "Notion";
    Слак      = "Slack";
    Таблицы   = "GoogleSheets";
    АирТ      = "Airtable";
    ДропБокс  = "Dropbox";
    Битрикс   = "Bitrix24";
    ВКТ       = "VkTeams";
    Озон      = "Ozon";
    Неоситиз  = "Neocities";
    Сдэк      = "CDEK";
    Метрика   = "YandexMetrika";
    S3_       = "S3";
    TCP       = "TCP";
    SQLite    = "SQLite";
    Postgres  = "PostgreSQL";
    GreenAPI  = "GreenAPI";
    RCON      = "RCON";
    MySQL     = "MySQL";
    Ollama    = "Ollama";
    Http      = "HTTPКлиент";
    OpenAI    = "OpenAI";
    MSSQL     = "MSSQL";
    FTP       = "FTP";
    RPortal   = "ReportPortal";

    ТаблицаТестов = Новый ТаблицаЗначений;
    ТаблицаТестов.Колонки.Добавить("Метод");
    ТаблицаТестов.Колонки.Добавить("Синоним");
    ТаблицаТестов.Колонки.Добавить("Раздел");

    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьИнформациюБота"      , "Получить информацию бота"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьОбновления"          , "Получить обновления"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_УстановитьWebhook"           , "Установить Webhook"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьТекстовоеСообщение" , "Отправить текстовое сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКартинку"           , "Отправить картинку"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьВидео"              , "Отправить видео"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьАудио"              , "Отправить аудио"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьДокумент"           , "Отправить документ"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьГифку"              , "Отправить гифку"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМедиагруппу"        , "Отправить медиагруппу"          , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМестоположение"     , "Отправить местоположение"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКонтакт"            , "Отправить контакт"              , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьОпрос"              , "Отправить опрос"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПереслатьСообщение"          , "Переслать сообщение"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_БанРазбан"                   , "Бан/Разбан"                     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьСсылкуПриглашение"    , "Создать ссылку-приглашение"     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ЗакрепитьОткрепитьСообщение" , "Закрепить/Открепить сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьЧислоУчастников"     , "Получить число участников"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьСписокАватаровФорума", "Получить список аватаров форума", Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьУдалитьТемуФорума"    , "Создать/Удалить тему форума"    , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ИзменитьИмяГлавнойТемы"      , "Изменить имя главной темы"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СкрытьПоказатьГлавнуюТему"   , "Скрыть/Показать главную тему"   , Телеграм);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСсылкуТокена"               , "Создать ссылку получения токена", ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьУдалитьПост"                , "Создать/Удалить пост"           , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСоставнойПост"              , "Создать/Удалить составной пост" , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьОпрос"                      , "Создать опрос"                  , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СохранитьУдалитьКартинку"          , "Добавить/Удалить картинку"      , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьИсторию"                    , "Создать историю"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_МетодыОбсуждений"                  , "Действия с обсуждениями"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЛайкРепостКоммент"                 , "Лайк/Репост/Комментарий"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистику"                , "Получить статистику"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистикуПостов"          , "Получить статистику постов"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьРекламнуюКампанию"          , "Создать рекламную кампанию"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ОтправитьСообщение"                , "Отправить сообщение"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьКатегорииТоваров"          , "Получить категории товаров"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварПодборку"              , "Создать товар и подборку"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварСоСвойствами"          , "Создать товар со свойствами"    , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокТоваров"             , "Получить список товаров"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокПодборок"            , "Получить список подборок"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокСвойств"             , "Получить список свойств"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокЗаказов"             , "Получить список заказов"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЗагрузитьВидео"                    , "Загрузить видео"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьИнформациюОДиске"       , "Получить информацию о диске"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьПапку"                   , "Создать папку"                  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект", "Загрузить по URL и получить"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьУдалитьФайл"           , "Загрузить/Удалить файл"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьКопиюОбъекта"            , "Создать копию объекта"          , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСсылкуНаСкачивание"     , "Получить ссылку на скачивание"  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокФайлов"           , "Получить список файлов"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПереместитьОбъект"              , "Переместить объект"             , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ДействияПубличныхОбъектов"      , "Действия с публичными объектами", ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокОпубликованных"   , "Получить список опубликованных" , ЯДиск);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , ВСпейс);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_ПолучитьСписокКалендарей"          , "Получить список календарей"     , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьКалендарь"           , "Создать/Удалить календарь"      , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьСобытие"             , "Создать/Удалить событие"        , Календарь);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ПолучитьСписокКаталогов"           , "Получить список каталогов"      , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ЗагрузитьУдалитьФайл"              , "Загрузить/Удалить Файл"         , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьУдалитьКомментарий"         , "Создать/Удалить кооментарий"    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьКаталог"                    , "Создать/Удалить каталог"        , Драйв);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_СоздатьТаблицу"                    , "Создать таблицу"                , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_ЗаполнитьОчиститьЯчейки"           , "Заполнить/Очистить ячейки"      , Таблицы);
    НовыйТест(ТаблицаТестов, "Твиттер_ДанныеАккаунта"               , "Данные аккаунта"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Твиттер_Твиты"                        , "Создание твитов"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Вайбер_ПолучениеИнформации"           , "Получение информации"           , Вайбер);
    НовыйТест(ТаблицаТестов, "Вайбер_ОтправкаСообщений"             , "Отправка сообщений"             , Вайбер);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьСтраницу"             , "Создать страницу"               , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьИзменитьБазу"         , "Создать/Изменить базу"          , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьУдалитьБлок"          , "Создать/Удалить блок"           , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_ПолучитьПользователей"       , "Получить пользователей"         , Ноушн);
    НовыйТест(ТаблицаТестов, "Слак_ПолучитьИнформацию"              , "Получить информацию"            , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОтправитьУдалитьСообщение"       , "Отправить/Удалить сообщение"    , Слак);
    НовыйТест(ТаблицаТестов, "Слак_СоздатьАрхивироватьКанал"        , "Создать/Архивировать канал"     , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОткрытьЗакрытьДиалог"            , "Открыть/Закрыть диалог"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьФайл"            , "Загрузить/Удалить файл"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьВФ"              , "Загрузить/Удалить внеш. файл"   , Слак);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьБазу"                       , "Создать/Изменить базу"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьТаблицу"                    , "Создать/Изменить таблицу"       , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьПоле"                       , "Создать/Изменить поле"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьУдалитьЗаписи"              , "Создать/Удалить записи"         , АирТ);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьОбновитьТокен"       , "Получить/Обновить токен"        , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайл"               , "Загрузить файл"                 , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайлПоURL"          , "Загрузить файл по URL"          , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьКаталог"              , "Создать каталог"                , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьУдалитьТег"           , "Создать/Удалить тег"            , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьАккаунт"             , "Получить данные аккаунта"       , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_РаботаСДоступами"            , "Работа с доступами"             , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьСписокФайловПапки"   , "Получить список файлов папки"   , ДропБокс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСТокеном"                   , "Работа с токеном"               , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_СерверноеВремя"                   , "Серверное время"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСНовостями"                 , "Работа с новостями"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЗадачами"                  , "Работа с задачами"              , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКомментариями"             , "Работа с комментариями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСДиском"                    , "Работа с диском"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_Канбан"                           , "Канбан"                         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УчетРабочегоВремени"              , "Учет рабочего времени"          , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЧатами"                    , "Работа с чатами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСУведомлениями"             , "Работа с уведомлениями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСПолямиЗадач"               , "Работа с польз. полями задач"   , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПодразделениями"        , "Управление подразделениями"     , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПользователями"         , "Управление пользователями"      , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЛидами"                    , "Работа с лидами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСоСделками"                 , "Работа со сделками"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКалендарями"               , "Работа с календарями"           , Битрикс);
    НовыйТест(ТаблицаТестов, "ВКТ_ОтправкаСообщений"                , "Отправка сообщений"             , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_ОбщиеМетоды"                      , "Общие методы"                   , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_УправлениеЧатами"                 , "Управление чатами"              , ВКТ);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_АтрибутыИХарактеристики"      , "Атрибуты и характеристики"      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЗагрузкаИОбновлениеТоваров"   , "Загрузка и обновление товаров"  , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_Штрихкоды"                    , "Штрихкоды"                      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЦеныИОстаткиТоваров"          , "Цены и остатки товаров"         , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСАкциями"               , "Работа с акциями"               , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСоСкладами"             , "Работа со складами"             , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_СхемаFBO"                     , "Схема FBO"                      , Озон);
    НовыйТест(ТаблицаТестов, "НС_РаботаСФайлами"                    , "Работа с файлами"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "НС_ПолучениеДанных"                   , "Получение данных"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_ОбщиеМетоды"                  , "Общие методы"                   , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаказами"              , "Работа с заказами"              , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера", "Работа с заявками курьера"      , Сдэк);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеМетками"           , "Управление метками"             , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеСчетчиками"        , "Управление счетчиками"          , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеОперациями"        , "Управление операциями"          , Метрика);
    НовыйТест(ТаблицаТестов, "AWS_ОбщиеМетоды"                      , "Общие методы"                   , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСБакетами"                  , "Работа с бакетами"              , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСОбъектами"                 , "Работа с объектами"             , S3_);
    НовыйТест(ТаблицаТестов, "TC_Клиент"                            , "TCP Клиент"                     , TCP);
    НовыйТест(ТаблицаТестов, "SQLL_ОсновныеМетоды"                  , "Основные методы"                , SQLite);
    НовыйТест(ТаблицаТестов, "SQLL_ORM"                             , "ORM"                            , SQLite);
    НовыйТест(ТаблицаТестов, "Postgres_ОсновныеМетоды"              , "Основные методы"                , Postgres);
    НовыйТест(ТаблицаТестов, "Postgres_ORM"                         , "ORM"                            , Postgres);
    НовыйТест(ТаблицаТестов, "MYS_ОсновныеМетоды"                   , "Основные методы"                , MySQL);
    НовыйТест(ТаблицаТестов, "MYS_ORM"                              , "ORM"                            , MySQL);
    НовыйТест(ТаблицаТестов, "MSS_ОсновныеМетоды"                   , "Основные методы"                , MSSQL);
    НовыйТест(ТаблицаТестов, "MSS_ORM"                              , "ORM"                            , MSSQL);
    НовыйТест(ТаблицаТестов, "GAPI_УправлениеГруппами"              , "Управление группами"            , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОтправкаСообщений"               , "Отправка сообщений"             , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ПолучениеУведомлений"            , "Получение уведомлений"          , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОчередьСообщений"                , "Очередь сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ЖурналыСообщений"                , "Журналы сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_Аккаунт"                         , "Аккаунт"                        , GreenAPI);
    НовыйТест(ТаблицаТестов, "RC_ВыполнениеКоманд"                  , "Выполнение команд"              , RCON);
    НовыйТест(ТаблицаТестов, "OLLM_ОбработкаЗапросов"               , "Обработка запросов"             , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСМоделями"                 , "Работа с моделями"              , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСBlob"                     , "Работа с BLOB"                  , Ollama);
    НовыйТест(ТаблицаТестов, "HTTP_Инициализация"                   , "Инициализация"                  , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаТела"                   , "Установка тела"                 , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Настройки"                       , "Настройки"                      , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаЗаголовков"             , "Установка заголовков"           , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Авторизация"                     , "Авторизация"                    , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ОбработкаЗапроса"                , "Обработка запроса"              , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ПолучениеОтвета"                 , "Получение ответа"               , Http);
    НовыйТест(ТаблицаТестов, "OAI_ОбработкаЗапросов"                , "Обработка запросов"             , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_Ассистенты"                       , "Ассистенты"                     , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСФайлами"                   , "Работа с файлами"               , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСАудио"                     , "Работа с аудио"                 , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСМоделями"                  , "Работа с моделями"              , OpenAI);
    НовыйТест(ТаблицаТестов, "FT_РаботаСДиректориями"               , "Работа с директориями"          , FTP);
    НовыйТест(ТаблицаТестов, "FT_РаботаСФайлами"                    , "Работа с файлами"               , FTP);
    НовыйТест(ТаблицаТестов, "FT_ОсновныеМетоды"                    , "Основные методы"                , FTP);
    НовыйТест(ТаблицаТестов, "RPortal_Авторизация"                  , "Авторизация"                    , RPortal);

    Возврат ТаблицаТестов;

КонецФункции

Функция ОжидаетЧто(Значение) Экспорт

    Попытка

        Модуль  = ПолучитьОбщийМодуль("ЮТест");
        Ожидаем = ТипЗнч(Модуль) = Тип("ОбщийМодуль");
        Возврат Модуль.ОжидаетЧто(Значение);

    Исключение
        Возврат Ожидаем.Что(Значение);
    КонецПопытки;

КонецФункции

Функция СформироватьТестыЯкс() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;
        Отбор         = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела  = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор(ТекущийРаздел);

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест(Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертс() Экспорт

    ТаблицаТестов = ПолучитьТаблицуТестов();
    МассивТестов  = Новый Массив;

    Для Каждого Тест Из ТаблицаТестов Цикл
        МассивТестов.Добавить(Тест.Метод);
    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция СформироватьТестыЯксCLI() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор(ТекущийРаздел + " (CLI)");

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест(Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертсCLI() Экспорт

    МассивТестов = Новый Массив;

    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Для Каждого Тест Из ТестыРаздела Цикл
            МассивТестов.Добавить(Тест.Метод);
        КонецЦикла;

    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция ПолучитьПараметр(Параметр) Экспорт

    Путь = ПутьКФайлуДанных();
    Возврат ПолучитьЗначениеИзФайла(Параметр, Путь);

КонецФункции

Функция ПолучитьДвоичные(Параметр) Экспорт

    Путь     = ПутьКФайлуДанных();
    Значение = ПолучитьЗначениеИзФайла(Параметр, Путь);

    Если ТипЗнч(Значение) = Тип("Строка") Тогда

        Значение = ПолучитьФайлПути(Значение);

    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ПолучитьФайлПути(Знач Путь) Экспорт

    Если СтрНайти(Путь, "http") > 0 Или СтрНайти(Путь, "www") > 0 Тогда

        ИВФ      = ПолучитьИмяВременногоФайла();
        КопироватьФайл(Путь, ИВФ);
        Путь     = ИВФ;
        Двоичные = Новый ДвоичныеДанные(Путь);

        УдалитьФайлы(ИВФ);

    Иначе

        Двоичные = Новый ДвоичныеДанные(Путь);

    КонецЕсли;

    Возврат Двоичные;

КонецФункции

Функция ПолучитьLocalhost() Экспорт

    Если OPI_Инструменты.ЭтоWindows() Тогда
        Результат = "127.0.0.1";
    Иначе
        Результат = "host.docker.internal";
    КонецЕсли;

    Возврат Результат;

КонецФункции

Процедура ПараметрВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьПараметр(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ДвоичныеВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьДвоичные(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ЗаписатьПараметр(Параметр, Значение) Экспорт

    Путь = ПутьКФайлуДанных();
    ЗаписатьПараметрВФайл(Параметр, Значение, Путь);

КонецПроцедуры

Процедура ОбработатьРезультатТестирования(Знач Результат
    , Знач Метод
    , Знач Библиотека
    , Знач Вариант = ""
    , ДопПараметр1 = Неопределено
    , ДопПараметр2 = Неопределено
    , ДопПараметр3 = Неопределено) Экспорт

    // BSLLS:UnusedLocalVariable-off
    Результат_ = ?(OPI_Инструменты.ЭтоКоллекция(Результат), OPI_Инструменты.КопироватьКоллекцию(Результат), Результат);
    // BSLLS:UnusedLocalVariable-on

    ЭтоВариант = ЗначениеЗаполнено(Вариант);
    МетодЛога  = ?(ЭтоВариант, СтрШаблон("%1 (%2)", Метод, Вариант), Метод);

    IDНабора   = СоздатьНаборЗапуска(Библиотека);
    IDЭлемента = СоздатьТестовыйЭлемент(IDНабора, Библиотека, Метод, Вариант);

    Попытка

        МассивПараметров = Новый Массив;
        МассивПараметров.Добавить("Результат_");
        МассивПараметров.Добавить("Вариант");

        Если ДопПараметр1 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр1");
        КонецЕсли;

        Если ДопПараметр2 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр2");
        КонецЕсли;

        Если ДопПараметр3 <> Неопределено Тогда
            МассивПараметров.Добавить("ДопПараметр3");
        КонецЕсли;

        ШаблонПроверки = "РезультатПроверки = Проверка_%1_%2(%3)";

        ВызовПроверки     = СтрШаблон(ШаблонПроверки, Библиотека, Метод, СтрСоединить(МассивПараметров, ", "));
        РезультатПроверки = Неопределено;

        //@skip-check server-execution-safe-mode
        Выполнить(ВызовПроверки);

        Текст = ВывестиЛог(Результат, МетодЛога, Библиотека);

        Если Не ЗначениеЗаполнено(Вариант) Тогда

            РезультатСтрока = ТипЗнч(РезультатПроверки) = Тип("Строка");
            Перезаписывать  = Не ?(РезультатСтрока, РезультатПроверки = "", РезультатПроверки = Неопределено);

            Если Перезаписывать Тогда
                ЗаписатьФайлЛога(РезультатПроверки, Метод, Библиотека);
            Иначе
                ЗаписатьФайлЛога(Результат        , Метод, Библиотека, Ложь);
            КонецЕсли;

        КонецЕсли;

        ЗаписатьЛогТеста(IDЭлемента, Текст, "info");
        ЗавершитьТестовыйЭлемент(IDЭлемента, "passed");

    Исключение

        ООп   = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        Текст = ВывестиЛог(Результат, МетодЛога, Библиотека, ООп);

        ЗаписатьЛогТеста(IDЭлемента, Текст, "error");
        ЗавершитьТестовыйЭлемент(IDЭлемента, "failed");

        ВызватьИсключение ООп;

    КонецПопытки;

КонецПроцедуры

Процедура ВывестиСлужебнуюИнформацию(Знач Текст, Знач Примечание, Знач Библиотека) Экспорт

    ШаблонТекста = "
    |--!!!---------%1----------!!!--
    |
    |%2
    |
    |%3
    |
    |---------------------------------";

    Сообщить(СтрШаблон(ШаблонТекста, Библиотека, Примечание, Текст));

КонецПроцедуры

#Область ReportPortal

Функция СоздатьЗапускReportPortal(Знач Платформа = "") Экспорт

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    ЗавершитьЗапуск();

    ТекущаяДата         = ПолучитьВремяЗапуска();
    СистемнаяИнформация = Новый СистемнаяИнформация;

    ОперационнаяСистема = Строка(СистемнаяИнформация.ТипПлатформы);
    ТекущаяДатаСтрока   = Формат(ТекущаяДата, "ДФ=yyyy-MM-dd");
    UUID                = Строка(Новый УникальныйИдентификатор);
    ВерсияОПИ           = OPI_Инструменты.ВерсияОПИ();

    Если Не ЗначениеЗаполнено(Платформа) Тогда
        Платформа = ?(OPI_Инструменты.ЭтоOneScript(), "OneScript", "1C:Enterprise");
    КонецЕсли;

    ИмяЗапуска = СтрШаблон("%1 | %2 | %3 | %4", ТекущаяДатаСтрока, ВерсияОПИ, Платформа, ОперационнаяСистема);

    СтруктураЗапуска = Новый Структура;

    СтруктураЗапуска.Вставить("name"       , ИмяЗапуска);
    СтруктураЗапуска.Вставить("startTime"  , ТекущаяДата);;
    СтруктураЗапуска.Вставить("uuid"       , UUID);

    ЗаписатьПараметр("RPortal_MainLaunch", UUID);

    Результат = ReportPortal().СоздатьЗапуск(URL, Токен, Проект, СтруктураЗапуска);
    ID        = Результат["id"];

    СоздатьФайлЗапуска(ID);

    Сообщить(OPI_Инструменты.JSONСтрокой(Результат));

    Возврат ID;

КонецФункции

Функция СоздатьНаборЗапуска(Знач Наименование) Экспорт

    Данные = ПолучитьСуществующийЗапуск();

    Если Данные = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    СуществующиеНаборы = Данные["suites"];
    Существующий       = СуществующиеНаборы.Получить(Наименование);

    Если Существующий <> Неопределено Тогда
        Возврат Существующий;
    КонецЕсли;

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    ТекущаяДата    = ПолучитьВремяЗапуска();
    ПоследнийНабор = Данные["last_suite"];

    Если ЗначениеЗаполнено(ПоследнийНабор) Тогда

        СтруктураЗавершения = Новый Структура("endTime,launchUuid", ТекущаяДата, ПоследнийНабор);
        ReportPortal().ЗавершитьЭлемент(URL, Токен, Проект, ПоследнийНабор, СтруктураЗавершения);

    КонецЕсли;

    UUID = Строка(Новый УникальныйИдентификатор);

    СтруктураЭлемента = Новый Структура;
    СтруктураЭлемента.Вставить("name"       , Наименование);
    СтруктураЭлемента.Вставить("startTime"  , ТекущаяДата);
    СтруктураЭлемента.Вставить("type"       , "suite");
    СтруктураЭлемента.Вставить("launchUuid" , Данные["id"]);
    СтруктураЭлемента.Вставить("uuid"       , UUID);

    ReportPortal().СоздатьЭлемент(URL, Токен, Проект, СтруктураЭлемента);

    СуществующиеНаборы.Вставить(Наименование, UUID);

    Данные.Вставить("suites"    , СуществующиеНаборы);
    Данные.Вставить("last_suite", UUID);

    ЗаписатьФайлЗапуска(Данные);

    Возврат UUID;

КонецФункции

Функция СоздатьТестовыйЭлемент(Знач Набор, Знач Библиотека, Знач Метод, Знач Вариант) Экспорт

    Данные = ПолучитьСуществующийЗапуск();

    Если Данные = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    UUID        = Строка(Новый УникальныйИдентификатор);
    ТекущаяДата = ПолучитьВремяЗапуска();

    Если ЗначениеЗаполнено(Вариант) Тогда
        Заголовок     = СтрШаблон("%1 (%2)", Метод, Вариант);
        Идентификатор = СтрШаблон("%1_%2_%3", Библиотека, Метод, Вариант);
    Иначе
        Заголовок     = Метод;
        Идентификатор = СтрШаблон("%1_%2"   , Библиотека, Метод);
    КонецЕсли;


    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    СтруктураЭлемента = Новый Структура;

    СтруктураЭлемента.Вставить("name"       , Заголовок);
    СтруктураЭлемента.Вставить("startTime"  , ТекущаяДата);
    СтруктураЭлемента.Вставить("uuid"       , UUID);
    СтруктураЭлемента.Вставить("type"       , "step");
    СтруктураЭлемента.Вставить("launchUuid" , Данные["id"]);

    ReportPortal().СоздатьЭлемент(URL, Токен, Проект, СтруктураЭлемента, Набор);

    Данные["items"].Вставить(UUID, Идентификатор);

    ЗаписатьФайлЗапуска(Данные);

    Возврат UUID;

КонецФункции

Процедура ЗавершитьЗапуск() Экспорт

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    ТекущаяДата = ПолучитьВремяЗапуска();

    СуществующийЗапуск = ПолучитьСуществующийЗапуск();

    Если ЗначениеЗаполнено(СуществующийЗапуск) Тогда

        ПоследнийНабор = СуществующийЗапуск["last_suite"];

        Если ЗначениеЗаполнено(ПоследнийНабор) Тогда

            СтруктураЗавершения = Новый Структура("endTime,launchUuid", ТекущаяДата, ПоследнийНабор);
            ReportPortal().ЗавершитьЭлемент(URL, Токен, Проект, ПоследнийНабор, СтруктураЗавершения);

        КонецЕсли;

        ВсеТесты         = ПолучитьПолныйСписокТестов();
        ВыполненныеТесты = Новый СписокЗначений();
        ВыполненныеТесты.ЗагрузитьЗначения(ПолучитьСпискоВыполненныхТестов());

        Если ВыполненныеТесты.Количество() / ВсеТесты.Количество() > 0.8 Тогда

            Для Каждого Тест Из ВсеТесты Цикл

                Если ЗначениеЗаполнено(Тест["variant"]) Тогда
                    ИмяФункцииТеста = СтрШаблон("%1_%2_%3", Тест["lib"], Тест["name"], Тест["variant"]);
                Иначе
                    ИмяФункцииТеста = СтрШаблон("%1_%2"   , Тест["lib"], Тест["name"]);
                КонецЕсли;

                Если ВыполненныеТесты.НайтиПоЗначению(ИмяФункцииТеста) = Неопределено Тогда
                    ЗаписатьПропущенныйТест(Тест["lib"], Тест["name"], Тест["variant"]);
                КонецЕсли;

            КонецЦикла;

        КонецЕсли;

        СтруктураЗавершения = ReportPortal().ПолучитьСтруктуруЗавершенияЗапуска(ТекущаяДата);
        ReportPortal().ЗавершитьЗапуск(URL, Токен, Проект, СуществующийЗапуск["id"], СтруктураЗавершения);

        СуществующийЗапуск["ended"] = Истина;
        ЗаписатьФайлЗапуска(СуществующийЗапуск);

    КонецЕсли;

КонецПроцедуры

Функция ПолучитьСпискоВыполненныхТестов() Экспорт

    Тесты           = ПрочитатьФайлЗапуска()["tests"];
    Возврат ?(Тесты = Неопределено, Новый Массив, Тесты);

КонецФункции

Функция ПолучитьПолныйСписокТестов() Экспорт

    Язык  = OPI_Инструменты.ЯзыкОПИ();
    Тесты = СтрШаблон("https://raw.githubusercontent.com/Bayselonarrend/OpenIntegrations/refs/heads/main/service/tests_%1.json", Язык);

    OPI_ПреобразованиеТипов.ПолучитьКоллекцию(Тесты);

    Если Тесты.Количество() = 1 Или Не OPI_Инструменты.ЭтоКоллекция(Тесты[0], Истина) Тогда
        Возврат Новый Массив;
    Иначе
        Возврат Тесты;
    КонецЕсли;

КонецФункции

#КонецОбласти

#Область Параметризация

Функция ПолучитьВариантыПараметровFTP() Экспорт

    МассивВариантов = Новый Массив;

    ПараметрыТестаОсновные = Новый Структура;
    ПараметрВКоллекцию("FTP_IP"        , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_Port"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTPS_IP"       , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTPS_Port"     , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_User"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("FTP_Password"  , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_User"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_Password", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Socks5_IP"     , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Socks5_Port"   , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_IP"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Proxy_Port"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Picture"       , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Big"           , ПараметрыТестаОсновные);


    Локалхост = ПолучитьLocalhost();

    Socks5IP                            = ПараметрыТестаОсновные["Socks5_IP"];
    ПараметрыТестаОсновные["Socks5_IP"] = ?(Socks5IP = "127.0.0.1", Локалхост, Socks5IP);

    HttpProxyIP                        = ПараметрыТестаОсновные["Proxy_IP"];
    ПараметрыТестаОсновные["Proxy_IP"] = ?(HttpProxyIP = "127.0.0.1", Локалхост, HttpProxyIP);

    // FTP
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", "FTP");
    СтруктураПараметров.Вставить("FTP_IP", Локалхост);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Ложь);
    СтруктураПараметров.Вставить("TLS", Ложь);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTPS
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", "FTPS");
    СтруктураПараметров.Вставить("FTP_IP", Локалхост);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTPS_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Ложь);
    СтруктураПараметров.Вставить("TLS", Истина);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTP + Socks5
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", "FTP, Socks5");
    СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTP_IP"]);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Истина);
    СтруктураПараметров.Вставить("TLS", Ложь);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    // FTPS + Socks5
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("Postfix", ?(OPI_Инструменты.ЭтоWindows(), "FTPS, Socks5", ""));
    СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTPS_IP"]);
    СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
    СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
    СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
    СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
    СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
    СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Socks5_IP"]);
    СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Socks5_Port"]);
    СтруктураПараметров.Вставить("Proxy_Type", "socks5");
    СтруктураПараметров.Вставить("Proxy", Истина);
    СтруктураПараметров.Вставить("TLS", Истина);
    СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
    СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
    МассивВариантов.Добавить(СтруктураПараметров);

    Если OPI_Инструменты.ЭтоWindows() Тогда

        // FTP + HTTP
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Postfix", "FTP, HTTP");
        СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTP_IP"]);
        СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
        СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
        СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
        СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
        СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
        СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Proxy_IP"]);
        СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Proxy_Port"]);
        СтруктураПараметров.Вставить("Proxy_Type", "http");
        СтруктураПараметров.Вставить("Proxy", Истина);
        СтруктураПараметров.Вставить("TLS", Ложь);
        СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
        СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
        МассивВариантов.Добавить(СтруктураПараметров);

        // FTPS + HTTP
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Postfix", "");
        СтруктураПараметров.Вставить("FTP_IP", ПараметрыТестаОсновные["FTPS_IP"]);
        СтруктураПараметров.Вставить("FTP_Port", ПараметрыТестаОсновные["FTP_Port"]);
        СтруктураПараметров.Вставить("FTP_User", ПараметрыТестаОсновные["FTP_User"]);
        СтруктураПараметров.Вставить("FTP_Password", ПараметрыТестаОсновные["FTP_Password"]);
        СтруктураПараметров.Вставить("Proxy_User", ПараметрыТестаОсновные["Proxy_User"]);
        СтруктураПараметров.Вставить("Proxy_Password", ПараметрыТестаОсновные["Proxy_Password"]);
        СтруктураПараметров.Вставить("Proxy_IP", ПараметрыТестаОсновные["Proxy_IP"]);
        СтруктураПараметров.Вставить("Proxy_Port", ПараметрыТестаОсновные["Proxy_Port"]);
        СтруктураПараметров.Вставить("Proxy_Type", "http");
        СтруктураПараметров.Вставить("Proxy", Истина);
        СтруктураПараметров.Вставить("TLS", Истина);
        СтруктураПараметров.Вставить("Picture", ПараметрыТестаОсновные["Picture"]);
        СтруктураПараметров.Вставить("Big", ПараметрыТестаОсновные["Big"]);
        МассивВариантов.Добавить(СтруктураПараметров);

    КонецЕсли;

    Возврат МассивВариантов;

КонецФункции

Функция ПолучитьВариантыПараметровS3() Экспорт

    МассивВариантов = Новый Массив;

    ПараметрыТестаОсновные = Новый Структура;
    ПараметрВКоллекцию("S3_AccessKey", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("S3_SecretKey", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("S3_URL"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Picture"     , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Audio"       , ПараметрыТестаОсновные);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);
    ПараметрыТеста.Вставить("Directory", Ложь);
    МассивВариантов.Добавить(ПараметрыТеста);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);
    ПараметрыТеста.Вставить("Directory", Истина);
    МассивВариантов.Добавить(ПараметрыТеста);

    Возврат МассивВариантов;

КонецФункции

Функция ПолучитьВариантыПараметровPostgres() Экспорт

    МассивВариантов = Новый Массив;

    ПараметрыТестаОсновные = Новый Структура;
    ПараметрВКоллекцию("PG_IP"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("PG_Password", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Picture"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("SQL"        , ПараметрыТестаОсновные);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);

    ПараметрыТеста.Вставить("TLS" , Ложь);
    ПараметрыТеста.Вставить("Port", 5432);

    МассивВариантов.Добавить(ПараметрыТеста);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);

    ПараметрыТеста.Вставить("TLS" , Истина);
    ПараметрыТеста.Вставить("Port", 5433);

    МассивВариантов.Добавить(ПараметрыТеста);

    Возврат МассивВариантов;

КонецФункции

Функция ПолучитьВариантыПараметровMySQL() Экспорт

    МассивВариантов = Новый Массив;

    ПараметрыТестаОсновные = Новый Структура;
    ПараметрВКоллекцию("PG_IP"      , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("PG_Password", ПараметрыТестаОсновные);
    ПараметрВКоллекцию("Picture"    , ПараметрыТестаОсновные);
    ПараметрВКоллекцию("SQL2"       , ПараметрыТестаОсновные);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);

    ПараметрыТеста.Вставить("TLS" , Ложь);
    ПараметрыТеста.Вставить("Port", 3306);

    МассивВариантов.Добавить(ПараметрыТеста);

    ПараметрыТеста = OPI_Инструменты.КопироватьКоллекцию(ПараметрыТестаОсновные);

    ПараметрыТеста.Вставить("TLS" , Истина);
    ПараметрыТеста.Вставить("Port", 3307);

    МассивВариантов.Добавить(ПараметрыТеста);

    Возврат МассивВариантов;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проверки

Функция Проверка_Telegram_ПолучитьИнформациюБота(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["username"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ПолучитьОбновления(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Telegram_УстановитьWebhook(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Равно("Webhook was set");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_УдалитьWebhook(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ИмяПараметра = "Telegram_MessageID";
        ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);

    ИначеЕсли Вариант = "Канал" Тогда

        ИмяПараметра = "Telegram_ChannelMessageID";
        ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);

    Иначе
        ИмяПараметра = "";
    КонецЕсли;

    Если ЗначениеЗаполнено(ИмяПараметра) Тогда

        IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
        ЗаписатьПараметр(ИмяПараметра, IDСообщения);
        OPI_Инструменты.ДобавитьПоле(ИмяПараметра, IDСообщения, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_СформироватьКлавиатуруПоМассивуКнопок(Знач Результат, Знач Вариант)

    ТипРезультат = ТипЗнч(Результат);

    ОжидаетЧто(ТипРезультат = Тип("Строка") Или ТипРезультат = Тип("Соответствие")).Равно(Истина);
    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьКартинку(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["photo"]).ИмеетТип("Массив");

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDСообщения = OPI_Инструменты.ЧислоВСтроку(Результат["result"]["message_id"]);
        ЗаписатьПараметр("Telegram_PicMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("Telegram_PicMessageID", IDСообщения, "Строка", Параметры);

    КонецЕсли;

    Если Вариант = "Клавиатура коллекция" Тогда

        IDФайла = Результат["result"]["photo"][0]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьВидео(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["video"]["mime_type"]).Равно("video/mp4");

    Если Вариант = "Двоичные" Тогда

        IDФайла = Результат["result"]["video"]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьАудио(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["audio"]["mime_type"]).Равно("audio/mpeg");

    Если Вариант = "Двоичные" Тогда

        IDФайла = Результат["result"]["audio"]["file_id"];
        ЗаписатьПараметр("Telegram_FileID", IDФайла);
        Параметры.Вставить("Telegram_FileID", IDФайла);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьДокумент(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["document"]).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьГифку(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    Result_ = "result";

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат[Result_]["document"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат[Result_]["animation"]["mime_type"]).Равно("video/mp4");

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьМедиагруппу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьМестоположение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["location"]).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьКонтакт(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["contact"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["contact"]["first_name"]).Равно(Имя);

    OPI_Инструменты.Пауза(15);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОтправитьОпрос(Знач Результат, Знач Вариант, Вопрос = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["poll"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["poll"]["question"]).Равно(Вопрос);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_СкачатьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(ТипЗнч(Результат) = Тип("Строка") Или ТипЗнч(Результат) = Тип("ДвоичныеДанные")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ПереслатьСообщение(Знач Результат, Знач Вариант, IDСообщения = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["forward_origin"]["message_id"]).Равно(Число(IDСообщения));

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_Бан(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["description"]).Равно("Bad Request: can't remove chat owner");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_Разбан(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["description"]).Равно("Bad Request: can't remove chat owner");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_СоздатьСсылкуПриглашение(Знач Результат, Знач Вариант, Заголовок = "", UnixИстечение = "")

    Result_ = "result";
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["member_limit"]).Равно(200);
    ОжидаетЧто(Результат[Result_]["name"]).Равно(Заголовок);
    ОжидаетЧто(Результат[Result_]["expire_date"]).Равно(Число(UnixИстечение));

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ЗакрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОткрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ПолучитьЧислоУчастников(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Число");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ПолучитьСписокИконокАватаров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_СоздатьТемуФорума(Знач Результат, Знач Вариант, Параметры = "", ИмяИлиТекст = "", Иконка = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        ОжидаетЧто(Результат["ok"]).Равно(Истина);
        ОжидаетЧто(Результат["result"]["name"]).Равно(ИмяИлиТекст);
        ОжидаетЧто(Результат["result"]["icon_custom_emoji_id"]).Равно(Иконка);

        Тема = Результат["result"]["message_thread_id"];

        OPI_Инструменты.ДобавитьПоле("Telegram_TopicID", Тема, "Строка", Параметры);
        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Telegram_TopicID", Параметры["Telegram_TopicID"]);

    Иначе

        ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
        ОжидаетЧто(Результат["ok"]).Равно(Истина);
        ОжидаетЧто(Результат["result"]["text"]).Равно(ИмяИлиТекст);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ИзменитьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ЗакрытьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОткрытьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_УдалитьТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ОчиститьСписокЗакрепленныхСообщенийТемы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_СкрытьГлавнуюТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ПоказатьГлавнуюТемуФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ИзменитьИмяГлавнойТемыФорума(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ЗаменитьТекстСообщения(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ЗаменитьКлавиатуруСообщения(Знач Результат, Знач Вариант, Клавиатура = "")

    КлавиатураСообщения = Результат["result"]["reply_markup"];

    Клавиатура_ = OPI_Инструменты.JsonВСтруктуру(Клавиатура);
    Клавиатура_.Удалить("rows");
    Клавиатура_ = OPI_Инструменты.JSONСтрокой(Клавиатура_);

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(СтрДлина(OPI_Инструменты.JSONСтрокой(КлавиатураСообщения))).Равно(СтрДлина(Клавиатура_));

    Возврат Результат;

КонецФункции

Функция Проверка_Telegram_ЗаменитьОписаниеСообщения(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["photo"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьСсылкуПолученияТокена(Знач Результат, Знач Вариант)

    Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
        Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Строка");
    ОжидаетЧто(СтрНачинаетсяС(Результат, "https://oauth.vk.com")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьПост(Знач Результат, Знач Вариант, Параметры = "")

    ИДПоста = Результат["response"]["post_id"];

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(ИДПоста).ИмеетТип("Число").Заполнено();

    Если Вариант = "Путь" Тогда

        OPI_Инструменты.ДобавитьПоле("VK_PostID", ИДПоста, "Строка", Параметры);
        ЗаписатьПараметр("VK_PostID", Параметры["VK_PostID"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьПост(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьСоставнойПост(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["post_id"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьОпрос(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["post_id"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьАльбом(Знач Результат, Знач Вариант, Параметры = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["description"]).Равно(Описание);

    ИДАльбома = Результат["response"]["id"];
    Параметры.Вставить("VK_AlbumID", ИДАльбома);
    ЗаписатьПараметр("VK_AlbumID", ИДАльбома);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СохранитьКартинкуВАльбом(Знач Результат, Знач Вариант, Параметры = "", Описание = "", ИДАльбома = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"][0]["text"]).Равно(Описание);
    ОжидаетЧто(Результат["response"][0]["album_id"]).Равно(ИДАльбома);

    ИДКартинки = Результат["response"][0]["id"];
    Параметры.Вставить("VK_PictureID", ИДКартинки);
    ЗаписатьПараметр("VK_PictureID", ИДКартинки);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьКартинку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьАльбом(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьИсторию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["count"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьОбсуждение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

    ИДОбсуждения = Результат["response"];
    Параметры.Вставить("VK_ConvID", ИДОбсуждения);
    ЗаписатьПараметр("VK_ConvID", ИДОбсуждения);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ЗакрытьОбсуждение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ОткрытьОбсуждение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_НаписатьВОбсуждение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПоставитьЛайк(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["likes"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СделатьРепост(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["success"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["wall_repost_count"]).ИмеетТип("Число").Равно(1);

    Параметры.Вставить("Repost", Результат["response"]["post_id"]);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_НаписатьКомментарий(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["comment_id"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСтатистику(Знач Результат, Знач Вариант)

    ТипСоответствие = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["visitors"]).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["reach"]).ИмеетТип(ТипСоответствие).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСтатистикуПостов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив").ИмеетДлину(2);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьРекламнуюКампанию(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    ИДКампании = Результат["response"][0]["id"];
    ЗаписатьПараметр("VK_AdsCampaignID", ИДКампании);
    Параметры.Вставить("VK_AdsCampaignID", ИДКампании);

    Возврат Неопределено;

КонецФункции

Функция Проверка_VK_СоздатьРекламноеОбъявление(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    ИДОбъявления = Результат["response"][0]["id"];
    ЗаписатьПараметр("VK_AdsPostID", ИДОбъявления);
    Параметры.Вставить("VK_AdsPostID", ИДОбъявления);

    Возврат Неопределено;

КонецФункции

Функция Проверка_VK_ПриостановитьРекламноеОбъявление(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_VK_СформироватьКлавиатуру(Знач Результат, Знач Вариант)

    ТипРезультат = ТипЗнч(Результат);

    ОжидаетЧто(ТипРезультат = Тип("Строка") Или ТипРезультат = Тип("Соответствие")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_НаписатьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокКатегорийТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьПодборкуТоваров(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["albums_count"]).ИмеетТип("Число").Заполнено();
    ОжидаетЧто(Результат["response"]["market_album_id"]).ИмеетТип("Число").Заполнено();

    ИДПодборки = Результат["response"]["market_album_id"];
    ЗаписатьПараметр("VK_MarketAlbumID", ИДПодборки);
    Параметры.Вставить("VK_MarketAlbumID", ИДПодборки);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ИзменитьПодборкуТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьПодборкиПоИД(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ДобавитьТовар(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["market_item_id"]).ИмеетТип("Число").Заполнено();

    ИДТовара = Результат["response"]["market_item_id"];
    ЗаписатьПараметр("VK_MarketItemID", ИДТовара);
    Параметры.Вставить("VK_MarketItemID", ИДТовара);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ИзменитьТовар(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ДобавитьТоварВПодборку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьТоварИзПодборки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьТовар(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьПодборку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьСвойствоТовара(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["property_id"]).ИмеетТип("Число").Заполнено();

    Свойство = Результат["response"]["property_id"];
    Свойство = OPI_Инструменты.ЧислоВСтроку(Свойство);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("VK_PropID", Свойство);
    Параметры.Вставить("VK_PropID", Свойство);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ИзменитьСвойствоТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ДобавитьВариантСвойстваТовара(Знач Результат, Знач Вариант, Параметры = "", Счетчик = 0)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["variant_id"]).ИмеетТип("Число").Заполнено();

    ИДВарианта   = Результат["response"]["variant_id"];
    ИмяПараметра = "VK_PropVarID" + Строка(Счетчик);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПараметра, ИДВарианта);
    Параметры.Вставить(ИмяПараметра, ИДВарианта);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ИзменитьВариантСвойстваТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СоздатьТоварСоСвойством(Знач Результат, Знач Вариант, Параметры = "", Счетчик = 0)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["market_item_id"]).ИмеетТип("Число").Заполнено();

    ИДТовара = Результат["response"]["market_item_id"];
    ИмяПоля  = "VK_MarketItemID" + Строка(Счетчик);

    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр(ИмяПоля, ИДТовара);
    Параметры.Вставить(ИмяПоля, ИДТовара);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьТоварыПоИД(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").ИмеетДлину(2);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СгруппироватьТовары(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["item_group_id"]).ИмеетТип("Число").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьВариантСвойстваТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_УдалитьСвойствоТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокПодборок(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокСвойств(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокЗаказов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ЗагрузитьВидеоНаСервер(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["video_id"]).Заполнено();
    ОжидаетЧто(Результат["video_hash"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ЗагрузитьФотоНаСервер(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"][0]["text"]).Равно("");

    Возврат Результат;

КонецФункции

Функция Проверка_VK_СократитьСсылку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьСписокРекламныхКатегорий(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["v2"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VK_ПолучитьОписаниеТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьИнформациюОДиске(Знач Результат, Знач Вариант)

    Соответствие_ = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(Соответствие_).Заполнено();
    ОжидаетЧто(Результат["system_folders"]).ИмеетТип(Соответствие_);
    ОжидаетЧто(Результат["user"]).ИмеетТип(Соответствие_);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_СоздатьПапку(Знач Результат, Знач Вариант, Токен = "", Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("dir");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ЗагрузитьФайлПоURL(Знач Результат, Знач Вариант, Параметры = "", Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["href"]).Заполнено();
    ОжидаетЧто(Результат["method"]).Заполнено();

    ЗаписатьПараметр("YandexDisk_FileByURLPath", Путь);
    Параметры.Вставить("YandexDisk_FileByURLPath", Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьОбъект(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_УдалитьОбъект(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ЗагрузитьФайл(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_СоздатьКопиюОбъекта(Знач Результат, Знач Вариант, Параметры = "", Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);

    ЗаписатьПараметр("YandexDisk_CopyFilePath", Путь);
    Параметры.Вставить("YandexDisk_CopyFilePath", Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьСсылкуДляСкачивания(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["method"]).Равно("GET");
    ОжидаетЧто(Результат["href"]).ИмеетТип("Строка").Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_СкачатьФайл(Знач Результат, Знач Вариант)

    МинимальныйРазмер = 1000;

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() > МинимальныйРазмер).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьСписокФайлов(Знач Результат, Знач Вариант, Количество = 0, Отступ = 0)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["limit"]).Равно(Количество);
    ОжидаетЧто(Результат["offset"]).Равно(Отступ);
    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПереместитьОбъект(Знач Результат, Знач Вариант, Параметры = "", Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);

    ЗаписатьПараметр("YandexDisk_NewFilePath", Путь);
    Параметры.Вставить("YandexDisk_NewFilePath", Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьСписокОпубликованныхОбъектов(Знач Результат, Знач Вариант, Количество = 0, Отступ = 0)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["limit"]).Равно(Количество);
    ОжидаетЧто(Результат["offset"]).Равно(Отступ);
    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ОпубликоватьОбъект(Знач Результат, Знач Вариант, Параметры = "", Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Строка").Заполнено();

    URL = Результат["public_url"];
    ЗаписатьПараметр("YandexDisk_PublicURL", URL);
    Параметры.Вставить("YandexDisk_PublicURL", URL);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьСсылкуСкачиванияПубличногоОбъекта(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["method"]).Равно("GET");
    ОжидаетЧто(Результат["href"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ПолучитьПубличныйОбъект(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Заполнено();
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_СохранитьПубличныйОбъектНаДиск(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Заполнено();
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Неопределено");

    Возврат Результат;

КонецФункции

Функция Проверка_YandexDisk_ОтменитьПубликациюОбъекта(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    ОжидаетЧто(Результат["public_url"]).ИмеетТип("Неопределено");

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_УстановитьWebhook(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ПолучитьИнформациюОКанале(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ПолучитьДанныеПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["chat_hostname"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ПолучитьОнлайнПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    ОжидаетЧто(Результат["users"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_СформироватьКлавиатуруИзМассиваКнопок(Знач Результат, Знач Вариант)

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьКартинку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьКонтакт(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьЛокацию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Viber_ОтправитьСсылку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleWorkspace_СформироватьСсылкуПолученияКода(Знач Результат, Знач Вариант)

    Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
        Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Строка");
    ОжидаетЧто(СтрНачинаетсяС(Результат, "https://accounts.google.com/o/oauth2")).Равно(Истина);

    ЗаписатьПараметр("Google_Link", Результат);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleWorkspace_ПолучитьТокенПоКоду(Знач Результат, Знач Вариант)

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        ЗаписатьПараметр("Google_Token"  , Результат["access_token"]);
        ЗаписатьПараметр("Google_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Неопределено;

КонецФункции

Функция Проверка_GoogleWorkspace_ОбновитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ЗаписатьПараметр("Google_Token", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleWorkspace_ПолучитьТокенServiceАккаунта(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ЗаписатьПараметр("Google_ServiceToken", Результат["access_token"]);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСписокКалендарей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_СоздатьКалендарь(Знач Результат, Знач Вариант, Параметры = "", Наименование = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Календарь = Результат["id"];
    ЗаписатьПараметр("Google_NewCalendarID", Календарь);
    OPI_Инструменты.ДобавитьПоле("Google_NewCalendarID", Календарь, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьМетаданныеКалендаря(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьМетаданныеКалендаря(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ДобавитьКалендарьВСписок(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьКалендарьСписка(Знач Результат, Знач Вариант, ОсновнойЦвет = "", ДополнительныйЦвет = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["foregroundColor"]).Равно(ОсновнойЦвет);
    ОжидаетЧто(Результат["backgroundColor"]).Равно(ДополнительныйЦвет);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьКалендарьСписка(Знач Результат, Знач Вариант, ОсновнойЦвет = "", ДополнительныйЦвет = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["foregroundColor"]).Равно(ОсновнойЦвет);
    ОжидаетЧто(Результат["backgroundColor"]).Равно(ДополнительныйЦвет);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ОчиститьОсновнойКалендарь(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_УдалитьКалендарьИзСписка(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_УдалитьКалендарь(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_СоздатьСобытие(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Событие = Результат["id"];
    ЗаписатьПараметр("Google_EventID", Событие);
    OPI_Инструменты.ДобавитьПоле("Google_EventID", Событие, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ИзменитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПереместитьСобытие(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_УдалитьСобытие(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьСписокСобытий(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleCalendar_ПолучитьОписаниеСобытия(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокКаталогов(Знач Результат, Знач Вариант, Параметры = "")

    Результат = Результат[0];

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

    Идентификатор = Результат["id"];
    ЗаписатьПараметр("GD_Catalog", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Catalog", Идентификатор, "Строка", Параметры);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьИнформациюОбОбъекте(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ЗагрузитьФайл(Знач Результат, Знач Вариант, Параметры = "", Описание = "")

    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);

    Идентификатор = Результат["id"];

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ЗаписатьПараметр("GD_File", Идентификатор);
        OPI_Инструменты.ДобавитьПоле("GD_File", Идентификатор, "Строка", Параметры);

    Иначе

        МассивУдаляемых = Параметры["МассивУдаляемых"];
        МассивУдаляемых.Добавить(Идентификатор);
        Параметры.Вставить("МассивУдаляемых", МассивУдаляемых);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_СкопироватьОбъект(Знач Результат, Знач Вариант, Параметры = "", НовоеИмя = "")

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");

    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);

    Идентификатор = Результат["id"];

    МассивУдаляемых = Параметры["МассивУдаляемых"];
    МассивУдаляемых.Добавить(Идентификатор);
    Параметры.Вставить("МассивУдаляемых", МассивУдаляемых);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_СкачатьФайл(Знач Результат, Знач Вариант, Параметры = "")

    Размер = OPI_ЗапросыHTTP.Get(Параметры["Picture"]).Размер();

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ОбновитьФайл(Знач Результат, Знач Вариант, НовоеИмя = "")

    Описание = Новый Структура("Имя,MIME", НовоеИмя, "image/jpeg");

    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_УдалитьОбъект(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьОписаниеФайла(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_СоздатьКомментарий(Знач Результат, Знач Вариант, Параметры = "", Комментарий = "")

    ОжидаетЧто(Результат["content"]).Равно(Комментарий);
    ОжидаетЧто(Результат["kind"]).Равно("drive#comment");

    Идентификатор = Результат["id"];

    ЗаписатьПараметр("GD_Comment", Идентификатор);
    OPI_Инструменты.ДобавитьПоле("GD_Comment", Идентификатор, "Строка", Параметры);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьКомментарий(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["content"]).Равно("Текст комментария");
    ОжидаетЧто(Результат["kind"]).Равно("drive#comment");

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_ПолучитьСписокКомментариев(Знач Результат, Знач Вариант)

    Комментарии       = Результат["comments"];
    ОбъектКомментарий = Комментарии[Комментарии.ВГраница()];

    ОжидаетЧто(ОбъектКомментарий["content"]).Равно("Текст комментария");
    ОжидаетЧто(ОбъектКомментарий["kind"]).Равно("drive#comment");

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_УдалитьКомментарий(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleDrive_СоздатьПапку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_СоздатьКнигу(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", МассивЛистов = "")

    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Если ЗначениеЗаполнено(МассивЛистов) Тогда

        Для Н = 0 По МассивЛистов.ВГраница() Цикл

            ИмяЛиста = Результат["sheets"][Н]["properties"]["title"];
            ОжидаетЧто(ИмяЛиста).Равно(МассивЛистов[Н]);

        КонецЦикла;

    КонецЕсли;

    Книга = Результат["spreadsheetId"];

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Лист = Результат["sheets"][0]["properties"]["sheetId"];
        Лист = OPI_Инструменты.ЧислоВСтроку(Лист);

        ЗаписатьПараметр("GS_Spreadsheet", Книга);
        ЗаписатьПараметр("GS_Sheet"      , Лист);

        OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet", Книга, "Строка", Параметры);
        OPI_Инструменты.ДобавитьПоле("GS_Sheet"      , Лист , "Строка", Параметры);

    Иначе

        OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("GS_Spreadsheet2", Книга);
        OPI_Инструменты.ДобавитьПоле("GS_Spreadsheet2", Книга, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ПолучитьКнигу(Знач Результат, Знач Вариант, Токен = "")

    Наименование = "Тестовая таблица";

    МассивЛистов = Новый Массив;
    МассивЛистов.Добавить("Лист1");
    МассивЛистов.Добавить("Лист2");

    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Для Н = 0 По МассивЛистов.ВГраница() Цикл

        ИмяЛиста = Результат["sheets"][Н]["properties"]["title"];
        ОжидаетЧто(ИмяЛиста).Равно(МассивЛистов[Н]);

    КонецЦикла;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_КопироватьЛист(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["title"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ДобавитьЛист(Знач Результат, Знач Вариант)

    НовыйЛист = Результат["replies"][0]["addSheet"]["properties"];
    ОжидаетЧто(НовыйЛист["title"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_УдалитьЛист(Знач Результат, Знач Вариант, Книга = "")

    ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ИзменитьНаименованиеКниги(Знач Результат, Знач Вариант, Книга = "")

    ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ПолучитьТаблицу(Знач Результат, Знач Вариант)

    Наименование = "Тестовая таблица (изм.)";
    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_УстановитьЗначенияЯчеек(Знач Результат, Знач Вариант, Количество = 0)

    ОжидаетЧто(Результат["totalUpdatedCells"]).Равно(Количество);

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ПолучитьЗначенияЯчеек(Знач Результат, Знач Вариант, КнигаИлиКоличество = 0)

    Если Вариант = "Все" Тогда
        ОжидаетЧто(Результат["spreadsheetId"]).Равно(КнигаИлиКоличество);
    Иначе
        ОжидаетЧто(Результат["valueRanges"].Количество()).Равно(КнигаИлиКоличество);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GoogleSheets_ОчиститьЯчейки(Знач Результат, Знач Вариант, Количество = 0)

    ОжидаетЧто(Результат["clearedRanges"].Количество()).Равно(Количество);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьИнформациюОБоте(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["bot_id"]).Заполнено();
    ОжидаетЧто(Результат["user_id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокРабочихОбластей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["teams"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ОтправитьСообщение(Знач Результат, Знач Вариант, Параметры = "", Текст = "", Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["message"]["text"]).Равно(Текст);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Отметка = Результат["ts"];
        ЗаписатьПараметр("Slack_MessageTS", Отметка);
        OPI_Инструменты.ДобавитьПоле("Slack_MessageTS", Отметка, "Строка", Параметры);

    КонецЕсли;

    Если Не Вариант = "Отложенное" Тогда

        ОжидаетЧто(Результат["ts"]).Заполнено();

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_СформироватьБлокКартинку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ИзменитьСообщение(Знач Результат, Знач Вариант, Текст = "", Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["ts"]).Заполнено();
    ОжидаетЧто(Результат["message"]["text"]).Равно(Текст);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокОтветовНаСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСсылкуНаСообщение(Знач Результат, Знач Вариант, Канал = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["permalink"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ОтправитьЭфемерноеСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["message_ts"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокОтложенныхСообщений(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["scheduled_messages"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_СоздатьКанал(Знач Результат, Знач Вариант, Параметры = "", Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);

    Канал = Результат["channel"]["id"];
    ЗаписатьПараметр("Slack_NewChannel", Канал);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannel", Канал, "Строка", Параметры);

    ЗаписатьПараметр("Slack_NewChannelName", Имя);
    OPI_Инструменты.ДобавитьПоле("Slack_NewChannelName", Имя, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_УстановитьТемуКанала(Знач Результат, Знач Вариант, Тема = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["topic"]["value"]).Равно(Тема);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_УстановитьЦельКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПригласитьПользователейВКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ВыгнатьПользователяИзКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьИсториюКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокПользователейКанала(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПокинутьКанал(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ВступитьВКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПереименоватьКанал(Знач Результат, Знач Вариант, Имя = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Данные = Результат["channel"];
    ОжидаетЧто(Данные["name"]).Равно(Имя);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_АрхивироватьКанал(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокКаналов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["channels"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ОткрытьДиалог(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Диалог = Результат["channel"]["id"];

        ОжидаетЧто(Результат["channel"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Диалог).Заполнено();

        ЗаписатьПараметр("Slack_Dialog", Диалог);
        OPI_Инструменты.ДобавитьПоле("Slack_Dialog", Диалог, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ЗакрытьДиалог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["files"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ЗагрузитьФайл(Знач Результат, Знач Вариант, Параметры = "", ИмяФайла = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Если ЗначениеЗаполнено(Результат["files"]) Тогда
        ЗагруженныйФайл = Результат["files"][0];
    Иначе
        ЗагруженныйФайл = Результат["file"];
    КонецЕсли;

    ОжидаетЧто(ЗагруженныйФайл["name"]).Равно(ИмяФайла);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ЗагруженныйФайл = Результат["files"][0]["id"];
        ЗаписатьПараметр("Slack_FileID", ЗагруженныйФайл);
        OPI_Инструменты.ДобавитьПоле("Slack_FileID", ЗагруженныйФайл, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_СделатьФайлПубличным(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_Slack_СделатьФайлПриватным(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_Slack_ПолучитьДанныеФайла(Знач Результат, Знач Вариант, ИмяФайла = "")

    Если ЗначениеЗаполнено(Результат["files"]) Тогда
        ЗагруженныйФайл = Результат["files"][0];
    Иначе
        ЗагруженныйФайл = Результат["file"];
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(ЗагруженныйФайл["name"]).Равно(ИмяФайла);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_УдалитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьСписокВнешнихФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["files"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ДобавитьВнешнийФайл(Знач Результат, Знач Вариант, Параметры = "", Заголовок = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    ЗагруженныйФайл = Результат["file"];
    ОжидаетЧто(ЗагруженныйФайл["title"]).Равно(Заголовок);

    ЗагруженныйФайл = Результат["file"]["id"];
    ЗаписатьПараметр("Slack_ExtFileID", ЗагруженныйФайл);
    OPI_Инструменты.ДобавитьПоле("Slack_ExtFileID", ЗагруженныйФайл, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ПолучитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    ЗагруженныйФайл = Результат["file"];
    ОжидаетЧто(ЗагруженныйФайл["title"]).Равно("Новый файл");

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_ОтправитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Slack_УдалитьВнешнийФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_СоздатьБазу(Знач Результат, Знач Вариант, Параметры = "", ИмяТаблицы = "")

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["tables"][0]["name"]).Равно(ИмяТаблицы);

    База = Результат["id"];
    ЗаписатьПараметр("Airtable_Base", База);
    OPI_Инструменты.ДобавитьПоле("Airtable_Base", База, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьТаблицыБазы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["tables"]).Заполнено();
    ОжидаетЧто(Результат["tables"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьСписокБаз(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["bases"]).Заполнено();
    ОжидаетЧто(Результат["bases"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеНомера(Знач Результат, Знач Вариант)


    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеСтроковое(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеВложения(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеФлажка(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеДаты(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеТелефона(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеПочты(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьПолеСсылки(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_СоздатьТаблицу(Знач Результат, Знач Вариант, Параметры = "", Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);

    Таблица = Результат["id"];
    ЗаписатьПараметр("Airtable_Table", Таблица);
    OPI_Инструменты.ДобавитьПоле("Airtable_Table", Таблица, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ИзменитьТаблицу(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_СоздатьПоле(Знач Результат, Знач Вариант, Параметры = "", Имя = "")

    ОжидаетЧто(Результат["name"]).Равно(Имя);

    Поле = Результат["id"];
    ЗаписатьПараметр("Airtable_Field", Поле);
    OPI_Инструменты.ДобавитьПоле("Airtable_Field", Поле, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ИзменитьПоле(Знач Результат, Знач Вариант, Наименование = "", Описание = "")

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_СоздатьЗаписи(Знач Результат, Знач Вариант, Параметры = "", Числовой = "", Строчный = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
        ОжидаетЧто(Результат["records"]).Заполнено();

    Иначе

        ОдиночнаяЗапись = Результат["id"];
        ОжидаетЧто(ОдиночнаяЗапись).Заполнено();
        ОжидаетЧто(Результат["createdTime"]).Заполнено();
        ОжидаетЧто(Результат["fields"]["Номер"]).Равно(Числовой);
        ОжидаетЧто(СокрЛП(Результат["fields"]["Строковое"])).Равно(Строчный);

        Запись = Результат["id"];
        ЗаписатьПараметр("Airtable_Record", Запись);
        OPI_Инструменты.ДобавитьПоле("Airtable_Record", Запись, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьЗапись(Знач Результат, Знач Вариант, Запись = "")

    ОжидаетЧто(Результат["id"]).Равно(Запись);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_СоздатьКомментарий(Знач Результат, Знач Вариант, Параметры = "", Текст = "")

    ОжидаетЧто(Результат["text"]).Равно(Текст);

    Комментарий = Результат["id"];
    OPI_ПолучениеДанныхТестов.ЗаписатьПараметр("Airtable_Comment", Комментарий);
    OPI_Инструменты.ДобавитьПоле("Airtable_Comment", Комментарий, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ИзменитьКомментарий(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат["text"]).Равно(Текст);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьКомментарии(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["comments"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_УдалитьКомментарий(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["deleted"]).Равно(Истина);
    ОжидаетЧто(Результат["id"]).Равно(Комментарий);

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_ПолучитьСписокЗаписей(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["records"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Airtable_УдалитьЗаписи(Знач Результат, Знач Вариант, Комментарий = "")

    ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["records"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_ПолучитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_Twitter_ПолучитьСсылкуАвторизации(Знач Результат, Знач Вариант)

    Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
        Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Строка");
    ОжидаетЧто(СтрНачинаетсяС(Результат, "https://twitter.com/i/oauth2/")).Равно(Истина);


    ЗаписатьПараметр("Twitter_URL", Результат);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_ОбновитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

    Рефреш = Результат["refresh_token"];
    Токен  = Результат["access_token"];

    Если ЗначениеЗаполнено(Рефреш) И Не Рефреш = "null" Тогда
        ЗаписатьПараметр("Twitter_Refresh", Рефреш);
    КонецЕсли;

    Если ЗначениеЗаполнено(Токен) И Не Токен = "null" Тогда
        ЗаписатьПараметр("Twitter_Token", Токен);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Twitter_СоздатьТекстовыйТвит(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_СоздатьТвитКартинки(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_СоздатьТвитВидео(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_СоздатьТвитГифки(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_СоздатьТвитОпрос(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_СоздатьПроизвольныйТвит(Знач Результат, Знач Вариант, Текст = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Twitter_ЗагрузитьМассивВложений(Знач Результат, Знач Вариант)

    Если Не ТипЗнч(Результат) = Тип("Массив") Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_СоздатьСтраницу(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("page");

    Страница = Результат["id"];
    ЗаписатьПараметр("Notion_Page", Страница);
    OPI_Инструменты.ДобавитьПоле("Notion_Page", Страница, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_СоздатьБазуДанных(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("database");

    База = Результат["id"];
    ЗаписатьПараметр("Notion_Base", База);
    OPI_Инструменты.ДобавитьПоле("Notion_Base", База, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ИзменитьСвойстваБазы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("database");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ПолучитьСтраницу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("page");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ПолучитьБазуДанных(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("database");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_СоздатьСтраницуВБазу(Знач Результат, Знач Вариант, База = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("page");

    Родитель = Результат["parent"]["database_id"];
    ОжидаетЧто(Родитель).Равно(База);

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ИзменитьСвойстваСтраницы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("page");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ВернутьБлок(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("block");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_СоздатьБлок(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");

    Блок = Результат["results"][0]["id"];
    ЗаписатьПараметр("Notion_NewBlock", Блок);
    OPI_Инструменты.ДобавитьПоле("Notion_NewBlock", Блок, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ВернутьДочерниеБлоки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_УдалитьБлок(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("block");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_СписокПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");

    Возврат Результат;

КонецФункции

Функция Проверка_Notion_ПолучитьДанныеПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("user");

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСсылкуАвторизации(Знач Результат, Знач Вариант)

    Если ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
        Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
    КонецЕсли;

    ОжидаетЧто(Результат).ИмеетТип("Строка");
    ОжидаетЧто(СтрНачинаетсяС(Результат, "https://www.dropbox.com/oauth2")).Равно(Истина);


    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Токен  = Результат["access_token"];
    Рефреш = Результат["refresh_token"];

    Если ЗначениеЗаполнено(Токен) Тогда
        ЗаписатьПараметр("Dropbox_Token", Токен);
    КонецЕсли;

    Если ЗначениеЗаполнено(Рефреш) Тогда
        ЗаписатьПараметр("Dropbox_Refresh", Рефреш);
    КонецЕсли;

    Возврат Неопределено;

КонецФункции

Функция Проверка_Dropbox_ОбновитьТокен(Знач Результат, Знач Вариант)

    Токен = Результат["access_token"];

    ОжидаетЧто(Токен).ИмеетТип("Строка").Заполнено();
    ЗаписатьПараметр("Dropbox_Token", Токен);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Dropbox_ПолучитьИнформациюОбОбъекте(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьПревью(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= 12000).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ЗагрузитьФайл(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ЗагрузитьФайлПоURL(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["async_job_id"]).Заполнено();

    Работа = Результат["async_job_id"];
    Параметры.Вставить("Dropbox_Job", Работа);
    ЗаписатьПараметр("Dropbox_Job", Работа);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСтатусЗагрузкиПоURL(Знач Результат, Знач Вариант, Путь = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат[".tag"]).Равно("complete");

        OPI_Инструменты.Пауза(5);

    КонецЕсли;

    Если Вариант = "Удаление" Тогда
        ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_УдалитьОбъект(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_КопироватьОбъект(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПереместитьОбъект(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_СоздатьПапку(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_СкачатьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= 2000000).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_СкачатьПапку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= 200000).Равно(Истина);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСписокФайловПапки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entries"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСписокВерсийОбъекта(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entries"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["entries"].Количество()).Равно(1);

    Ревизия = Результат["entries"][0]["rev"];

    Параметры.Вставить("Dropbox_FileRevision", Ревизия);
    ЗаписатьПараметр("Dropbox_FileRevision", Ревизия);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ВосстановитьОбъектКВерсии(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["path_display"]).Равно(Путь);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСписокТегов(Знач Результат, Знач Вариант, Параметры = "", МассивПутей = "")

    ОжидаетЧто(Результат["paths_to_tags"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["paths_to_tags"].Количество()).Равно(МассивПутей.Количество());

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ДобавитьТег(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_УдалитьТег(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьИнформациюОбАккаунте(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["account_id"]).Заполнено();

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьДанныеИспользованияПространства(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["used"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ДобавитьПользователейКФайлу(Знач Результат, Знач Вариант, Почта = "", ТолькоПросмотр = "")

    ОжидаетЧто(Результат[0]["result"][".tag"]).Равно("success");
    ОжидаетЧто(Результат[0]["member"]["email"]).Равно(Почта);
    ОжидаетЧто(Результат[0]["result"]["success"][".tag"]).Равно(?(ТолькоПросмотр, "viewer", "editor"));

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ОпубликоватьПапку(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["shared_folder_id"]).Заполнено();

    IDПапки = Результат["shared_folder_id"];

    Параметры.Вставить("Dropbox_SharedFolder", IDПапки);
    ЗаписатьПараметр("Dropbox_SharedFolder", IDПапки);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ОтменитьПубликациюПапки(Знач Результат, Знач Вариант, Параметры = "", IDРаботы = "")

    Если ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат[".tag"]).Равно("complete");

        Параметры.Вставить("Dropbox_NewJobID", IDРаботы);
        ЗаписатьПараметр("Dropbox_NewJobID", IDРаботы);

        OPI_Инструменты.Пауза(5);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ПолучитьСтатусАсинхронногоИзменения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ДобавитьПользователейКПапке(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Dropbox_ОтменитьПубликациюФайла(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСсылкуАвторизацииПриложения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка");

    ЗаписатьПараметр("Bitrix24_AuthURL", Результат);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьТокен(Знач Результат, Знач Вариант)

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    Возврат Неопределено;

КонецФункции

Функция Проверка_Bitrix24_ОбновитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

    Если ЗначениеЗаполнено(Результат["access_token"]) И ЗначениеЗаполнено(Результат["refresh_token"]) Тогда

        ЗаписатьПараметр("Bitrix24_Token"  , Результат["access_token"]);
        ЗаписатьПараметр("Bitrix24_Refresh", Результат["refresh_token"]);

    КонецЕсли;

    Возврат Неопределено;

КонецФункции

Функция Проверка_Bitrix24_СерверноеВремя(Знач Результат, Знач Вариант)

    Время = Результат["result"];

    Если Не ТипЗнч(Время) = Тип("Дата") Тогда
       Время = XMLЗначение(Тип("Дата"), Время);
    КонецЕсли;

    ОжидаетЧто(Время).ИмеетТип("Дата").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьНовость(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookPostID";
    Иначе
        ИмяПараметра = "Bitrix24_PostID";
    КонецЕсли;

    IDНовости = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDНовости);
    Параметры.Вставить(ИмяПараметра, IDНовости);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьНовость(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьНовость(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокПросмотревшихВажное(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьНовости(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьКомментарийНовости(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьПолучателейКНовости(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["fields"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьЗадачу(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookTaskID";
    Иначе
        ИмяПараметра = "Bitrix24_TaskID";
    КонецЕсли;

    IDЗадачи = Результат["result"]["task"]["id"];

    ЗаписатьПараметр(ИмяПараметра, IDЗадачи);
    Параметры.Вставить(ИмяПараметра, IDЗадачи);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПринятьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтклонитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_Bitrix24_ЗавершитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВозобновитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтложитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_НачатьВыполнениеЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_НачатьНаблюдатьЗаЗадачей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПрекратитьНаблюдатьЗаЗадачей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПриостановитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДелегироватьЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьЗадачуВИзбранное(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УбратьЗадачуИзИзбранного(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьИсториюЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["list"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокЗадач(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["tasks"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокХранилищ(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["total"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьХранилищеПриложения(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    IDХранилища = Результат["result"]["ID"];
    ЗаписатьПараметр("Bitrix24_StorageID", IDХранилища);
    Параметры.Вставить("Bitrix24_StorageID", IDХранилища);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ЗагрузитьФайлВХранилище(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookFileID";
    Иначе
        ИмяПараметра = "Bitrix24_FileID";
    КонецЕсли;

    IDФайла = Результат["result"]["ID"];

    ЗаписатьПараметр(ИмяПараметра, IDФайла);
    Параметры.Вставить(ИмяПараметра, IDФайла);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьКаталогВХранилище(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookFolderID";
    Иначе
        ИмяПараметра = "Bitrix24_FolderID";
    КонецЕсли;

    IDКаталога = Результат["result"]["ID"];

    ЗаписатьПараметр(ИмяПараметра, IDКаталога);
    Параметры.Вставить(ИмяПараметра, IDКаталога);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьХранилище(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСодержимоеХранилища(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПереименоватьХранилище(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьИнформациюОКаталоге(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьПодкаталог(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookSubfolderID";
    Иначе
        ИмяПараметра = "Bitrix24_SubfolderID";
    КонецЕсли;

    IDПодкаталога = Результат["result"]["ID"];

    ЗаписатьПараметр(ИмяПараметра, IDПодкаталога);
    Параметры.Вставить(ИмяПараметра, IDПодкаталога);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СкопироватьКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьВнешнююСсылкуКаталога(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраКаталога(Знач Результат, Знач Вариант)

    ТипРезультата = ТипЗнч(Результат);

    ОжидаетЧто(ТипРезультата = Тип("Структура") Или ТипРезультата = Тип("Соответствие")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьДочерниеЭлементыКаталога(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПоместитьКаталогВКорзину(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВосстановитьКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПереместитьКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПереименоватьКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ЗагрузитьФайлВКаталог(Знач Результат, Знач Вариант, URL = "", Токен = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СкопироватьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьИнформациюОФайле(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьВнешнююСсылкуФайла(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Bitrix24_ПоместитьФайлВКорзину(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВосстановитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПереименоватьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПереместитьФайлВКаталог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьФайлВЗадачу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["attachmentId"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПроверитьДоступКЗадаче(Знач Результат, Знач Вариант, Количество = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Действия = Результат["result"]["allowedActions"];
    ОжидаетЧто(Действия).ИмеетТип("Соответствие");
    ОжидаетЧто(Действия.Количество()).Равно(Количество);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтключитьЗвукЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВключитьЗвукЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьКомментарийЗадачи(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookCommentID";
    Иначе
        ИмяПараметра = "Bitrix24_CommentID";
    КонецЕсли;

    IDКомментария = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDКомментария);
    Параметры.Вставить(ИмяПараметра, IDКомментария);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьКомментарийЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьРезультатИзКомментария(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["text"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьРезультатИзКомментария(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокРезультатов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["text"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокКомментариевЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["POST_MESSAGE"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьКомменатрийЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьКомментарийЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьЗависимостьЗадач(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьЗависимостьЗадач(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьСтадиюКанбана(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookStageID";
    Иначе
        ИмяПараметра = "Bitrix24_StageID";
    КонецЕсли;

    IDСтадии = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСтадии);
    Параметры.Вставить(ИмяПараметра, IDСтадии);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьСтадиюКанбана(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтадииКанбана(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПеренестиЗадачуВСтадиюКанбана(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьСтадиюКанбана(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookCheckElementID";
    Иначе
        ИмяПараметра = "Bitrix24_CheckElementID";
    КонецЕсли;

    IDЭлемента = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDЭлемента);
    Параметры.Вставить(ИмяПараметра, IDЭлемента);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьЧеклистЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВыполнитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВозобновитьЭлементЧеклистаЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьТрудозатратыЗадачи(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookTimeID";
    Иначе
        ИмяПараметра = "Bitrix24_TimeID";
    КонецЕсли;

    IDЗатрат = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDЗатрат);
    Параметры.Вставить(ИмяПараметра, IDЗатрат);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьТрудозатратыЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьТрудозатратыЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьТрудозатратыЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокТрудозатратЗадачи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьПланЗадачНаДень(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьЧат(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookChatID";
    Иначе
        ИмяПараметра = "Bitrix24_ChatID";
    КонецЕсли;

    IDЧата = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDЧата);
    Параметры.Вставить(ИмяПараметра, IDЧата);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокПользователейЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПокинутьЧат(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИсключитьПользователяИзЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ДобавитьПользователейВЧат(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьЗаголовокЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьЦветЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    OPI_Инструменты.Пауза(10);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьКартинкуЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтключитьУведомленияЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ВключитьУведомленияЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СменитьВладельцаЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокСообщенийЧата(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]["messages"]).ИмеетТип("Массив");

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_ChatMessageID";
    Иначе
        ИмяПараметра = "Bitrix24_UserMessageID";
    КонецЕсли;

    IDСообщения = Результат["result"]["messages"][0]["id"];

    ЗаписатьПараметр(ИмяПараметра, IDСообщения);
    Параметры.Вставить(ИмяПараметра, IDСообщения);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтметитьСообщениеКакПрочитанное(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Неопределено;

КонецФункции

Функция Проверка_Bitrix24_ОтметитьСообщениеКакНепрочитанное(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьДиалог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокПользователейДиалога(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтправитьУведомлениеОВводе(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПрочитатьВсе(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтправитьСообщение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_ChatMessageID";
    Иначе
        ИмяПараметра = "Bitrix24_UserMessageID";
    КонецЕсли;

    IDСообщения = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСообщения);
    Параметры.Вставить(ИмяПараметра, IDСообщения);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УстановитьРеакциюНаСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьКаталогФайловЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ОтправитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["MESSAGE_ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтатусПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УстановитьСтатусПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьПерсональноеУведомление(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_PersoalHookNotifyID";
    Иначе
        ИмяПараметра = "Bitrix24_PersoalNotifyID";
    КонецЕсли;

    IDСообщения = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСообщения);
    Параметры.Вставить(ИмяПараметра, IDСообщения);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьСистемноеУведомление(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_SystemHookNotifyID";
    Иначе
        ИмяПараметра = "Bitrix24_SystemNotifyID";
    КонецЕсли;

    IDСообщения = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСообщения);
    Параметры.Вставить(ИмяПараметра, IDСообщения);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьУведомление(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьПодразделение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookDepID";
    Иначе
        ИмяПараметра = "Bitrix24_DepID";
    КонецЕсли;

    IDПодразделения = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDПодразделения);
    Параметры.Вставить(ИмяПараметра, IDПодразделения);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьПодразделение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьПодразделение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьПодразделения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьТекущегоПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтурктуруПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьПользователя(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookUserID";
    Иначе
        ИмяПараметра = "Bitrix24_UserID";
    КонецЕсли;

    IDПользователя = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDПользователя);
    Параметры.Вставить(ИмяПараметра, IDПользователя);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьСтатусПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_НайтиПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраЛидов(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруЛида(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["PHONE"]).Заполнено();
    ОжидаетЧто(Результат["result"]["NAME"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьЛид(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookLeadID";
    Иначе
        ИмяПараметра = "Bitrix24_LeadID";
    КонецЕсли;

    IDЛида = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDЛида);
    Параметры.Вставить(ИмяПараметра, IDЛида);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьЛид(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьЛид(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьЛид(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["PHONE"]).Заполнено();
    ОжидаетЧто(Результат["result"]["NAME"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокЛидов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраСделок(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруСделки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();
    ОжидаетЧто(Результат["result"]["BEGINDATE"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьСделку(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookDealID";
    Иначе
        ИмяПараметра = "Bitrix24_DealID";
    КонецЕсли;

    IDСделки = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСделки);
    Параметры.Вставить(ИмяПараметра, IDСделки);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьСделку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСделку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();
    ОжидаетЧто(Результат["result"]["BEGINDATE"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьСделку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокСделок(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраЗадач(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруКомментария(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьБлокКартинки(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьБлокФайла(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьКалендарь(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookCalendarID";
    Иначе
        ИмяПараметра = "Bitrix24_CalendarID";
    КонецЕсли;

    IDКалендаря = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDКалендаря);
    Параметры.Вставить(ИмяПараметра, IDКалендаря);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьКалендарь(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьКалендарь(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСписокКалендарей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруНастроекКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруПользовательскихНастроекКаледнаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьПользовательскиеНастройкиКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УстановитьПользовательскиеНастройкиКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьЗанятостьПользователей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_СоздатьСобытиеКалендаря(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookCEventID";
    Иначе
        ИмяПараметра = "Bitrix24_CEventID";
    КонецЕсли;

    IDСобытия = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСобытия);
    Параметры.Вставить(ИмяПараметра, IDСобытия);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ИзменитьСобытиеКалендаря(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();

    Если Вариант = "Хук" Тогда
        ИмяПараметра = "Bitrix24_HookCEventID";
    Иначе
        ИмяПараметра = "Bitrix24_CEventID";
    КонецЕсли;

    IDСобытия = Результат["result"];

    ЗаписатьПараметр(ИмяПараметра, IDСобытия);
    Параметры.Вставить(ИмяПараметра, IDСобытия);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УдалитьСобытиеКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСобытиеКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСобытияКалендарей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_УстановитьСтатусУчастияПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтатусУчастияПользователя(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруСобытияКалендаря(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Bitrix24_ПолучитьСтруктуруФильтраСобытийКалендарей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПроверитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["userId"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьСобытия(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["events"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDСообщения = Результат["msgId"];
        ЗаписатьПараметр("VkTeams_MessageID", IDСообщения);
        Параметры.Вставить("VkTeams_MessageID", IDСообщения);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПереслатьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОтправитьФайл(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDФайла = Результат["fileId"];
        ЗаписатьПараметр("VkTeams_FileID", IDФайла);
        Параметры.Вставить("VkTeams_FileID", IDФайла);

        OPI_Инструменты.Пауза(5);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПереслатьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьИнформациюОФайле(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["size"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ИзменитьТекстСообщения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_УдалитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОтправитьГолосовоеСообщение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDФайла = Результат["fileId"];
        ЗаписатьПараметр("VkTeams_VoiceID", IDФайла);
        Параметры.Вставить("VkTeams_VoiceID", IDФайла);

        OPI_Инструменты.Пауза(5);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПереслатьГолосовоеСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ИсключитьПользователейЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ИзменитьАватарЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьИнформациюОЧате(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["inviteLink"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьАдминистраторовЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["admins"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьПользователейЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьЗаблокированныхПользователейЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["users"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ПолучитьЗапросыВступленияЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["users"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ЗаблокироватьПользователяЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_РазблокироватьПользователяЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ЗакрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОткрепитьСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОдобритьЗаявкуНаВступление(Знач Результат, Знач Вариант)

    Если Не Результат["ok"] Тогда
        ОжидаетЧто(Результат["description"]).Равно("User is not pending or nobody in pending list");
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОтклонитьЗаявкуНаВступление(Знач Результат, Знач Вариант)

    Если Не Результат["ok"] Тогда
        ОжидаетЧто(Результат["description"]).Равно("User is not pending or nobody in pending list");
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_УстановитьЗаголовокЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_УстановитьОписаниеЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_УстановитьПравилаЧата(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_VKTeams_ОтветитьНаСобытиеКлавиатуры(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьДеревоКатегорийИТиповТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["category_name"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьХарактеристикиКатегории(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьЗначенияХарактеристики(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["value"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_НайтиЗначенияХарактеристики(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["value"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_СоздатьОбновитьТовары(Знач Результат, Знач Вариант, Параметры = "")

    IDЗадачи = Результат["result"]["task_id"];
    ОжидаетЧто(IDЗадачи).Заполнено();

    IDЗадания = Результат["result"]["task_id"];
    ЗаписатьПараметр("Ozon_TaskID", IDЗадания);
    Параметры.Вставить("Ozon_TaskID", IDЗадания);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ДобавитьВидеоТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ДобавитьВидеообложкуТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ДополнитьКомплексныйАтрибут(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтатусДобавленияТовара(Знач Результат, Знач Вариант)

    Статус            = Результат["result"]["items"][0]["status"];
    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Статус = "imported" Или Статус = "skipped").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_СоздатьТоварыПоOzonID(Знач Результат, Знач Вариант)

    IDЗадачи = Результат["result"]["task_id"];
    ОжидаетЧто(IDЗадачи).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСокращеннуюСтруктуруТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруОбновленияХарактеристик(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ОбновитьХарактеристикиТоваров(Знач Результат, Знач Вариант, Параметры = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDЗадачи = Результат["task_id"];
        ОжидаетЧто(IDЗадачи).Заполнено();

        ЗаписатьПараметр("Ozon_AttUpdateTaskID", IDЗадачи);
        Параметры.Вставить("Ozon_AttUpdateTaskID", IDЗадачи);

    Иначе

        Статус            = Результат["result"]["items"][0]["status"];
        ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");
        ОжидаетЧто(Статус = "imported" Или Статус = "skipped").Равно(Истина);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруФильтраТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокТоваров(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");

    IDТовара = Результат["result"]["items"][0]["product_id"];
    ЗаписатьПараметр("Ozon_ProductID", IDТовара);
    Параметры.Вставить("Ozon_ProductID", IDТовара);

    IDТовара = Результат["result"]["items"][1]["product_id"];
    ЗаписатьПараметр("Ozon_ProductID2", IDТовара);
    Параметры.Вставить("Ozon_ProductID2", IDТовара);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьОписанияХарактеристикТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьКонтентРейтингТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["products"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьИнформациюОТоварах(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["items"][0]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьОписаниеТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]["id"]).Заполнено();
    ОжидаетЧто(Результат["result"]["name"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьЛимитыРаботыСТоварами(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["daily_create"]).Заполнено();
    ОжидаетЧто(Результат["daily_update"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ОбновитьИзображенияТовара(Знач Результат, Знач Вариант)

    // TODO: Вернуть проверку позже
    // ОжидаетЧто(Результат["result"]["pictures"]).ИмеетТип("Массив").Заполнено();

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПроверитьЗагрузкуИзображенийТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ИзменитьАртикулыТоваров(Знач Результат, Знач Вариант)

    // TODO: Вернуть проверку позже
    // ОжидаетЧто(Результат["errors"].Количество()).Равно(0);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_АрхивироватьТовары(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_РазархивироватьТовары(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_УдалитьТоварыБезSKU(Знач Результат, Знач Вариант)

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ЗагрузитьКодыАктивацииТовара(Знач Результат, Знач Вариант, Параметры = "")

    IDЗадания = 1;
    ЗаписатьПараметр("Ozon_CodesTaskID", IDЗадания);
    Параметры.Вставить("Ozon_CodesTaskID", IDЗадания);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтатусДобавленияКодов(Знач Результат, Знач Вариант)

    // ОжидаетЧто(Результат["result"]["status"]).Равно("imported");

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьКоличествоПодписчиковТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"][0]["count"]).ИмеетТип("Число");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСвязанныеSKU(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["availability"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПривязатьШтрихкоды(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_СоздатьШтрихкоды(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["errors"].Количество()).Равно(0);

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокСкладов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьКоличествоТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ОбновитьЦеныТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"][0]["updated"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ОбновитьКоличествоТоваров(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьЦеныТоваров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьИнформациюОбУценке(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_УстановитьСкидкуНаУцененныйТовар(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокАкций(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьДоступныеТоварыАкции(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьУчаствующиеТоварыАкции(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруОстатковТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруЦеныТовара(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокКластеров(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["clusters"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокСкладовОтгрузки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["search"]).ИмеетТип("Массив");

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_СоздатьЧерновикЗаявкиFBO(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["operation_id"]).ИмеетТип("Строка").Заполнено();

    IDЧерновика = Результат["operation_id"];
    ЗаписатьПараметр("Ozon_FBOOperID", IDЧерновика);
    Параметры.Вставить("Ozon_FBOOperID", IDЧерновика);

    OPI_Инструменты.Пауза(5);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьЧерновикЗаявкиFBO(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["status"]).Равно("CALCULATION_STATUS_SUCCESS");

    IDЧерновика = Результат["draft_id"];
    ЗаписатьПараметр("Ozon_Draft", IDЧерновика);
    Параметры.Вставить("Ozon_Draft", IDЧерновика);

    IDСклада = Результат["clusters"][0]["warehouses"][0]["supply_warehouse"]["warehouse_id"];
    ЗаписатьПараметр("Ozon_FBOWarehouse", IDСклада);
    Параметры.Вставить("Ozon_FBOWarehouse", IDСклада);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруДопПолейОтправления(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСтруктуруФильтраОтправлений(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьСписокОтправленийFBO(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ozon_ПолучитьТаймслотыFBO(Знач Результат, Знач Вариант)

    // ОжидаетЧто(Результат["drop_off_warehouse_timeslots"]).ИмеетТип("Массив");
    Возврат Неопределено;

КонецФункции

Функция Проверка_Neocities_ЗагрузитьФайл(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_ЗагрузитьФайлы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_УдалитьВыбранныеФайлы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_ПолучитьДанныеОСайте(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_ПолучитьТокен(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Neocities_СинхронизироватьКаталоги(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["errors"]).Равно(0);
    ОжидаетЧто(Результат["items"].Количество()).Равно(0);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьТокен(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["expires_in"]).Заполнено();
    ОжидаетЧто(Результат["token_type"]).Заполнено();

    Токен = Результат["access_token"];
    ЗаписатьПараметр("CDEK_Token", Токен);
    OPI_Инструменты.ДобавитьПоле("CDEK_Token", Токен, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьОписаниеЗаказа(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_СоздатьЗаказ(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_OrderUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьЗаказ(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["entity"]["number"]).Заполнено();

    ВнутреннийНомер = Результат["entity"]["number"];
    ЗаписатьПараметр("CDEK_OrderIMN", ВнутреннийНомер);
    OPI_Инструменты.ДобавитьПоле("CDEK_OrderIMN", ВнутреннийНомер, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьЗаказПоНомеру(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["entity"]["number"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ИзменитьЗаказ(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_УдалитьЗаказ(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ОформитьКлиентскийВозврат(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_СоздатьОтказ(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьОписаниеЗаявкиКурьера(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_СоздатьЗаявкуНаВызовКурьера(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_IntakeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_IntakeUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьЗаявкуНаВызовКурьера(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_УдалитьЗаявкуНаВызовКурьера(Знач Результат, Знач Вариант)

    // ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    // ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    // Статус = Результат["requests"][0]["state"];

    // ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Неопределено;

КонецФункции

Функция Проверка_CDEK_СформироватьКвитанцию(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_PrintUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrintUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьКвитанцию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["statuses"][0]["code"]).Равно("ACCEPTED");
    ОжидаетЧто(Результат["entity"]["copy_count"]).Равно(1);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_СформироватьШтрихкод(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_BarcodeUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_BarcodeUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьШтрихкод(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["statuses"][0]["code"]).Равно("ACCEPTED");
    ОжидаетЧто(Результат["entity"]["copy_count"]).Равно(1);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьДоступныеИнтервалыДоставки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["date_intervals"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьОписаниеДоговоренности(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ЗафиксироватьДоговоренностьОДоставке(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_ApptUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_ApptUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьДоговоренностьОДоставке(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_СоздатьПреалерт(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    UUID = Результат["entity"]["uuid"];
    ЗаписатьПараметр("CDEK_PrealertUUID", UUID);
    OPI_Инструменты.ДобавитьПоле("CDEK_PrealertUUID", UUID, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьПреалерт(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["entity"]["shipment_point"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьСтатусПаспортныхДанных(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["orders"][0]["passport"][0]["client"]).Равно("SENDER");
    ОжидаетЧто(Результат["orders"][0]["passport"][1]["client"]).Равно("RECEIVER");

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьЧекЗаказа(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьЧекиНаДату(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьРеестрыПлатежейНаДату(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьПереводыПлатежейНаДату(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьОписаниеФильтраОфисов(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьСписокОфисов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_CDEK_ПолучитьСписокРегионов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьСписокМеток(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["labels"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_СоздатьМетку(Знач Результат, Знач Вариант, Параметры = "", Наименование = "")

    ОжидаетЧто(Результат["label"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["label"]["id"]).Заполнено();

    Если ЗначениеЗаполнено(Наименование) Тогда
        ОжидаетЧто(Результат["label"]["name"]).Равно(Наименование);
    КонецЕсли;

    IDМетки = Результат["label"]["id"];
    ЗаписатьПараметр("Metrika_LabelID", IDМетки);
    OPI_Инструменты.ДобавитьПоле("Metrika_LabelID", IDМетки, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_УдалитьМетку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["success"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ИзменитьМетку(Знач Результат, Знач Вариант, Наименование = "")

    ОжидаетЧто(Результат["label"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["label"]["id"]).Заполнено();

    Если ЗначениеЗаполнено(Наименование) Тогда
        ОжидаетЧто(Результат["label"]["name"]).Равно(Наименование);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьМетку(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["label"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["label"]["id"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьСтруктуруСчетчика(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_СоздатьСчетчик(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["counter"]).ИмеетТип("Соответствие").Заполнено();

    IDСчетчика = Результат["counter"]["id"];
    ЗаписатьПараметр("Metrika_CounterID", IDСчетчика);
    OPI_Инструменты.ДобавитьПоле("Metrika_CounterID", IDСчетчика, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_УдалитьСчетчик(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["success"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ИзменитьСчетчик(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["counter"]).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьСчетчик(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["counter"]).ИмеетТип("Соответствие").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ВосстановитьСчетчик(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["success"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьСписокСчетчиков(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["counters"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_YandexMetrika_ПолучитьСписокОпераций(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["operations"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСтруктуруДанных(Знач Результат, Знач Вариант)

    Результат["SecretKey"] = "***";

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ОтправитьЗапросБезТела(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_S3_ОтправитьЗапросСТелом(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_S3_СоздатьБакет(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        Успех = Результат["status"] >= 200 И Результат["status"] < 300;
        ОжидаетЧто(Успех).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УдалитьБакет(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСписокБакетов(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПроверитьДоступностьБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьШифрованиеБакета(Знач Результат, Знач Вариант)

    Возврат Неопределено;

КонецФункции

Функция Проверка_S3_УдалитьШифрованиеБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УстановитьШифрованиеБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] = 501;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Неопределено;

КонецФункции

Функция Проверка_S3_ПолучитьТегиБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УстановитьТегиБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УдалитьТегиБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьНастройкийВерсионированияБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УстановитьНастройкиВерсионированияБакета(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ЗагрузитьОбъект(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ЗагрузитьОбъектЦеликом(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УдалитьОбъект(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьОписаниеОбъекта(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_КопироватьОбъект(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УстановитьТегиОбъекта(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьТегиОбъекта(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_УдалитьТегиОбъекта(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСписокОбъектов(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСписокВерсийОбъектов(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьОбъект(Знач Результат, Знач Вариант, Размер = "")

    Если Вариант = "Файл" Или Вариант = "Большой файл" Тогда

        Если Не ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда

            Результат = Новый Файл(Результат);
            ОжидаетЧто(Результат).ИмеетТип("Файл");
            ОжидаетЧто(Результат.Существует()).Равно(Истина);

        КонецЕсли;

    Иначе
        ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    КонецЕсли;

    ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ИнициализироватьЗагрузкуЧастями(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ЗавершитьЗагрузкуЧастями(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ЗагрузитьЧастьОбъекта(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ОтменитьЗагрузкуЧастями(Знач Результат, Знач Вариант)

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСсылкуСкачиванияОбъекта(Знач Результат, Знач Вариант, Размер = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат).ИмеетТип("Строка");
    Иначе
       ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
        ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_S3_ПолучитьСсылкуЗагрузкиОбъекта(Знач Результат, Знач Вариант, Размер = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат).ИмеетТип("Строка");
    ИначеЕсли Вариант = "Проверка" Тогда
        ОжидаетЧто(Число(Результат["headers"]["Content-Length"])).Равно(Размер);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_ReportPortal_ПолучитьВременныйТокен(Знач Результат, Знач Вариант, Параметры = "")

    Токен = Результат["access_token"];

    ОжидаетЧто(Токен).Заполнено();

    ЗаписатьПараметр("RPortal_TempToken", Токен);
    Параметры.Вставить("RPortal_TempToken", Токен);

    Возврат Результат;

КонецФункции

Функция Проверка_ReportPortal_ПолучитьПостоянныйТокен(Знач Результат, Знач Вариант, Параметры = "")

    Токен = Результат["api_key"];
    ID    = Результат["id"];

    ОжидаетЧто(Токен).Заполнено();

    ЗаписатьПараметр("RPortal_TestApiKey", Токен);
    Параметры.Вставить("RPortal_TestApiKey", Токен);

    ЗаписатьПараметр("RPortal_TestKeyID", ID);
    Параметры.Вставить("RPortal_TestKeyID", ID);

    Возврат Результат;

КонецФункции

Функция Проверка_ReportPortal_УдалитьПостоянныйТокен(Знач Результат, Знач Вариант)

    Ответ = Результат["message"];
    ОжидаетЧто(СтрЗаканчиваетсяНа(Ответ, "was successfully deleted.")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));

    ОжидаетЧто(Результат).Равно("AddIn.OPI_TCPClient.Main");

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ПрочитатьДвоичныеДанные(Знач Результат, Знач Вариант, Сообщение = "")

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    ОжидаетЧто(Результат).Равно(Сообщение);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ОтправитьДвоичныеДанные(Знач Результат, Знач Вариант, Сообщение = "")

    Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);

    ОжидаетЧто(Результат).Равно(Сообщение);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ОбработатьЗапрос(Знач Результат, Знач Вариант, Сообщение = "")

    ОжидаетЧто(Результат).Равно(Сообщение);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ПрочитатьСтроку(Знач Результат, Знач Вариант, Сообщение = "")

    ОжидаетЧто(Результат).Равно(Сообщение);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ОтправитьСтроку(Знач Результат, Знач Вариант, Сообщение = "")

    ОжидаетЧто(Результат).Равно(Сообщение);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ПолучитьНастройкиTls(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_TCP_ПолучитьПоследнююОшибку(Знач Результат, Знач Вариант)

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Если Вариант = "Закрытие" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    Иначе
        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_SQLite.Main");
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда
        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_SQLite.Main");
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ВыполнитьЗапросSQL(Знач Результат, Знач Вариант, Картинка = "")


    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

        Blob                                 = Результат["data"][0]["data"]["blob"];
        Результат["data"][0]["data"]["blob"] = "Base64";

        ОжидаетЧто(Base64Значение(Blob).Размер()).Равно(Картинка.Размер());

    ИначеЕсли Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_SQLite.Main");

    ИначеЕсли Вариант = "Расширение" Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ЭтоКоннектор(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_СоздатьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ДобавитьЗаписи(Знач Результат, Знач Вариант)

    Если Вариант = "Ошибка поля" Или Вариант = "Ошибка JSON" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    ИначеЕсли Вариант = "Ошибка без транзакции" Тогда
         ОжидаетЧто(Результат["rows"] = 1 Или Результат["rows"] = 2).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ПолучитьЗаписи(Знач Результат, Знач Вариант)

    Если Вариант = "Ошибка" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ОбновитьЗаписи(Знач Результат, Знач Вариант, СтруктураПолей = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Проверка = Результат["data"][0];

        Для Каждого Значение Из СтруктураПолей Цикл
            Проверка[Значение.Ключ] = Значение.Значение;
        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_УдалитьЗаписи(Знач Результат, Знач Вариант)

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ПолучитьИнформациюОТаблице(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ПолучитьСтруктуруФильтраЗаписей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_УдалитьТаблицу(Знач Результат, Знач Вариант)

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ОчиститьТаблицу(Знач Результат, Знач Вариант)

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(0);

    ИначеЕсли Вариант = "Таблица" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(5);

    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ПодключитьРасширение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(1);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ДобавитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["name"] = "new_col" Тогда

                ОжидаетЧто(Колонка["type"]).Равно("TEXT");
                Найдена = Истина;

            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Истина);

    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_УдалитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["name"] = "new_col" Тогда

                Найдена = Истина;

            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Ложь);

    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_SQLite_ГарантироватьТаблицу(Знач Результат, Знач Вариант, СтруктураКолонок = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Или Вариант = "Новая" Тогда

        ОжидаетЧто(Результат["commit"]["result"]).Равно(Истина);

    Иначе

        ОжидаетЧто(Результат["data"].Количество()).Равно(СтруктураКолонок.Количество());

        Для Каждого Колонка Из Результат["data"] Цикл
            ОжидаетЧто(Колонка["type"]).Равно(СтруктураКолонок[Колонка["name"]]);
        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_СформироватьСтрокуПодключения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));
    ОжидаетЧто(Результат).Равно("AddIn.OPI_PostgreSQL.Main");

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ЭтоКоннектор(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ВыполнитьЗапросSQL(Знач Результат, Знач Вариант, Картинка = "")

    Если Вариант = "Соединение" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_PostgreSQL.Main");

    ИначеЕсли ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    Иначе

        Blob = Результат["data"][0]["data"]["BYTEA"];

        Результат["data"][0]["data"]["BYTEA"] = "Base64";
        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Base64Значение(Blob).Размер()).Равно(Картинка.Размер());

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_СоздатьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_PostgreSQL.Main");

    ИначеЕсли Вариант = "Существующая" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_СоздатьТаблицу(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ПолучитьИнформациюОТаблице(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(25);
    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ДобавитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ПолучитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Если ЗначениеЗаполнено(Результат["data"]) Тогда
            Результат["data"][0]["bytea_field"]["BYTEA"] = Лев(Результат["data"][0]["bytea_field"]["BYTEA"], 10) + "...";
        КонецЕсли;

    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ОбновитьЗаписи(Знач Результат, Знач Вариант, Количество = "", СтруктураПолей = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);

        Для Н = 0 По Результат["data"].ВГраница() Цикл

            Для Каждого Значение Из СтруктураПолей Цикл
                Результат["data"][Н][Значение.Ключ] = Значение.Значение;
            КонецЦикла;

        КонецЦикла;
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_УдалитьЗаписи(Знач Результат, Знач Вариант, Количество = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_УдалитьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_УдалитьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_PostgreSQL.Main");

    ИначеЕсли Вариант = "Ошибка" Или Вариант = "Ошибка подключения" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ОчиститьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ОтключитьВсеСоединенияБазыДанных(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ПолучитьСтруктуруФильтраЗаписей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ПолучитьНастройкиTLS(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ДобавитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["column_name"] = "new_field" Тогда
                ОжидаетЧто(нРег(Колонка["data_type"])).Равно("text");
                Найдена = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Истина);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_УдалитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["column_name"] = "new_field" Тогда
                Найдена = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Ложь);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_PostgreSQL_ГарантироватьТаблицу(Знач Результат, Знач Вариант, СтруктураКолонок = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(СтруктураКолонок.Количество());

        Для Каждого Колонка Из Результат["data"] Цикл
            ОжидаетЧто(нРег(Колонка["data_type"])).Равно(нРег(СтруктураКолонок[Колонка["column_name"]]));
        КонецЦикла;

    Иначе
        ОжидаетЧто(Результат["commit"]["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_СформироватьСтрокуПодключения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));
    ОжидаетЧто(Результат).Равно("AddIn.OPI_MySQL.Main");

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ЭтоКоннектор(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ВыполнитьЗапросSQL(Знач Результат, Знач Вариант, Картинка = "")

    Если Вариант = "Соединение" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MySQL.Main");

    ИначеЕсли ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    Иначе

        Blob = Результат["data"][0]["data"]["BYTES"];

        Результат["data"][0]["data"]["BYTES"] = "Base64";
        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Base64Значение(Blob).Размер()).Равно(Картинка.Размер());

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_СоздатьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MySQL.Main");

    ИначеЕсли Вариант = "Существующая" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_СоздатьТаблицу(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ДобавитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ПолучитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Если ЗначениеЗаполнено(Результат["data"]) Тогда
            Результат["data"][0]["mediumblob_field"]["BYTES"] = Лев(Результат["data"][0]["mediumblob_field"]["BYTES"], 10) + "...";
        КонецЕсли;

    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ОбновитьЗаписи(Знач Результат, Знач Вариант, Количество = "", СтруктураПолей = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);

        Для Н = 0 По Результат["data"].ВГраница() Цикл

            Для Каждого Значение Из СтруктураПолей Цикл
                Результат["data"][Н][Значение.Ключ] = Значение.Значение;
            КонецЦикла;

        КонецЦикла;
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_УдалитьЗаписи(Знач Результат, Знач Вариант, Количество = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_УдалитьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_УдалитьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MySQL.Main");

    ИначеЕсли Вариант = "Ошибка" Или Вариант = "Ошибка подключения" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ОчиститьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ПолучитьСтруктуруФильтраЗаписей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ПолучитьНастройкиTLS(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ПолучитьИнформациюОТаблице(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(20);
    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ДобавитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["COLUMN_NAME"] = "new_field" Тогда

                ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
                ОжидаетЧто(нРег(ТекущийТип)).Равно("mediumtext");
                Найдена    = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Истина);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_УдалитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["COLUMN_NAME"] = "new_field" Тогда
                Найдена = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Ложь);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MySQL_ГарантироватьТаблицу(Знач Результат, Знач Вариант, СтруктураКолонок = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(СтруктураКолонок.Количество());

        Для Каждого Колонка Из Результат["data"] Цикл
            ТекущийТип = ПолучитьСтрокуИзДвоичныхДанных(Base64Значение(Колонка["DATA_TYPE"]["BYTES"]));
            ОжидаетЧто(нРег(ТекущийТип)).Равно(нРег(СтруктураКолонок[Колонка["COLUMN_NAME"]]));
        КонецЦикла;

    Иначе
        ОжидаетЧто(Результат["commit"]["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_СформироватьПараметрыДоступа(Знач Результат, Знач Вариант)

    Результат.Вставить("apiTokenInstance", "***");
    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьНастройкиИнстанса(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON");
    КонецПопытки;

    ОжидаетЧто(Результат["proxyInstance"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьИнформациюОбАккаунте(Знач Результат, Знач Вариант)

    Попытка
        Результат["deviceId"] = "***";
        Результат["phone"]    = "***";
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["deviceId"]).Заполнено();
    ОжидаетЧто(Результат["phone"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьСтруктуруНастроекИнстанса(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УстановитьНастройкиИнстанса(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["saveSettings"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьСостояниеИнстанса(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["stateInstance"]).Равно("authorized");

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПерезапуститьИнстанс(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["isReboot"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьQR(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= 0).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_РазлогинитьИнстанс(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["isLogout"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьКодАвторизации(Знач Результат, Знач Вариант)

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УстановитьКартинкуПрофиля(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["setProfilePicture"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_СоздатьГруппу(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["created"]).Равно(Истина);
    ОжидаетЧто(Результат["chatId"]).Заполнено();

    IDГруппы = Результат["chatId"];
    ЗаписатьПараметр("GreenAPI_GroupID", IDГруппы);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_GroupID", IDГруппы, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПокинутьГруппу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьИнформациюОГруппе(Знач Результат, Знач Вариант)

    Попытка
        Результат["owner"]                 = "***";
        Результат["participants"][0]["id"] = "***";
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["groupId"]).Заполнено();
    ОжидаетЧто(Результат["owner"]).Заполнено();
    ОжидаетЧто(Результат["creation"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ИзменитьИмяГруппы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["updateGroupName"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ДобавитьУчастникаВГруппу(Знач Результат, Знач Вариант)

    Попытка
        Результат["addParticipant"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["addParticipant"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ИсключитьУчастникаГруппы(Знач Результат, Знач Вариант)

    Попытка
        Результат["removeParticipant"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["removeParticipant"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_НазначитьПраваАдминистратора(Знач Результат, Знач Вариант)

    Попытка
        Результат["setGroupAdmin"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["setGroupAdmin"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтозватьПраваАдминистратора(Знач Результат, Знач Вариант)

    Попытка
        Результат["removeAdmin"] = Истина;
    Исключение
        Сообщить("Не удалось заменить секреты!");
    КонецПопытки;

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УстановитьКартинкуГруппы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["setGroupPicture"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьТекстовоеСообщение(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_MessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_MessageID", IDСообщения, "Строка", Параметры);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УдалитьСообщение(Знач Результат, Знач Вариант)

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ИзменитьТекстСообщения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьФайл(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();
    ОжидаетЧто(Результат["urlFile"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_FileMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_FileMessageID", IDСообщения, "Строка", Параметры);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьФайлПоURL(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_FileMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_FileMessageID", IDСообщения, "Строка", Параметры);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьОпрос(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_PollMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_PollMessageID", IDСообщения, "Строка", Параметры);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьОписаниеЛокации(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьЛокацию(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_LocMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_LocMessageID", IDСообщения, "Строка", Параметры);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьОписаниеКонтакта(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОтправитьКонтакт(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        IDСообщения = Результат["idMessage"];
        ЗаписатьПараметр("GreenAPI_ContactMessageID", IDСообщения);
        OPI_Инструменты.ДобавитьПоле("GreenAPI_ContactMessageID", IDСообщения, "Строка", Параметры);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПереслатьСообщения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьУведомление(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON");
    КонецПопытки;

    Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);

    ОжидаетЧто(Результат["receiptId"]).Заполнено();

    IDУведомления = Результат["receiptId"];
    ЗаписатьПараметр("GreenAPI_ReceiptID", IDУведомления);
    OPI_Инструменты.ДобавитьПоле("GreenAPI_ReceiptID", IDУведомления, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УдалитьУведомлениеИзОчереди(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_СкачатьФайлСообщения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["downloadUrl"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_УстановитьОтметкуПрочтения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["setRead"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьОчередьСообщений(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ОчиститьОчередьСообщений(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["isCleared"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьИсториюЧата(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON");
    КонецПопытки;

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьСообщение(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON")
    КонецПопытки;

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьЖурналВходящихСообщений(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON");
    КонецПопытки;

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_ПолучитьЖурналИсходящихСообщений(Знач Результат, Знач Вариант, Параметры = "")

    Попытка
        JSON = OPI_Инструменты.JSONСтрокой(Результат);
        JSON = СтрЗаменить(JSON, Параметры["GreenAPI_AccountID"], "1234567890@c.us");

        Результат = OPI_Инструменты.JsonВСтруктуру(JSON, Истина);
    Исключение
        Сообщить("Ошибка JSON");
    КонецПопытки;

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_АрхивироватьЧат(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_GreenAPI_РазархивироватьЧат(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_RCON_СформироватьПараметрыСоединения(Знач Результат, Знач Вариант)

    Результат["url"]      = "127.0.0.1:25565";
    Результат["password"] = "***";

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_RCON_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));
    ОжидаетЧто(Результат).Равно("AddIn.OPI_RCON.Main");

    Возврат Результат;

КонецФункции

Функция Проверка_RCON_ВыполнитьКоманду(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_RCON_ЭтоКоннектор(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьОтвет(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["response"]).Заполнено();
    ОжидаетЧто(Результат["done"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьОтветВКонтексте(Знач Результат, Знач Вариант, Сообщение1 = "", Сообщение2 = "", Сообщение3 = "")

    Если Вариант = "Сравнение" Тогда

        ОжидаетЧто(Сообщение1 = Сообщение2).Равно(Истина);
        ОжидаетЧто(Сообщение1 = Сообщение3).Равно(Ложь);

    Иначе
        ОжидаетЧто(Результат["model"]).Заполнено();
        ОжидаетЧто(Результат["message"]).Заполнено();
        ОжидаетЧто(Результат["done"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ЗагрузитьМодельВПамять(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["done"]).Равно(Истина);
    ОжидаетЧто(Результат["done_reason"]).Равно("load");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ВыгрузитьМодельИзПамяти(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["done"]).Равно(Истина);
    ОжидаетЧто(Результат["done_reason"]).Равно("unload");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСтруктуруПараметровЗапроса(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСтруктуруПараметровВКонтексте(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСтруктуруСообщенияКонтекста(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСтруктуруНастроекМодели(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_СоздатьМодель(Знач Результат, Знач Вариант)

    Если Вариант = "Запрос" Тогда

        ОжидаетЧто(Результат["model"]).Заполнено();
        ОжидаетЧто(Результат["response"]).Заполнено();
        ОжидаетЧто(Результат["done"]).Равно(Истина);

    Иначе
        ОжидаетЧто(Результат["status"]).Равно("success");
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_УдалитьМодель(Знач Результат, Знач Вариант)

    Если Вариант = "Список" Тогда
        ОжидаетЧто(Результат["models"].Количество()).Равно(0);
    ИначеЕсли Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСписокМоделей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["models"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСписокЗапущенныхМоделей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["models"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьИнформациюОМодели(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["parameters"]).Заполнено();
    ОжидаетЧто(Результат["model_info"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_КопироватьМодель(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьВерсию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["version"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьПредставления(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["embeddings"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПолучитьСтруктуруПараметровПредставлений(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ОтправитьМодель(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["status"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_СкачатьМодель(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["status"]).Равно("success");

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ОтправитьBlob(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);

    ЗаписатьПараметр("Ollama_Blob", Результат["digest"]);
    Параметры.Вставить("Ollama_Blob", Результат["digest"]);

    Возврат Результат;

КонецФункции

Функция Проверка_Ollama_ПроверитьBlob(Знач Результат, Знач Вариант, Параметры = "")

    Если Вариант = "Ошибка" Тогда
        ОжидаетЧто(Результат["status_code"] >= 400).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_Инициализировать(Знач Результат, Знач Вариант, Параметры = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Попытка
            Результат["origin"] = "***";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Результат["args"].Количество()).Равно(0);

    ИначеЕсли Вариант = "Проверка 1" Тогда

        Попытка

            HTTPЗапрос     = Результат.ВернутьЗапрос();
            HTTPСоединение = Результат.ВернутьСоединение();
            HTTPОтвет      = Результат.ВернутьОтвет();
            ОсновнойURL    = СтрЗаменить(Параметры["HTTP_URL"], "https://", "");

            ОжидаетЧто(HTTPЗапрос).ИмеетТип("HTTPЗапрос");
            ОжидаетЧто(HTTPСоединение).ИмеетТип("HTTPСоединение");

            ОжидаетЧто(HTTPЗапрос.АдресРесурса).Равно("/get");
            ОжидаетЧто(HTTPСоединение.Сервер).Равно(ОсновнойURL);

            ОжидаетЧто(HTTPОтвет).Равно(Неопределено);

        Исключение
            ВызватьИсключение ОписаниеОшибки() + Символы.ПС + Символы.ПС + Результат.ПолучитьЛог(Истина);
        КонецПопытки;

    Иначе

        Попытка
            ОжидаетЧто(Результат).ИмеетТип("HTTPЗапрос");
            ОжидаетЧто(Результат.АдресРесурса).Равно("/post");
        Исключение
            ВызватьИсключение ОписаниеОшибки() + Символы.ПС + Символы.ПС + Результат.ПолучитьЛог(Истина);
        КонецПопытки;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьURL(Знач Результат, Знач Вариант, Параметры = "")

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Попытка
            Результат["origin"] = "***";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Результат["args"].Количество()).Равно(0);

    Иначе

        Попытка

            HTTPЗапрос     = Результат.ВернутьЗапрос();
            HTTPСоединение = Результат.ВернутьСоединение();
            HTTPОтвет      = Результат.ВернутьОтвет();
            ОсновнойURL    = СтрЗаменить(Параметры["HTTP_URL"], "https://", "");

            ОжидаетЧто(HTTPЗапрос).ИмеетТип("HTTPЗапрос");
            ОжидаетЧто(HTTPСоединение).ИмеетТип("HTTPСоединение");

            ОжидаетЧто(HTTPЗапрос.АдресРесурса).Равно("/get");
            ОжидаетЧто(HTTPСоединение.Сервер).Равно(ОсновнойURL);

            ОжидаетЧто(HTTPОтвет).Равно(Неопределено);

        Исключение
            ВызватьИсключение ОписаниеОшибки() + Символы.ПС + Символы.ПС + Результат.ПолучитьЛог(Истина);
        КонецПопытки;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьПараметрыURL(Знач Результат, Знач Вариант, Параметры = "")

    Адрес     = "/get?param1=text&param2=10";

    СоответствиеОтветов = Новый Соответствие;
    СоответствиеОтветов.Вставить("Вариант 1", "/page?param1=search%3Ftext&param2=John%20Doe&param3=value%26another&param4=%D0%BA%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0&param5=%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E");
    СоответствиеОтветов.Вставить("Вариант 2", "/page?existing=value&param1=search%3Ftext&param2=John%20Doe");
    СоответствиеОтветов.Вставить("Вариант 3", "/page?param1=search%3Ftext&param2=John%20Doe");
    СоответствиеОтветов.Вставить("Вариант 4", "/path%20with%20spaces?param1=search%3Ftext&param2=John%20Doe");
    СоответствиеОтветов.Вставить("Вариант 5", "/page?param1=search%3Ftext&param2=John%20Doe#section");
    СоответствиеОтветов.Вставить("Вариант 6", "/%D0%BF%D1%83%D1%82%D1%8C?param1=search%3Ftext&param2=John%20Doe");
    СоответствиеОтветов.Вставить("Вариант 7", "/page?param1=value1&param2=value%20two&param3=value%3Cthree%3E");


    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Попытка
            Результат["origin"] = "***";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ПолныйURL = Параметры["HTTP_URL"] + Адрес;

        ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Результат["args"].Количество()).Равно(2);
        ОжидаетЧто(Результат["url"]).Равно(ПолныйURL);

    ИначеЕсли Вариант = "Проверка" Тогда

        Попытка

        ОжидаетЧто(Результат).ИмеетТип("HTTPЗапрос");
        ОжидаетЧто(Результат.АдресРесурса).Равно(Адрес);

        Исключение
            ВызватьИсключение ОписаниеОшибки() + Символы.ПС + Символы.ПС + Результат.ПолучитьЛог(Истина);
        КонецПопытки;

    Иначе
        ОжидаетЧто(Результат).Равно(СоответствиеОтветов[Вариант]);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьФайлОтвета(Знач Результат, Знач Вариант, ИВФ = "")

    ФайлТела = Новый Файл(ИВФ);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        ФайлТелаВозврат = Новый Файл(Результат);

        ОжидаетЧто(ИВФ).Равно(Результат);
        ОжидаетЧто(ФайлТела.Размер()).Равно(ФайлТелаВозврат.Размер());
        ОжидаетЧто(ФайлТела.Размер() > 0).Равно(Истина);

    Иначе

        ОжидаетЧто(ФайлТела.Размер()).Равно(Результат.Размер());

        РезультатПроверкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Результат);

        ОжидаетЧто(OPI_Инструменты.JsonВСтруктуру(РезультатПроверкиСтрокой)).ИмеетТип("Соответствие");

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьТипДанных(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("text/markdown");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ПолучитьЛог(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьДвоичноеТело(Знач Результат, Знач Вариант, Картинка = "")

    Попытка
        Результат["origin"] = "***";
        Результат["data"]   = "...";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/octet-stream");

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);

    Размер = Картинка.Размер();
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Размер);
    ОжидаетЧто(Результат["headers"]["Content-Length"]).Равно(Размер);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьСтроковоеТело(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    Текст     = "Привет мир!";
    Кодировка = "Windows-1251";

    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("text/plain; charset=" + Кодировка);

    ТекстДД = ПолучитьДвоичныеДанныеИзСтроки(Текст, Кодировка);
    Размер  = ТекстДД.Размер();
    OPI_ПреобразованиеТипов.ПолучитьСтроку(Размер);

    ОжидаетЧто(Результат["headers"]["Content-Length"]).Равно(Размер);

    ТекстB64 = "data:application/octet-stream;base64," + Base64Строка(ТекстДД);

    ОжидаетЧто(Результат["data"] = ТекстB64 Или Результат["data"] = Текст).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьJsonТело(Знач Результат, Знач Вариант, JSONОригинал = "")

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/json; charset=utf-8");

    JSONРезультат = Результат["json"];

    ОжидаетЧто(JSONРезультат["Поле1"]).Равно(JSONОригинал["Поле1"]);
    ОжидаетЧто(JSONРезультат["Поле2"]).Равно(JSONОригинал["Поле2"]);
    ОжидаетЧто(JSONРезультат["Поле3"][0]).Равно(JSONОригинал["Поле3"][0]);
    ОжидаетЧто(JSONРезультат["Поле3"][1]).Равно(JSONОригинал["Поле3"][1]);
    ОжидаетЧто(JSONРезультат["Поле3"][2]).Равно(JSONОригинал["Поле3"][2]);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьFormТело(Знач Результат, Знач Вариант, Данные = "")

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("application/x-www-form-urlencoded; charset=utf-8");

    ОжидаетЧто(Результат["form"]["Поле1"]).Равно(Данные["Поле1"]);
    ОжидаетЧто(Результат["form"]["Поле2"]).Равно(Данные["Поле2"]);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_НачатьЗаписьТелаMultipart(Знач Результат, Знач Вариант, Картинка = "")

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьФайлMultipartFormData(Знач Результат, Знач Вариант, Картинка = "")

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьПолеMultipartFormData(Знач Результат, Знач Вариант, Картинка = "")

    Попытка
        Результат["origin"]         = "***";
        ФайлОтвета                  = Результат["files"]["file1"];
        Результат["files"]["file1"] = "...";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Картинка);
    ТекстB64 = "data:image/png;base64," + Base64Строка(Картинка);
    ТекстB64 = СтрЗаменить(ТекстB64,  Символы.ВК + Символы.ПС, "");

    ОжидаетЧто(Результат["form"]["Поле1"]).Равно("Текст");
    ОжидаетЧто(Результат["form"]["Поле2"]).Равно("10");
    ОжидаетЧто(ФайлОтвета).Равно(ТекстB64);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьДанныеRelated(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Content-Type"], "multipart/")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ИспользоватьКодировку(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    Кодировка = "Windows-1251";
    ОжидаетЧто(Результат["headers"]["Content-Type"]).Равно("text/plain; charset=" + Кодировка);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ИспользоватьСжатиеGzip(Знач Результат, Знач Вариант)

    Если Вариант = "Включено" Тогда
        Сжатие = "gzip";
    Иначе
        Сжатие = Неопределено;
    КонецЕсли;

    ОжидаетЧто(Результат.Заголовки["Accept-Encoding"]).Равно(Сжатие);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ИспользоватьПоляТелаВOAuth(Знач Результат, Знач Вариант, ЛогСтрокой = "")

    Если Вариант = "Включено" Тогда
        ОжидаетЧто(СтрНайти(Результат, "добавление полей тела в строку для подписи") <> 0).Равно(Истина);
    Иначе

        Попытка
            Результат["origin"]         = "***";
            Результат["files"]["file1"] = "...";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ОжидаетЧто(СтрНайти(ЛогСтрокой, "добавление полей тела в строку для подписи")).Равно(0);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьЗаголовки(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    Если Вариант = "Перезапись" Тогда
        ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
        ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
        ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");
    Иначе
        ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
        ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьЗаголовок(Знач Результат, Знач Вариант)

    Если Вариант = "Замена" Тогда

        ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
        ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
        ОжидаетЧто(Результат["headers"]["X-Header3"]).Равно(Неопределено);
        ОжидаетЧто(Результат["headers"]["X-Header4"]).Равно(Неопределено);
        ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");

    ИначеЕсли Вариант = "Дополнение" Тогда

        ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
        ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");
        ОжидаетЧто(Результат["headers"]["X-Header3"]).Равно("BadValue");
        ОжидаетЧто(Результат["headers"]["X-Header4"]).Равно("BadValue");
        ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer 1111");

    Иначе

        Попытка
            Результат["origin"] = "***";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ОжидаетЧто(Результат["headers"]["X-Header1"]).Равно("Value1");
        ОжидаетЧто(Результат["headers"]["X-Header2"]).Равно("Value2");

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьBasicАвторизацию(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Basic " + Base64Строка(ПолучитьДвоичныеДанныеИзСтроки("user:password")));

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьBearerАвторизацию(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["headers"]["Authorization"]).Равно("Bearer " + "123123");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьAWS4Авторизацию(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "AWS4")).Равно(Истина);
    ОжидаетЧто(Результат["headers"]["X-Amz-Content-Sha256"] = Неопределено).Равно(Ложь);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ДобавитьOAuthV1Авторизацию(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "OAuth")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьАлгоритмOAuthV1(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(СтрНачинаетсяС(Результат["headers"]["Authorization"], "OAuth")).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ОбработатьЗапрос(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["args"].Количество()).Равно(0);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВыполнитьЗапрос(Знач Результат, Знач Вариант)

    Если Вариант = "Без выполнения" Тогда

        ОжидаетЧто(Результат).Равно(Неопределено);

    ИначеЕсли Вариант = "Выполнение" Тогда

        ОжидаетЧто(Результат = Неопределено).Равно(Ложь);

    Иначе

        Попытка
            Результат["origin"] = "***";
        Исключение
            Попытка
                ВызватьИсключение Результат.ПолучитьЛог(Истина);
            Исключение
                ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецПопытки;
        КонецПопытки;

        ОжидаетЧто(Результат["args"]).ИмеетТип("Соответствие");
        ОжидаетЧто(Результат["args"].Количество()).Равно(0);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьЗапрос(Знач Результат, Знач Вариант)

    Если Вариант = "Принудительно" Тогда

        ОжидаетЧто(Результат).Равно(Неопределено);

    Иначе

        ОжидаетЧто(Результат).ИмеетТип("HTTPЗапрос");

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьСоединение(Знач Результат, Знач Вариант)

    Если Вариант = "Принудительно" Тогда

        ОжидаетЧто(Результат).Равно(Неопределено);

    Иначе

        ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьОтвет(Знач Результат, Знач Вариант)

   ОжидаетЧто(Результат).ИмеетТип("HTTPОтвет");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьОтветКакJSONКоллекцию(Знач Результат, Знач Вариант)

    Попытка
        Результат["origin"] = "***";
        Результат["data"]   = "...";
    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьОтветКакДвоичныеДанные(Знач Результат, Знач Вариант)

   ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьОтветКакСтроку(Знач Результат, Знач Вариант)

    Попытка

        РезультатJSON = OPI_Инструменты.JSONВСтруктуру(Результат);

        РезультатJSON["origin"] = "***";
        РезультатJSON["data"]   = "...";

        Результат = OPI_Инструменты.JSONСтрокой(РезультатJSON);

    Исключение
        Попытка
            ВызватьИсключение Результат.ПолучитьЛог(Истина);
        Исключение
            ВызватьИсключение ПолучитьСтрокуИзДвоичныхДанных(Результат);
        КонецПопытки;
    КонецПопытки;

    ОжидаетЧто(Результат).ИмеетТип("Строка");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ВернутьИмяФайлаТелаОтвета(Знач Результат, Знач Вариант, ИВФ = "")

    ФайлТела        = Новый Файл(ИВФ);
    ФайлТелаВозврат = Новый Файл(Результат);

    ОжидаетЧто(ИВФ).Равно(Результат);
    ОжидаетЧто(ФайлТела.Размер()).Равно(ФайлТелаВозврат.Размер());
    ОжидаетЧто(ФайлТела.Размер() > 0).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьПрокси(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");
    ОжидаетЧто(Результат.Прокси.Пользователь("https")).Равно("user");
    ОжидаетЧто(Результат.Прокси.Пароль("https")).Равно("password");

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_УстановитьТаймаут(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("HTTPСоединение");
    ОжидаетЧто(Результат.Таймаут).Равно(60);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_ИспользоватьКодированиеURL(Знач Результат, Знач Вариант)

    ПравильныйВариант1 = "/page?param1=search?text&param2=John Doe&param3=value&another&param4=кириллица&param5=<script>alert('XSS')</script>";
    ОжидаетЧто(Результат["Без кодирования"]).Равно(ПравильныйВариант1);

    ПравильныйВариант2 = "/page?param1=search%3Ftext&param2=John%20Doe&param3=value%26another&param4=%D0%BA%D0%B8%D1%80%D0%B8%D0%BB%D0%BB%D0%B8%D1%86%D0%B0&param5=%3Cscript%3Ealert%28%27XSS%27%29%3C%2Fscript%3E";
    ОжидаетЧто(Результат["С кодированием"]).Равно(ПравильныйВариант2);

    Возврат Результат;

КонецФункции

Функция Проверка_HTTPКлиент_РазделятьМассивыВURL(Знач Результат, Знач Вариант)

    Разделение    = Результат["Разделение"];
    БезРазделения = Результат["Без разделения"];
    РазделениеPhp = Результат["PHP"];

    ПравильныйВариант1 = "/page?arrayfield=val1&arrayfield=val2&arrayfield=val3";
    ОжидаетЧто(Разделение).Равно(ПравильныйВариант1);

    ПравильныйВариант2 = "/page?arrayfield=[val1,val2,val3]";
    ОжидаетЧто(БезРазделения).Равно(ПравильныйВариант2);

    ПравильныйВариант3 = "/page?arrayfield[]=val1&arrayfield[]=val2&arrayfield[]=val3";
    ОжидаетЧто(РазделениеPhp).Равно(ПравильныйВариант3);

    Результат = СтрШаблон("Без разделения: %1;
    |Разделение: %2
    |Разделение (php): %3", БезРазделения, Разделение, РазделениеPhp);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьОтвет(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("chat.completion");
    ОжидаетЧто(Результат["choices"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьПредставления(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_СоздатьАссистента(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("assistant");
    ОжидаетЧто(Результат["name"]).Равно("Math tutor");

    IDАссистента = Результат["id"];
    ЗаписатьПараметр("OpenAI_Assistant", IDАссистента);
    OPI_Инструменты.ДобавитьПоле("OpenAI_Assistant", IDАссистента, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_УдалитьАссистента(Знач Результат, Знач Вариант, IDАссистента = "")

    ОжидаетЧто(Результат["id"]).Равно(IDАссистента);
    ОжидаетЧто(Результат["object"]).Равно("assistant.deleted");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьАссистента(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("assistant");
    ОжидаетЧто(Результат["name"]).Равно("Math tutor");

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСписокАссистентов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ЗагрузитьФайл(Знач Результат, Знач Вариант, Параметры = "", ИмяФайла = "", Размер = "")

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("file");
    ОжидаетЧто(Результат["filename"]).Равно(ИмяФайла);
    ОжидаетЧто(Результат["bytes"]).Равно(Размер);
    ОжидаетЧто(Результат["purpose"]).Равно("assistants");

    IDФайла = Результат["id"];
    ЗаписатьПараметр("OpenAI_File", IDФайла);
    OPI_Инструменты.ДобавитьПоле("OpenAI_File", IDФайла, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_УдалитьФайл(Знач Результат, Знач Вариант, IDФайла = "")

    ОжидаетЧто(Результат["id"]).Равно(IDФайла);
    ОжидаетЧто(Результат["object"]).Равно("file");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьИнформациюОФайле(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("file");

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСписокФайлов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив");

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_СкачатьФайл(Знач Результат, Знач Вариант, Параметры = "")

    Файл = Параметры["Picture"];
    OPI_ПреобразованиеТипов.ПолучитьДвоичныеДанные(Файл);

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= Файл.Размер() + 2).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСтруктуруСообщения(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСтруктуруСообщенияКартинки(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_СгенерироватьРечь(Знач Результат, Знач Вариант, Параметры = "")

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    ОжидаетЧто(Результат.Размер() >= 137516).Равно(Истина);

    //@skip-check missing-temporary-file-deletion
    ИВФ = ПолучитьИмяВременногоФайла("wav");
    Результат.Записать(ИВФ);

    ЗаписатьПараметр("OpenAI_Speech", ИВФ);
    OPI_Инструменты.ДобавитьПоле("OpenAI_Speech", ИВФ, "Строка", Параметры);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_СоздатьТранскрипцию(Знач Результат, Знач Вариант)

    ОжидаетЧто(нРег(Результат["text"])).Равно("attack ships on fire off the shoulder of orion bright as magnesium.");

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьКартинки(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["data"]).Заполнено();
    ОжидаетЧто(Результат["created"]).Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСписокМоделей(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСообщениеАссистента(Знач Результат, Знач Вариант, Проверка = "")

    ОжидаетЧто(Результат).Равно(Проверка);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСообщениеПользователя(Знач Результат, Знач Вариант, Проверка = "")

    ОжидаетЧто(Результат).Равно(Проверка);

    Возврат Результат;

КонецФункции

Функция Проверка_OpenAI_ПолучитьСообщениеСистемы(Знач Результат, Знач Вариант, Проверка = "")

    ОжидаетЧто(Результат).Равно(Проверка);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_СформироватьСтрокуПодключения(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).ИмеетТип("Строка").Заполнено();

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));
    ОжидаетЧто(Результат).Равно("AddIn.OPI_MSSQL.Main");

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ЭтоКоннектор(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ВыполнитьЗапросSQL(Знач Результат, Знач Вариант, Картинка = "")

    Если Вариант = "Соединение" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MSSQL.Main");

    ИначеЕсли ЗначениеЗаполнено(Вариант) Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    Иначе

        Blob = Результат["data"][0]["Data"]["BYTES"];

        Результат["data"][0]["Data"]["BYTES"] = "Base64";
        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Base64Значение(Blob).Размер()).Равно(Картинка.Размер());

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ПолучитьНастройкиTLS(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_СоздатьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MSSQL.Main");

    ИначеЕсли Вариант = "Существующая" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_СоздатьТаблицу(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ДобавитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ПолучитьЗаписи(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Не ЗначениеЗаполнено(Вариант) Тогда

        Если ЗначениеЗаполнено(Результат["data"]) Тогда
            Результат["data"][0]["varbinary_field"]["BYTES"] = Лев(Результат["data"][0]["varbinary_field"]["BYTES"], 10) + "...";
        КонецЕсли;

    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ОбновитьЗаписи(Знач Результат, Знач Вариант, Количество = "", СтруктураПолей = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);

        Для Н = 0 По Результат["data"].ВГраница() Цикл

            Для Каждого Значение Из СтруктураПолей Цикл
                Результат["data"][Н][Значение.Ключ] = Значение.Значение;
            КонецЦикла;

        КонецЦикла;
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_УдалитьЗаписи(Знач Результат, Знач Вариант, Количество = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(Количество);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_УдалитьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_УдалитьБазуДанных(Знач Результат, Знач Вариант)

    Если Вариант = "Открытие" Тогда

        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_MSSQL.Main");

    ИначеЕсли Вариант = "Ошибка" Или Вариант = "Ошибка подключения" Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ОчиститьТаблицу(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ПолучитьИнформациюОТаблице(Знач Результат, Знач Вариант)

    Если Не ЗначениеЗаполнено(Вариант) Тогда
        ОжидаетЧто(Результат["data"].Количество()).Равно(16);
    Иначе
        ОжидаетЧто(Результат["data"].Количество()).Равно(0);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ДобавитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["column_name"] = "new_field" Тогда

                ОжидаетЧто(нРег(Колонка["data_type"])).Равно("bigint");
                Найдена = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Истина);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_УдалитьКолонкуТаблицы(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        Найдена = Ложь;

        Для Каждого Колонка Из Результат["data"] Цикл

            Если Колонка["column_name"] = "new_field" Тогда
                Найдена = Истина;
            КонецЕсли;

        КонецЦикла;

        ОжидаетЧто(Найдена).Равно(Ложь);

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ГарантироватьТаблицу(Знач Результат, Знач Вариант, СтруктураКолонок = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если Вариант = "Проверка" Тогда

        ОжидаетЧто(Результат["data"].Количество()).Равно(СтруктураКолонок.Количество());

        Для Каждого Колонка Из Результат["data"] Цикл
            ОжидаетЧто(нРег(Колонка["data_type"])).Равно(нРег(СтруктураКолонок[Колонка["column_name"]]));
        КонецЦикла;

    Иначе
        ОжидаетЧто(Результат["commit"]["result"]).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_MSSQL_ПолучитьСтруктуруФильтраЗаписей(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Если Вариант = "Пустая" Тогда

        Для Каждого Элемент Из Результат Цикл

            Если OPI_Инструменты.ЭтоПримитивныйТип(Элемент.Значение) Тогда
                ОжидаетЧто(ЗначениеЗаполнено(Элемент.Значение)).Равно(Ложь);
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ОткрытьСоединение(Знач Результат, Знач Вариант)

    Результат = Строка(ТипЗнч(Результат));
    ОжидаетЧто(Результат).Равно("AddIn.OPI_FTP.Main");

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьПриветственноеСообщение(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["data"]).Заполнено();

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьСписокРасширенийПротокола(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["data"]).Заполнено();

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_Пинг(Знач Результат, Знач Вариант)

    Если ЭтоТестCLI() Тогда
        ОжидаетЧто(нРег(Результат)).Равно("true");
    Иначе
        ОжидаетЧто(Результат).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ВыполнитьНестандартнуюКоманду(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["status"]).Заполнено();
    ОжидаетЧто(Результат["data"]).Заполнено();

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ВыполнитьПроизвольнуюКоманду(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["status"]).Заполнено();
    ОжидаетЧто(Результат["data"]).Заполнено();

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьТекущийКаталог(Знач Результат, Знач Вариант, Параметры = "")

    Путь = Результат["path"];

    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Путь).Заполнено();

    ЗаписатьПараметр("FTP_RootPath", Путь);
    OPI_Инструменты.ДобавитьПоле("FTP_RootPath", Путь, "Строка", Параметры);

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ИзменитьТекущийКаталог(Знач Результат, Знач Вариант, Путь = "")

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если СтрНайти(Вариант, "Проверка") И Не ЭтоТестCLI() Тогда
        ОжидаетЧто(СтрЗаканчиваетсяНа(Результат["path"], Путь)).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьКонфигурациюСоединения(Знач Результат, Знач Вариант, Параметры = "")

    Если СтрНайти(Вариант, "Проверка") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).Заполнено();
        ОжидаетЧто(Результат["close_connection"]["result"]).Равно(Истина);

    Иначе

        ИспользоватьПрокси = Параметры["Proxy"];
        FTPS               = Параметры["TLS"];

        Если ТипЗнч(Результат) = Тип("Структура") Тогда

            ОжидаетЧто(Результат.Свойство("set")).Равно(Истина);
            Результат["set"]["password"] = "***";

            Если FTPS Тогда
                ОжидаетЧто(Результат.Свойство("tls")).Равно(Истина);
            КонецЕсли;

            Если ИспользоватьПрокси Тогда
                ОжидаетЧто(Результат.Свойство("proxy")).Равно(Истина);
                Результат["proxy"]["password"] = "***";
            КонецЕсли;

        Иначе

            ОжидаетЧто(Результат["set"] <> Неопределено).Равно(Истина);
            Результат["set"]["password"] = "***";

            Если FTPS Тогда
                ОжидаетЧто(Результат["tls"] <> Неопределено).Равно(Истина);
            КонецЕсли;

            Если ИспользоватьПрокси Тогда
                ОжидаетЧто(Результат["proxy"] <> Неопределено).Равно(Истина);
                Результат["proxy"]["password"] = "***";
            КонецЕсли;

        КонецЕсли;

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ЗакрытьСоединение(Знач Результат, Знач Вариант)

    Если СтрНайти(Вариант, "Открытие") > 0 Тогда
        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_FTP.Main");
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ЭтоКоннектор(Знач Результат, Знач Вариант)

    Если СтрНайти(Вариант, "Открытие") > 0 Тогда
        Результат = Строка(ТипЗнч(Результат));
        ОжидаетЧто(Результат).Равно("AddIn.OPI_FTP.Main");
    Иначе
        ОжидаетЧто(Результат).Равно(Истина);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьНастройкиСоединения(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Результат["password"] = "***";

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьНастройкиПрокси(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Результат["password"] = "***";

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьНастройкиTLS(Знач Результат, Знач Вариант)

    ОжидаетЧто(OPI_Инструменты.ЭтоКоллекция(Результат, Истина)).Равно(Истина);

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_СоздатьНовуюДиректорию(Знач Результат, Знач Вариант, Основной = Ложь)

    Если СтрНайти(Вариант, "Удаление") > 0 Тогда
        Возврат Результат;
    КонецЕсли;

    Если Основной Или СтрНайти(Вариант, "Вложенная") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    ИначеЕсли СтрНайти(Вариант, "Проверка 1") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);
        ОжидаетЧто(Результат["data"][0]["name"]).Равно("another_one");

    ИначеЕсли СтрНайти(Вариант, "Проверка 2") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);
        ОжидаетЧто(Результат["data"][0]["objects"]).ИмеетТип("Массив").ИмеетДлину(1);

    Иначе

        ОжидаетЧто(Результат["result"]).Равно(Ложь);

    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьСписокОбъектов(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если СтрНайти(Вариант, "Файл") > 0 Тогда
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(0);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ЗагрузитьФайл(Знач Результат, Знач Вариант, Размер = "")

    ОжидаетЧто(Результат["bytes"]).Равно(Размер);

   Если Не СтрНайти(Вариант, "Размер 1") > 0 Или СтрНайти(Вариант, "Размер 2") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_УдалитьФайл(Знач Результат, Знач Вариант)

    Если СтрНайти(Вариант, "Несуществующий") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Ложь);

    ИначеЕсли СтрНайти(Вариант, "Проверка") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);

    Иначе

        ОжидаетЧто(Результат["result"]).Равно(Истина);

    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_УдалитьДиректорию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ОчиститьДиректорию(Знач Результат, Знач Вариант)

    ОжидаетЧто(Результат["result"]).Равно(Истина);

    Если СтрНайти(Вариант, "Проверка") > 0 Тогда
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(0);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьРазмерОбъекта(Знач Результат, Знач Вариант)

    Если СтрНайти(Вариант, "Несуществующий") > 0 Тогда
        ОжидаетЧто(Результат["result"]).Равно(Ложь);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ИзменитьПуть(Знач Результат, Знач Вариант)


    Если СтрНайти(Вариант, "Список, обратно") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);
        ОжидаетЧто(Результат["data"][0]["path"]).Равно("new_dir");
        ОжидаетЧто(Результат["data"][0]["objects"][0]["path"]).Равно("new_dir/big.bin");

    ИначеЕсли СтрНайти(Вариант, "Список") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Истина);
        ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").ИмеетДлину(1);
        ОжидаетЧто(Результат["data"][0]["path"]).Равно("brand_new_dir");
        ОжидаетЧто(Результат["data"][0]["objects"][0]["path"]).Равно("brand_new_dir/giant.bin");

    ИначеЕсли СтрНайти(Вариант, "Проверка, старый") > 0 Тогда

        ОжидаетЧто(Результат["result"]).Равно(Ложь);

    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_СохранитьФайл(Знач Результат, Знач Вариант, РазмерРезультата = "", РазмерПроверки = "")

    Если СтрНайти(Вариант, "Размер файла") > 0 Тогда
        ОжидаетЧто(Результат).Равно(РазмерРезультата);
        ОжидаетЧто(Результат).Равно(РазмерПроверки);
    Иначе
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция Проверка_FTP_ПолучитьДанныеФайла(Знач Результат, Знач Вариант, РазмерПроверки = "")

    Если СтрНайти(Вариант, "Размер файла") > 0 Тогда
        ОжидаетЧто(Результат).Равно(РазмерПроверки);
    ИначеЕсли СтрНайти(Вариант, "Размер") > 0 Тогда
        ОжидаетЧто(Результат["result"]).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");
    КонецЕсли;

    Если СтрНайти(Вариант, "HTTP") Тогда
        OPI_Инструменты.Пауза(5);
    КонецЕсли;

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область ReportPortal

Процедура ЗаписатьПропущенныйТест(Знач Библиотека, Знач Метод, Знач Вариант)

    Данные = ПолучитьСуществующийЗапуск();

    Если Данные = Неопределено Тогда
        Возврат;
    КонецЕсли;

    IDНабора   = СоздатьНаборЗапуска(Библиотека);
    IDЭлемента = СоздатьТестовыйЭлемент(IDНабора, Библиотека, Метод, Вариант);

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    ТекущаяДата = ПолучитьВремяЗапуска();

    СтруктураЭлемента = Новый Структура;

    СтруктураЭлемента.Вставить("endTime"    , ТекущаяДата);
    СтруктураЭлемента.Вставить("launchUuid" , Данные["id"]);
    СтруктураЭлемента.Вставить("status"     , "skipped");

    ReportPortal().ЗавершитьЭлемент(URL, Токен, Проект, IDЭлемента, СтруктураЭлемента);

КонецПроцедуры

Процедура ЗаписатьЛогТеста(Знач Тест, Знач Текст, Знач Уровень)

    Данные = ПолучитьСуществующийЗапуск();

    Если Данные = Неопределено Тогда
        Возврат;
    КонецЕсли;

    ТекущаяДата = ПолучитьВремяЗапуска();

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    СтруктураЛога = Новый Структура;
    СтруктураЛога.Вставить("launchUuid", Данные["id"]);
    СтруктураЛога.Вставить("itemUuid"  , Тест);
    СтруктураЛога.Вставить("time"      , ТекущаяДата);
    СтруктураЛога.Вставить("message"   , Текст);
    СтруктураЛога.Вставить("level"     , Уровень);

    ReportPortal().ЗаписатьЛог(URL, Токен, Проект, СтруктураЛога);

КонецПроцедуры

Процедура ЗавершитьТестовыйЭлемент(Знач UUID, Знач Статус)

    Данные = ПолучитьСуществующийЗапуск();

    Если Данные = Неопределено Тогда
        Возврат;
    КонецЕсли;

    Токен  = ПолучитьПараметр("RPortal_Token");
    Проект = ПолучитьПараметр("RPortal_MainProject");
    URL    = ПолучитьПараметр("RPortal_URL");

    ТекущаяДата = ПолучитьВремяЗапуска();

    СтруктураЭлемента = Новый Структура;

    СтруктураЭлемента.Вставить("endTime"    , ТекущаяДата);
    СтруктураЭлемента.Вставить("launchUuid" , Данные["id"]);
    СтруктураЭлемента.Вставить("status"     , Статус);

    ReportPortal().ЗавершитьЭлемент(URL, Токен, Проект, UUID, СтруктураЭлемента);

    НайденныйТест = Данные["items"].Получить(UUID);

    Если ЗначениеЗаполнено(НайденныйТест) Тогда
        Данные["tests"].Добавить(НайденныйТест);
    КонецЕсли;

    ЗаписатьФайлЗапуска(Данные);

КонецПроцедуры

Процедура ЗаписатьФайлЗапуска(Знач Данные)

    ФайлЗапуска = ПолучитьПараметр("RPortal_MainLaunch");
    OPI_Инструменты.ЗаписатьJSONФайл(ФайлЗапуска, Данные);

КонецПроцедуры

Процедура СоздатьФайлЗапуска(Знач UUID)

    ИВФ = ПолучитьИмяВременногоФайла();

    СтруктураДанных = Новый Структура;
    СтруктураДанных.Вставить("id"    , UUID);
    СтруктураДанных.Вставить("ended" , Ложь);
    СтруктураДанных.Вставить("suites", Новый Соответствие);
    СтруктураДанных.Вставить("tests" , Новый Массив);
    СтруктураДанных.Вставить("items" , Новый Соответствие);

    OPI_Инструменты.ЗаписатьJSONФайл(ИВФ, СтруктураДанных);
    ЗаписатьПараметр("RPortal_MainLaunch", ИВФ);

КонецПроцедуры

Функция ПолучитьСуществующийЗапуск()

    Данные   = ПрочитатьФайлЗапуска();
    ID       = Данные["id"];
    Завершен = Данные["ended"];

    Если Не ЗначениеЗаполнено(ID) Или Завершен Тогда
        Возврат Неопределено;
    Иначе
        Возврат Данные;
    КонецЕсли;

КонецФункции

Функция ПолучитьВремяЗапуска()

    Сдвиг       = ?(OPI_Инструменты.ЭтоWindows(), 3600 * 3, 0);
    ТекущаяДата = OPI_Инструменты.ПолучитьТекущуюДату() - Сдвиг;

    Возврат ТекущаяДата;

КонецФункции

Функция ПрочитатьФайлЗапуска()

    ФайлЗапуска = ПолучитьПараметр("RPortal_MainLaunch");

    ОбъектЗапуска = Новый Файл(ФайлЗапуска);

    Если Не ЗначениеЗаполнено(ФайлЗапуска) Или Не ОбъектЗапуска.Существует()  Тогда
        Возврат Новый Соответствие;
    КонецЕсли;

    Данные = OPI_Инструменты.ПрочитатьJSONФайл(ФайлЗапуска, Истина);
    Возврат Данные;

КонецФункции

Функция ReportPortal()

    Попытка

        // BSLLS:CommonModuleAssign-off
        //
        //@skip-check property-not-writable
        OPI_ReportPortal = Неопределено;

        // BSLLS:CommonModuleAssign-on

        ТекущийКаталог   = СтрЗаменить(ТекущийСценарий().Каталог, "\", "/");
        МассивПути       = СтрРазделить(ТекущийКаталог, "/");
        МассивПути.Удалить(МассивПути.ВГраница());
        МассивПути.Удалить(МассивПути.ВГраница());
        МассивПути.Добавить("core");
        МассивПути.Добавить("Modules");
        МассивПути.Добавить("OPI_ReportPortal.os");
        ПодключитьСценарий(СтрСоединить(МассивПути, "/"), "ReportPortal");
        OPI_ReportPortal = Новый("ReportPortal");

        Возврат OPI_ReportPortal;

    Исключение

        Возврат OPI_ReportPortal;

    КонецПопытки;

КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьЗначениеИзФайла(Параметр, Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Возврат ?(Значения.Свойство(Параметр), Значения[Параметр], "");

КонецФункции

Функция ПутьКФайлуДанных()

    Путь          = "";
    ВозможныеПути = Новый Массив;
    ВозможныеПути.Добавить("./data.json");
    ВозможныеПути.Добавить("C:\GDrive\Мой диск\data.json");
    ВозможныеПути.Добавить("G:\My Drive\data.json");

    Для Каждого ВозможныйПуть Из ВозможныеПути Цикл

        ФайлРепозитория = Новый Файл(ВозможныйПуть);

        Если ФайлРепозитория.Существует() Тогда
            Путь = ВозможныйПуть;
            Прервать;
        КонецЕсли;

    КонецЦикла;

    Возврат Путь;

КонецФункции

Функция ПолучитьОбщийМодуль(Знач Имя)

    Модуль = Вычислить(Имя);
    Возврат Модуль;
КонецФункции

// BSLLS:CognitiveComplexity-off

Функция ПолучитьЗначениеДляCLI(Знач Значение, Знач Вложенный = Ложь, ДопОпции = "")

    ТекущийТип        = ТипЗнч(Значение);
    ТекущийТипСтрокой = Строка(ТекущийТип);
    Обертка           = Ложь;

    Если ТекущийТип = Тип("Число") Тогда

        Если Не Вложенный Тогда
            Значение = OPI_Инструменты.ЧислоВСтроку(Значение);
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Строка") Или ТекущийТип = Тип("УникальныйИдентификатор") Тогда

        Значение = OPI_Инструменты.ЧислоВСтроку(Значение);

        Если Вложенный Тогда
            Значение = СтрЗаменить(Значение, Символы.ПС, " ");
        Иначе
            Значение = СтрЗаменить(Значение, Символы.ПС, "\n");
            Обертка  = Истина;
        КонецЕсли;

        Если OPI_Инструменты.ЭтоWindows() Тогда
            Значение = СтрЗаменить(Значение, "%", "%%");
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Дата") Тогда

        Если Не Вложенный Тогда
            Значение = XMLСтрока(Значение);
            Обертка  = Истина;
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Структура")
        Или ТекущийТип = Тип("Соответствие")
        Или ТекущийТип = Тип("Массив") Тогда

        Если ТекущийТип = Тип("Структура") Или ТекущийТип = Тип("Соответствие") Тогда

            Значение_ = Новый(ТекущийТипСтрокой);

            Для Каждого КлючЗначение Из Значение Цикл
                Значение_.Вставить(КлючЗначение.Ключ, ПолучитьЗначениеДляCLI(КлючЗначение.Значение, Истина, ДопОпции));
            КонецЦикла;

            Значение = Значение_;

        КонецЕсли;

        Если ТекущийТип = Тип("Соответствие") Тогда

            Значение_ = Новый Соответствие;

            Для Каждого КлючЗначение Из Значение Цикл
                Значение_.Вставить(ПолучитьЗначениеДляCLI(КлючЗначение.Ключ, Истина, ДопОпции), КлючЗначение.Значение);
            КонецЦикла;

            Значение = Значение_;

        КонецЕсли;


        ЗаписьJSON = Новый ЗаписьJSON();

        Если ТекущийТип = Тип("Массив") Или Вложенный Тогда

            Если ТекущийТип = Тип("Массив") Тогда
                Для Н = 0 По Значение.ВГраница() Цикл
                    Значение[Н] = ПолучитьЗначениеДляCLI(Значение[Н], Истина, ДопОпции);
                КонецЦикла;
            КонецЕсли;

            Если Не Вложенный Тогда
                ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
                ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
                ЗаписатьJSON(ЗаписьJSON, Значение);

                Значение = ЗаписьJSON.Закрыть();
                Обертка  = Истина;
            КонецЕсли;

        Иначе

            // BSLLS:MissingTemporaryFileDeletion-off

            //@skip-check missing-temporary-file-deletion
            ИВФ   = ПолучитьИмяВременногоФайла("json");

            // BSLLS:MissingTemporaryFileDeletion-on

            OPI_Инструменты.ЗаписатьJSONФайл(ИВФ, Значение);

            Значение = ИВФ;
            Обертка  = Истина;

        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Булево") Тогда

        Если Не Вложенный Тогда
            Значение = ?(Значение, "true", "false");
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("ДвоичныеДанные") Тогда

        // BSLLS:MissingTemporaryFileDeletion-off

        //@skip-check missing-temporary-file-deletion
        ИВФ = ПолучитьИмяВременногоФайла();
        Значение.Записать(ИВФ);
        Значение = ИВФ;
        Обертка  = Не Вложенный;

        // BSLLS:MissingTemporaryFileDeletion-on

    ИначеЕсли СтрНачинаетсяС(ТекущийТипСтрокой, "AddIn") Тогда

        Значение = ОбработатьПараметрКомпонентыCLI(Значение, ТекущийТипСтрокой, ДопОпции);
        Обертка  = Не Вложенный;

    ИначеЕсли ТекущийТип = Тип("Неопределено") И Вложенный Тогда

         Значение = Неопределено;

    Иначе

        ВызватьИсключение "Неподдерживаемый тип " + ТекущийТипСтрокой;

    КонецЕсли;

    Если Не OPI_Инструменты.ЭтоWindows() И Не Вложенный Тогда
        Значение = СтрЗаменить(Значение, """" , """'""");
    КонецЕсли;

    Если Обертка Тогда
        Значение = """" + Значение + """";
    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ОбработатьПараметрКомпонентыCLI(Знач Значение, Знач ТипЗначения, ДопОпции)

    ИмяКомпоненты = СтрРазделить(ТипЗначения, ".")[1];

    Если ИмяКомпоненты = "OPI_PostgreSQL" Или ИмяКомпоненты = "OPI_MySQL" Или ИмяКомпоненты = "OPI_MSSQL" Тогда

        Если ИмяКомпоненты = "OPI_MSSQL" Тогда
            ДопОпции.Вставить("tls", Новый Структура("use_tls, accept_invalid_certs, ca_cert_path", Истина, Истина, ""));
        Иначе

            TLS = Значение.GetTLSSettings();

            Если ЗначениеЗаполнено(TLS) Тогда
                OPI_ПреобразованиеТипов.ПолучитьКоллекцию(TLS);
                ДопОпции.Вставить("tls", TLS);
            КонецЕсли;

        КонецЕсли;

        Значение = Значение["ConnectionString"];

    ИначеЕсли ИмяКомпоненты = "OPI_SQLite" Тогда

        Значение = Значение["Database"];

    ИначеЕсли ИмяКомпоненты = "OPI_TCPClient" Тогда

        Значение = Значение["Address"];

    ИначеЕсли ИмяКомпоненты = "OPI_RCON" Тогда

        Значение = Значение.GetSettings();
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Значение);
        ИВФ      = ПолучитьИмяВременногоФайла();
        OPI_Инструменты.ЗаписатьJSONФайл(ИВФ, Значение);

        Значение = ИВФ;

    ИначеЕсли ИмяКомпоненты = "OPI_FTP" Тогда

        Значение = Значение.GetConfiguration();
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Значение);

        Данные       = Значение["data"];
        Конфигурация = Новый Структура();

        Конфигурация.Вставить("set", Данные["ftp_settings"]);

        Если ЗначениеЗаполнено(Данные["tls_settings"]) Тогда
            Конфигурация.Вставить("tls", Данные["tls_settings"]);
        КонецЕсли;

        Если ЗначениеЗаполнено(Данные["proxy_settings"]) Тогда
            Конфигурация.Вставить("proxy", Данные["proxy_settings"]);
        КонецЕсли;

        ИВФ = ПолучитьИмяВременногоФайла();
        OPI_Инструменты.ЗаписатьJSONФайл(ИВФ, Конфигурация);

        Значение = ИВФ;

    Иначе
        ВызватьИсключение "Неподдерживаемый тип " + ТипЗначения;
    КонецЕсли;

    Возврат Значение;

КонецФункции

// BSLLS:CognitiveComplexity-on

Функция ОформитьОпцию(Знач Имя, Знач Значение, Вложенный = Ложь)

    МассивСекретов = Новый Массив();
    МассивСекретов.Добавить("token");
    МассивСекретов.Добавить("key");
    МассивСекретов.Добавить("secret");
    МассивСекретов.Добавить("pass");
    МассивСекретов.Добавить("password");
    МассивСекретов.Добавить("client");
    МассивСекретов.Добавить("api");
    МассивСекретов.Добавить("refresh");

    СписокИсключений = Новый СписокЗначений();
    СписокИсключений.Добавить("passive");
    СписокИсключений.Добавить("keyboard");

    СтруктураЗамен = Новый Соответствие;
    СтруктураЗамен.Вставить("host.docker.internal", "127.0.0.1");

    Обертка = Ложь;

    Если ТипЗнч(Значение) = Тип("Строка") Тогда

        Для Каждого СекретныйКлюч Из МассивСекретов Цикл

            Если СтрНайти(нРег(Имя), СекретныйКлюч) <> 0
                И СписокИсключений.НайтиПоЗначению(нРег(Имя)) = Неопределено Тогда

                Значение = "***";
                Обертка  = Истина;

            КонецЕсли;

        КонецЦикла;

        Для Каждого ЗначениеЗамены Из СтруктураЗамен Цикл
            Значение = СтрЗаменить(Значение, ЗначениеЗамены.Ключ, ЗначениеЗамены.Значение);
        КонецЦикла;

        ЗначениеСтрокой = Значение;

        Если Не Вложенный И СтрНачинаетсяС(ЗначениеСтрокой, """") И СтрЗаканчиваетсяНа(ЗначениеСтрокой, """") Тогда

            ЗначениеСтрокой = Лев(ЗначениеСтрокой, СтрДлина(ЗначениеСтрокой) - 1);
            ЗначениеСтрокой = Прав(ЗначениеСтрокой, СтрДлина(ЗначениеСтрокой) - 1);

            Обертка = Истина;

        КонецЕсли;

        Значение = ЗначениеСтрокой;
        OPI_ПреобразованиеТипов.ПолучитьКоллекцию(Значение, Ложь);

    Иначе
        ЗначениеСтрокой = "-----------!!!!№№№---------------";
    КонецЕсли;

    Если ТипЗнч(Значение) = Тип("Массив") Тогда

        Если Строка(Значение[0]) = ЗначениеСтрокой Тогда
            Значение = ЗначениеСтрокой;
        Иначе

            Для Н = 0 По Значение.ВГраница() Цикл
                Значение[Н] = ОформитьОпцию("", Значение[Н], Истина);
            КонецЦикла;

        КонецЕсли;

    ИначеЕсли OPI_Инструменты.ЭтоКоллекция(Значение, Истина) Тогда

        Значение_ = Новый(ТипЗнч(Значение));

        Для Каждого КлючЗначение Из Значение Цикл
            Значение_.Вставить(КлючЗначение.Ключ, ОформитьОпцию(КлючЗначение.Ключ, КлючЗначение.Значение, Истина));
        КонецЦикла;

        Значение = Значение_;

    Иначе

        OPI_ПреобразованиеТипов.ПолучитьСтроку(Значение);

    КонецЕсли;

    Если Вложенный Тогда
        Возврат Значение;
    Иначе

        Если Не ТипЗнч(Значение) = Тип("Строка") Тогда
            Попытка
                Значение = OPI_Инструменты.JSONСтрокой(Значение, , Ложь, Ложь);
            Исключение
                Значение = Строка(Значение);
            КонецПопытки;
        КонецЕсли;

        Значение = ?(Обертка, СтрШаблон("""%1""", Значение), Значение);
        Возврат "--" + Имя + " " + Значение;

    КонецЕсли;

КонецФункции

Функция ПрочестьРезультатCLI(Знач ФайлРезультата)

    Попытка

        // BSLLS:ExternalAppStarting-off
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
        Результат  = ПрочитатьJSON(ЧтениеJSON, Истина);
        ЧтениеJSON.Закрыть();
        // BSLLS:ExternalAppStarting-on

    Исключение

        Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        Попытка
            Результат =  Новый ДвоичныеДанные(ФайлРезультата);

            Если Результат.Размер() < 10000 Тогда
                Результат = ПолучитьСтрокуИзДвоичныхДанных(Результат);
            КонецЕсли;

        Исключение
            Результат = null;
        КонецПопытки;

     КонецПопытки;

     Возврат Результат;

КонецФункции

Функция ВывестиЛог(Знач Результат, Знач Метод, Знач Библиотека, Знач ОписаниеОшибки = Неопределено)

    Шапка = Строка(OPI_Инструменты.ПолучитьТекущуюДату()) + " | " + Метод;

    Данные = РезультатТестаКакТекст(Результат);

    Текст = Шапка + Символы.ПС + Символы.ПС;

    Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
        Текст = Текст + ОписаниеОшибки
            + Символы.ПС
            + Символы.ПС
            + "---------------------------------"
            + Символы.ПС
            + Символы.ПС ;
    КонецЕсли;

    Текст = Текст
        + Данные
        + Символы.ПС
        + Символы.ПС
        + "---------------------------------"
        + Символы.ПС;

    Сообщить(Текст);

    Возврат Текст;

КонецФункции

Функция РезультатТестаКакТекст(Знач Результат)

    Попытка
        Данные = OPI_Инструменты.JSONСтрокой(Результат);
    Исключение
        Данные = Строка(Результат);
    КонецПопытки;

    Данные = СокрЛП(Данные);

    Возврат Данные;

КонецФункции

Функция ЭтоТестCLI()

    Данные = ПолучитьПеременнуюСреды("OINT_TESTS_CLI");

    Если Строка(Данные) = "1" Тогда
        Результат = Истина;
    Иначе
        Результат = Ложь;
    КонецЕсли;

    Возврат Результат;

КонецФункции

Процедура НовыйТест(ТаблицаЗначений, Знач Метод, Знач Синоним, Знач Раздел)

    НовыйТест         = ТаблицаЗначений.Добавить();
    НовыйТест.Метод   = Метод;
    НовыйТест.Синоним = Синоним;
    НовыйТест.Раздел  = Раздел;

КонецПроцедуры

Процедура ЗаписатьПараметрВФайл(Знач Параметр, Знач Значение, Знач Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Значения.Вставить(Параметр, Значение);

    // BSLLS:ExternalAppStarting-off
    Запись              = Новый ЗаписьJSON;
    ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
    Запись.ОткрытьФайл(Путь, , , ПараметрыЗаписиJSON);
    ЗаписатьJSON(Запись, Значения);
    Запись.Закрыть();
    // BSLLS:ExternalAppStarting-on

КонецПроцедуры

Процедура ЗаписатьВызовCLI(Знач Библиотека, Знач Метод, Знач Опции)

    Если Не OPI_Инструменты.ЭтоOneScript() Тогда
        Возврат;
    КонецЕсли;

    КаталогПримеров = "./docs/ru/cli/" + Библиотека;
    ФайлПримеров    = Новый Файл(КаталогПримеров);

    Если Не ФайлПримеров.Существует() Тогда
        СоздатьКаталог(КаталогПримеров);
    КонецЕсли;

    КаталогМетода = КаталогПримеров + "/" + Метод;
    ФайлМетода    = Новый Файл(КаталогМетода);

    Если Не ФайлМетода.Существует() Тогда
        СоздатьКаталог(КаталогМетода);
    КонецЕсли;

    МассивОпций = Новый Массив;
    ЕстьJSON    = Ложь;

    Для Каждого Опция Из Опции Цикл

        ТекущаяОпция = Опция.Значение;

        ОбработатьОсобенныеСекретыОпций(Библиотека, Опция.Ключ, ТекущаяОпция);

        ТекущаяОпция = ОформитьОпцию(Опция.Ключ, ТекущаяОпция);
        МассивОпций.Добавить(ТекущаяОпция);

    КонецЦикла;

    Начало = "oint ";

    Если ЕстьJSON Тогда

        Информация = "JSON данные также могут быть переданы как путь к файлу .json";

        НачалоBat  = ":: " + Информация + Символы.ПС + Символы.ПС + Начало;
        НачалоBash = "# " + Информация + Символы.ПС + Символы.ПС + Начало;

    Иначе

        НачалоBat  = Начало;
        НачалоBash = Начало;

    КонецЕсли;

    РазделительBat  = " ^" + Символы.ПС + "  ";
    РазделительBash = " \" + Символы.ПС + "  ";

    СтрокаBat  = НачалоBat + Библиотека + " " + Метод + РазделительBat + СтрСоединить(МассивОпций, РазделительBat);
    СтрокаBash = НачалоBash + Библиотека + " " + Метод + РазделительBash + СтрСоединить(МассивОпций, РазделительBash);

    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBat).Записать(КаталогМетода + "/bat.txt");
    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBash).Записать(КаталогМетода + "/bash.txt");

КонецПроцедуры

Процедура ЗаписатьФайлЛога(Знач Данные, Знач Метод, Знач Библиотека, Знач Перезаписывать = Истина)

    Если Не OPI_Инструменты.ЭтоOneScript() Тогда
        Возврат;
    КонецЕсли;

    Попытка

        ПутьЛогов           = "./docs/ru/results";
        ПутьЛоговБиблиотеки = ПутьЛогов + "/" + Библиотека;
        ПутьКФайлу          = ПутьЛоговБиблиотеки + "/" + Метод + ".log";

        Если Не Перезаписывать Тогда

            ОбъектЛога = Новый Файл(ПутьКФайлу);

            Если ОбъектЛога.Существует() Тогда
                Возврат;
            КонецЕсли;

        КонецЕсли;

        КаталогЛогов = Новый Файл(ПутьЛогов);

        Если Не КаталогЛогов.Существует() Тогда
            СоздатьКаталог(ПутьЛогов);
        КонецЕсли;

        КаталогЛоговБиблиотеки = Новый Файл(ПутьЛоговБиблиотеки);

        Если Не КаталогЛоговБиблиотеки.Существует() Тогда
            СоздатьКаталог(ПутьЛоговБиблиотеки);
        КонецЕсли;

        ДанныеТекст = РезультатТестаКакТекст(Данные);

        ДокументЛога = Новый ТекстовыйДокумент;
        ДокументЛога.УстановитьТекст(ДанныеТекст);
        ДокументЛога.Записать(ПутьКФайлу);

    Исключение
        Сообщить("Не удалось записать файл лога!: " + ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

Процедура ОбработатьОсобенныеСекретыОпций(Знач Библиотека, Знач Опция, Значение)

    Если Библиотека = "bitrix24" Тогда

        ОбработатьСекретыBitrix24(Опция, Значение);

    ИначеЕсли Библиотека = "postgres" Тогда

        ОбработатьСекретыPostgreSQL(Опция, Значение);

    ИначеЕсли Библиотека = "mysql" Тогда

        ОбработатьСекретыMySQL(Опция, Значение);

    ИначеЕсли Библиотека = "mssql" Тогда

        ОбработатьСекретыMSSQL(Опция, Значение);

    ИначеЕсли Библиотека = "ollama" Тогда

        ОбработатьСекретыOllama(Опция, Значение);

    ИначеЕсли Библиотека = "vk" Тогда

        ОбработатьСекретыVK(Опция, Значение);

    Иначе
        Возврат;
    КонецЕсли;

    Значение = СтрШаблон("""%1""", Значение);

КонецПроцедуры

Процедура ОбработатьСекретыBitrix24(Знач Опция, Значение)

    Если Опция = "url" Тогда

        Значение = ?(СтрНайти(Значение, "rest") > 0
            , "https://b24-ar17wx.bitrix24.by/rest/1/***"
            , Значение);

    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыPostgreSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "postgresql://bayselonarrend:***@127.0.0.1:5432/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMySQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "mysql://bayselonarrend:***@127.0.0.1:3306/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMSSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "Server=127.0.0.1;Database=***;User Id=SA;Password=***;";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыOllama(Знач Опция, Значение)

    Если Опция = "headers" Тогда

        Значение = OPI_Инструменты.JSONСтрокой(Новый Структура("Authorization", "***"));

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыVK(Знач Опция, Значение)

    Если Опция = "ct" Тогда

        Значение = "***";

    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Region Alternate

Function ExecuteTestCLI(Val Library, Val Method, Val Options, Val Record = True) Export
	Return ВыполнитьТестCLI(Library, Method, Options, Record);
EndFunction

Function GetTestingSectionMapping() Export
	Return ПолучитьСоответствиеРазделовТестирования();
EndFunction

Function GetTestingSectionMappingGA() Export
	Return ПолучитьСоответствиеРазделовТестированияGA();
EndFunction

Function GetTestTable() Export
	Return ПолучитьТаблицуТестов();
EndFunction

Function ExpectsThat(Value) Export
	Return ОжидаетЧто(Value);
EndFunction

Function FormYAXTests() Export
	Return СформироватьТестыЯкс();
EndFunction

Function FormAssertsTests() Export
	Return СформироватьТестыАссертс();
EndFunction

Function FormYAXTestsCLI() Export
	Return СформироватьТестыЯксCLI();
EndFunction

Function FormAssertsTestsCLI() Export
	Return СформироватьТестыАссертсCLI();
EndFunction

Function GetParameter(Parameter) Export
	Return ПолучитьПараметр(Parameter);
EndFunction

Function GetBinary(Parameter) Export
	Return ПолучитьДвоичные(Parameter);
EndFunction

Function GetFilePath(Val Path) Export
	Return ПолучитьФайлПути(Path);
EndFunction

Function GetLocalhost() Export
	Return ПолучитьLocalhost();
EndFunction

Procedure ParameterToCollection(Parameter, Collection) Export
	ПараметрВКоллекцию(Parameter, Collection);
EndProcedure

Procedure BinaryToCollection(Parameter, Collection) Export
	ДвоичныеВКоллекцию(Parameter, Collection);
EndProcedure

Procedure WriteParameter(Parameter, Value) Export
	ЗаписатьПараметр(Parameter, Value);
EndProcedure

Procedure ProcessTestingResult(Val Result, Val Method, Val Library, Val Option = "", AddParam1 = Undefined, AddParam2 = Undefined, AddParam3 = Undefined) Export
	ОбработатьРезультатТестирования(Result, Method, Library, Option, AddParam1, AddParam2, AddParam3);
EndProcedure

Procedure LogServiceInformation(Val Text, Val Note, Val Library) Export
	ВывестиСлужебнуюИнформацию(Text, Note, Library);
EndProcedure

Function CreateReportPortalLaunch(Val Platform = "") Export
	Return СоздатьЗапускReportPortal(Platform);
EndFunction

Function CreateLaunchSet(Val Name) Export
	Return СоздатьНаборЗапуска(Name);
EndFunction

Function CreateTestElement(Val Set, Val Library, Val Method, Val Option) Export
	Return СоздатьТестовыйЭлемент(Set, Library, Method, Option);
EndFunction

Procedure FinishLaunch() Export
	ЗавершитьЗапуск();
EndProcedure

Function GetExecutedTestsList() Export
	Return ПолучитьСпискоВыполненныхТестов();
EndFunction

Function GetFullTestList() Export
	Return ПолучитьПолныйСписокТестов();
EndFunction

Function GetFTPParameterOptions() Export
	Return ПолучитьВариантыПараметровFTP();
EndFunction

Function GetS3ParameterOptions() Export
	Return ПолучитьВариантыПараметровS3();
EndFunction

Function GetPostgresParameterOptions() Export
	Return ПолучитьВариантыПараметровPostgres();
EndFunction

Function GetMySQLParameterOptions() Export
	Return ПолучитьВариантыПараметровMySQL();
EndFunction

#EndRegion