// OneScript: ./OInt/tools/Modules/OPI_ПолучениеДанныхТестов.os

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:UsingHardcodePath-off
// BSLLS:Typo-off
// BSLLS:DeprecatedMessage-off
// BSLLS:UsingServiceTag-off
// BSLLS:ExecuteExternalCodeInCommonModule-off
// BSLLS:DuplicateStringLiteral-off
// BSLLS:MagicNumber-off
// BSLLS:UsingHardcodeNetworkAddress-off
// BSLLS:UsingSynchronousCalls-off

//@skip-check use-non-recommended-method
//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check undefined-function-or-procedure
//@skip-check wrong-string-literal-content

// Раскомментировать, если выполняется OneScript
#Использовать "./internal"
#Использовать asserts

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСоответствиеРазделовТестирования() Экспорт

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , 5);
    Разделы.Вставить("VK"             , 5);
    Разделы.Вставить("Viber"          , 5);
    Разделы.Вставить("Twitter"        , 4);
    Разделы.Вставить("PostgreSQL"     , 5);
    Разделы.Вставить("MySQL"          , 5);
    Разделы.Вставить("MSSQL"          , 5);
    Разделы.Вставить("SQLite"         , 5);
    Разделы.Вставить("RCON"           , 5);
    Разделы.Вставить("YandexDisk"     , 5);
    Разделы.Вставить("GoogleWorkspace", 2);
    Разделы.Вставить("GoogleCalendar" , 5);
    Разделы.Вставить("GoogleDrive"    , 5);
    Разделы.Вставить("GoogleSheets"   , 5);
    Разделы.Вставить("Notion"         , 5);
    Разделы.Вставить("Slack"          , 5);
    Разделы.Вставить("Airtable"       , 5);
    Разделы.Вставить("Dropbox"        , 5);
    Разделы.Вставить("Bitrix24"       , 5);
    Разделы.Вставить("VkTeams"        , 5);
    Разделы.Вставить("Ozon"           , 5);
    Разделы.Вставить("Neocities"      , 5);
    Разделы.Вставить("CDEK"           , 5);
    Разделы.Вставить("YandexMetrika"  , 5);
    Разделы.Вставить("S3"             , 5);
    Разделы.Вставить("TCP"            , 5);
    Разделы.Вставить("GreenAPI"       , 5);
    Разделы.Вставить("Ollama"         , 5);
    Разделы.Вставить("HTTPКлиент"     , 5);
    Разделы.Вставить("OpenAI"         , 5);

    Возврат Разделы;

КонецФункции

Функция ПолучитьСоответствиеРазделовТестированияGA() Экспорт

    СтандартныеЗависимости = "[Decode, Build]";
    ЗависимостиГугл        = "Testing-GoogleWorkspace";

    Разделы = Новый Структура;
    Разделы.Вставить("Telegram"       , СтандартныеЗависимости);
    Разделы.Вставить("VK"             , СтандартныеЗависимости);
    Разделы.Вставить("Viber"          , СтандартныеЗависимости);
    Разделы.Вставить("Twitter"        , СтандартныеЗависимости);
    Разделы.Вставить("PostgreSQL"     , СтандартныеЗависимости);
    Разделы.Вставить("MySQL"          , СтандартныеЗависимости);
    Разделы.Вставить("MSSQL"          , СтандартныеЗависимости);
    Разделы.Вставить("SQLite"         , СтандартныеЗависимости);
    Разделы.Вставить("RCON"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexDisk"     , СтандартныеЗависимости);
    Разделы.Вставить("GoogleWorkspace", СтандартныеЗависимости);
    Разделы.Вставить("GoogleCalendar" , ЗависимостиГугл);
    Разделы.Вставить("GoogleDrive"    , ЗависимостиГугл);
    Разделы.Вставить("GoogleSheets"   , ЗависимостиГугл);
    Разделы.Вставить("Notion"         , СтандартныеЗависимости);
    Разделы.Вставить("Slack"          , СтандартныеЗависимости);
    Разделы.Вставить("Airtable"       , СтандартныеЗависимости);
    Разделы.Вставить("Dropbox"        , СтандартныеЗависимости);
    Разделы.Вставить("Bitrix24"       , СтандартныеЗависимости);
    Разделы.Вставить("VkTeams"        , СтандартныеЗависимости);
    Разделы.Вставить("Ozon"           , СтандартныеЗависимости);
    Разделы.Вставить("Neocities"      , СтандартныеЗависимости);
    Разделы.Вставить("CDEK"           , СтандартныеЗависимости);
    Разделы.Вставить("YandexMetrika"  , СтандартныеЗависимости);
    Разделы.Вставить("S3"             , СтандартныеЗависимости);
    Разделы.Вставить("TCP"            , СтандартныеЗависимости);
    Разделы.Вставить("GreenAPI"       , СтандартныеЗависимости);
    Разделы.Вставить("Ollama"         , СтандартныеЗависимости);
    Разделы.Вставить("HTTPКлиент"     , СтандартныеЗависимости);
    Разделы.Вставить("OpenAI"         , СтандартныеЗависимости);

    Возврат Разделы;

КонецФункции

Функция ПолучитьТаблицуТестов() Экспорт

    Телеграм  = "Telegram";
    ВКонтакте = "VK";
    ЯДиск     = "YandexDisk";
    Календарь = "GoogleCalendar";
    Твиттер   = "Twitter";
    Вайбер    = "Viber";
    Драйв     = "GoogleDrive";
    ВСпейс    = "GoogleWorkspace";
    Ноушн     = "Notion";
    Слак      = "Slack";
    Таблицы   = "GoogleSheets";
    АирТ      = "Airtable";
    ДропБокс  = "Dropbox";
    Битрикс   = "Bitrix24";
    ВКТ       = "VkTeams";
    Озон      = "Ozon";
    Неоситиз  = "Neocities";
    Сдэк      = "CDEK";
    Метрика   = "YandexMetrika";
    S3_       = "S3";
    TCP       = "TCP";
    SQLite    = "SQLite";
    Postgres  = "PostgreSQL";
    GreenAPI  = "GreenAPI";
    RCON      = "RCON";
    MySQL     = "MySQL";
    Ollama    = "Ollama";
    Http      = "HTTPКлиент";
    OpenAI    = "OpenAI";
    MSSQL     = "MSSQL";

    ТаблицаТестов = Новый ТаблицаЗначений;
    ТаблицаТестов.Колонки.Добавить("Метод");
    ТаблицаТестов.Колонки.Добавить("Синоним");
    ТаблицаТестов.Колонки.Добавить("Раздел");

    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьИнформациюБота"      , "Получить информацию бота"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьОбновления"          , "Получить обновления"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_УстановитьWebhook"           , "Установить Webhook"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьТекстовоеСообщение" , "Отправить текстовое сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКартинку"           , "Отправить картинку"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьВидео"              , "Отправить видео"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьАудио"              , "Отправить аудио"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьДокумент"           , "Отправить документ"             , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьГифку"              , "Отправить гифку"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМедиагруппу"        , "Отправить медиагруппу"          , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьМестоположение"     , "Отправить местоположение"       , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьКонтакт"            , "Отправить контакт"              , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ОтправитьОпрос"              , "Отправить опрос"                , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПереслатьСообщение"          , "Переслать сообщение"            , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_БанРазбан"                   , "Бан/Разбан"                     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьСсылкуПриглашение"    , "Создать ссылку-приглашение"     , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ЗакрепитьОткрепитьСообщение" , "Закрепить/Открепить сообщение"  , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьЧислоУчастников"     , "Получить число участников"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ПолучитьСписокАватаровФорума", "Получить список аватаров форума", Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СоздатьУдалитьТемуФорума"    , "Создать/Удалить тему форума"    , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_ИзменитьИмяГлавнойТемы"      , "Изменить имя главной темы"      , Телеграм);
    НовыйТест(ТаблицаТестов, "Телеграм_СкрытьПоказатьГлавнуюТему"   , "Скрыть/Показать главную тему"   , Телеграм);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСсылкуТокена"               , "Создать ссылку получения токена", ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьУдалитьПост"                , "Создать/Удалить пост"           , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьСоставнойПост"              , "Создать/Удалить составной пост" , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьОпрос"                      , "Создать опрос"                  , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СохранитьУдалитьКартинку"          , "Добавить/Удалить картинку"      , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьИсторию"                    , "Создать историю"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_МетодыОбсуждений"                  , "Действия с обсуждениями"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЛайкРепостКоммент"                 , "Лайк/Репост/Комментарий"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистику"                , "Получить статистику"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСтатистикуПостов"          , "Получить статистику постов"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьРекламнуюКампанию"          , "Создать рекламную кампанию"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ОтправитьСообщение"                , "Отправить сообщение"            , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьКатегорииТоваров"          , "Получить категории товаров"     , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварПодборку"              , "Создать товар и подборку"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_СоздатьТоварСоСвойствами"          , "Создать товар со свойствами"    , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокТоваров"             , "Получить список товаров"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокПодборок"            , "Получить список подборок"       , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокСвойств"             , "Получить список свойств"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ПолучитьСписокЗаказов"             , "Получить список заказов"        , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ВК_ЗагрузитьВидео"                    , "Загрузить видео"                , ВКонтакте);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьИнформациюОДиске"       , "Получить информацию о диске"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьПапку"                   , "Создать папку"                  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект", "Загрузить по URL и получить"    , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ЗагрузитьУдалитьФайл"           , "Загрузить/Удалить файл"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_СоздатьКопиюОбъекта"            , "Создать копию объекта"          , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСсылкуНаСкачивание"     , "Получить ссылку на скачивание"  , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокФайлов"           , "Получить список файлов"         , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПереместитьОбъект"              , "Переместить объект"             , ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ДействияПубличныхОбъектов"      , "Действия с публичными объектами", ЯДиск);
    НовыйТест(ТаблицаТестов, "ЯДиск_ПолучитьСписокОпубликованных"   , "Получить список опубликованных" , ЯДиск);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , ВСпейс);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_ПолучитьСписокКалендарей"          , "Получить список календарей"     , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьКалендарь"           , "Создать/Удалить календарь"      , Календарь);
    НовыйТест(ТаблицаТестов, "ГК_СоздатьУдалитьСобытие"             , "Создать/Удалить событие"        , Календарь);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ПолучитьСписокКаталогов"           , "Получить список каталогов"      , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_ЗагрузитьУдалитьФайл"              , "Загрузить/Удалить Файл"         , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьУдалитьКомментарий"         , "Создать/Удалить кооментарий"    , Драйв);
    НовыйТест(ТаблицаТестов, "ГД_СоздатьКаталог"                    , "Создать/Удалить каталог"        , Драйв);
    НовыйТест(ТаблицаТестов, "ГВ_Авторизация"                       , "Авторизация"                    , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_СоздатьТаблицу"                    , "Создать таблицу"                , Таблицы);
    НовыйТест(ТаблицаТестов, "ГТ_ЗаполнитьОчиститьЯчейки"           , "Заполнить/Очистить ячейки"      , Таблицы);
    НовыйТест(ТаблицаТестов, "Твиттер_ДанныеАккаунта"               , "Данные аккаунта"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Твиттер_Твиты"                        , "Создание твитов"                , Твиттер);
    НовыйТест(ТаблицаТестов, "Вайбер_ПолучениеИнформации"           , "Получение информации"           , Вайбер);
    НовыйТест(ТаблицаТестов, "Вайбер_ОтправкаСообщений"             , "Отправка сообщений"             , Вайбер);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьСтраницу"             , "Создать страницу"               , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьИзменитьБазу"         , "Создать/Изменить базу"          , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_СоздатьУдалитьБлок"          , "Создать/Удалить блок"           , Ноушн);
    НовыйТест(ТаблицаТестов, "НоушнАпи_ПолучитьПользователей"       , "Получить пользователей"         , Ноушн);
    НовыйТест(ТаблицаТестов, "Слак_ПолучитьИнформацию"              , "Получить информацию"            , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОтправитьУдалитьСообщение"       , "Отправить/Удалить сообщение"    , Слак);
    НовыйТест(ТаблицаТестов, "Слак_СоздатьАрхивироватьКанал"        , "Создать/Архивировать канал"     , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ОткрытьЗакрытьДиалог"            , "Открыть/Закрыть диалог"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьФайл"            , "Загрузить/Удалить файл"         , Слак);
    НовыйТест(ТаблицаТестов, "Слак_ЗагрузитьУдалитьВФ"              , "Загрузить/Удалить внеш. файл"   , Слак);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьБазу"                       , "Создать/Изменить базу"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьТаблицу"                    , "Создать/Изменить таблицу"       , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьПоле"                       , "Создать/Изменить поле"          , АирТ);
    НовыйТест(ТаблицаТестов, "АТ_СоздатьУдалитьЗаписи"              , "Создать/Удалить записи"         , АирТ);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьОбновитьТокен"       , "Получить/Обновить токен"        , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайл"               , "Загрузить файл"                 , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ЗагрузитьФайлПоURL"          , "Загрузить файл по URL"          , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьКаталог"              , "Создать каталог"                , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_СоздатьУдалитьТег"           , "Создать/Удалить тег"            , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьАккаунт"             , "Получить данные аккаунта"       , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_РаботаСДоступами"            , "Работа с доступами"             , ДропБокс);
    НовыйТест(ТаблицаТестов, "ДропБокс_ПолучитьСписокФайловПапки"   , "Получить список файлов папки"   , ДропБокс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСТокеном"                   , "Работа с токеном"               , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_СерверноеВремя"                   , "Серверное время"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСНовостями"                 , "Работа с новостями"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЗадачами"                  , "Работа с задачами"              , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКомментариями"             , "Работа с комментариями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСДиском"                    , "Работа с диском"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_Канбан"                           , "Канбан"                         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УчетРабочегоВремени"              , "Учет рабочего времени"          , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЧатами"                    , "Работа с чатами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСУведомлениями"             , "Работа с уведомлениями"         , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСПолямиЗадач"               , "Работа с польз. полями задач"   , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПодразделениями"        , "Управление подразделениями"     , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_УправлениеПользователями"         , "Управление пользователями"      , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСЛидами"                    , "Работа с лидами"                , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСоСделками"                 , "Работа со сделками"             , Битрикс);
    НовыйТест(ТаблицаТестов, "Б24_РаботаСКалендарями"               , "Работа с календарями"           , Битрикс);
    НовыйТест(ТаблицаТестов, "ВКТ_ОтправкаСообщений"                , "Отправка сообщений"             , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_ОбщиеМетоды"                      , "Общие методы"                   , ВКТ);
    НовыйТест(ТаблицаТестов, "ВКТ_УправлениеЧатами"                 , "Управление чатами"              , ВКТ);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_АтрибутыИХарактеристики"      , "Атрибуты и характеристики"      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЗагрузкаИОбновлениеТоваров"   , "Загрузка и обновление товаров"  , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_Штрихкоды"                    , "Штрихкоды"                      , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_ЦеныИОстаткиТоваров"          , "Цены и остатки товаров"         , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСАкциями"               , "Работа с акциями"               , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_РаботаСоСкладами"             , "Работа со складами"             , Озон);
    НовыйТест(ТаблицаТестов, "ОзонАПИ_СхемаFBO"                     , "Схема FBO"                      , Озон);
    НовыйТест(ТаблицаТестов, "НС_РаботаСФайлами"                    , "Работа с файлами"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "НС_ПолучениеДанных"                   , "Получение данных"               , Неоситиз);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_ОбщиеМетоды"                  , "Общие методы"                   , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаказами"              , "Работа с заказами"              , Сдэк);
    НовыйТест(ТаблицаТестов, "СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера", "Работа с заявками курьера"      , Сдэк);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеМетками"           , "Управление метками"             , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеСчетчиками"        , "Управление счетчиками"          , Метрика);
    НовыйТест(ТаблицаТестов, "ЯМетрика_УправлениеОперациями"        , "Управление операциями"          , Метрика);
    НовыйТест(ТаблицаТестов, "AWS_ОбщиеМетоды"                      , "Общие методы"                   , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСБакетами"                  , "Работа с бакетами"              , S3_);
    НовыйТест(ТаблицаТестов, "AWS_РаботаСОбъектами"                 , "Работа с объектами"             , S3_);
    НовыйТест(ТаблицаТестов, "TC_Клиент"                            , "TCP Клиент"                     , TCP);
    НовыйТест(ТаблицаТестов, "SQLL_ОсновныеМетоды"                  , "Основные методы"                , SQLite);
    НовыйТест(ТаблицаТестов, "SQLL_ORM"                             , "ORM"                            , SQLite);
    НовыйТест(ТаблицаТестов, "Postgres_ОсновныеМетоды"              , "Основные методы"                , Postgres);
    НовыйТест(ТаблицаТестов, "Postgres_ORM"                         , "ORM"                            , Postgres);
    НовыйТест(ТаблицаТестов, "MYS_ОсновныеМетоды"                   , "Основные методы"                , MySQL);
    НовыйТест(ТаблицаТестов, "MYS_ORM"                              , "ORM"                            , MySQL);
    НовыйТест(ТаблицаТестов, "MSS_ОсновныеМетоды"                   , "Основные методы"                , MSSQL);
    НовыйТест(ТаблицаТестов, "MSS_ORM"                              , "ORM"                            , MSSQL);
    НовыйТест(ТаблицаТестов, "GAPI_УправлениеГруппами"              , "Управление группами"            , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОтправкаСообщений"               , "Отправка сообщений"             , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ПолучениеУведомлений"            , "Получение уведомлений"          , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ОчередьСообщений"                , "Очередь сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_ЖурналыСообщений"                , "Журналы сообщений"              , GreenAPI);
    НовыйТест(ТаблицаТестов, "GAPI_Аккаунт"                         , "Аккаунт"                        , GreenAPI);
    НовыйТест(ТаблицаТестов, "RC_ВыполнениеКоманд"                  , "Выполнение команд"              , RCON);
    НовыйТест(ТаблицаТестов, "OLLM_ОбработкаЗапросов"               , "Обработка запросов"             , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСМоделями"                 , "Работа с моделями"              , Ollama);
    НовыйТест(ТаблицаТестов, "OLLM_РаботаСBlob"                     , "Работа с BLOB"                  , Ollama);
    НовыйТест(ТаблицаТестов, "HTTP_Инициализация"                   , "Инициализация"                  , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаТела"                   , "Установка тела"                 , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Настройки"                       , "Настройки"                      , Http);
    НовыйТест(ТаблицаТестов, "HTTP_УстановкаЗаголовков"             , "Установка заголовков"           , Http);
    НовыйТест(ТаблицаТестов, "HTTP_Авторизация"                     , "Авторизация"                    , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ОбработкаЗапроса"                , "Обработка запроса"              , Http);
    НовыйТест(ТаблицаТестов, "HTTP_ПолучениеОтвета"                 , "Получение ответа"               , Http);
    НовыйТест(ТаблицаТестов, "OAI_ОбработкаЗапросов"                , "Обработка запросов"             , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_Ассистенты"                       , "Ассистенты"                     , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСФайлами"                   , "Работа с файлами"               , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСАудио"                     , "Работа с аудио"                 , OpenAI);
    НовыйТест(ТаблицаТестов, "OAI_РаботаСМоделями"                  , "Работа с моделями"              , OpenAI);

    Возврат ТаблицаТестов;

КонецФункции

Функция ОжидаетЧто(Значение) Экспорт

    Попытка

        Модуль  = ПолучитьОбщийМодуль("ЮТест");
        Ожидаем = ТипЗнч(Модуль) = Тип("ОбщийМодуль");
        Возврат Модуль.ОжидаетЧто(Значение);

    Исключение
        Возврат Ожидаем.Что(Значение);
    КонецПопытки;

КонецФункции

Функция СформироватьТестыЯкс() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;
        Отбор         = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела  = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор(ТекущийРаздел);

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест(Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертс() Экспорт

    ТаблицаТестов = ПолучитьТаблицуТестов();
    МассивТестов  = Новый Массив;

    Для Каждого Тест Из ТаблицаТестов Цикл
        МассивТестов.Добавить(Тест.Метод);
    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция СформироватьТестыЯксCLI() Экспорт

    Модуль        = ПолучитьОбщийМодуль("ЮТТесты");
    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Набор = Модуль.ДобавитьТестовыйНабор("CLI_" + ТекущийРаздел);

        Для Каждого Тест Из ТестыРаздела Цикл
            Набор.ДобавитьСерверныйТест("CLI_" + Тест.Метод, Тест.Синоним);
        КонецЦикла;

    КонецЦикла;

    Возврат "";

КонецФункции

Функция СформироватьТестыАссертсCLI() Экспорт

    МассивТестов = Новый Массив;

    Разделы       = ПолучитьСоответствиеРазделовТестирования();
    ТаблицаТестов = ПолучитьТаблицуТестов();

    Для Каждого Раздел Из Разделы Цикл

        ТекущийРаздел = Раздел.Ключ;

        Если ТекущийРаздел = "HTTP" Тогда
            Продолжить;
        КонецЕсли;

        Отбор        = Новый Структура("Раздел", ТекущийРаздел);
        ТестыРаздела = ТаблицаТестов.НайтиСтроки(Отбор);

        Для Каждого Тест Из ТестыРаздела Цикл
            МассивТестов.Добавить("CLI_" + Тест.Метод);
        КонецЦикла;

    КонецЦикла;

    Возврат МассивТестов;

КонецФункции

Функция ПолучитьПараметр(Параметр) Экспорт

    Путь = ПутьКФайлуДанных();
    Возврат ПолучитьЗначениеИзФайла(Параметр, Путь);

КонецФункции

Функция ПолучитьДвоичные(Параметр) Экспорт

    Путь     = ПутьКФайлуДанных();
    Значение = ПолучитьЗначениеИзФайла(Параметр, Путь);

    Если ТипЗнч(Значение) = Тип("Строка") Тогда

        Значение = ПолучитьФайлПути(Значение);

    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ПолучитьФайлПути(Знач Путь) Экспорт

    Если СтрНайти(Путь, "http") > 0 Или СтрНайти(Путь, "www") > 0 Тогда

        ИВФ      = ПолучитьИмяВременногоФайла();
        КопироватьФайл(Путь, ИВФ);
        Путь     = ИВФ;
        Двоичные = Новый ДвоичныеДанные(Путь);

        УдалитьФайлы(ИВФ);

    Иначе

        Двоичные = Новый ДвоичныеДанные(Путь);

    КонецЕсли;

    Возврат Двоичные;

КонецФункции

Процедура ПараметрВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьПараметр(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ДвоичныеВКоллекцию(Параметр, Коллекция) Экспорт

    Значение = ПолучитьДвоичные(Параметр);
    Коллекция.Вставить(Параметр, Значение);

КонецПроцедуры

Процедура ЗаписатьПараметр(Параметр, Значение) Экспорт

    Путь = ПутьКФайлуДанных();
    ЗаписатьПараметрВФайл(Параметр, Значение, Путь);

КонецПроцедуры

Процедура ЗаписатьЛог(Знач Результат, Знач Метод, Знач Библиотека = "") Экспорт

    Шапка = Строка(OPI_Инструменты.ПолучитьТекущуюДату()) + " | " + Метод;

    Попытка
        Данные = OPI_Инструменты.JSONСтрокой(Результат);
    Исключение
        Данные = "Не JSON: " + Строка(Результат);
    КонецПопытки;

    Данные = "    " + Данные;

    Сообщить(Шапка);
    Сообщить(Символы.ПС);
    Сообщить(Данные);
    Сообщить(Символы.ПС);
    Сообщить("---------------------------------");
    Сообщить(Символы.ПС);

    Если ЗначениеЗаполнено(Библиотека) Тогда

        Попытка
            Библиотека = Новый ЗащищенноеСоединениеOpenSSL; // Проверка на работу в 1С
        Исключение
            ЗаписатьФайлЛога(Данные, Метод, Библиотека);
        КонецПопытки;

    КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьФайлЛога(Знач Данные, Знач Метод, Знач Библиотека, Знач Принудительно = Ложь) Экспорт

    Попытка

        ПутьЛогов           = "./docs/ru/results";
        ПутьЛоговБиблиотеки = ПутьЛогов + "/" + Библиотека;

        КаталогЛогов = Новый Файл(ПутьЛогов);

        Если Не КаталогЛогов.Существует() Тогда
            СоздатьКаталог(ПутьЛогов);
        КонецЕсли;

        КаталогЛоговБиблиотеки = Новый Файл(ПутьЛоговБиблиотеки);

        Если Не КаталогЛоговБиблиотеки.Существует() Тогда
            СоздатьКаталог(ПутьЛоговБиблиотеки);
        КонецЕсли;

        ПутьКФайлу = ПутьЛоговБиблиотеки + "/" + Метод + ".log";
        ФайлЛога   = Новый Файл(ПутьКФайлу);

        Если Не ФайлЛога.Существует() Или Принудительно Тогда
            ДокументЛога = Новый ТекстовыйДокумент;
            ДокументЛога.УстановитьТекст(Данные);
            ДокументЛога.Записать(ПутьКФайлу);
        КонецЕсли;

    Исключение
        Сообщить("Не удалось записать файл лога!: " + ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

Процедура ЗаписатьЛогCLI(Знач Результат, Знач Метод, Знач Библиотека = "") Экспорт

    Шаблон = "%1 (CLI, %2)";
    ЗаписатьЛог(Результат, СтрШаблон(Шаблон, Метод, Библиотека));

КонецПроцедуры

Функция ВыполнитьТестCLI(Знач Библиотека, Знач Метод, Знач Опции, Знач Записывать = Истина) Экспорт

    Если OPI_Инструменты.ЭтоWindows() Тогда

        Если OPI_Инструменты.ЭтоOneScript() Тогда
            Oint = """C:\Program Files (x86)\OInt\bin\oint.bat""";
        Иначе
            Oint = """C:\Program Files\OneScript\bin\oint.bat""";
        КонецЕсли;

    Иначе

        Oint = "oint";

    КонецЕсли;

    ФайлРезультата = ПолучитьИмяВременногоФайла();

    СтрокаЗапуска = Oint + " " + Библиотека + " " + Метод;

    Для Каждого Опция Из Опции Цикл

        ТекущееЗначение = ПолучитьЗначениеДляCLI(Опция.Значение);

        СтрокаЗапуска = СтрокаЗапуска
            + " --"
            + Опция.Ключ
            + " "
            + ТекущееЗначение;

    КонецЦикла;

    // BSLLS:ExternalAppStarting-off
    ЗапуститьПриложение(СтрокаЗапуска + " --out """ + ФайлРезультата + """ --debug" , , Истина);
    // BSLLS:ExternalAppStarting-on

    Результат = ПрочестьРезультатCLI(ФайлРезультата);

    Если Записывать Тогда
        ЗаписатьВызовCLI(Библиотека, Метод, Опции);
    КонецЕсли;

    Попытка
        УдалитьФайлы(ФайлРезультата);
    Исключение
        Сообщить("Не удалось удалить временный файл после теста!");
    КонецПопытки;

    Возврат Результат;

КонецФункции

#Область Проверки

Процедура Проверка_Пусто(Знач Результат) Экспорт

    Если Не нРег(Строка(Результат)) = "null" Тогда
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Строка(Знач Результат, Знач ОбъектСравнения = "") Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Строка");

    Если ЗначениеЗаполнено(ОбъектСравнения) Тогда
        ОжидаетЧто(Результат).Равно(ОбъектСравнения);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ДвоичныеДанные(Знач Результат, Знач Размер = Неопределено) Экспорт

    МинимальныйРазмер = 500000;

    ОжидаетЧто(Результат).ИмеетТип("ДвоичныеДанные");

    Если Не Размер = Неопределено Тогда
        ОжидаетЧто(Результат.Размер() >= Размер).Равно(Истина);
    Иначе
        ОжидаетЧто(Результат.Размер() > МинимальныйРазмер).Равно(Истина);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Массив(Знач Результат, Знач Количество = Неопределено) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Массив");

    Если Не Количество = Неопределено Тогда
       ОжидаетЧто(Результат).ИмеетДлину(Количество);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Соответствие(Знач Результат, Знач Заполненность = Истина) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");

    Если Заполненность Тогда
        ОжидаетЧто(Результат).Заполнено();
    Иначе
        ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Ложь);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_Структура(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Структура").Заполнено();

КонецПроцедуры

Процедура Проверка_Заполнено(Знач Результат) Экспорт

    ОжидаетЧто(ЗначениеЗаполнено(Результат)).Равно(Истина);

КонецПроцедуры

Процедура Проверка_Истина(Знач Результат) Экспорт

    ОжидаетЧто(Результат).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ТелеграмИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ТелеграмИнформацияБота(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["username"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ТелеграмМассив(Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ТелеграмУстановкаВебхук(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Равно("Webhook was set");

КонецПроцедуры

Процедура Проверка_ТелеграмУдалениеВебхук(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).Равно(Истина);
    ОжидаетЧто(Результат["description"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ТелеграмСообщение(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["text"]).Равно(Текст);

КонецПроцедуры

Процедура Проверка_ТелеграмКартинка(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие") .Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["photo"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ТелеграмВидео(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["video"]["mime_type"]).Равно("video/mp4");

КонецПроцедуры

Процедура Проверка_ТелеграмАудио(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["audio"]["mime_type"]).Равно("audio/mpeg");

КонецПроцедуры

Процедура Проверка_ТелеграмДокумент(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат["result"]["document"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ТелеграмГифка(Знач Результат, Знач Текст) Экспорт

    Result_ = "result";

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["caption"]).Равно(Текст);
    ОжидаетЧто(Результат[Result_]["document"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат[Result_]["animation"]["mime_type"]).Равно("video/mp4");

КонецПроцедуры

Процедура Проверка_ТелеграмМедиагруппа(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ТелеграмМестоположение(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["location"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ТелеграмКонтакт(Знач Результат, Знач Имя) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["contact"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["contact"]["first_name"]).Равно(Имя);

КонецПроцедуры

Процедура Проверка_ТелеграмОпрос(Знач Результат, Знач Вопрос) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["poll"]).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["result"]["poll"]["question"]).Равно(Вопрос);

КонецПроцедуры

Процедура Проверка_ТелеграмПереслать(Знач Результат, Знач IDСообщения) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["forward_origin"]["message_id"]).Равно(Число(IDСообщения));

КонецПроцедуры

Процедура Проверка_ТелеграмБан(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["description"]).Равно("Bad Request: can't remove chat owner");

КонецПроцедуры

Процедура Проверка_ТелеграмПриглашение(Знач Результат, Знач Заголовок, Знач UnixИстечение) Экспорт

    Result_ = "result";
    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат[Result_]["member_limit"]).Равно(200);
    ОжидаетЧто(Результат[Result_]["name"]).Равно(Заголовок);
    ОжидаетЧто(Результат[Result_]["expire_date"]).Равно(Число(UnixИстечение));

КонецПроцедуры

Процедура Проверка_ТелеграмЧисло(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]).ИмеетТип("Число");

КонецПроцедуры

Процедура Проверка_ТелеграмОк(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ТелеграмСозданиеТемы(Знач Результат, Знач Имя, Иконка) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["result"]["name"]).Равно(Имя);
    ОжидаетЧто(Результат["result"]["icon_custom_emoji_id"]).Равно(Иконка);

КонецПроцедуры

Процедура Проверка_ТелеграмКлавиатураСообщения(Знач Результат, Знач Клавиатура) Экспорт

    КлавиатураСообщения = Результат["result"]["reply_markup"];

    Клавиатура_ = OPI_Инструменты.JsonВСтруктуру(Клавиатура);
    Клавиатура_.Удалить("rows");
    Клавиатура_ = OPI_Инструменты.JSONСтрокой(Клавиатура_);

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(СтрДлина(OPI_Инструменты.JSONСтрокой(КлавиатураСообщения))).Равно(СтрДлина(Клавиатура_));

КонецПроцедуры

Процедура Проверка_ВКПост(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["post_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Равно(1);

КонецПроцедуры

Процедура Проверка_ВКЭлементы(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКАльбом(Знач Результат, Знач Описание) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["description"]).Равно(Описание);

КонецПроцедуры

Процедура Проверка_ВККартинкаАльбома(Знач Результат, Знач ОписаниеКартинки, Знач ИДАльбома = "") Экспорт

    Response = "response";

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат[Response][0]["text"]).Равно(ОписаниеКартинки);

    Если ЗначениеЗаполнено(ИДАльбома) Тогда
        ОжидаетЧто(Результат[Response][0]["album_id"]).Равно(ИДАльбома);
    Иначе
        ОжидаетЧто(Результат[Response][0]["album_id"]).Заполнено();
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ВКИстория(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["count"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКОбсуждение(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКЛайк(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["likes"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКРепост(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["success"]).ИмеетТип("Число").Равно(1);
    ОжидаетЧто(Результат["response"]["wall_repost_count"]).ИмеетТип("Число").Равно(1);

КонецПроцедуры

Процедура Проверка_ВККомментарий(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["response"]["comment_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКСтатистика(Знач Результат) Экспорт

    ТипСоответствие = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["visitors"]).ИмеетТип(ТипСоответствие).Заполнено();
    ОжидаетЧто(Результат["response"][0]["reach"]).ИмеетТип(ТипСоответствие).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКСтатистикаПостов(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Массив").ИмеетДлину(2);

КонецПроцедуры

Процедура Проверка_ВКЧисло(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКПодборка(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["albums_count"]).ИмеетТип("Число").Заполнено();
    ОжидаетЧто(Результат["response"]["market_album_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТовар(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["market_item_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКСвойство(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["property_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКВариантСвойства(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["variant_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКИНформацияОТоварах(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["items"]).ИмеетТип("Массив").ИмеетДлину(2);

КонецПроцедуры

Процедура Проверка_ВКГруппаТоваров(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["item_group_id"]).ИмеетТип("Число").Заполнено();

КонецПроцедуры

Процедура Проверка_ВКВидео(Знач Результат) Экспорт

    ОжидаетЧто(Результат["video_id"]).Заполнено();
    ОжидаетЧто(Результат["video_hash"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВККатегории(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["response"]["v2"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯДискДиск(Знач Результат) Экспорт

    Соответствие_ = "Соответствие";

    ОжидаетЧто(Результат).ИмеетТип(Соответствие_).Заполнено();
    ОжидаетЧто(Результат["system_folders"]).ИмеетТип(Соответствие_);
    ОжидаетЧто(Результат["user"]).ИмеетТип(Соответствие_);

КонецПроцедуры

Процедура Проверка_ЯДискКаталог(Знач Результат, Знач Путь) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("dir");
    ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);

КонецПроцедуры

Процедура Проверка_ЯДискПуть(Знач Результат, Знач Путь = "", Знач Публичный = Неопределено) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["type"]).Равно("file");

    Если ЗначениеЗаполнено(Путь) Тогда
        ОжидаетЧто(Результат["path"]).Равно("disk:" + Путь);
    Иначе
        ОжидаетЧто(Результат["path"]).Заполнено();
    КонецЕсли;

    Если Не Публичный = Неопределено Тогда

        Если Публичный Тогда
             ОжидаетЧто(Результат["public_url"]).ИмеетТип("Строка").Заполнено();
        Иначе
            ОжидаетЧто(Результат["public_url"]).ИмеетТип("Неопределено");
        КонецЕсли;

    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ЯДискСсылка(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["method"]).Равно("GET");
    ОжидаетЧто(Результат["href"]).ИмеетТип("Строка").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯДискПроцедура(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["href"]).Заполнено();
    ОжидаетЧто(Результат["method"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ЯДискСписокФайлов(Знач Результат, Знач Количество, Знач Отступ) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["limit"]).Равно(Количество);
    ОжидаетЧто(Результат["offset"]).Равно(Отступ);
    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ГКОбъект(Знач Результат, Знач Наименование, Знач Описание) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

КонецПроцедуры

Процедура Проверка_ТвиттерТекст(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();

    Данные = Результат["data"];

    Если Данные = Неопределено Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    Иначе

        ТекстОтвета = Результат["data"]["text"];
        ТекстОтвета = Лев(ТекстОтвета, СтрДлина(Текст));

        ОжидаетЧто(ТекстОтвета).Равно(Текст);

    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ТвиттерМассив(Знач Результат) Экспорт

    Если Не ТипЗнч(Результат) = Тип("Массив") Тогда

        Статус = Результат["status"];
        ОжидаетЧто(Статус).Равно(429);

    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ВайберОк(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

КонецПроцедуры

Процедура Проверка_ВайберПользователь(Знач Результат) Экспорт

    ОжидаетЧто(Результат["chat_hostname"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВайберОнлайн(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);
    ОжидаетЧто(Результат["users"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ВайберСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["message_token"]).Заполнено();
    ОжидаетЧто(Результат["status_message"]).Равно("ok");
    ОжидаетЧто(Результат["status"]).Равно(0);

КонецПроцедуры

Процедура Проверка_ГуглТокен(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["access_token"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГуглКалендарь(Знач Результат, Знач Наименование) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["summary"]).Равно(Наименование);
    ОжидаетЧто(Результат["id"]).ИмеетТип("Строка").Заполнено();

КонецПроцедуры

Процедура Проверка_ГуглЦветКалендаря(Знач Результат, Знач ОсновнойЦвет, Знач ДополнительныйЦвет) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["foregroundColor"]).Равно(ОсновнойЦвет);
    ОжидаетЧто(Результат["backgroundColor"]).Равно(ДополнительныйЦвет);

КонецПроцедуры

Процедура Проверка_ГуглКаталоги(Знач Результат) Экспорт

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГуглКаталог(Знач Результат) Экспорт

    ОжидаетЧто(Результат["mimeType"]).Равно("application/vnd.google-apps.folder");
    ОжидаетЧто(Результат["name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГуглОбъект(Знач Результат, Знач Описание) Экспорт

    ОжидаетЧто(Результат["mimeType"]).Равно(Описание["MIME"]);
    ОжидаетЧто(Результат["name"]).Равно(Описание["Имя"]);

КонецПроцедуры

Процедура Проверка_ГуглКомментарий(Знач Результат, Знач Комментарий) Экспорт

    ОжидаетЧто(Результат["content"]).Равно(Комментарий);
    ОжидаетЧто(Результат["kind"]).Равно("drive#comment");

КонецПроцедуры

Процедура Проверка_ГуглКнига(Знач Результат, Знач Наименование, Знач МассивЛистов = "") Экспорт

    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

    Если ЗначениеЗаполнено(МассивЛистов) Тогда

        Для Н = 0 По МассивЛистов.ВГраница() Цикл

            ИмяЛиста = Результат["sheets"][Н]["properties"]["title"];
            ОжидаетЧто(ИмяЛиста).Равно(МассивЛистов[Н]);

        КонецЦикла;

    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ГуглЛист(Знач Результат, Знач Книга = "") Экспорт

    ОжидаетЧто(Результат["title"]).Заполнено();

    Если ЗначениеЗаполнено(Книга) Тогда

        ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);

    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ГуглЭлементКниги(Знач Результат, Знач Книга) Экспорт

    ОжидаетЧто(Результат["spreadsheetId"]).Равно(Книга);

КонецПроцедуры

Процедура Проверка_ГуглИмяТаблицы(Знач Результат, Знач Наименование) Экспорт

    ОжидаетЧто(Результат["properties"]["title"]).Равно(Наименование);

КонецПроцедуры

Процедура Проверка_ГуглОбновлениеЯчеек(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["totalUpdatedCells"]).Равно(Количество);

КонецПроцедуры

Процедура Проверка_ГуглЗначенияЯчеек(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["valueRanges"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_ГуглОчисткаЯчеек(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["clearedRanges"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_ТвиттерТокен(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

КонецПроцедуры

Процедура Проверка_НоушнОбъект(Знач Результат, Знач Вид = "page") Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["object"]).Равно(Вид);

КонецПроцедуры

Процедура Проверка_НоушнСтраницаБазы(Знач Результат, Знач База) Экспорт

    Проверка_НоушнОбъект(Результат);

    Родитель = Результат["parent"]["database_id"];
    ОжидаетЧто(Родитель).Равно(База);

КонецПроцедуры

Процедура Проверка_СлакОк(Знач Результат) Экспорт

    ОжидаетЧто(Результат).ИмеетТип("Соответствие").Заполнено();
    ОжидаетЧто(Результат["ok"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_СлакБот(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["bot_id"]).Заполнено();
    ОжидаетЧто(Результат["user_id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СлакПользователи(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакОбласти(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["teams"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакСообщение(Знач Результат, Знач Текст, Знач Канал) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["ts"]).Заполнено();
    ОжидаетЧто(Результат["message"]["text"]).Равно(Текст);

КонецПроцедуры

Процедура Проверка_СлакСообщения(Знач Результат) Экспорт

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакСсылкаСообщения(Знач Результат, Знач Канал) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["permalink"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СлакОтложенноеСообщение(Знач Результат, Знач Канал) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["channel"]).Равно(Канал);
    ОжидаетЧто(Результат["scheduled_message_id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СлакЭфемерное(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["message_ts"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СлакОтложенные(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["scheduled_messages"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакКанал(Знач Результат, Знач Имя = "") Экспорт

    Данные = Результат["channel"];

    Проверка_СлакОк(Результат);

    Если ЗначениеЗаполнено(Имя) Тогда
        ОжидаетЧто(Данные["name"]).Равно(Имя);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_СлакТемаКанала(Знач Результат, Знач Тема) Экспорт

    Данные = Результат["channel"];

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Данные["topic"]["value"]).Равно(Тема);

КонецПроцедуры

Процедура Проверка_СлакИсторияКанала(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакПользователиКанала(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["members"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакСписокКаналов(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["channels"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакДиалог(Знач Результат) Экспорт

    Диалог = Результат["channel"]["id"];
    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["channel"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Диалог).Заполнено();

КонецПроцедуры

Процедура Проверка_СлакСписокФайлов(Знач Результат) Экспорт

    Проверка_СлакОк(Результат);
    ОжидаетЧто(Результат["files"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_СлакФайл(Знач Результат, Знач ИмяФайла) Экспорт

    Если ЗначениеЗаполнено(Результат["files"]) Тогда
        ЗагруженныйФайл = Результат["files"][0];
    Иначе
        ЗагруженныйФайл = Результат["file"];
    КонецЕсли;

    Проверка_СлакОк(Результат);
    ОжидаетЧто(ЗагруженныйФайл["name"]).Равно(ИмяФайла);

КонецПроцедуры

Процедура Проверка_СлакВнешнийФайл(Знач Результат, Знач Заголовок) Экспорт

    ЗагруженныйФайл = Результат["file"];

    Проверка_СлакОк(Результат);
    ОжидаетЧто(ЗагруженныйФайл["title"]).Равно(Заголовок);

КонецПроцедуры

Процедура Проверка_АТБазаСТаблицей(Знач Результат, Знач ИмяТаблицы) Экспорт

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["tables"][0]["name"]).Равно(ИмяТаблицы);

КонецПроцедуры

Процедура Проверка_АТСписокТаблиц(Знач Результат) Экспорт

    ОжидаетЧто(Результат["tables"]).Заполнено();
    ОжидаетЧто(Результат["tables"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_АТСписокБаз(Знач Результат) Экспорт

    ОжидаетЧто(Результат["bases"]).Заполнено();
    ОжидаетЧто(Результат["bases"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_АТТаблица(Знач Результат, Знач Наименование, Знач Описание) Экспорт

    ОжидаетЧто(Результат["name"]).Равно(Наименование);
    ОжидаетЧто(Результат["description"]).Равно(Описание);

КонецПроцедуры

Процедура Проверка_АТПоле(Знач Результат, Знач Имя) Экспорт

    ОжидаетЧто(Результат["name"]).Равно(Имя);

КонецПроцедуры

Процедура Проверка_АТЗаписи(Знач Результат) Экспорт

    ОжидаетЧто(Результат["records"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["records"]).Заполнено();

КонецПроцедуры

Процедура Проверка_АТЗаписьНомерСтрока(Знач Результат, Знач Числовой, Знач Строчный) Экспорт

    ОдиночнаяЗапись = Результат["id"];
    ОжидаетЧто(ОдиночнаяЗапись).Заполнено();
    ОжидаетЧто(Результат["createdTime"]).Заполнено();
    ОжидаетЧто(Результат["fields"]["Номер"]).Равно(Числовой);
    ОжидаетЧто(СокрЛП(Результат["fields"]["Строковое"])).Равно(Строчный);

КонецПроцедуры

Процедура Проверка_АТЗапись(Знач Результат, Знач Запись) Экспорт

    ОжидаетЧто(Результат["id"]).Равно(Запись);

КонецПроцедуры

Процедура Проверка_АТТекст(Знач Результат, Знач Текст) Экспорт

    ОжидаетЧто(Результат["text"]).Равно(Текст);

КонецПроцедуры

Процедура Проверка_АТКомментарии(Знач Результат) Экспорт

    ОжидаетЧто(Результат["comments"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_АТУдалениеКомментария(Знач Результат, Знач Комментарий) Экспорт

    ОжидаетЧто(Результат["deleted"]).Равно(Истина);
    ОжидаетЧто(Результат["id"]).Равно(Комментарий);

КонецПроцедуры

Процедура Проверка_ДропБоксФайл(Знач Результат, Знач Путь) Экспорт

    ОжидаетЧто(Результат["path_display"]).Равно(Путь);

КонецПроцедуры

Процедура Проверка_ДропБоксМетаданные(Знач Результат, Знач Путь) Экспорт

    ОжидаетЧто(Результат["metadata"]["path_display"]).Равно(Путь);

КонецПроцедуры

Процедура Проверка_ДропБоксМассив(Знач Результат, Знач Количество = Неопределено) Экспорт

    ОжидаетЧто(Результат["entries"]).ИмеетТип("Массив");

    Если Не Количество = Неопределено Тогда
        ОжидаетЧто(Результат["entries"].Количество()).Равно(Количество);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ДропБоксРабота(Знач Результат) Экспорт
    ОжидаетЧто(Результат["async_job_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропБоксСтатус(Знач Результат) Экспорт
    ОжидаетЧто(Результат[".tag"]).Равно("complete");
КонецПроцедуры

Процедура Проверка_ДропБоксТеги(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["paths_to_tags"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["paths_to_tags"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_ДропбоксАккаунт(Знач Результат) Экспорт
    ОжидаетЧто(Результат["account_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропбоксПространство(Знач Результат) Экспорт
    ОжидаетЧто(Результат["used"]).Заполнено();
КонецПроцедуры

Процедура Проверка_ДропбоксУчастник(Знач Результат, Знач Почта, Знач ТолькоПросмотр) Экспорт
    ОжидаетЧто(Результат[0]["result"][".tag"]).Равно("success");
    ОжидаетЧто(Результат[0]["member"]["email"]).Равно(Почта);
    ОжидаетЧто(
        Результат[0]["result"]["success"][".tag"]).Равно(?(ТолькоПросмотр, "viewer", "editor"));
КонецПроцедуры

Процедура Проверка_ДропбоксПубличнаяПапка(Знач Результат) Экспорт
    ОжидаетЧто(Результат["shared_folder_id"]).Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксВремя(Знач Результат) Экспорт

    Время = Результат["result"];

    Если Не ТипЗнч(Время) = Тип("Дата") Тогда
       Время = XMLЗначение(Тип("Дата"), Время);
    КонецЕсли;

    ОжидаетЧто(Время).ИмеетТип("Дата").Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксАвторизация(Знач Результат) Экспорт

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["refresh_token"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЧисло(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Число").Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксИстина(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Булево").Равно(Истина);
КонецПроцедуры

Процедура Проверка_БитриксБулево(Знач Результат) Экспорт
   ОжидаетЧто(Результат["result"]).ИмеетТип("Булево");
КонецПроцедуры

Процедура Проверка_БитриксСтрока(Знач Результат, Знач Значение = "") Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Строка").Заполнено();

    Если ЗначениеЗаполнено(Значение) Тогда
        ОжидаетЧто(Результат["result"]).Равно(Значение);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_БитриксМассив(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксСоответствие(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
КонецПроцедуры

Процедура Проверка_БитриксСписок(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]["list"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксМассивОбъектов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксПоля(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["fields"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЗадача(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["task"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокЗадач(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]["tasks"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_БитриксХранилища(Знач Результат) Экспорт
    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["total"]).Заполнено();
КонецПроцедуры

Процедура Проверка_БитриксОбъект(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксЛид(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["PHONE"]).Заполнено();
    ОжидаетЧто(Результат["result"]["NAME"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСделка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["ID"]).Заполнено();
    ОжидаетЧто(Результат["result"]["BEGINDATE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксВложение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["attachmentId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксДоступныеДействия(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");

    Действия = Результат["result"]["allowedActions"];
    ОжидаетЧто(Действия).ИмеетТип("Соответствие");
    ОжидаетЧто(Действия.Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_БитриксКомментарий(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["POST_MESSAGE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксРезультат(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["text"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксНеопределено(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Неопределено");
    ОжидаетЧто(Результат["time"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокКомментариев(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["POST_MESSAGE"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСписокРезультатов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["text"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСообщения(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["messages"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_БитриксДиалог(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["dialogId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксФайлСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["MESSAGE_ID"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксУчетВремени(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["STATUS"]).Заполнено();

КонецПроцедуры

Процедура Проверка_БитриксНастройкиУчетаВремени(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["result"]["UF_TIMEMAN"]).ИмеетТип("Булево");

КонецПроцедуры

Процедура Проверка_ВКТПользователь(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["userId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТСобытия(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["events"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ВКТСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["msgId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ВКТФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["ok"]).Равно(Истина);
    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["size"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТСписок(Знач Результат, Знач ИмяПоля) Экспорт

    ОжидаетЧто(Результат[ИмяПоля]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ВКТЧат(Знач Результат) Экспорт

    ОжидаетЧто(Результат["type"]).Заполнено();
    ОжидаетЧто(Результат["inviteLink"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ВКТЗаявки(Знач Результат) Экспорт

    Если Не Результат["ok"] Тогда
        ОжидаетЧто(Результат["description"]).Равно("User is not pending or nobody in pending list");
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_ОзонСписокКатегорий(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["category_name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонСписокХарактеристик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонСписокЗначенийХарактеристики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"][0]["value"]).Заполнено();
    ОжидаетЧто(Результат["result"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЗаданиеЗагрузки(Знач Результат, Знач Вложенный = Истина) Экспорт

    Если Вложенный Тогда
        IDЗадачи = Результат["result"]["task_id"];
    Иначе
        IDЗадачи = Результат["task_id"];
    КонецЕсли;

    ОжидаетЧто(IDЗадачи).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонНовыеТовары(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["result"]["items"][0]["status"]).Равно("imported");

КонецПроцедуры

Процедура Проверка_ОзонМассивОбъектов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["items"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонОбъекты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонМассивОбновлено(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"][0]["updated"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонМассивРейтингов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["products"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонТовар(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["id"]).Заполнено();
    ОжидаетЧто(Результат["result"]["name"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонТовары(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["name"]).Заполнено();
    ОжидаетЧто(Результат["items"][0]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЛимиты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["daily_create"]).Заполнено();
    ОжидаетЧто(Результат["daily_update"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонКартинки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["pictures"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонБезОшибок(Знач Результат) Экспорт

    ОжидаетЧто(Результат["errors"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_ОзонИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонМассив(Знач Результат, Знач Поле = "result") Экспорт

    ОжидаетЧто(Результат[Поле]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонУдалениеТовара(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"][0]["is_deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ОзонДобавлениеКодов(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["status"]).Равно("imported");

КонецПроцедуры

Процедура Проверка_ОзонПодписчики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"][0]["count"]).ИмеетТип("Число");

КонецПроцедуры

Процедура Проверка_ОзонSKU(Знач Результат) Экспорт

    ОжидаетЧто(Результат["items"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["items"][0]["availability"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонЧерновик(Знач Результат) Экспорт

     ОжидаетЧто(Результат["operation_id"]).ИмеетТип("Строка").Заполнено();

КонецПроцедуры

Процедура Проверка_ОзонПоиск(Знач Результат) Экспорт

    ОжидаетЧто(Результат["search"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонКластеры(Знач Результат) Экспорт

    ОжидаетЧто(Результат["clusters"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ОзонГотовыйЧерновик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно("CALCULATION_STATUS_SUCCESS");

КонецПроцедуры

Процедура Проверка_ОзонТаймслоты(Знач Результат) Экспорт

    ОжидаетЧто(Результат["drop_off_warehouse_timeslots"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_НСУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно("success");

КонецПроцедуры

Процедура Проверка_НСФайлыКаталога(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["result"]).Равно("success");
    ОжидаетЧто(Результат["files"].Количество()).Равно(Количество);

КонецПроцедуры

Процедура Проверка_НССинхронизация(Знач Результат) Экспорт

    ОжидаетЧто(Результат["errors"]).Равно(0);
    ОжидаетЧто(Результат["items"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_СдэкТокен(Знач Результат) Экспорт

    ОжидаетЧто(Результат["access_token"]).Заполнено();
    ОжидаетЧто(Результат["expires_in"]).Заполнено();
    ОжидаетЧто(Результат["token_type"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СдэкЗаказ(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["requests"]).ИмеетТип("Массив").Заполнено();

    Статус = Результат["requests"][0]["state"];

    ОжидаетЧто(Статус = "ACCEPTED" Или Статус = "SUCCESSFUL").Равно(Истина);

КонецПроцедуры

Процедура Проверка_СдэкКвитанция(Знач Результат) Экспорт

    URL = Результат["entity"]["url"];

    ОжидаетЧто(URL).Заполнено();
    ОжидаетЧто(СтрЗаканчиваетсяНа(URL, ".pdf")).Равно(Истина);

КонецПроцедуры

Процедура Проверка_СдэкДанныеЗаказа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["entity"]["uuid"]).Заполнено();
    ОжидаетЧто(Результат["entity"]["number"]).Заполнено();

КонецПроцедуры

Процедура Проверка_СдэкИнтервалыДоставки(Знач Результат) Экспорт
    ОжидаетЧто(Результат["date_intervals"]).ИмеетТип("Массив");
КонецПроцедуры

Процедура Проверка_СдэкПаспорт(Знач Результат) Экспорт

    ОжидаетЧто(Результат["orders"][0]["passport"][0]["client"]).Равно("SENDER");
    ОжидаетЧто(Результат["orders"][0]["passport"][1]["client"]).Равно("RECEIVER");

КонецПроцедуры

Процедура Проверка_СдэкЧек(Знач Результат) Экспорт

    ОжидаетЧто(Результат["check_info"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_ЯМаркетМагазины(Знач Результат) Экспорт

    ОжидаетЧто(Результат["campaigns"]).ИмеетТип("Массив");
    ОжидаетЧто(Результат["pager"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетМагазин(Знач Результат) Экспорт

    ОжидаетЧто(Результат["campaign"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["campaign"]["id"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетКабинет(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]["settings"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_ЯМаркетОк(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно("OK");
    ОжидаетЧто(Результат["results"]).Равно(Неопределено);

КонецПроцедуры

Процедура Проверка_МетрикаМетки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["labels"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_МетрикаМетка(Знач Результат, Знач Наименование = "") Экспорт

    ОжидаетЧто(Результат["label"]).ИмеетТип("Соответствие");
    ОжидаетЧто(Результат["label"]["id"]).Заполнено();

    Если ЗначениеЗаполнено(Наименование) Тогда
        ОжидаетЧто(Результат["label"]["name"]).Равно(Наименование);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_МетрикаУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["success"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_МетрикаСчетчик(Знач Результат) Экспорт

    ОжидаетЧто(Результат["counter"]).ИмеетТип("Соответствие").Заполнено();

КонецПроцедуры

Процедура Проверка_МетрикаСчетчики(Знач Результат) Экспорт

    ОжидаетЧто(Результат["counters"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_МетрикаОперации(Знач Результат) Экспорт

    ОжидаетЧто(Результат["operations"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_S3Успех(Знач Результат) Экспорт

    Успех = Результат["status"] >= 200 И Результат["status"] < 300;
    ОжидаетЧто(Успех).Равно(Истина);

КонецПроцедуры

Процедура Проверка_S3НеНайдено(Знач Результат) Экспорт

    НеНайдено = Результат["status"] = 404;
    ОжидаетЧто(НеНайдено).Равно(Истина);

КонецПроцедуры

Процедура Проверка_S3НеПоддерживается(Знач Результат) Экспорт

    Успех = Результат["status"] = 501;
    ОжидаетЧто(Успех).Равно(Истина);

КонецПроцедуры

Процедура Проверка_Компонента(Знач Результат, Знач ИмяТипа) Экспорт

    ОжидаетЧто(Строка(ТипЗнч(Результат))).Равно(ИмяТипа);

КонецПроцедуры

Процедура Проверка_Равенство(Знач Значение1, Знач Значение2) Экспорт

    ОжидаетЧто(Значение1).Равно(Значение2);

КонецПроцедуры

Процедура Проверка_Неравенство(Знач Значение1, Знач Значение2) Экспорт

    ОжидаетЧто(Значение1 = Значение2).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_SQLiteУспех(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_SQLiteОшибка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_SQLiteСтроки(Знач Результат, Знач Количество) Экспорт

    ОжидаетЧто(Результат["rows"]).Равно(Количество);

КонецПроцедуры

Процедура Проверка_SQLiteЗначенияПолей(Знач Результат, Знач СтруктураЗначений) Экспорт

    Для Каждого Значение Из СтруктураЗначений Цикл
        Результат[Значение.Ключ] = Значение.Значение;
    КонецЦикла;

КонецПроцедуры

Процедура Проверка_SQLiteНетЗаписей(Знач Результат) Экспорт

    ОжидаетЧто(Результат["data"].Количество()).Равно(0);

КонецПроцедуры

Процедура Проверка_РезультатИстина(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_РезультатЛожь(Знач Результат) Экспорт

    ОжидаетЧто(Результат["result"]).Равно(Ложь);

КонецПроцедуры

Процедура Проверка_ГринИнстанс(Знач Результат) Экспорт

    ОжидаетЧто(Результат["proxyInstance"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринСохранениеНастроек(Знач Результат) Экспорт

    ОжидаетЧто(Результат["saveSettings"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринАвторизован(Знач Результат) Экспорт

    ОжидаетЧто(Результат["stateInstance"]).Равно("authorized");

КонецПроцедуры

Процедура Проверка_ГринПерезапуск(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isReboot"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринРазлогин(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isLogout"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринАватар(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setProfilePicture"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринКартинкаГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setGroupPicture"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринКод(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status"]).Равно(Истина);
    ОжидаетЧто(Результат["code"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринПрофиль(Знач Результат) Экспорт

    ОжидаетЧто(Результат["deviceId"]).Заполнено();
    ОжидаетЧто(Результат["phone"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринНоваяГруппа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["created"]).Равно(Истина);
    ОжидаетЧто(Результат["chatId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринВыходГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринГруппа(Знач Результат) Экспорт

    ОжидаетЧто(Результат["groupId"]).Заполнено();
    ОжидаетЧто(Результат["owner"]).Заполнено();
    ОжидаетЧто(Результат["creation"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринИмяГруппы(Знач Результат) Экспорт

    ОжидаетЧто(Результат["updateGroupName"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринДобавлениеПользователя(Знач Результат) Экспорт

    ОжидаетЧто(Результат["addParticipant"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринИсключениеПользователя(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeParticipant"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринНазначениеАдминистратора(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setGroupAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринОтзывАдминистратора(Знач Результат) Экспорт

    ОжидаетЧто(Результат["removeAdmin"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринСообщение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["idMessage"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринСообщения(Знач Результат) Экспорт

    ОжидаетЧто(Результат["messages"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_ГринФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["idMessage"]).Заполнено();
    ОжидаетЧто(Результат["urlFile"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринУведомление(Знач Результат) Экспорт

    ОжидаетЧто(Результат["receiptId"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринВходнойФайл(Знач Результат) Экспорт

    ОжидаетЧто(Результат["downloadUrl"]).Заполнено();

КонецПроцедуры

Процедура Проверка_ГринПрочтение(Знач Результат) Экспорт

    ОжидаетЧто(Результат["setRead"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_ГринОчисткаОчереди(Знач Результат) Экспорт

    ОжидаетЧто(Результат["isCleared"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OllamaОтвет(Знач Результат, Знач Завершен = Истина) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["response"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Завершен);

КонецПроцедуры

Процедура Проверка_OllamaПривязки(Знач Результат) Экспорт

    ОжидаетЧто(Результат["embeddings"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaЗагрузкаВыгрузка(Знач Результат, Знач Выгрузка) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Истина);

   Если Выгрузка Тогда
       ОжидаетЧто(Результат["done_reason"]).Равно("unload");
   Иначе
       ОжидаетЧто(Результат["done_reason"]).Равно("load");
   КонецЕсли;

КонецПроцедуры

Процедура Проверка_OllamaСообщение(Знач Результат, Знач Завершен = Истина) Экспорт

   ОжидаетЧто(Результат["model"]).Заполнено();
   ОжидаетЧто(Результат["message"]).Заполнено();
   ОжидаетЧто(Результат["done"]).Равно(Завершен);

КонецПроцедуры

Процедура Проверка_OllamaУспех(Знач Результат) Экспорт

   ОжидаетЧто(Результат["status"]).Равно("success");

КонецПроцедуры

Процедура Проверка_OllamaМодели(Знач Результат) Экспорт

    ОжидаетЧто(Результат["models"]).ИмеетТип("Массив");

КонецПроцедуры

Процедура Проверка_OllamaИнформацияМодели(Знач Результат) Экспорт

   ОжидаетЧто(Результат["parameters"]).Заполнено();
   ОжидаетЧто(Результат["model_info"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaВерсия(Знач Результат) Экспорт

   ОжидаетЧто(Результат["version"]).Заполнено();

КонецПроцедуры

Процедура Проверка_OllamaКод(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_code"] < 300).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OllamaОшибка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["status_code"] >= 400).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIОтвет(Знач Результат) Экспорт

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("chat.completion");
    ОжидаетЧто(Результат["choices"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIПредставления(Знач Результат) Экспорт

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIАссистент(Знач Результат, Знач Имя = "") Экспорт

    ОжидаетЧто(Результат["model"]).Заполнено();
    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("assistant");

    Если ЗначениеЗаполнено(Имя) Тогда
        ОжидаетЧто(Результат["name"]).Равно(Имя);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_OpenAIУдалениеАссистента(Знач Результат, Знач IDАссистента) Экспорт

    ОжидаетЧто(Результат["id"]).Равно(IDАссистента);
    ОжидаетЧто(Результат["object"]).Равно("assistant.deleted");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIСписок(Знач Результат) Экспорт

    ОжидаетЧто(Результат["object"]).Равно("list");
    ОжидаетЧто(Результат["data"]).ИмеетТип("Массив").Заполнено();

КонецПроцедуры

Процедура Проверка_OpenAIФайл(Знач Результат
    , Знач ИмяФайла   = Неопределено
    , Знач Размер     = Неопределено
    , Знач Назначение = Неопределено) Экспорт

    ОжидаетЧто(Результат["id"]).Заполнено();
    ОжидаетЧто(Результат["object"]).Равно("file");

    Если ИмяФайла <> Неопределено Тогда
        ОжидаетЧто(Результат["filename"]).Равно(ИмяФайла);
    КонецЕсли;

    Если Размер <> Неопределено Тогда
        ОжидаетЧто(Результат["bytes"]).Равно(Размер);
    КонецЕсли;

    Если Назначение <> Неопределено Тогда
        ОжидаетЧто(Результат["purpose"]).Равно(Назначение);
    КонецЕсли;

КонецПроцедуры

Процедура Проверка_OpenAIУдалениеФайла(Знач Результат, Знач IDФайла) Экспорт

    ОжидаетЧто(Результат["id"]).Равно(IDФайла);
    ОжидаетЧто(Результат["object"]).Равно("file");
    ОжидаетЧто(Результат["deleted"]).Равно(Истина);

КонецПроцедуры

Процедура Проверка_OpenAIКартинка(Знач Результат) Экспорт

    ОжидаетЧто(Результат["data"]).Заполнено();
    ОжидаетЧто(Результат["created"]).Заполнено();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеИзФайла(Параметр, Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Возврат ?(Значения.Свойство(Параметр), Значения[Параметр], "");

КонецФункции

Функция ПутьКФайлуДанных()

    Путь          = "";
    ВозможныеПути = Новый Массив;
    ВозможныеПути.Добавить("./data.json");
    ВозможныеПути.Добавить("C:\GDrive\Мой диск\data.json");
    ВозможныеПути.Добавить("G:\My Drive\data.json");

    Для Каждого ВозможныйПуть Из ВозможныеПути Цикл

        ФайлРепозитория = Новый Файл(ВозможныйПуть);

        Если ФайлРепозитория.Существует() Тогда
            Путь = ВозможныйПуть;
            Прервать;
        КонецЕсли;

    КонецЦикла;

    Возврат Путь;

КонецФункции

Функция ПолучитьОбщийМодуль(Знач Имя)

    Модуль = Вычислить(Имя);
    Возврат Модуль;
КонецФункции

// BSLLS:CognitiveComplexity-off

Функция ПолучитьЗначениеДляCLI(Знач Значение, Знач Вложенный = Ложь)

    ТекущийТип = ТипЗнч(Значение);
    Обертка    = Ложь;

    Если ТекущийТип = Тип("Число") Тогда

        Значение = OPI_Инструменты.ЧислоВСтроку(Значение);

    ИначеЕсли ТекущийТип = Тип("Строка") Тогда

        Значение = OPI_Инструменты.ЧислоВСтроку(Значение);

        Если Не Вложенный Тогда
            Обертка = Истина;
        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Дата") Тогда

        Значение = XMLСтрока(Значение);
        Обертка  = Истина;

    ИначеЕсли ТекущийТип = Тип("Структура")
        Или ТекущийТип = Тип("Соответствие")
        Или ТекущийТип = Тип("Массив") Тогда

        ЗаписьJSON = Новый ЗаписьJSON();

        Если OPI_Инструменты.ЭтоOneScript() Или ТекущийТип = Тип("Массив") Тогда

            ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, , Ложь);
            ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
            ЗаписатьJSON(ЗаписьJSON, Значение);

            Значение = ЗаписьJSON.Закрыть();
            Обертка  = Истина;

        Иначе

            // BSLLS:MissingTemporaryFileDeletion-off

            //@skip-check missing-temporary-file-deletion
            ИВТ   = ПолучитьИмяВременногоФайла("json");
            // BSLLS:MissingTemporaryFileDeletion-on

            Поток = Новый ФайловыйПоток(ИВТ, РежимОткрытияФайла.Создать);

            ЗаписьJSON.ОткрытьПоток(Поток);
            ЗаписатьJSON(ЗаписьJSON, Значение);
            ЗаписьJSON.Закрыть();
            Поток.Закрыть();

            Значение = ИВТ;
            Обертка  = Истина;

        КонецЕсли;

    ИначеЕсли ТекущийТип = Тип("Булево") Тогда

        Значение = ?(Значение, "true", "false");

    ИначеЕсли ТекущийТип = Тип("ДвоичныеДанные") Тогда

        // BSLLS:MissingTemporaryFileDeletion-off

        //@skip-check missing-temporary-file-deletion
        ИВФ = ПолучитьИмяВременногоФайла();
        Значение.Записать(ИВФ);
        Значение = ИВФ;
        Обертка  = Истина;

        // BSLLS:MissingTemporaryFileDeletion-on

    Иначе

        ВызватьИсключение "Неподдерживаемый тип " + Строка(ТекущийТип);

    КонецЕсли;

    Если Не OPI_Инструменты.ЭтоWindows() Тогда
        Значение = СтрЗаменить(Значение, """" , """'""");
    КонецЕсли;

    Если Обертка Тогда
        Значение = """" + Значение + """";
    КонецЕсли;

    Возврат Значение;

КонецФункции

// BSLLS:CognitiveComplexity-on

Функция ОформитьОпцию(Знач Значение, Знач Имя, Знач Вложенный = Ложь)

    МассивСекретов = Новый Массив();
    МассивСекретов.Добавить("token");
    МассивСекретов.Добавить("key");
    МассивСекретов.Добавить("secret");
    МассивСекретов.Добавить("pass");
    МассивСекретов.Добавить("client");
    МассивСекретов.Добавить("api");
    МассивСекретов.Добавить("refresh");

    СтруктураЗамен = Новый Структура;

    Если ТипЗнч(Значение) = Тип("Структура") Или ТипЗнч(Значение) = Тип("Соответствие") Тогда

        Значение = ОформитьОпциюКоллекцию(Значение);

    ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда

        Значение = ОформитьОпциюМассив(Значение, Имя);

    Иначе

        Для Каждого СекретныйКлюч Из МассивСекретов Цикл

            Если СтрНайти(нРег(Имя), СекретныйКлюч) <> 0 Тогда
                Значение = "***";
            КонецЕсли;

        КонецЦикла;

        Для Каждого ЗаменяемыйКлюч Из СтруктураЗамен Цикл

            Если нРег(Имя) = ЗаменяемыйКлюч.Ключ Тогда
                Значение = ЗаменяемыйКлюч.Значение;
            КонецЕсли;

        КонецЦикла;

    КонецЕсли;

    Если Не Вложенный Тогда
        Значение = "--" + Имя + " " + ПолучитьЗначениеДляCLI(Значение);
    КонецЕсли;

    Возврат Значение;

КонецФункции

Функция ОформитьОпциюКоллекцию(Знач Значение)

    Значение_ = ?(ТипЗнч(Значение) = Тип("Структура"), Новый Структура, Новый Соответствие);

    Для Каждого Элемент Из Значение Цикл

        Значение_.Вставить(Элемент.Ключ, ОформитьОпцию(Элемент.Значение, Элемент.Ключ, Истина));

    КонецЦикла;

    Возврат Значение_;

КонецФункции

Функция ОформитьОпциюМассив(Знач Значение, Знач Имя)

    Значение_ = Новый Массив;

    Для Каждого Элемент Из Значение Цикл
        Значение_.Добавить(ОформитьОпцию(Элемент, Имя, Истина));
    КонецЦикла;

    Возврат Значение_;

КонецФункции

Функция ПрочестьРезультатCLI(Знач ФайлРезультата)

    Попытка

        // BSLLS:ExternalAppStarting-off
        ЧтениеJSON = Новый ЧтениеJSON();
        ЧтениеJSON.ОткрытьФайл(ФайлРезультата);
        Результат  = ПрочитатьJSON(ЧтениеJSON, Истина);
        ЧтениеJSON.Закрыть();
        // BSLLS:ExternalAppStarting-on

    Исключение

        Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        Попытка
            Результат =  Новый ДвоичныеДанные(ФайлРезультата);
        Исключение
            Результат = null;
        КонецПопытки;

     КонецПопытки;

     Возврат Результат;

КонецФункции

Процедура НовыйТест(ТаблицаЗначений, Знач Метод, Знач Синоним, Знач Раздел)

    НовыйТест         = ТаблицаЗначений.Добавить();
    НовыйТест.Метод   = Метод;
    НовыйТест.Синоним = Синоним;
    НовыйТест.Раздел  = Раздел;

КонецПроцедуры

Процедура ЗаписатьПараметрВФайл(Знач Параметр, Знач Значение, Знач Путь)

    Значения = OPI_Инструменты.ПрочитатьJSONФайл(Путь);
    Значения.Вставить(Параметр, Значение);

    // BSLLS:ExternalAppStarting-off
    Запись              = Новый ЗаписьJSON;
    ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
    Запись.ОткрытьФайл(Путь, , , ПараметрыЗаписиJSON);
    ЗаписатьJSON(Запись, Значения);
    Запись.Закрыть();
    // BSLLS:ExternalAppStarting-on

КонецПроцедуры

Процедура ЗаписатьВызовCLI(Знач Библиотека, Знач Метод, Знач Опции)

    Если Не OPI_Инструменты.ЭтоOneScript() Тогда
        Возврат;
    КонецЕсли;

    КаталогПримеров = "./docs/ru/cli/" + Библиотека;
    ФайлПримеров    = Новый Файл(КаталогПримеров);

    Если Не ФайлПримеров.Существует() Тогда
        СоздатьКаталог(КаталогПримеров);
    КонецЕсли;

    КаталогМетода = КаталогПримеров + "/" + Метод;
    ФайлМетода    = Новый Файл(КаталогМетода);

    Если Не ФайлМетода.Существует() Тогда
        СоздатьКаталог(КаталогМетода);
    КонецЕсли;

    МассивОпций = Новый Массив;
    ЕстьJSON    = Ложь;

    Для Каждого Опция Из Опции Цикл

        Если ТипЗнч(Опция.Значение) = Тип("Структура")
            Или ТипЗнч(Опция.Значение) = Тип("Соответствие") Тогда

                ЕстьJSON = Истина;

        КонецЕсли;

        ТекущаяОпция = Опция.Значение;
        ОбработатьОсобенныеСекретыОпций(Библиотека, Опция.Ключ, ТекущаяОпция);
        ТекущаяОпция = ОформитьОпцию(ТекущаяОпция, Опция.Ключ);

        МассивОпций.Добавить(ТекущаяОпция);

    КонецЦикла;

    Начало = "oint ";

    Если ЕстьJSON Тогда

        Информация = "JSON данные также могут быть переданы как путь к файлу .json";

        НачалоBat  = ":: " + Информация + Символы.ПС + Символы.ПС + Начало;
        НачалоBash = "# " + Информация + Символы.ПС + Символы.ПС + Начало;

    Иначе

        НачалоBat  = Начало;
        НачалоBash = Начало;

    КонецЕсли;

    РазделительBat  = " ^" + Символы.ПС + "  ";
    РазделительBash = " \" + Символы.ПС + "  ";

    СтрокаBat  = НачалоBat + Библиотека + " " + Метод + РазделительBat + СтрСоединить(МассивОпций, РазделительBat);
    СтрокаBash = НачалоBash + Библиотека + " " + Метод + РазделительBash + СтрСоединить(МассивОпций, РазделительBash);

    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBat).Записать(КаталогМетода + "/bat.txt");
    ПолучитьДвоичныеДанныеИзСтроки(СтрокаBash).Записать(КаталогМетода + "/bash.txt");

КонецПроцедуры

Процедура ОбработатьОсобенныеСекретыОпций(Знач Библиотека, Знач Опция, Значение)

    Если Библиотека = "bitrix24" Тогда

        ОбработатьСекретыBitrix24(Опция, Значение);

    ИначеЕсли Библиотека = "postgres" Тогда

        ОбработатьСекретыPostgreSQL(Опция, Значение);

    ИначеЕсли Библиотека = "mysql" Тогда

        ОбработатьСекретыMySQL(Опция, Значение);

    ИначеЕсли Библиотека = "mssql" Тогда

        ОбработатьСекретыMSSQL(Опция, Значение);

    ИначеЕсли Библиотека = "ollama" Тогда

        ОбработатьСекретыOllama(Опция, Значение);

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыBitrix24(Знач Опция, Значение)

    Если Опция = "url" Тогда

        Значение = ?(СтрНайти(Значение, "rest") > 0
            , "https://b24-ar17wx.bitrix24.by/rest/1/***"
            , Значение);

    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыPostgreSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "postgresql://bayselonarrend:***@127.0.0.1:5432/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMySQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "mysql://bayselonarrend:***@127.0.0.1:3306/";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыMSSQL(Знач Опция, Значение)

    Если Опция = "dbc" Тогда

        Значение = "Server=127.0.0.1;Database=***;User Id=SA;Password=***;";

    ИначеЕсли Опция = "addr" Тогда

        Значение = "127.0.0.1";

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

Процедура ОбработатьСекретыOllama(Знач Опция, Значение)

    Если Опция = "headers" Тогда

        Значение = Новый Структура("Authorization", "***");

    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Region Alternate

Function GetTestingSectionMapping() Export
	Return ПолучитьСоответствиеРазделовТестирования();
EndFunction

Function GetTestingSectionMappingGA() Export
	Return ПолучитьСоответствиеРазделовТестированияGA();
EndFunction

Function GetTestTable() Export
	Return ПолучитьТаблицуТестов();
EndFunction

Function ExpectsThat(Value) Export
	Return ОжидаетЧто(Value);
EndFunction

Function FormYAXTests() Export
	Return СформироватьТестыЯкс();
EndFunction

Function FormAssertsTests() Export
	Return СформироватьТестыАссертс();
EndFunction

Function FormYAXTestsCLI() Export
	Return СформироватьТестыЯксCLI();
EndFunction

Function FormAssertsTestsCLI() Export
	Return СформироватьТестыАссертсCLI();
EndFunction

Function GetParameter(Parameter) Export
	Return ПолучитьПараметр(Parameter);
EndFunction

Function GetBinary(Parameter) Export
	Return ПолучитьДвоичные(Parameter);
EndFunction

Function GetFilePath(Val Path) Export
	Return ПолучитьФайлПути(Path);
EndFunction

Procedure ParameterToCollection(Parameter, Collection) Export
	ПараметрВКоллекцию(Parameter, Collection);
EndProcedure

Procedure BinaryToCollection(Parameter, Collection) Export
	ДвоичныеВКоллекцию(Parameter, Collection);
EndProcedure

Procedure WriteParameter(Parameter, Value) Export
	ЗаписатьПараметр(Parameter, Value);
EndProcedure

Procedure WriteLog(Val Result, Val Method, Val Library = "") Export
	ЗаписатьЛог(Result, Method, Library);
EndProcedure

Procedure WriteLogFile(Val Data, Val Method, Val Library, Val Forced = False) Export
	ЗаписатьФайлЛога(Data, Method, Library, Forced);
EndProcedure

Procedure WriteLogCLI(Val Result, Val Method, Val Library = "") Export
	ЗаписатьЛогCLI(Result, Method, Library);
EndProcedure

Function ExecuteTestCLI(Val Library, Val Method, Val Options, Val Record = True) Export
	Return ВыполнитьТестCLI(Library, Method, Options, Record);
EndFunction

Procedure Check_Empty(Val Result) Export
	Проверка_Пусто(Result);
EndProcedure

Procedure Check_String(Val Result, Val ComparisonObject = "") Export
	Проверка_Строка(Result, ComparisonObject);
EndProcedure

Procedure Check_BinaryData(Val Result, Val Size = Undefined) Export
	Проверка_ДвоичныеДанные(Result, Size);
EndProcedure

Procedure Check_Array(Val Result, Val Count = Undefined) Export
	Проверка_Массив(Result, Count);
EndProcedure

Procedure Check_Map(Val Result, Val Filling = True) Export
	Проверка_Соответствие(Result, Filling);
EndProcedure

Procedure Check_Structure(Val Result) Export
	Проверка_Структура(Result);
EndProcedure

Procedure Check_Filled(Val Result) Export
	Проверка_Заполнено(Result);
EndProcedure

Procedure Check_True(Val Result) Export
	Проверка_Истина(Result);
EndProcedure

Procedure Check_TelegramTrue(Val Result) Export
	Проверка_ТелеграмИстина(Result);
EndProcedure

Procedure Check_TelegramBotInformation(Val Result) Export
	Проверка_ТелеграмИнформацияБота(Result);
EndProcedure

Procedure Check_TelegramArray(Result) Export
	Проверка_ТелеграмМассив(Result);
EndProcedure

Procedure Check_TelegramWebhookSetup(Val Result) Export
	Проверка_ТелеграмУстановкаВебхук(Result);
EndProcedure

Procedure Check_TelegramWebhookDeletion(Val Result) Export
	Проверка_ТелеграмУдалениеВебхук(Result);
EndProcedure

Procedure Check_TelegramMessage(Val Result, Val Text) Export
	Проверка_ТелеграмСообщение(Result, Text);
EndProcedure

Procedure Check_TelegramImage(Val Result, Val Text) Export
	Проверка_ТелеграмКартинка(Result, Text);
EndProcedure

Procedure Check_TelegramVideo(Val Result, Val Text) Export
	Проверка_ТелеграмВидео(Result, Text);
EndProcedure

Procedure Check_TelegramAudio(Val Result, Val Text) Export
	Проверка_ТелеграмАудио(Result, Text);
EndProcedure

Procedure Check_TelegramDocument(Val Result, Val Text) Export
	Проверка_ТелеграмДокумент(Result, Text);
EndProcedure

Procedure Check_TelegramGif(Val Result, Val Text) Export
	Проверка_ТелеграмГифка(Result, Text);
EndProcedure

Procedure Check_TelegramMediaGroup(Val Result) Export
	Проверка_ТелеграмМедиагруппа(Result);
EndProcedure

Procedure Check_TelegramLocation(Val Result) Export
	Проверка_ТелеграмМестоположение(Result);
EndProcedure

Procedure Check_TelegramContact(Val Result, Val Name) Export
	Проверка_ТелеграмКонтакт(Result, Name);
EndProcedure

Procedure Check_TelegramPoll(Val Result, Val Question) Export
	Проверка_ТелеграмОпрос(Result, Question);
EndProcedure

Procedure Check_TelegramForward(Val Result, Val MessageID) Export
	Проверка_ТелеграмПереслать(Result, MessageID);
EndProcedure

Procedure Check_TelegramBan(Val Result) Export
	Проверка_ТелеграмБан(Result);
EndProcedure

Procedure Check_TelegramInvitation(Val Result, Val Title, Val UnixExpiration) Export
	Проверка_ТелеграмПриглашение(Result, Title, UnixExpiration);
EndProcedure

Procedure Check_TelegramNumber(Val Result) Export
	Проверка_ТелеграмЧисло(Result);
EndProcedure

Procedure Check_TelegramOk(Val Result) Export
	Проверка_ТелеграмОк(Result);
EndProcedure

Procedure Check_TelegramCreateTopic(Val Result, Val Name, Icon) Export
	Проверка_ТелеграмСозданиеТемы(Result, Name, Icon);
EndProcedure

Procedure Check_TelegramMessageKeyboard(Val Result, Val Keyboard) Export
	Проверка_ТелеграмКлавиатураСообщения(Result, Keyboard);
EndProcedure

Procedure Check_VKPost(Val Result) Export
	Проверка_ВКПост(Result);
EndProcedure

Procedure Check_VKTrue(Val Result) Export
	Проверка_ВКИстина(Result);
EndProcedure

Procedure Check_VKElement(Val Result) Export
	Проверка_ВКЭлементы(Result);
EndProcedure

Procedure Check_VKAlbum(Val Result, Val Description) Export
	Проверка_ВКАльбом(Result, Description);
EndProcedure

Procedure Check_VKAlbumPicture(Val Result, Val ImageDescription, Val AlbumID = "") Export
	Проверка_ВККартинкаАльбома(Result, ImageDescription, AlbumID);
EndProcedure

Procedure Check_VKStory(Val Result) Export
	Проверка_ВКИстория(Result);
EndProcedure

Procedure Check_VKDiscussion(Val Result) Export
	Проверка_ВКОбсуждение(Result);
EndProcedure

Procedure Check_VKLike(Val Result) Export
	Проверка_ВКЛайк(Result);
EndProcedure

Procedure Check_VKRepost(Val Result) Export
	Проверка_ВКРепост(Result);
EndProcedure

Procedure Check_VKComment(Val Result) Export
	Проверка_ВККомментарий(Result);
EndProcedure

Procedure Check_VKStatistic(Val Result) Export
	Проверка_ВКСтатистика(Result);
EndProcedure

Procedure Check_VKPostsStatistic(Val Result) Export
	Проверка_ВКСтатистикаПостов(Result);
EndProcedure

Procedure Check_VKNumber(Val Result) Export
	Проверка_ВКЧисло(Result);
EndProcedure

Procedure Check_VKCollection(Val Result) Export
	Проверка_ВКПодборка(Result);
EndProcedure

Procedure Check_VKProduct(Val Result) Export
	Проверка_ВКТовар(Result);
EndProcedure

Procedure Check_VKProp(Val Result) Export
	Проверка_ВКСвойство(Result);
EndProcedure

Procedure Check_VKPropVariant(Val Result) Export
	Проверка_ВКВариантСвойства(Result);
EndProcedure

Procedure Check_VKProductData(Val Result) Export
	Проверка_ВКИНформацияОТоварах(Result);
EndProcedure

Procedure Check_VKProductsGroup(Val Result) Export
	Проверка_ВКГруппаТоваров(Result);
EndProcedure

Procedure Check_VKVideo(Val Result) Export
	Проверка_ВКВидео(Result);
EndProcedure

Procedure Check_VKCategories(Val Result) Export
	Проверка_ВККатегории(Result);
EndProcedure

Procedure Check_YaDiskDrive(Val Result) Export
	Проверка_ЯДискДиск(Result);
EndProcedure

Procedure Check_YaDiskFolder(Val Result, Val Path) Export
	Проверка_ЯДискКаталог(Result, Path);
EndProcedure

Procedure Check_YaDiskPath(Val Result, Val Path = "", Val Public = Undefined) Export
	Проверка_ЯДискПуть(Result, Path, Public);
EndProcedure

Procedure Check_YaDiskLink(Val Result) Export
	Проверка_ЯДискСсылка(Result);
EndProcedure

Procedure Check_YaDiskProc(Val Result) Export
	Проверка_ЯДискПроцедура(Result);
EndProcedure

Procedure Check_YaDiskFilesList(Val Result, Val Count, Val Indent) Export
	Проверка_ЯДискСписокФайлов(Result, Count, Indent);
EndProcedure

Procedure Check_GKObject(Val Result, Val Name, Val Description) Export
	Проверка_ГКОбъект(Result, Name, Description);
EndProcedure

Procedure Check_TwitterText(Val Result, Val Text) Export
	Проверка_ТвиттерТекст(Result, Text);
EndProcedure

Procedure Check_TwitterArray(Val Result) Export
	Проверка_ТвиттерМассив(Result);
EndProcedure

Procedure Check_ViberOk(Val Result) Export
	Проверка_ВайберОк(Result);
EndProcedure

Procedure Check_ViberUser(Val Result) Export
	Проверка_ВайберПользователь(Result);
EndProcedure

Procedure Check_ViberOnline(Val Result) Export
	Проверка_ВайберОнлайн(Result);
EndProcedure

Procedure Check_ViberMessage(Val Result) Export
	Проверка_ВайберСообщение(Result);
EndProcedure

Procedure Check_GoogleToken(Val Result) Export
	Проверка_ГуглТокен(Result);
EndProcedure

Procedure Check_GoogleCalendar(Val Result, Val Name) Export
	Проверка_ГуглКалендарь(Result, Name);
EndProcedure

Procedure Check_GoogleCalendarColors(Val Result, Val PrimaryColor, Val SecondaryColor) Export
	Проверка_ГуглЦветКалендаря(Result, PrimaryColor, SecondaryColor);
EndProcedure

Procedure Check_GoogleCatalogs(Val Result) Export
	Проверка_ГуглКаталоги(Result);
EndProcedure

Procedure Check_GoogleCatalog(Val Result) Export
	Проверка_ГуглКаталог(Result);
EndProcedure

Procedure Check_GoogleObject(Val Result, Val Description) Export
	Проверка_ГуглОбъект(Result, Description);
EndProcedure

Procedure Check_GoogleComment(Val Result, Val Comment) Export
	Проверка_ГуглКомментарий(Result, Comment);
EndProcedure

Procedure Check_GoogleSpreadsheet(Val Result, Val Name, Val SheetArray = "") Export
	Проверка_ГуглКнига(Result, Name, SheetArray);
EndProcedure

Procedure Check_GoogleSheet(Val Result, Val Spreadsheet = "") Export
	Проверка_ГуглЛист(Result, Spreadsheet);
EndProcedure

Procedure Check_GoogleSpreadsheetElement(Val Result, Val Spreadsheet) Export
	Проверка_ГуглЭлементКниги(Result, Spreadsheet);
EndProcedure

Procedure Check_GoogleSheetTitle(Val Result, Val Name) Export
	Проверка_ГуглИмяТаблицы(Result, Name);
EndProcedure

Procedure Check_GoogleCellUpdating(Val Result, Val Count) Export
	Проверка_ГуглОбновлениеЯчеек(Result, Count);
EndProcedure

Procedure Check_GoogleCellValues(Val Result, Val Count) Export
	Проверка_ГуглЗначенияЯчеек(Result, Count);
EndProcedure

Procedure Check_GoogleCellCleanning(Val Result, Val Count) Export
	Проверка_ГуглОчисткаЯчеек(Result, Count);
EndProcedure

Procedure Check_TwitterToken(Val Result) Export
	Проверка_ТвиттерТокен(Result);
EndProcedure

Procedure Check_NotionObject(Val Result, Val View = "page") Export
	Проверка_НоушнОбъект(Result, View);
EndProcedure

Procedure Check_NotionBasePage(Val Result, Val Base) Export
	Проверка_НоушнСтраницаБазы(Result, Base);
EndProcedure

Procedure Check_SlackOk(Val Result) Export
	Проверка_СлакОк(Result);
EndProcedure

Procedure Check_SlackBot(Val Result) Export
	Проверка_СлакБот(Result);
EndProcedure

Procedure Check_SlackUsers(Val Result) Export
	Проверка_СлакПользователи(Result);
EndProcedure

Procedure Check_SlackWorkspaces(Val Result) Export
	Проверка_СлакОбласти(Result);
EndProcedure

Procedure Check_SlackMessage(Val Result, Val Text, Val Channel) Export
	Проверка_СлакСообщение(Result, Text, Channel);
EndProcedure

Procedure Check_SlackMessages(Val Result) Export
	Проверка_СлакСообщения(Result);
EndProcedure

Procedure Check_SlackMessageLink(Val Result, Val Channel) Export
	Проверка_СлакСсылкаСообщения(Result, Channel);
EndProcedure

Procedure Check_SlackSheduledMessage(Val Result, Val Channel) Export
	Проверка_СлакОтложенноеСообщение(Result, Channel);
EndProcedure

Procedure Check_SlackEphemeral(Val Result) Export
	Проверка_СлакЭфемерное(Result);
EndProcedure

Procedure Check_SlackSheduled(Val Result) Export
	Проверка_СлакОтложенные(Result);
EndProcedure

Procedure Check_SlackChannel(Val Result, Val Name = "") Export
	Проверка_СлакКанал(Result, Name);
EndProcedure

Procedure Check_SlackChannelTopic(Val Result, Val Topic) Export
	Проверка_СлакТемаКанала(Result, Topic);
EndProcedure

Procedure Check_SlackChannelHistory(Val Result) Export
	Проверка_СлакИсторияКанала(Result);
EndProcedure

Procedure Check_SlackChannelUsers(Val Result) Export
	Проверка_СлакПользователиКанала(Result);
EndProcedure

Procedure Check_SlackChannelsList(Val Result) Export
	Проверка_СлакСписокКаналов(Result);
EndProcedure

Procedure Check_SlackDialog(Val Result) Export
	Проверка_СлакДиалог(Result);
EndProcedure

Procedure Check_SlackFilesList(Val Result) Export
	Проверка_СлакСписокФайлов(Result);
EndProcedure

Procedure Check_SlackFile(Val Result, Val FileName) Export
	Проверка_СлакФайл(Result, FileName);
EndProcedure

Procedure Check_SlackExternalFile(Val Result, Val Title) Export
	Проверка_СлакВнешнийФайл(Result, Title);
EndProcedure

Procedure Check_ATBaseWithTable(Val Result, Val TableName) Export
	Проверка_АТБазаСТаблицей(Result, TableName);
EndProcedure

Procedure Check_ATTablesList(Val Result) Export
	Проверка_АТСписокТаблиц(Result);
EndProcedure

Procedure Check_ATBasesList(Val Result) Export
	Проверка_АТСписокБаз(Result);
EndProcedure

Procedure Check_ATTable(Val Result, Val Name, Val Description) Export
	Проверка_АТТаблица(Result, Name, Description);
EndProcedure

Procedure Check_ATField(Val Result, Val Name) Export
	Проверка_АТПоле(Result, Name);
EndProcedure

Procedure Check_ATRecords(Val Result) Export
	Проверка_АТЗаписи(Result);
EndProcedure

Procedure Check_ATRecordNumberAndString(Val Result, Val Numeric, Val StringType) Export
	Проверка_АТЗаписьНомерСтрока(Result, Numeric, StringType);
EndProcedure

Procedure Check_ATRecord(Val Result, Val Record) Export
	Проверка_АТЗапись(Result, Record);
EndProcedure

Procedure Check_ATText(Val Result, Val Text) Export
	Проверка_АТТекст(Result, Text);
EndProcedure

Procedure Check_ATComments(Val Result) Export
	Проверка_АТКомментарии(Result);
EndProcedure

Procedure Check_ATCommentDeleting(Val Result, Val Comment) Export
	Проверка_АТУдалениеКомментария(Result, Comment);
EndProcedure

Procedure Check_DropboxFile(Val Result, Val Path) Export
	Проверка_ДропБоксФайл(Result, Path);
EndProcedure

Procedure Check_DropboxMetadata(Val Result, Val Path) Export
	Проверка_ДропБоксМетаданные(Result, Path);
EndProcedure

Procedure Check_DropboxArray(Val Result, Val Count = Undefined) Export
	Проверка_ДропБоксМассив(Result, Count);
EndProcedure

Procedure Check_DropboxWork(Val Result) Export
	Проверка_ДропБоксРабота(Result);
EndProcedure

Procedure Check_DropboxStatus(Val Result) Export
	Проверка_ДропБоксСтатус(Result);
EndProcedure

Procedure Check_DropboxTags(Val Result, Val Count) Export
	Проверка_ДропБоксТеги(Result, Count);
EndProcedure

Procedure Check_DropboxAccount(Val Result) Export
	Проверка_ДропбоксАккаунт(Result);
EndProcedure

Procedure Check_DropboxSpace(Val Result) Export
	Проверка_ДропбоксПространство(Result);
EndProcedure

Procedure Check_DropboxMember(Val Result, Val Email, Val ViewOnly) Export
	Проверка_ДропбоксУчастник(Result, Email, ViewOnly);
EndProcedure

Procedure Check_DropboxPublicFolder(Val Result) Export
	Проверка_ДропбоксПубличнаяПапка(Result);
EndProcedure

Procedure Check_BitrixTime(Val Result) Export
	Проверка_БитриксВремя(Result);
EndProcedure

Procedure Check_BitrixAuth(Val Result) Export
	Проверка_БитриксАвторизация(Result);
EndProcedure

Procedure Check_BitrixNumber(Val Result) Export
	Проверка_БитриксЧисло(Result);
EndProcedure

Procedure Check_BitrixTrue(Val Result) Export
	Проверка_БитриксИстина(Result);
EndProcedure

Procedure Check_BitrixBool(Val Result) Export
	Проверка_БитриксБулево(Result);
EndProcedure

Procedure Check_BitrixString(Val Result, Val Value = "") Export
	Проверка_БитриксСтрока(Result, Value);
EndProcedure

Procedure Check_BitrixArray(Val Result) Export
	Проверка_БитриксМассив(Result);
EndProcedure

Procedure Check_BitrixMap(Val Result) Export
	Проверка_БитриксСоответствие(Result);
EndProcedure

Procedure Check_BitrixList(Val Result) Export
	Проверка_БитриксСписок(Result);
EndProcedure

Procedure Check_BitrixObjectsArray(Val Result) Export
	Проверка_БитриксМассивОбъектов(Result);
EndProcedure

Procedure Check_BitrixFields(Val Result) Export
	Проверка_БитриксПоля(Result);
EndProcedure

Procedure Check_BitrixTask(Val Result) Export
	Проверка_БитриксЗадача(Result);
EndProcedure

Procedure Check_BitrixTasksList(Val Result) Export
	Проверка_БитриксСписокЗадач(Result);
EndProcedure

Procedure Check_BitrixStorage(Val Result) Export
	Проверка_БитриксХранилища(Result);
EndProcedure

Procedure Check_BitrixObject(Val Result) Export
	Проверка_БитриксОбъект(Result);
EndProcedure

Procedure Check_BitrixLead(Val Result) Export
	Проверка_БитриксЛид(Result);
EndProcedure

Procedure Check_BitrixDeal(Val Result) Export
	Проверка_БитриксСделка(Result);
EndProcedure

Procedure Check_BitrixAttachment(Val Result) Export
	Проверка_БитриксВложение(Result);
EndProcedure

Procedure Check_BitrixAvailableActions(Val Result, Val Count) Export
	Проверка_БитриксДоступныеДействия(Result, Count);
EndProcedure

Procedure Check_BitrixComment(Val Result) Export
	Проверка_БитриксКомментарий(Result);
EndProcedure

Procedure Check_BitrixResult(Val Result) Export
	Проверка_БитриксРезультат(Result);
EndProcedure

Procedure Check_BitrixUndefined(Val Result) Export
	Проверка_БитриксНеопределено(Result);
EndProcedure

Procedure Check_BitrixCommentsList(Val Result) Export
	Проверка_БитриксСписокКомментариев(Result);
EndProcedure

Procedure Check_BitrixResultsList(Val Result) Export
	Проверка_БитриксСписокРезультатов(Result);
EndProcedure

Procedure Check_BitrixMessages(Val Result) Export
	Проверка_БитриксСообщения(Result);
EndProcedure

Procedure Check_BitrixDialog(Val Result) Export
	Проверка_БитриксДиалог(Result);
EndProcedure

Procedure Check_BitrixMessage(Val Result) Export
	Проверка_БитриксСообщение(Result);
EndProcedure

Procedure Check_BitrixFileMessage(Val Result) Export
	Проверка_БитриксФайлСообщение(Result);
EndProcedure

Procedure Check_BitrixTimekeeping(Val Result) Export
	Проверка_БитриксУчетВремени(Result);
EndProcedure

Procedure Check_BitrixTimekeepingSettings(Val Result) Export
	Проверка_БитриксНастройкиУчетаВремени(Result);
EndProcedure

Procedure Check_VKTUser(Val Result) Export
	Проверка_ВКТПользователь(Result);
EndProcedure

Procedure Check_VKTEvents(Val Result) Export
	Проверка_ВКТСобытия(Result);
EndProcedure

Procedure Check_VKTMessage(Val Result) Export
	Проверка_ВКТСообщение(Result);
EndProcedure

Procedure Check_VKTTrue(Val Result) Export
	Проверка_ВКТИстина(Result);
EndProcedure

Procedure Check_VKTFile(Val Result) Export
	Проверка_ВКТФайл(Result);
EndProcedure

Procedure Check_VKTList(Val Result, Val FieldName) Export
	Проверка_ВКТСписок(Result, FieldName);
EndProcedure

Procedure Check_VKTChat(Val Result) Export
	Проверка_ВКТЧат(Result);
EndProcedure

Procedure Check_VKTPending(Val Result) Export
	Проверка_ВКТЗаявки(Result);
EndProcedure

Procedure Check_OzonCategoryList(Val Result) Export
	Проверка_ОзонСписокКатегорий(Result);
EndProcedure

Procedure Check_OzonAttributesList(Val Result) Export
	Проверка_ОзонСписокХарактеристик(Result);
EndProcedure

Procedure Check_OzonListOfAttributesValues(Val Result) Export
	Проверка_ОзонСписокЗначенийХарактеристики(Result);
EndProcedure

Procedure Check_OzonUploadTask(Val Result, Val Embedded = True) Export
	Проверка_ОзонЗаданиеЗагрузки(Result, Embedded);
EndProcedure

Procedure Check_OzonNewProducts(Val Result) Export
	Проверка_ОзонНовыеТовары(Result);
EndProcedure

Procedure Check_OzonObjectsArray(Val Result) Export
	Проверка_ОзонМассивОбъектов(Result);
EndProcedure

Procedure Check_OzonObjects(Val Result) Export
	Проверка_ОзонОбъекты(Result);
EndProcedure

Procedure Check_OzonUpdatedArray(Val Result) Export
	Проверка_ОзонМассивОбновлено(Result);
EndProcedure

Procedure Check_OzonRatingArray(Val Result) Export
	Проверка_ОзонМассивРейтингов(Result);
EndProcedure

Procedure Check_OzonProduct(Val Result) Export
	Проверка_ОзонТовар(Result);
EndProcedure

Procedure Check_OzonProducts(Val Result) Export
	Проверка_ОзонТовары(Result);
EndProcedure

Procedure Check_OzonLimits(Val Result) Export
	Проверка_ОзонЛимиты(Result);
EndProcedure

Procedure Check_OzonPictures(Val Result) Export
	Проверка_ОзонКартинки(Result);
EndProcedure

Procedure Check_OzonNoErrors(Val Result) Export
	Проверка_ОзонБезОшибок(Result);
EndProcedure

Procedure Check_OzonTrue(Val Result) Export
	Проверка_ОзонИстина(Result);
EndProcedure

Procedure Check_OzonArray(Val Result, Val Field = "result") Export
	Проверка_ОзонМассив(Result, Field);
EndProcedure

Procedure Check_OzonProductsDeleting(Val Result) Export
	Проверка_ОзонУдалениеТовара(Result);
EndProcedure

Procedure Check_OzonNewCodes(Val Result) Export
	Проверка_ОзонДобавлениеКодов(Result);
EndProcedure

Procedure Check_OzonSubscribers(Val Result) Export
	Проверка_ОзонПодписчики(Result);
EndProcedure

Procedure Check_OzonSKU(Val Result) Export
	Проверка_ОзонSKU(Result);
EndProcedure

Procedure Check_OzonDraft(Val Result) Export
	Проверка_ОзонЧерновик(Result);
EndProcedure

Procedure Check_OzonSearch(Val Result) Export
	Проверка_ОзонПоиск(Result);
EndProcedure

Procedure Check_OzonClusters(Val Result) Export
	Проверка_ОзонКластеры(Result);
EndProcedure

Procedure Check_OzonReadyDraft(Val Result) Export
	Проверка_ОзонГотовыйЧерновик(Result);
EndProcedure

Procedure Check_OzonTimeslots(Val Result) Export
	Проверка_ОзонТаймслоты(Result);
EndProcedure

Procedure Check_NCSuccess(Val Result) Export
	Проверка_НСУспех(Result);
EndProcedure

Procedure Check_NCFolderFiles(Val Result, Val Count) Export
	Проверка_НСФайлыКаталога(Result, Count);
EndProcedure

Procedure Check_NCSync(Val Result) Export
	Проверка_НССинхронизация(Result);
EndProcedure

Procedure Check_CdekToken(Val Result) Export
	Проверка_СдэкТокен(Result);
EndProcedure

Procedure Check_CdekOrder(Val Result) Export
	Проверка_СдэкЗаказ(Result);
EndProcedure

Procedure Check_CdekReceipt(Val Result) Export
	Проверка_СдэкКвитанция(Result);
EndProcedure

Procedure Check_CdekOrderNumber(Val Result) Export
	Проверка_СдэкДанныеЗаказа(Result);
EndProcedure

Procedure Check_CdekkDeliveryIntervals(Val Result) Export
	Проверка_СдэкИнтервалыДоставки(Result);
EndProcedure

Procedure Check_CdekPassport(Val Result) Export
	Проверка_СдэкПаспорт(Result);
EndProcedure

Procedure Check_CdekCheck(Val Result) Export
	Проверка_СдэкЧек(Result);
EndProcedure

Procedure Check_YaMarketMarkets(Val Result) Export
	Проверка_ЯМаркетМагазины(Result);
EndProcedure

Procedure Check_YaMarketCampaign(Val Result) Export
	Проверка_ЯМаркетМагазин(Result);
EndProcedure

Procedure Check_YaMarketBusiness(Val Result) Export
	Проверка_ЯМаркетКабинет(Result);
EndProcedure

Procedure Check_YaMarketOk(Val Result) Export
	Проверка_ЯМаркетОк(Result);
EndProcedure

Procedure Check_MetrikaTags(Val Result) Export
	Проверка_МетрикаМетки(Result);
EndProcedure

Procedure Check_MetrikaTag(Val Result, Val Name = "") Export
	Проверка_МетрикаМетка(Result, Name);
EndProcedure

Procedure Check_MetrikaSuccess(Val Result) Export
	Проверка_МетрикаУспех(Result);
EndProcedure

Procedure Check_MetrikaCounter(Val Result) Export
	Проверка_МетрикаСчетчик(Result);
EndProcedure

Procedure Check_MetrikaCounters(Val Result) Export
	Проверка_МетрикаСчетчики(Result);
EndProcedure

Procedure Check_MetrikaActions(Val Result) Export
	Проверка_МетрикаОперации(Result);
EndProcedure

Procedure Check_S3Success(Val Result) Export
	Проверка_S3Успех(Result);
EndProcedure

Procedure Check_S3NotFound(Val Result) Export
	Проверка_S3НеНайдено(Result);
EndProcedure

Procedure Check_S3NotImplemented(Val Result) Export
	Проверка_S3НеПоддерживается(Result);
EndProcedure

Procedure Check_AddIn(Val Result, Val TypeName) Export
	Проверка_Компонента(Result, TypeName);
EndProcedure

Procedure Check_Equality(Val Value1, Val Value2) Export
	Проверка_Равенство(Value1, Value2);
EndProcedure

Procedure Check_Inequality(Val Value1, Val Value2) Export
	Проверка_Неравенство(Value1, Value2);
EndProcedure

Procedure Check_SQLiteSuccess(Val Result) Export
	Проверка_SQLiteУспех(Result);
EndProcedure

Procedure Check_SQLiteError(Val Result) Export
	Проверка_SQLiteОшибка(Result);
EndProcedure

Procedure Check_SQLiteRows(Val Result, Val Count) Export
	Проверка_SQLiteСтроки(Result, Count);
EndProcedure

Procedure Check_SQLiteFieldsValues(Val Result, Val ValueStructure) Export
	Проверка_SQLiteЗначенияПолей(Result, ValueStructure);
EndProcedure

Procedure Check_SQLiteNoRows(Val Result) Export
	Проверка_SQLiteНетЗаписей(Result);
EndProcedure

Procedure Check_ResultTrue(Val Result) Export
	Проверка_РезультатИстина(Result);
EndProcedure

Procedure Check_ResultFalse(Val Result) Export
	Проверка_РезультатЛожь(Result);
EndProcedure

Procedure Check_GreenInstance(Val Result) Export
	Проверка_ГринИнстанс(Result);
EndProcedure

Procedure Check_GreenSettingsSaving(Val Result) Export
	Проверка_ГринСохранениеНастроек(Result);
EndProcedure

Procedure Check_GreenAuth(Val Result) Export
	Проверка_ГринАвторизован(Result);
EndProcedure

Procedure Check_GreenReboot(Val Result) Export
	Проверка_ГринПерезапуск(Result);
EndProcedure

Procedure Check_GreenUnlogin(Val Result) Export
	Проверка_ГринРазлогин(Result);
EndProcedure

Procedure Check_GreenAva(Val Result) Export
	Проверка_ГринАватар(Result);
EndProcedure

Procedure Check_GreenGroupPicture(Val Result) Export
	Проверка_ГринКартинкаГруппы(Result);
EndProcedure

Procedure Check_GreenCode(Val Result) Export
	Проверка_ГринКод(Result);
EndProcedure

Procedure Check_GreenProfile(Val Result) Export
	Проверка_ГринПрофиль(Result);
EndProcedure

Procedure Check_GreenNewGroup(Val Result) Export
	Проверка_ГринНоваяГруппа(Result);
EndProcedure

Procedure Check_GreenLeaveGroup(Val Result) Export
	Проверка_ГринВыходГруппы(Result);
EndProcedure

Procedure Check_GreenGroup(Val Result) Export
	Проверка_ГринГруппа(Result);
EndProcedure

Procedure Check_GreenGroupName(Val Result) Export
	Проверка_ГринИмяГруппы(Result);
EndProcedure

Procedure Check_GreenAddMember(Val Result) Export
	Проверка_ГринДобавлениеПользователя(Result);
EndProcedure

Procedure Check_GreenExcludeMember(Val Result) Export
	Проверка_ГринИсключениеПользователя(Result);
EndProcedure

Procedure Check_GreenAdminSet(Val Result) Export
	Проверка_ГринНазначениеАдминистратора(Result);
EndProcedure

Procedure Check_GreenAdminRemove(Val Result) Export
	Проверка_ГринОтзывАдминистратора(Result);
EndProcedure

Procedure Check_GreenMessage(Val Result) Export
	Проверка_ГринСообщение(Result);
EndProcedure

Procedure Check_GreenMessages(Val Result) Export
	Проверка_ГринСообщения(Result);
EndProcedure

Procedure Check_GreenFile(Val Result) Export
	Проверка_ГринФайл(Result);
EndProcedure

Procedure Check_GreenNotification(Val Result) Export
	Проверка_ГринУведомление(Result);
EndProcedure

Procedure Check_GreenInputFile(Val Result) Export
	Проверка_ГринВходнойФайл(Result);
EndProcedure

Procedure Check_GreenReading(Val Result) Export
	Проверка_ГринПрочтение(Result);
EndProcedure

Procedure Check_GreenQueueClearing(Val Result) Export
	Проверка_ГринОчисткаОчереди(Result);
EndProcedure

Procedure Check_OllamaResponse(Val Result, Val Completed = True) Export
	Проверка_OllamaОтвет(Result, Completed);
EndProcedure

Procedure Check_OllamaEmbeddings(Val Result) Export
	Проверка_OllamaПривязки(Result);
EndProcedure

Procedure Check_OllamaLoadUnload(Val Result, Val Unload) Export
	Проверка_OllamaЗагрузкаВыгрузка(Result, Unload);
EndProcedure

Procedure Check_OllamaMessage(Val Result, Val Completed = True) Export
	Проверка_OllamaСообщение(Result, Completed);
EndProcedure

Procedure Check_OllamaSuccess(Val Result) Export
	Проверка_OllamaУспех(Result);
EndProcedure

Procedure Check_OllamaModels(Val Result) Export
	Проверка_OllamaМодели(Result);
EndProcedure

Procedure Check_OllamaModelInfo(Val Result) Export
	Проверка_OllamaИнформацияМодели(Result);
EndProcedure

Procedure Check_OllamaVersion(Val Result) Export
	Проверка_OllamaВерсия(Result);
EndProcedure

Procedure Check_OllamaCode(Val Result) Export
	Проверка_OllamaКод(Result);
EndProcedure

Procedure Check_OllamaError(Val Result) Export
	Проверка_OllamaОшибка(Result);
EndProcedure

Procedure Check_OpenAIResponse(Val Result) Export
	Проверка_OpenAIОтвет(Result);
EndProcedure

Procedure Check_OpenAIEmbeddings(Val Result) Export
	Проверка_OpenAIПредставления(Result);
EndProcedure

Procedure Check_OpenAIAssistant(Val Result, Val Name = "") Export
	Проверка_OpenAIАссистент(Result, Name);
EndProcedure

Procedure Check_OpenAIAssistantDeletion(Val Result, Val AssistantID) Export
	Проверка_OpenAIУдалениеАссистента(Result, AssistantID);
EndProcedure

Procedure Check_OpenAIList(Val Result) Export
	Проверка_OpenAIСписок(Result);
EndProcedure

Procedure Check_OpenAIFile(Val Result, Val FileName = Undefined, Val Size = Undefined, Val Destination = Undefined) Export
	Проверка_OpenAIФайл(Result, FileName, Size, Destination);
EndProcedure

Procedure Check_OpenAIFileDeletion(Val Result, Val FileID) Export
	Проверка_OpenAIУдалениеФайла(Result, FileID);
EndProcedure

Procedure Check_OpenAIImage(Val Result) Export
	Проверка_OpenAIКартинка(Result);
EndProcedure

#EndRegion