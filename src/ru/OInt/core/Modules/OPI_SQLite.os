// OneScript: ./OInt/core/Modules/OPI_SQLite.os
// Lib: SQLite
// CLI: ssh
// Keywords: ssh, shell
// Depends: OPI_SSH

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:NumberOfOptionalParams-off
// BSLLS:UsingServiceTag-off
// BSLLS:LineLength-off
// BSLLS:UsingSynchronousCalls-off

//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check wrong-string-literal-content
//@skip-check method-too-many-params
//@skip-check constructor-function-return-section

#Область ПрограммныйИнтерфейс

#Область ОсновныеМетоды

// Открыть соединение !NOCLI
// Создает новый сеанс SSH
//
// Примечание:
// Получить конфигурацию соединения можно при помощи функций `ПолучитьНастройкиЛогинПароль`,^^
// `ПолучитьНастройкиПриватныйКлюч`, `ПолучитьНастройкиЧерезАгента`
//
// Параметры:
//  НастройкиSSH - Структура Из КлючИЗначение -  Структура настроек соединения              - set
//  Прокси       - Структура Из КлючИЗначение -  Структура настроек прокси, если необходимо - proxy
//
// Возвращаемое значение:
//  Произвольный, Соответствие Из КлючИЗначение -  Открыть соединение
Функция ОткрытьСоединение(Знач НастройкиSSH, Знач Прокси = "") Экспорт

    Если ЭтоКоннектор(НастройкиSSH) Тогда
        Возврат НастройкиSSH;
    КонецЕсли;

    Коннектор = OPI_Компоненты.ПолучитьКомпоненту("SSH");

    УстановкаКонфигурации = УстановитьКонфигурацию(Коннектор, НастройкиSSH);

    Если Не OPI_Инструменты.ПолучитьИли(УстановкаКонфигурации, "result", Ложь) Тогда
        Возврат УстановкаКонфигурации;
    КонецЕсли;

    УстановкаПрокси = УстановитьПрокси(Коннектор, Прокси);

     Если Не OPI_Инструменты.ПолучитьИли(УстановкаПрокси, "result", Ложь) Тогда
        Возврат УстановкаПрокси;
    КонецЕсли;

    Результат = Коннектор.Connect();
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

// Получить конфигурацию соединения
// Формирует полную структуру настроек соединения, которая может быть использована вместо самого соединения при вызове других функций
//
// Примечание:
// Может быть передана в качестве параметра `Соединение` в других функциях вместо настоящего соединения из функции `ОткрытьСоединение`.^^
// При этом новое соединение будет открыто и закрыто в рамках вызываемой функции
// Не рекомендуется использовать конфигурацию соединения при множественных обращениях к серверу SSH.^^
// Данный функционал предназначен, в первую очередь для CLI версии ОПИ, где хранение соединения между вызовами невозможно
//
// Параметры:
//  НастройкиSSH - Структура Из КлючИЗначение - Настройки SSH                                                 - set
//  Прокси       - Структура Из КлючИЗначение - Настройки прокси, если необходимо. См ПолучитьНастройкиПрокси - proxy
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура настроек соединения
Функция ПолучитьКонфигурациюСоединения(Знач НастройкиSSH, Знач Прокси = Неопределено) Экспорт

    СтруктураКонфигурации = Новый Структура;

    OPI_Инструменты.ДобавитьПоле("set"  , НастройкиSSH, "Коллекция", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("proxy", Прокси      , "Коллекция", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

// Выполнить команду
// Выполняет указанную команду
//
// Параметры:
//  Соединение - Произвольный - Существующее соединение или конфигурация соединения - conn
//  Команда    - Строка       - Текст команды                                       - comm
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Результат обработки
Функция ВыполнитьКоманду(Знач Соединение, Знач Команда) Экспорт

    ЗакрыватьСоединение = ПроверитьСоздатьСоединение(Соединение);

    Если Не ЭтоКоннектор(Соединение) Тогда
        Возврат Соединение;
    Иначе

        OPI_ПреобразованиеТипов.ПолучитьСтроку(Команда);

        Результат = Соединение.Execute(Команда);
        Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    КонецЕсли;

    Если ЗакрыватьСоединение Тогда
        Результат.Вставить("close_connection", ЗакрытьСоединение(Соединение));
    КонецЕсли;

    Возврат Результат;

КонецФункции

// Закрыть соединение !NOCLI
// Явно закрывает переданное соединение
//
// Параметры:
//  Соединение - Произвольный - Объект компоненты с открытым соединением - conn
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Результат закрытия соединения
Функция ЗакрытьСоединение(Знач Соединение) Экспорт

    ПроверитьСоздатьСоединение(Соединение);

    Если Не ЭтоКоннектор(Соединение) Тогда
        Возврат Соединение;
    КонецЕсли;

    Результат = Соединение.Disconnect();
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    //@skip-check constructor-function-return-section
    Возврат Результат;

КонецФункции

// Это коннектор !NOCLI
// Проверяет, что значение является объектом внешней компоненты для работы с SSH
//
// Параметры:
//  Значение - Произвольный - Значение для проверки - value
//
// Возвращаемое значение:
//  Булево -  Это коннектор
Функция ЭтоКоннектор(Знач Значение) Экспорт

    Возврат Строка(ТипЗнч(Значение)) = "AddIn.OPI_SSH.Main";

КонецФункции

// Получить настройки (логин/пароль)
// Получает настройки соединения с авторизацией через логин и пароль
//
// Параметры:
//  Хост   - Строка - Хост SSH                - host
//  Порт   - Число  - Порт SSH                - port
//  Логин  - Строка - Имя пользователя SSH    - user
//  Пароль - Строка - Пароль пользователя SSH - pass
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение -  Конфигурация соединения
Функция ПолучитьНастройкиЛогинПароль(Знач Хост, Знач Порт, Знач Логин, Знач Пароль = "") Экспорт

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("host"    , Хост  , "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"    , Порт  , "Число" , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username", Логин , "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("password", Пароль, "Строка", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

// Получить настройки (приватный ключ)
// Получает настройки соединения с авторизацией через приватный ключ
//
// Параметры:
//  Хост       - Строка - Хост SSH                             - host
//  Порт       - Число  - Порт SSH                             - port
//  Логин      - Строка - Имя пользователя SSH                 - user
//  ПутьККлючу - Строка - Путь к файлу приватного ключа        - key
//  Пароль     - Строка - Пароль (passphrase) приватного ключа - pass
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение -  Конфигурация соединения
Функция ПолучитьНастройкиПриватныйКлюч(Знач Хост, Знач Порт, Знач Логин, Знач ПутьККлючу, Знач Пароль = "") Экспорт

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("host"      , Хост      , "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"      , Порт      , "Число" , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username"  , Логин     , "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("key_path"  , ПутьККлючу, "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("passphrase", Пароль    , "Строка", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

// Получить настройки (через агента)
// Получает настройки соединения с авторизацией через SSH Agent
//
// Параметры:
//  Хост       - Строка - Хост SSH                             - host
//  Порт       - Число  - Порт SSH                             - port
//  Логин      - Строка - Имя пользователя SSH                 - user
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение -  Конфигурация соединения
Функция ПолучитьНастройкиЧерезАгента(Знач Хост, Знач Порт, Знач Логин) Экспорт

    СтруктураКонфигурации = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("host"      , Хост      , "Строка", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("port"      , Порт      , "Число" , СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("username"  , Логин     , "Строка", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьСоздатьСоединение(Соединение)

    Если Не ЭтоКоннектор(Соединение) Тогда

        ЗакрыватьСоединение = Истина;
        Соединение          = ОткрытьСоединение(Соединение);

    КонецЕсли;

    Возврат ЗакрыватьСоединение;

КонецФункции

Функция УстановитьКонфигурацию(Знач Коннектор, Знач НастройкиSSH)

    ШаблонОшибки = "Передана некорректная конфигурация соединения: %1";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(НастройкиSSH);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
        Возврат Результат;

    КонецПопытки;

    СтрокаНастроек = OPI_Инструменты.JSONСтрокой(НастройкиSSH);

    Результат = Коннектор.SetSettings(СтрокаНастроек);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

Функция УстановитьПрокси(Знач Коннектор, Знач Прокси)

    Если Не ЗначениеЗаполнено(Прокси) Тогда
        Возврат Новый Структура("result", Истина);
    КонецЕсли;

    ШаблонОшибки = "Передана некорректная конфигурация прокси: %1";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Прокси);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , СтрШаблон(ШаблонОшибки, ОписаниеОшибки()));
        Возврат Результат;

    КонецПопытки;

    СтрокаПрокси = OPI_Инструменты.JSONСтрокой(Прокси);

    Результат = Коннектор.SetProxy(СтрокаПрокси);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

#КонецОбласти

#Region Alternate

Function CreateConnection(Val SSHSettings, Val Proxy = "") Export
	Return ОткрытьСоединение(SSHSettings, Proxy);
EndFunction

Function GetConnectionConfiguration(Val SSHSettings, Val Proxy = Undefined) Export
	Return ПолучитьКонфигурациюСоединения(SSHSettings, Proxy);
EndFunction

Function ExecuteCommand(Val Connection, Val Command) Export
	Return ВыполнитьКоманду(Connection, Command);
EndFunction

Function CloseConnection(Val Connection) Export
	Return ЗакрытьСоединение(Connection);
EndFunction

Function IsConnector(Val Value) Export
	Return ЭтоКоннектор(Value);
EndFunction

Function GetSettingsLoginPassword(Val Host, Val Port, Val Login, Val Password = "") Export
	Return ПолучитьНастройкиЛогинПароль(Host, Port, Login, Password);
EndFunction

Function GetSettingsPrivateKey(Val Host, Val Port, Val Login, Val KeyPath, Val Password = "") Export
	Return ПолучитьНастройкиПриватныйКлюч(Host, Port, Login, KeyPath, Password);
EndFunction

Function GetSettingsViaAgent(Val Host, Val Port, Val Login) Export
	Return ПолучитьНастройкиЧерезАгента(Host, Port, Login);
EndFunction

#EndRegion