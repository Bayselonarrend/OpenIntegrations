// OneScript: ./OInt/core/Modules/OPI_FTP.os
// Lib: FTP
// CLI: ftp
// Keywords: ftp, ftps

// MIT License

// Copyright (c) 2023-2025 Anton Tsitavets

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// https://github.com/Bayselonarrend/OpenIntegrations

// BSLLS:Typo-off
// BSLLS:LatinAndCyrillicSymbolInWord-off
// BSLLS:IncorrectLineBreak-off
// BSLLS:NumberOfOptionalParams-off
// BSLLS:UsingServiceTag-off
// BSLLS:LineLength-off
// BSLLS:UsingSynchronousCalls-off
// BSLLS:MagicNumber-off

//@skip-check module-structure-top-region
//@skip-check module-structure-method-in-regions
//@skip-check wrong-string-literal-content
//@skip-check method-too-many-params

#Область ПрограммныйИнтерфейс

#Область ОсновныеМетоды

// Открыть соединение !NOCLI
// Открывает FTP соединение с указанными настройками
//
// Параметры:
//  НастройкиFTP - Структура Из КлючИЗначение - Настройки FTP. См. ПолучитьНастройкиСоединения                - set
//  Прокси       - Структура Из КлючИЗначение - Настройки прокси, если необходимо. См ПолучитьНастройкиПрокси - proxy
//  Tls          - Структура Из КлючИЗначение - Настройки TLS, если необходимо. См. ПолучитьНастройкиTls      - tls
//
// Возвращаемое значение:
//  Произвольный - Объект коннектора или соответствие с информацией об ошибке
Функция ОткрытьСоединение(Знач НастройкиFTP, Знач Прокси = Неопределено, Знач Tls = Неопределено) Экспорт

    Если ЭтоКоннектор(НастройкиFTP) Тогда
        Возврат НастройкиFTP;
    КонецЕсли;

    Коннектор = OPI_Компоненты.ПолучитьКомпоненту("FTP");

    УстановкаНастроек = УстановитьНастройкиFtp(Коннектор, НастройкиFTP);

    Если Не OPI_Инструменты.ПолучитьИли(УстановкаНастроек, "result", Ложь) Тогда
        Возврат УстановкаНастроек;
    КонецЕсли;

    Tls = OPI_Компоненты.УстановитьTls(Коннектор, Tls);

    Если Не OPI_Инструменты.ПолучитьИли(Tls, "result", Ложь) Тогда
        Возврат Tls;
    КонецЕсли;

    УстановитьПрокси = УстановитьНастройкиПрокси(Коннектор, Прокси);

    Если Не OPI_Инструменты.ПолучитьИли(УстановитьПрокси, "result", Ложь) Тогда
        Возврат УстановитьПрокси;
    КонецЕсли;

    Результат = Коннектор.Connect();
    Результат = OPI_Инструменты.JSONВСтруктуру(Результат);

    Возврат ?(Результат["result"], Коннектор, Результат);

КонецФункции

// Получить конфигурацию соединения
// Формирует полную структуру настроек соединения, которая может быть использована вместо самого соединения при вызове других функций
//
// Примечание:
// Может быть передана в качестве параметра `Соединение` в других функциях вместо настоящего соединения из функции `ОткрытьСоединение`.^^
// При этом новое соединение будет открыто и закрыто в рамках вызываемой функции
// Не рекомендуется использовать конфигурацию соединения при множественных обращениях к серверу FTP.^^
// Данный фунционал предназначен, в первую очередь для CLI версии ОПИ, где хранение соединения между вызовами невозможно
//
// Параметры:
//  НастройкиFTP - Структура Из КлючИЗначение - Настройки FTP. См. ПолучитьНастройкиСоединения                - set
//  Прокси       - Структура Из КлючИЗначение - Настройки прокси, если необходимо. См ПолучитьНастройкиПрокси - proxy
//  Tls          - Структура Из КлючИЗначение - Настройки TLS, если необходимо. См. ПолучитьНастройкиTls      - tls
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура настроек соединения
Функция ПолучитьКонфигурациюСоединиения(Знач НастройкиFTP, Знач Прокси = Неопределено, Знач Tls = Неопределено) Экспорт

    СтруктураКонфигурации = Новый Структура;

    OPI_Инструменты.ДобавитьПоле("set"  , НастройкиFTP, "Коллекция", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("proxy", Прокси      , "Коллекция", СтруктураКонфигурации);
    OPI_Инструменты.ДобавитьПоле("tls"  , Tls         , "Коллекция", СтруктураКонфигурации);

    Возврат СтруктураКонфигурации;

КонецФункции

// Закрыть соединение !NOCLI
// Явно закрывает переданное соединение
//
// Параметры:
//  Соединение - Произвольный - Объект компоненты с открытым соединением - conn
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Результат закрытия соединения
Функция ЗакрытьСоединение(Знач Соединение) Экспорт

    ПроверитьСоздатьСоединение(Соединение);
    Результат = Соединение.Close();
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

// Получить приветственное сообщение
// Получает приветственное сообщение сервера FTP
//
// Параметры:
//  Соединение - Произвольный - Существующее соединение или конфигурация соединения - conn
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Результат обработки
Функция ПолучитьПриветственноеСообщение(Знач Соединение) Экспорт

    ЗакрыватьСоединение = ПроверитьСоздатьСоединение(Соединение);

    Если Не ЭтоКоннектор(Соединение) Тогда
        Результат = Соединение;
    Иначе
        Результат = Соединение.GetWelcomeMsg();
        Результат = OPI_Инструменты.JsonВСтруктуру(Результат);
    КонецЕсли;

    Если ЗакрыватьСоединение Тогда
        Результат.Вставить("close_connection", ЗакрытьСоединение(Соединение));
    КонецЕсли;

    Возврат Результат;

КонецФункции

// Это коннектор !NOCLI
// Проверяет, что значение является объектом внешней компоненты для работы с FTP
//
// Параметры:
//  Значение - Произвольный - Значение для проверки - value
//
// Возвращаемое значение:
//  Булево -  Это коннектор
Функция ЭтоКоннектор(Знач Значение) Экспорт

    Возврат Строка(ТипЗнч(Значение)) = "AddIn.OPI_FTP.Main";

КонецФункции

// Получить настройки соединения
// Формирует структуру настроек подключения FTP
//
// Параметры:
//  Домен         - Строка               - Домен сервера                                        - host
//  Порт          - Число                - Порт сервера                                         - port
//  Логин         - Строка, Неопределено - Имя пользователя авторизации, если необходимо        - login
//  Пароль        - Строка, Неопределено - Пароль пользователя для авторизации, если необходимо - pass
//  Пассивный     - Булево               - Пассивный режим соединения                           - passive
//  ТаймаутЧтения - Число                - Таймаут чтения                                       - rtout
//  ТаймаутЗаписи - Число                - Таймаут записи                                       - wtout
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура настроек соединения
Функция ПолучитьНастройкиСоединения(Знач Домен
    , Знач Порт = 21
    , Знач Логин = Неопределено
    , Знач Пароль = Неопределено
    , Знач Пассивный = Истина
    , Знач ТаймаутЧтения = 120
    , Знач ТаймаутЗаписи = 120) Экспорт

    СтруктураНастроек = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("domain"       , Домен         , "Строка", СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("port"         , Порт          , "Число" , СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("passive"      , Пассивный     , "Булево", СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("read_timeout" , ТаймаутЧтения , "Число" , СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("write_timeout", ТаймаутЗаписи , "Число" , СтруктураНастроек);

    Если Не Логин = Неопределено Тогда
        OPI_ПреобразованиеТипов.ПолучитьСтроку(Логин);
        СтруктураНастроек.Вставить("login", Логин);
    КонецЕсли;

    Если Не Пароль = Неопределено Тогда
        OPI_ПреобразованиеТипов.ПолучитьСтроку(Пароль);
        СтруктураНастроек.Вставить("password", Пароль);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураНастроек;

КонецФункции

// Получить настройки прокси
// Формирует структуру настроек прокси-сервера для соединения
//
// Параметры:
//  Адрес  - Строка               - Адрес прокси                            - addr
//  Порт   - Число                - Порт прокси                             - port
//  Вид    - Строка               - Вид прокси: socks5, socks4, http        - type
//  Логин  - Строка, Неопределено - Логин авторизации, если необходимо      - login
//  Пароль - Строка, Неопределено - Пароль для авторизации, если необходимо - pass
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура настроек прокси
Функция ПолучитьНастройкиПрокси(Знач Адрес
    , Знач Порт
    , Знач Вид = "socks5"
    , Знач Логин = Неопределено
    , Знач Пароль = Неопределено) Экспорт

    СтруктураНастроек = Новый Структура;
    OPI_Инструменты.ДобавитьПоле("server"    , Адрес, "Строка", СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("port"      , Порт , "Число" , СтруктураНастроек);
    OPI_Инструменты.ДобавитьПоле("proxy_type", Вид  , "Строка", СтруктураНастроек);

    Если Не Логин = Неопределено Тогда
        OPI_ПреобразованиеТипов.ПолучитьСтроку(Логин);
        СтруктураНастроек.Вставить("login", Логин);
    КонецЕсли;

    Если Не Пароль = Неопределено Тогда
        OPI_ПреобразованиеТипов.ПолучитьСтроку(Пароль);
        СтруктураНастроек.Вставить("password", Пароль);
    КонецЕсли;

    //@skip-check constructor-function-return-section
    Возврат СтруктураНастроек;

КонецФункции

// Получить настройки TLS
// Формирует настройки для использования TLS при выполнении запросов
//
// Примечание:
// Настройки Tls могут быть установлены только в момент создания соединения: явного, при использовании функции `ОткрытьСоединение`^^
// или неявного, при передаче настроек
//
// Параметры:
//  ОтключитьПроверкуСертификатов - Булево - Позволяет работать с некорретными сертификатами, в т.ч. самоподписанными   - trust
//  ПутьКСертификату              - Строка - Путь к корневому PEM файлу сертификата, если его нет в системном хранилище - cert
//
// Возвращаемое значение:
//  Структура Из КлючИЗначение - Структура настроек TLS соединения
Функция ПолучитьНастройкиTls(Знач ОтключитьПроверкуСертификатов, Знач ПутьКСертификату = "") Экспорт

    Возврат OPI_Компоненты.ПолучитьНастройкиTls(ОтключитьПроверкуСертификатов, ПутьКСертификату);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УстановитьНастройкиFtp(Знач Коннектор, Знач НастройкиFTP)

    ТекстОшибки = "Настройки FTP не являются валидной структурой ключ-значение";
    Настройки   = НастройкиВJson(НастройкиFTP, ТекстОшибки);

    Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
        Возврат Настройки;
    КонецЕсли;

    Результат = Коннектор.UpdateSettings(Настройки);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

Функция УстановитьНастройкиПрокси(Знач Коннектор, Знач НастройкиПрокси)

    Если НастройкиПрокси = Неопределено Тогда
        Результат = Новый Соответствие;
        Результат.Вставить("result", Истина);
        Возврат Результат;
    КонецЕсли;

    ТекстОшибки = "Настройки прокси не являются валидной структурой ключ-значение";
    Настройки   = НастройкиВJson(НастройкиПрокси, ТекстОшибки);

    Если ТипЗнч(Настройки) = Тип("Соответствие") Тогда
        Возврат Настройки;
    КонецЕсли;

    Результат = Коннектор.UpdateProxy(Настройки);
    Результат = OPI_Инструменты.JsonВСтруктуру(Результат);

    Возврат Результат;

КонецФункции

Функция НастройкиВJson(Знач Коллекция, Знач ТекстОшибки)

    OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(Коллекция);

    Попытка
        Результат = OPI_Инструменты.JSONСтрокой(Коллекция);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , "Настройки FTP должны содержать только сериализуемые значения");

    КонецПопытки;

    Возврат Результат;

КонецФункции

Функция ОткрытьСоединениеПоКонфигурации(Знач СтруктураКонфигурации)

    Если ЭтоКоннектор(СтруктураКонфигурации) Тогда
        Возврат СтруктураКонфигурации;
    КонецЕсли;

    ТекстОшибки = "Передана некорректная конфигурация соединения";

    Попытка
        OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(СтруктураКонфигурации);
    Исключение

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , ТекстОшибки);
        Возврат Результат;

    КонецПопытки;

    Если Не OPI_Инструменты.ПолеКоллекцииСуществует(СтруктураКонфигурации, "set") Тогда

        Результат = Новый Соответствие;
        Результат.Вставить("result", Ложь);
        Результат.Вставить("error" , ТекстОшибки);
        Возврат Результат;

    КонецЕсли;

    НастройкиFTP = СтруктураКонфигурации["set"];
    Прокси       = OPI_Инструменты.ПолучитьИли(СтруктураКонфигурации, "proxy", Неопределено);
    Tls          = OPI_Инструменты.ПолучитьИли(СтруктураКонфигурации, "tls", Неопределено);

    Возврат ОткрытьСоединение(НастройкиFTP, Прокси, Tls);

КонецФункции

Функция ПроверитьСоздатьСоединение(Соединение)

    Если ЭтоКоннектор(Соединение) Тогда
        ЗакрыватьСоединение = Ложь;
    Иначе
        ЗакрыватьСоединение = Истина;
        Соединение          = ОткрытьСоединениеПоКонфигурации(Соединение);
    КонецЕсли;

    Возврат ЗакрыватьСоединение;

КонецФункции

#КонецОбласти

#Region Alternate

Function CreateConnection(Val FTPSettings, Val Proxy = Undefined, Val Tls = Undefined) Export
	Return ОткрытьСоединение(FTPSettings, Proxy, Tls);
EndFunction

Function GetConnectionConfiguration(Val FTPSettings, Val Proxy = Undefined, Val Tls = Undefined) Export
	Return ПолучитьКонфигурациюСоединиения(FTPSettings, Proxy, Tls);
EndFunction

Function CloseConnection(Val Connection) Export
	Return ЗакрытьСоединение(Connection);
EndFunction

Function GetWelcomeMessage(Val Connection) Export
	Return ПолучитьПриветственноеСообщение(Connection);
EndFunction

Function IsConnector(Val Value) Export
	Return ЭтоКоннектор(Value);
EndFunction

Function GetConnectionSettings(Val Domain, Val Port = 21, Val Login = Undefined, Val Password = Undefined, Val Passive = True, Val ReadTimeout = 120, Val WriteTimeout = 120) Export
	Return ПолучитьНастройкиСоединения(Domain, Port, Login, Password, Passive, ReadTimeout, WriteTimeout);
EndFunction

Function GetProxySettings(Val Address, Val Port, Val View = "socks5", Val Login = Undefined, Val Password = Undefined) Export
	Return ПолучитьНастройкиПрокси(Address, Port, View, Login, Password);
EndFunction

Function GetTlsSettings(Val DisableCertVerification, Val CertFilepath = "") Export
	Return ПолучитьНастройкиTls(DisableCertVerification, CertFilepath);
EndFunction

#EndRegion