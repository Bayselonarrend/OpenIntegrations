#Использовать "./internal"

Перем СоответствиеКомандМодулей;
Перем Версия;
Перем КэшированиеСоставов;


Процедура ПриСозданииОбъекта()

    Версия = "1.23.0";
    КэшированиеСоставов       = Новый Соответствие();
    СоответствиеКомандМодулей = Новый Соответствие();
    СоответствиеКомандМодулей.Вставить("tools", "Утилиты");
    СоответствиеКомандМодулей.Вставить("airtable", "OPI_Airtable");
    СоответствиеКомандМодулей.Вставить("bitrix24", "OPI_Bitrix24");
    СоответствиеКомандМодулей.Вставить("cdek", "OPI_CDEK");
    СоответствиеКомандМодулей.Вставить("dropbox", "OPI_Dropbox");
    СоответствиеКомандМодулей.Вставить("gcalendar", "OPI_GoogleCalendar");
    СоответствиеКомандМодулей.Вставить("gdrive", "OPI_GoogleDrive");
    СоответствиеКомандМодулей.Вставить("gsheets", "OPI_GoogleSheets");
    СоответствиеКомандМодулей.Вставить("google", "OPI_GoogleWorkspace");
    СоответствиеКомандМодулей.Вставить("greenapi", "OPI_GreenAPI");
    СоответствиеКомандМодулей.Вставить("mysql", "OPI_MySQL");
    СоответствиеКомандМодулей.Вставить("neocities", "OPI_Neocities");
    СоответствиеКомандМодулей.Вставить("notion", "OPI_Notion");
    СоответствиеКомандМодулей.Вставить("ollama", "OPI_Ollama");
    СоответствиеКомандМодулей.Вставить("ozon", "OPI_Ozon");
    СоответствиеКомандМодулей.Вставить("postgres", "OPI_PostgreSQL");
    СоответствиеКомандМодулей.Вставить("rcon", "OPI_RCON");
    СоответствиеКомандМодулей.Вставить("s3", "OPI_S3");
    СоответствиеКомандМодулей.Вставить("slack", "OPI_Slack");
    СоответствиеКомандМодулей.Вставить("sqlite", "OPI_SQLite");
    СоответствиеКомандМодулей.Вставить("tcp", "OPI_TCP");
    СоответствиеКомандМодулей.Вставить("telegram", "OPI_Telegram");
    СоответствиеКомандМодулей.Вставить("twitter", "OPI_Twitter");
    СоответствиеКомандМодулей.Вставить("viber", "OPI_Viber");
    СоответствиеКомандМодулей.Вставить("vk", "OPI_VK");
    СоответствиеКомандМодулей.Вставить("vkteams", "OPI_VKTeams");
    СоответствиеКомандМодулей.Вставить("yadisk", "OPI_YandexDisk");
    СоответствиеКомандМодулей.Вставить("yandex", "OPI_YandexID");
    СоответствиеКомандМодулей.Вставить("yamarket", "OPI_YandexMarket");
    СоответствиеКомандМодулей.Вставить("metrika", "OPI_YandexMetrika");

КонецПроцедуры

Функция ПолучитьВерсию() Экспорт
  Возврат Версия;
КонецФункции

Функция ПолучитьСоответствиеКомандМодулей() Экспорт
    Возврат СоответствиеКомандМодулей;
КонецФункции


Функция ПолучитьСостав(Знач Команда) Экспорт

    ТекущийСостав = КэшированиеСоставов.Получить(Команда);

    Если ТекущийСостав = Неопределено Тогда
        ОбъектСостава = Новый(Команда);
        ТекущийСостав = ОбъектСостава.ПолучитьСостав();
        КэшированиеСоставов.Вставить(Команда, ТекущийСостав);
    КонецЕсли;

    Возврат ТекущийСостав;

КонецФункции

Функция ПолучитьПолныйСостав() Экспорт

    ОбщаяТаблица = Неопределено;

    Для Каждого Команда Из СоответствиеКомандМодулей Цикл

        ТекущаяТаблица = ПолучитьСостав(Команда.Ключ);
        
        Если ОбщаяТаблица = Неопределено Тогда
            ОбщаяТаблица = ТекущаяТаблица;
        Иначе
            Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
                ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
            КонецЦикла;
        КонецЕсли;

    КонецЦикла;

    Возврат ОбщаяТаблица;

КонецФункции

Функция СформироватьСтрокуВызоваМетода(Знач ПереданныеПараметры, Знач Команда, Знач Метод) Экспорт

    Модуль = ПолучитьСоответствиеКомандМодулей().Получить(Команда);
    
    Если Не ЗначениеЗаполнено(Модуль) Тогда
        Возврат Новый Структура("Ошибка,Результат", Истина, "Команда");
    КонецЕсли;
    
    ОтборКоманды      = Новый Структура("МетодПоиска", вРег(Метод));
    ПараметрыМетода   = ПолучитьСостав(Команда).НайтиСтроки(ОтборКоманды);
    
    Если Не ЗначениеЗаполнено(ПараметрыМетода) Тогда
        Возврат Новый Структура("Ошибка,Результат", Истина, "Метод");
    КонецЕсли;

    ТекстВыполнения = "";
    СтрокаВызова    = Модуль + "." + Метод + "(";
    Счетчик         = 0;

    Для Каждого НеобходимыйПараметр Из ПараметрыМетода Цикл

        ИмяПараметра      = НеобходимыйПараметр.Параметр;
        ЗначениеПараметра = ПереданныеПараметры.Получить(ИмяПараметра);

        Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда

            ИмяПараметра = "Параметр" + СтрЗаменить(ИмяПараметра, "--", "_");

            ТекстВыполнения = ТекстВыполнения 
                + Символы.ПС 
                + ИмяПараметра
                + " = """ 
                + СтрЗаменить(ЗначениеПараметра, """", """""")
                + """;";

            Если ТребуетсяОбработкаУправляющихПоследовательностей(ИмяПараметра, ЗначениеПараметра) Тогда

                ТекстВыполнения = ТекстВыполнения + "
                |OPI_Инструменты.ЗаменитьУправляющиеПоследовательности(" + ИмяПараметра + ");
                |";

            КонецЕсли;

            СтрокаВызова = СтрокаВызова + ИмяПараметра + ", ";
            Счетчик      = Счетчик + 1;

        Иначе
            СтрокаВызова = СтрокаВызова + " , ";
        КонецЕсли;

    КонецЦикла;

    ЛишниеСимволы   = 2;
    СтрокаВызова    = Лев(СтрокаВызова, СтрДлина(СтрокаВызова) - ЛишниеСимволы);
    СтрокаВызова    = СтрокаВызова + ");";
    СтрокаВызова    = "Ответ = " + СтрокаВызова;
    ТекстВыполнения = ТекстВыполнения + Символы.ПС + СтрокаВызова;

    СтруктураВозврата = Новый Структура("Ошибка,Результат", Ложь, ТекстВыполнения);

    Возврат СтруктураВозврата;

КонецФункции

Функция ТребуетсяОбработкаУправляющихПоследовательностей(Знач ИмяПараметра, Знач ЗначениеПараметра)

    ФайлПараметра         = Новый Файл(ЗначениеПараметра);
    ЗначениеПараметраСокр = СокрЛП(ЗначениеПараметра);

    Возврат Не СтрНачинаетсяС(ЗначениеПараметраСокр, "{")
                И Не СтрНачинаетсяС(ЗначениеПараметраСокр, "[") 
                И Не ФайлПараметра.Существует() 
                И Не ИмяПараметра = "Параметр_out";

КонецФункции
