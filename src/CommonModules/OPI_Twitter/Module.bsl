//MIT License

//Copyright (c) 2023 Anton Tsitavets

//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

//https://github.com/Bayselonarrend/OpenIntegrations
//Если в не знаете с чего начать, то стоит найти метод ПолучитьСтандартныеПараметры()
//и почитать комментарии

#Область ПрограммныйИнтерфейс

#Область ДанныеИНастройка

// Получить ссылку для авторизации через браузер.
// 
// Параметры:
//  Параметры - Соответствие Из Строка -  См.ПолучитьСтандартныеПараметры
// 
// Возвращаемое значение:
//  Строка -  URL для перехода в браузере
Функция ПолучитьСсылкуАвторизации(Параметры = "") Экспорт
	
	Параметры_ = ПолучитьСтандартныеПараметры(Параметры);
	
	ПараметрыURL = Новый Структура;
		
	ПараметрыURL.Вставить("response_type"        , "code");
	ПараметрыURL.Вставить("client_id"            , Параметры_["client_id"]);
	ПараметрыURL.Вставить("redirect_uri"         , Параметры_["redirect_uri"]);
	ПараметрыURL.Вставить("scope"                , Параметры_["scope"]);
	ПараметрыURL.Вставить("state"                , "state");
	ПараметрыURL.Вставить("code_challenge"       , "challenge");
	ПараметрыURL.Вставить("code_challenge_method", "plain");
		
	Линк = "https://twitter.com/i/oauth2/authorize"
		+ OPI_Инструменты.ПараметрыЗапросаВСтроку(ПараметрыURL);
		
	Возврат Линк;
	
КонецФункции

// Получить токен.
// 
// Параметры:
//  Код - Строка - Код, полученный из авторизации См.ПолучитьСсылкуАвторизации
//  Параметры - Соответствие Из Строка -  См.ПолучитьСтандартныеПараметры
// 
// Возвращаемое значение:
//  HTTPОтвет, Произвольный, ДвоичныеДанные -  Результат чтения JSON ответа сервера
Функция ПолучитьТокен(Знач Код, Знач Параметры = "") Экспорт
	
	Параметры_ = ПолучитьСтандартныеПараметры(Параметры);

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("code"         , Код);
	ПараметрыЗапроса.Вставить("grant_type"   , "authorization_code");
	ПараметрыЗапроса.Вставить("client_id"    , Параметры_["client_id"]);
	ПараметрыЗапроса.Вставить("redirect_uri" , Параметры_["redirect_uri"]);
	ПараметрыЗапроса.Вставить("code_verifier", "challenge");
	
	Ответ = OPI_Инструменты.Post("https://api.twitter.com/2/oauth2/token"
		, ПараметрыЗапроса, , Ложь);
		
	Возврат Ответ;
	
КонецФункции

// Обновить токен v2 токен при помощи refresh_token
// 
// Параметры:
//  Параметры - Соответствие Из Строка -  См.ПолучитьСтандартныеПараметры
// 
// Возвращаемое значение:
//  HTTPОтвет, Произвольный, ДвоичныеДанные -  Результат чтения JSON ответа сервера
Функция ОбновитьТокен(Знач Параметры = "") Экспорт
	
	Параметры_ = ПолучитьСтандартныеПараметры(Параметры);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("refresh_token", Параметры_["refresh_token"]);
	ПараметрыЗапроса.Вставить("grant_type"   , "refresh_token");
	ПараметрыЗапроса.Вставить("client_id"    , Параметры_["client_id"]);
	
	Ответ = OPI_Инструменты.Post("https://api.twitter.com/2/oauth2/token"
	, ПараметрыЗапроса, , Ложь);
	
	Возврат Ответ;

КонецФункции

// Метод для вставки в http-сервис, адрес которого указывается в redirect_uri
// Вызывает метод получения токена, так как для получения токена из кода, приходящего
// на redirect_uri после авторизации через браузер есть всего 30 секунд
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос - Запрос, приходящий на http-сервис
// 
// Возвращаемое значение:
//  HTTPОтвет, Произвольный, ДвоичныеДанные - Результат чтения JSON ответа сервера
Функция ОбработкаВходящегоЗапросаПослеАвторизации(Запрос) Экспорт
	
	Код 		= Запрос.ПараметрыЗапроса["code"];	
	ОтветТокен  = ПолучитьТокен(Код);
	
	//Предпочтительное хранение токенов
	//Константы.TwitterRefresh.Установить(ОтветТокен["refresh_token"]);
	//Константы.TwitterToken.Установить(ОтветТокен["access_token"]);
	
	Возврат ОтветТокен;

КонецФункции

#КонецОбласти

#Область Твиты

// Создать твит.
// 
// Параметры:
//  Текст - Строка - Текст твита
//  Параметры - Соответствие Из Строка -  См.ПолучитьСтандартныеПараметры
// 
// Возвращаемое значение:
//  HTTPОтвет, Произвольный, ДвоичныеДанные -  Результат чтения JSON ответа сервера
Функция СоздатьТвит(Знач Текст, Знач Параметры) Экспорт
	
	Параметры_  = ПолучитьСтандартныеПараметры(Параметры);
	Авторизация = СоздатьЗаголовокАвторизацииV2(Параметры_);
	URL         = "https://api.twitter.com/2/tweets";
	
	Поля = Новый Соответствие;
	Поля.Вставить("text", Текст);
		
	Ответ = OPI_Инструменты.Post(URL, Поля, Авторизация);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтандартныеПараметры(Знач Параметры = "")
	
	//Здесь собрано определение данных, необходимых для работы.
	//Для Twitter это довольно значительный набор, что обсуловлено наличием сразу 2-х API,
	//которые, при этом, созданы не для разныз задач, но просто являются версиями друг друга.
	//Актуальной версией API является v2 и она требует получения временных токенов. Несмотря на то,
	//что Twitter настаивает на использовании этой актуальной версии, они как-то умудрились не перенести
	//механизм загрузки файлов и некоторые другие из старой версии - v1.1. По-этому что-то нужно делать 
	//на версии 1.1, а что-то на 2: вплоть до того что они убрали возможность постить твиты из v1.1,
	//но только через нее в твит можно добавить картинку. При этом способы авторизации и токены у них разные
	
	//Мировая гигокорпорация Илона Маска, кстати, напоминаю ;)
	
	//P.S Далее часто упоминается "страница настроек Twitter Developer" - это 
	//https://developer.twitter.com/en/portal/dashboard и выбор конкретного проекта из списка (значек c ключем)
	
    Параметры_ = Новый Соответствие;
	
	Разрешения = "tweet.read tweet.write tweet.moderate.write users.read "
		+ "follows.read follows.write offline.access space.read mute.read "
		+ "mute.write like.read like.write list.read list.write block.read "
		+ "block.write bookmark.read bookmark.write";	
		
		
	//Данные для API v2
		
	//redirect_uri     - URL вашего http-сервиса (или другого обработчика запросов) для авторизации
	//scope            - набор разрешений для получаемого ключа. Может быть любой, но offline.access обязателен
	//client_id        - Из OAuth 2.0 Client ID and Client Secret страницы настроек Twitter Developer
	//client_secret    - Из OAuth 2.0 Client ID and Client Secret страницы настроек Twitter Developer
	//access_token     - ПолучитьСсылкуАвторизации() -> Браузер -> http-запрос с code придет на адрес redirect_uri -> ПолучитьТокен(code)
	//refresh_token    - Приходит вместе с access_token и используется для его обновления (время жизни access_token - 2 часа).
	//                   Обновление происходит методом ОбновитьТокен с новыми access_token и refresh_token. При следующем обновлении 
	//				     нужно использовать уже новый refresh_token, так что захардкодить не получится (access_token тоже не получится) 
	
	//           |--> ОбновитьТокен() ->|access_token  --> Используется в т-нии 2-х часов для запросов
	//           |                      |refresh_token --|
	//           |--------[через 2 ч.]-------------------|
	
	
	//Данные для API v1.1
	
	//oauth_token           - из Authentication Tokens -> Access Token and Secret страницы настроек Twitter Developer 
	//oauth_token_secret    - из Authentication Tokens -> Access Token and Secret страницы настроек Twitter Developer
	//oauth_consumer_key    - из Consumer Keys -> Access Token and Secret страницы настроек Twitter Developer
	//oauth_consumer_secret - из Consumer Keys -> Access Token and Secret страницы настроек Twitter Developer
	
	//Эти токены обновлять не надо
	
    Параметры_.Вставить("redirect_uri"         , "");
    Параметры_.Вставить("scope"      	       , Разрешения);
	Параметры_.Вставить("client_id"    	       , "");
	Параметры_.Вставить("client_secret"        , "");
	Параметры_.Вставить("access_token"         , ""); //Должно быть нечто вроде Константы.TwitterToken.Получить()
	Параметры_.Вставить("refresh_token"        , ""); //Должно быть нечто вроде Константы.TwitterRefresh.Получить()
	Параметры_.Вставить("oauth_token"          , "");
	Параметры_.Вставить("oauth_token_secret"   , "");
	Параметры_.Вставить("oauth_consumer_key"   , "");
	Параметры_.Вставить("oauth_consumer_secret", "");
	
    Если ТипЗнч(Параметры) = Тип("Структура") Или ТипЗнч(Параметры) = Тип("Соответствие") Тогда
        Для Каждого ПереданныйПараметр Из Параметры Цикл
            Параметры_.Вставить(ПереданныйПараметр.Ключ, OPI_Инструменты.ЧислоВСтроку(ПереданныйПараметр.Значение));
        КонецЦикла;
    КонецЕсли;

    Возврат Параметры_;

КонецФункции

Функция СоздатьЗаголовокАвторизацииV1(Знач Параметры, Знач Поля, Знач ВидЗапроса, Знач URL)
	
	ЗаголовокАвторизации = "";
	МетодХэширования     = "HMAC-SHA1";
	ВерсияАпи            = "1.0";
	СтрокаСигнатуры      = "";
	Подпись              = "";
	ТекущаяДатаUNIX      = OPI_Инструменты.UNIXTime(ТекущаяДатаСеанса());
	ТекущаяДатаUNIX      = OPI_Инструменты.ЧислоВСтроку(ТекущаяДатаUNIX);
	ТаблицаПараметров    = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	
	
	Для Каждого Поле Из Поля Цикл 
		
		НоваяСтрока = ТаблицаПараметров.Добавить();	
		НоваяСтрока.Ключ     = Поле.Ключ;
		НоваяСтрока.Значение = Поле.Значение;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_consumer_key";
	НоваяСтрока.Значение = Параметры["oauth_consumer_key"];
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_token";
	НоваяСтрока.Значение = Параметры["oauth_token"];
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_version";
	НоваяСтрока.Значение = ВерсияАпи;
	
	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_signature_method";
	НоваяСтрока.Значение = МетодХэширования;

	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_timestamp";
	НоваяСтрока.Значение = ТекущаяДатаUNIX;

	НоваяСтрока = ТаблицаПараметров.Добавить();
	НоваяСтрока.Ключ     = "oauth_nonce";
	НоваяСтрока.Значение = ТекущаяДатаUNIX;

	Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
		
		СтрокаТаблицы.Ключ     = КодироватьСтроку(СтрокаТаблицы.Ключ, СпособКодированияСтроки.КодировкаURL);
		СтрокаТаблицы.Значение = КодироватьСтроку(СтрокаТаблицы.Значение, СпособКодированияСтроки.КодировкаURL);
		
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Ключ");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПараметров Цикл
		
		СтрокаСигнатуры = СтрокаСигнатуры 
			+ СтрокаТаблицы.Ключ 
			+ "="
			+ СтрокаТаблицы.Значение
			+ "&";
			
	КонецЦикла;
	
	СтрокаСигнатуры = Лев(СтрокаСигнатуры, СтрДлина(СтрокаСигнатуры) - 1);
	СтрокаСигнатуры = вРег(ВидЗапроса) 
		+ "&" 
		+ КодироватьСтроку(URL, СпособКодированияСтроки.КодировкаURL)
		+ "&"
		+ КодироватьСтроку(СтрокаСигнатуры, СпособКодированияСтроки.КодировкаURL);
		
	Подпись = КодироватьСтроку(Параметры["oauth_consumer_secret"], СпособКодированияСтроки.КодировкаURL)
		+ "&" 
		+ КодироватьСтроку(Параметры["oauth_token_secret"], СпособКодированияСтроки.КодировкаURL);
		
		
	Сигнатура = OPI_Криптография.HMAC(ПолучитьДвоичныеДанныеИзСтроки(Подпись)
		, ПолучитьДвоичныеДанныеИзСтроки(СтрокаСигнатуры)
		, ХешФункция.SHA1
		, 64);
		
	Сигнатура = КодироватьСтроку(Base64Строка(Сигнатура), СпособКодированияСтроки.КодировкаURL);
	
	ЗаголовокАвторизации = ЗаголовокАвторизации 
		+ "OAuth "
		+ "oauth_consumer_key="""      + Параметры["oauth_consumer_key"] + ""","
		+ "oauth_token="""             + Параметры["oauth_token"]        + ""","
		+ "oauth_signature_method="""  + МетодХэширования                + ""","
		+ "oauth_timestamp="""         + ТекущаяДатаUNIX                 + ""","
		+ "oauth_nonce="""             + ТекущаяДатаUNIX                 + ""","
		+ "oauth_version="""           + ВерсияАпи                       + ""","
		+ "oauth_signature="""         + Сигнатура;
		
		СоответствиеЗаголовка = Новый Соответствие;
		СоответствиеЗаголовка.Вставить("authorization", ЗаголовокАвторизации);
		
	Возврат СоответствиеЗаголовка;
		
КонецФункции

Функция СоздатьЗаголовокАвторизацииV2(Знач Параметры)
	
	СоответствиеВозврата = Новый Соответствие;
	СоответствиеВозврата.Вставить("Authorization", "Bearer " + Параметры["access_token"]);
	
	Возврат СоответствиеВозврата;
	
КонецФункции

#КонецОбласти