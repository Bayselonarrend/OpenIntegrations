name: Update APT Repo

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup GPG
        env:
          GPG_PASSPHRASE: ${{ secrets.ENC_JSON }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é GPG
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
      
          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPG –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
          cat <<EOF > ~/.gnupg/gpg.conf
          batch
          no-tty
          use-agent
          pinentry-mode loopback
          EOF
      
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          echo "$GPG_PASSPHRASE" > ~/gpg-passphrase.txt
          chmod 600 ~/gpg-passphrase.txt
      
          # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
          echo "$GPG_PRIVATE_KEY" | gpg --batch --pinentry-mode loopback --passphrase-file ~/gpg-passphrase.txt --import
      
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
          gpg --list-secret-keys
      
          # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
          rm ~/gpg-passphrase.txt

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y reprepro nginx gnupg

      - name: Find and download correct .deb file
        run: |
          REPO_NAME="${{ github.repository }}"
          
          # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
          LATEST_RELEASE_JSON=$(mktemp)
          curl -s -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/$REPO_NAME/releases/latest" > "$LATEST_RELEASE_JSON"
      
          RELEASE_ID=$(jq -r '.id' "$LATEST_RELEASE_JSON")
          if [[ "$RELEASE_ID" == "null" ]]; then
            echo "‚ùå Failed to get release ID"
            exit 1
          fi
      
          # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Å—Å–µ—Ç–æ–≤
          ASSET_JSON=$(mktemp)
          curl -s -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/$REPO_NAME/releases/$RELEASE_ID/assets" > "$ASSET_JSON"
      
          # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ –º–∞—Å–∫—É 'oint_*_all_ru.deb'
          FILENAME=$(jq -r '.[] | select(.name | startswith("oint_") and endswith("_all_ru.deb")) | .name' "$ASSET_JSON" | head -n 1)
      
          if [[ -z "$FILENAME" || "$FILENAME" == "null" ]]; then
            echo "‚ùå No matching file found (mask: oint_*_all_ru.deb)"
            echo "üìé Available assets:"
            jq -r '.[].name' "$ASSET_JSON"
            exit 1
          fi
      
          echo "üìé Selected file: $FILENAME"
      
          # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
          ASSET_URL=$(jq -r ".[] | select(.name == \"$FILENAME\") | .url" "$ASSET_JSON")
      
          # –°–∫–∞—á–∏–≤–∞–µ–º .deb
          echo "üì• Downloading: $FILENAME"
          curl -L -o "oint.deb" \
               -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
               -H "Accept: application/octet-stream" \
               "$ASSET_URL"
      
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π .deb
          echo "üîç Verifying file type..."
          file "oint.deb"
          ar tvf "oint.deb" || echo "‚ö†Ô∏è This may not be a valid .deb file!"

      - name: Setup repo structure
        run: |
          mkdir -p oint/{conf,dists,pool/main}
          cat <<EOT > oint/conf/distributions
          Origin: bayselonarrend
          Label: oint
          Suite: stable
          Codename: focal
          Architectures: amd64
          Components: main
          Description: OpenIntegrations CLI repo
          SignWith: ${{ secrets.GPG_KEY_ID }}
          EOT

      - name: Add package to repo
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd oint
      
          # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ –∫ –∫–ª—é—á—É
          echo "EB79CD3197AD41BF:6:" | gpg --import-ownertrust
      
          # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–æ–º
          GPG="gpg --verbose --pinentry-mode loopback --passphrase=$GPG_PASSPHRASE" \
            reprepro includedeb focal ../oint.deb

      - name: Deploy to GitHub Pages
        run: |
          cd oint
          git init
          git config user.name "Vitaly the Alpaca (bot) "
          git config user.email "vitaly.the.alpaca@gmail.com"
          git add .
          git commit -m "Update APT repo"
          git branch -M gh-pages
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git push -f origin gh-pages

      - name: Cleanup
        run: |
          rm -rf oint
