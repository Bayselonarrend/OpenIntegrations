def runCommand(String command) {
    if (isUnix()) {
        sh(script: command)
    } else {
        bat(script: command)
    }
}

pipeline {
	agent {
		label 'windows'
	}
	stages {

		stage('Remove OInt from OneScript Lib') {
			steps {
				script {
					try {
						// Удаление каталога C:\Program Files\OneScript\lib\oint, если существует
						powershell encoding: 'UTF-8', script: '''
							$dirPath = "C:\\Program Files\\OneScript\\lib\\oint"
							if (Test-Path $dirPath) {
								Write-Host "Каталог oint найден. Удаляем..."
								Remove-Item -Path $dirPath -Recurse -Force
								Write-Host "Каталог oint успешно удален."
							} else {
								Write-Host "Каталог oint не найден. Пропускаем удаление."
							}
						'''

						// Проверяем, что каталог действительно удален
						powershell encoding: 'UTF-8', script: '''
							$dirPath = "C:\\Program Files\\OneScript\\lib\\oint"
							if (Test-Path $dirPath) {
								Write-Error "Ошибка: Каталог oint всё ещё существует после попытки удаления!"
								exit 1
							} else {
								Write-Host "Проверка: Каталог oint отсутствует после удаления."
							}
						'''
					} catch (Exception e) {
						echo "Произошла ошибка при удалении каталога oint: ${e.getMessage()}"
						currentBuild.result = 'FAILURE'
						error("Удаление каталога oint завершено с ошибкой.")
					}
				}
			}
		}
      	stage('Build OInt from source and decrypt secret data'){
         		steps{
            		powershell encoding: 'UTF-8', script:'cd ./src/ru/OInt; opm build; opm install oint-1.27.0.ospx; del oint-1.27.0.ospx'
            		withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
              			bat encoding: 'UTF-8', script:'gpg --quiet --batch --yes --decrypt --passphrase="%GPGKEY%" --output ./data.json ./data.json.gpg'
            		}
         		}
      	}
		stage('Create ReportPortal launch'){
				steps{
					bat encoding: 'UTF-8', script:'chcp 65001 & oscript ./ci/os/rp_start.os'
				}
		}

		stage('Testing-S3') {
			steps {			
			catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {   
				runCommand('1testrunner -run "./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os" "AWS_ОбщиеМетоды"')
			}
			catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {   
				runCommand('1testrunner -run "./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os" "AWS_РаботаСБакетами"')
			}
			catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {   
				runCommand('1testrunner -run "./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os" "AWS_РаботаСОбъектами"')
			}
			}
		}

	}
	post{
		always{
			script {
				catchError() {   
				    runCommand('oscript ./ci/os/rp_stop.os "ru"')
			    }
				withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
					bat encoding: 'UTF-8', script:'del "./data.json.gpg"'
					bat encoding: 'UTF-8', script:'gpg --batch --symmetric --cipher-algo AES256 --passphrase="%GPGKEY%" ./data.json'
					bat encoding: 'UTF-8', script:'del "./data.json"'
				}
				withCredentials([gitUsernamePassword(credentialsId: 'gitmain', gitToolName: 'Default')]) {
					bat "git config user.email vitaly.the.alpaca@gmail.com"
					bat 'git config user.name "Vitaly the Alpaca (bot)"'
					bat "git config --global core.ignorecase true"
					bat "git add ."
					bat 'git commit -m "Test data update (Jenkins)"'
					bat "git push origin HEAD:main"
				}	
			}
		}
	}
}