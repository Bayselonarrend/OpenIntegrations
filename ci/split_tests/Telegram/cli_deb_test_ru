def runCommand(String command) {
    if (isUnix()) {
        sh(script: command)
    } else {
        bat(script: command)
    }
}

pipeline {
    agent {
        label 'Deb-Agent'  // Имя или метка агента
    }

	stages {

        stage('Read stages config') {
            steps {
                script {
                    def configText = readFile './service/tests_config.json'
                    env.STAGES_CONFIG = configText
                }
            }
        }

        stage('Remove oint') {
            steps {
                script {
                    // Удаляем oint, если он установлен
                    sh 'dpkg -r oint || echo "oint not installed"'
                }
            }
        }

        stage('Download oint package') {
            steps {
                script {
                    // Скачиваем новый deb-пакет oint
                    sh 'wget -O oint_1.28.0_all_ru.deb https://jenkins.openintegrations.dev/job/OpiBuild/job/OpiRelease/lastSuccessfulBuild/artifact/1.28.0/oint_1.28.0_all_ru.deb '
                }
            }
        }

        stage('Install oint package') {
            steps {
                script {
                    sh 'dpkg -i oint_1.28.0_all_ru.deb'
                }
            }
        }

      	stage('Prepare'){
         		steps{
                    sh 'cd ./src/ru/OInt && opm build && opm install oint-1.28.0.ospx && rm oint-1.28.0.ospx'
            		withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
              			sh 'gpg --quiet --batch --yes --decrypt --passphrase="$GPGKEY" --output ./data.json ./data.json.gpg'
            		}
         		}
      	}
        stage('Create ReportPortal launch'){
				steps{
					sh 'oscript ./ci/os/rp_start.os "CLI"'
				}
		}

		stage('Testing-BuildCheck') {
            when {
                expression { return shouldRunStage('BuildCheck') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'ПроверитьСоответствиеИБПоследнейСборке'],
					]
					for (test in tests) {
							runLibraryTest(test[0], test[1])
					}
				}
			}
		}
		stage('Testing-Telegram') {
            when {
                expression { return shouldRunStage('Telegram') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ПолучитьИнформациюБота'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ПолучитьОбновления'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_УстановитьWebhook'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьТекстовоеСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьКартинку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьВидео'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьАудио'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьДокумент'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьГифку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьМедиагруппу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьМестоположение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьКонтакт'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ОтправитьОпрос'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ПереслатьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_БанРазбан'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_СоздатьСсылкуПриглашение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ЗакрепитьОткрепитьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ПолучитьЧислоУчастников'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ПолучитьСписокАватаровФорума'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_СоздатьУдалитьТемуФорума'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_ИзменитьИмяГлавнойТемы'],
						['./src/ru/OInt/tests/Modules/internal/OPI_ТестыCLI.os', 'Телеграм_СкрытьПоказатьГлавнуюТему'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}

	}
	post{
		always{
			script {
                catchError() {   
				    runCommand('oscript ./ci/os/rp_stop.os "ru"')
			    }
				withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
					sh 'rm "./data.json.gpg"'
					sh 'gpg --batch --symmetric --cipher-algo AES256 --passphrase="$GPGKEY" ./data.json'
					sh 'rm "./data.json"'
				}
				withCredentials([gitUsernamePassword(credentialsId: 'gitmain', gitToolName: 'Default')]) {
					sh "git config user.email vitaly.the.alpaca@gmail.com"
					sh 'git config user.name "Vitaly the Alpaca (bot)"'
					sh "git config --global core.ignorecase true"
					sh "git add ."
					sh 'git commit -m "Test data update (Jenkins)"'
					sh "git push origin HEAD:main"
				}
			}
		}
	}
}

def shouldRunStage(stageName) {
    try {
        if (!env.STAGES_CONFIG) {
            echo "[WARN] STAGES_CONFIG not set. Assuming stage '${stageName}' is ENABLED."
            return true
        }
        def config = readJSON text: env.STAGES_CONFIG
        def value = config[stageName]
        if (value == null) {
            echo "[WARN] Stage '${stageName}' not found in config. Defaulting to DISABLED."
            return false
        }
        return value == true
    } catch (Exception e) {
        echo "[ERROR] Failed to parse STAGES_CONFIG: ${e.message}"
        echo "Raw config: ${env.STAGES_CONFIG}"
        // Решите: включать stage по умолчанию или нет?
        return false // или true — по вашему усмотрению
    }
}

def runLibraryTest(String configPath, String libraryName) {
    try {
        echo "Executing: 1testrunner -run \"${configPath}\" \"${libraryName}\""
        runCommand("1testrunner -run \"${configPath}\" \"${libraryName}\"")
        echo "Test ${libraryName} completed successfully"
    } catch (Exception e) {
        echo "ERROR in test ${libraryName}: ${e.getMessage()}"
        throw e 
    }
}