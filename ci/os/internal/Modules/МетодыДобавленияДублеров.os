
#Использовать osparser

Процедура ДобавитьДублеры(Языки, ПутьПакета, СоответствиеНесовпадающихИмен) Экспорт
		
	ФайлыOint = НайтиФайлы(ПутьПакета, "*.os", Истина);

	ФайлыOint.Добавить(Новый Файл("./src/ru/cli/data/Classes/LibraryComposition.os"));
	ФайлыOint.Добавить(Новый Файл("./src/ru/cli/env/Classes/CommandLineArgumentParser.os"));
	ФайлыOint.Добавить(Новый Файл("./src/ru/cli/env/Modules/ColorOutput.os"));
	
	СоответствиеФайловДублеров = Новый Соответствие();
	
	Для Каждого Файл Из ФайлыOint Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийПуть  = СтрЗаменить(Файл.ПолноеИмя, "\", "/");
		ТекущийМассив = Новый Массив;
		
		Для Каждого Язык Из Языки Цикл
			
			Если Язык = "ru" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийПутьЯзыка = ТекущийПуть;
			ТекущийПутьЯзыка = СтрЗаменить(ТекущийПутьЯзыка, "/ru/", СтрШаблон("/%1/", Язык));
			
			Для Каждого Замена Из СоответствиеНесовпадающихИмен Цикл
				ТекущийПутьЯзыка = СтрЗаменить(ТекущийПутьЯзыка, Замена.Ключ, Замена.Значение);
			КонецЦикла;
			
			ФайлЯзыка = Новый Файл(ТекущийПутьЯзыка);
			
			Если ФайлЯзыка.Существует() Тогда
				ТекущийМассив.Добавить(ТекущийПутьЯзыка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТекущийМассив.Количество() = 0 Тогда
			СоответствиеФайловДублеров.Вставить(ТекущийПуть, ТекущийМассив);
		КонецЕсли
		
	КонецЦикла;
	
	Для Каждого ФайлыДублеров Из СоответствиеФайловДублеров Цикл
		
		МассивФайловДублеров = ФайлыДублеров.Значение;
		МассивФайловДублеров.Добавить(ФайлыДублеров.Ключ);
		СоздатьДублеры(МассивФайловДублеров);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДублеры(ФайлыДублеров)
		
	СоответствиеФайловМетодов     = Новый Соответствие();
	СоответствиеИменМетодов       = Новый Соответствие();
	СоответствиеМетодовОригиналов = Новый Соответствие();

	Для Каждого ФайлДублера Из ФайлыДублеров Цикл

		Парсер          = Новый ПарсерВстроенногоЯзыка;
		ДанныеМодуля    = Новый ДвоичныеДанные(ФайлДублера);
		ТекстМодуля     = ПолучитьСтрокуИзДвоичныхДанных(ДанныеМодуля);

		Существующие = СтрНайти(ТекстМодуля, "#Region Alternate");
		Если Существующие <> 0 Тогда
			ТекстМодуля = СокрЛП(Лев(ТекстМодуля, Существующие - 1));
		КонецЕсли;

		СтруктураМодуля = Парсер.Разобрать(ТекстМодуля);

		МассивМетодов    = Новый Массив;
		МассивИмен       = Новый Массив;
		МассивОригиналов = Новый Массив;
		
		Для Каждого Объявление Из СтруктураМодуля.Объявления Цикл
			
			Если Строка(Объявление.Тип) = "ОбъявлениеМетода" Тогда

				Если Не Объявление.Сигнатура.Экспорт Тогда
					Продолжить;
				КонецЕсли;

				ТипМетода    = ?(Строка(Объявление.Сигнатура.Тип) = "ОбъявлениеСигнатурыФункции", "Function", "Procedure");
				ТекстВозврат = ?(Строка(Объявление.Сигнатура.Тип) = "ОбъявлениеСигнатурыФункции", "Return ", "");
				ИмяМетода    = Объявление.Сигнатура.Имя;

				МассивПараметров       = Новый Массив;
				МассивПараметровВызова = Новый Массив;
				ШаблонаПараметров      = "%1%2%3";

				Для Каждого Параметр Из Объявление.Сигнатура.Параметры Цикл

					ПоЗначению   = ?(Параметр.ПоЗначению, "Val ", "");
					Имя          = Параметр.Имя;

					МассивПараметровВызова.Добавить(Имя);

					Если Не Параметр.Значение = Неопределено Тогда

						Если Строка(Параметр.Значение.Тип) = "ВыражениеСтроковое" Тогда
							ЗначениеПоУмолчанию = Строка(Параметр.Значение.Элементы[0].Значение);
							ВидЗначения         = Строка(Параметр.Значение.Элементы[0].Вид);
						Иначе
							ЗначениеПоУмолчанию = Строка(Параметр.Значение.Значение);
							ВидЗначения         = Строка(Параметр.Значение.Вид);
						КонецЕсли;

						Если ВидЗначения = "Строка" Тогда
							ЗначениеПоУмолчанию = СтрШаблон("""%1""", ЗначениеПоУмолчанию);
						ИначеЕсли ВидЗначения = "Ложь" Тогда
							ЗначениеПоУмолчанию = "False";
						ИначеЕсли ВидЗначения = "Истина" Тогда
							ЗначениеПоУмолчанию = "True"
						ИначеЕсли Не ВидЗначения = "Число" Тогда
							ЗначениеПоУмолчанию = ?(ЗначениеЗаполнено(ЗначениеПоУмолчанию), ЗначениеПоУмолчанию, "Undefined");
						КонецЕсли;

						ЗначениеПоУмолчанию = СтрШаблон(" = %1", ЗначениеПоУмолчанию);

					Иначе
						ЗначениеПоУмолчанию = "";
					КонецЕсли;

					МассивПараметров.Добавить(СтрШаблон(ШаблонаПараметров,  ПоЗначению, Имя, ЗначениеПоУмолчанию));

				КонецЦикла;

				СтрокаПараметров = СтрСоединить(МассивПараметров, ", ");
				СтрокаПараметровВызова = СтрСоединить(МассивПараметровВызова, ", ");

				ШаблонМетода = "%1 %2(%3) Export
				|	%5%%1(%4);
				|End%1";

				МассивОригиналов.Добавить(ИмяМетода);
				МассивМетодов.Добавить(СтрШаблон(ШаблонМетода, ТипМетода, ИмяМетода, СтрокаПараметров, СтрокаПараметровВызова, ТекстВозврат));
				МассивИмен.Добавить(ИмяМетода);

			КонецЕсли;

		КонецЦикла;

		СоответствиеИменМетодов.Вставить(ФайлДублера, МассивИмен);
		СоответствиеФайловМетодов.Вставить(ФайлДублера, МассивМетодов);
		СоответствиеМетодовОригиналов.Вставить(ФайлДублера, МассивОригиналов);

	КонецЦикла;

	Для Каждого Оригиналы Из СоответствиеМетодовОригиналов Цикл

		МассивДополнения   = Новый Массив;
		ТекущйиМодуль      = Оригиналы.Ключ;
		ОригинальныеМетоды = Оригиналы.Значение;

		Для Каждого ДругойМодуль Из СоответствиеФайловМетодов Цикл

			Если ДругойМодуль.Ключ = ТекущйиМодуль Тогда
				Продолжить;
			КонецЕсли;

			ИменаДублеров = СоответствиеИменМетодов.Получить(ДругойМодуль.Ключ);
			МетодыДублеры = ДругойМодуль.Значение;

			Для Н = 0 По ОригинальныеМетоды.Количество() - 1 Цикл

				ОригинальныйМетод = ОригинальныеМетоды[Н];
				Дублер            = МетодыДублеры[Н];
				ИмяДублера        = ИменаДублеров[Н];

				Если ОригинальныйМетод = ИмяДублера Тогда
					Продолжить;
				КонецЕсли;

				МассивДополнения.Добавить(СтрШаблон(Дублер, ОригинальныйМетод));

			КонецЦикла;
			
		КонецЦикла;

		ШаблонДополнения = "
		|#Region Alternate
		|
		|%1
		|
		|#EndRegion";

		Дополнение = СтрШаблон(ШаблонДополнения, СтрСоединить(МассивДополнения, Символы.ПС + Символы.ПС));

		ТекстОригинала = Новый ДвоичныеДанные(ТекущйиМодуль);
		ТекстОригинала = ПолучитьСтрокуИзДвоичныхДанных(ТекстОригинала);

		Существующие = СтрНайти(ТекстОригинала, "#Region Alternate");
		Если Существующие <> 0 Тогда
			ТекстОригинала = СокрЛП(Лев(ТекстОригинала, Существующие - 1));
		КонецЕсли;

		ТекстОригинала = ТекстОригинала + Дополнение;
		ПолучитьДвоичныеДанныеИзСтроки(ТекстОригинала).Записать(ТекущйиМодуль);

	КонецЦикла;

КонецПроцедуры