
#Использовать osparser
#Использовать "./internal"

Процедура СформироватьИндексТестов(Знач Корень, Знач Языки) Экспорт

	Для Каждого Язык Из Языки Цикл
		СформироватьИндексТестовЯзыка(Корень, Язык);
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьИндексТестовЯзыка(Знач Корень, Знач Язык)

	Парсер          = Новый ПарсерВстроенногоЯзыка;
	ФайлТестов      = ?(Язык = "ru", "OPI_Тесты.os", "OPI_Tests.os");
	ДанныеМодуля    = Новый ДвоичныеДанные(Корень + Язык + "/OInt/tests/Modules/internal/" + ФайлТестов);
	ОбластьТестов   = ?(Язык = "ru", "АтомарныеТесты", "AtomicTests");
	ТекстМодуля     = ПолучитьСтрокуИзДвоичныхДанных(ДанныеМодуля);

	СтруктураМодуля = Парсер.Разобрать(ТекстМодуля);
	НачалоАтомарных = Ложь;

	СписокВсехТестов = Новый Массив;
	СписокПроверки   = Новый СписокЗначений();

	Для Каждого Объявление Из СтруктураМодуля.Объявления Цикл

		Если Не НачалоАтомарных Тогда

			Если Строка(Объявление.Тип) = "ИнструкцияПрепроцессораОбласть" И Объявление.Имя = ОбластьТестов Тогда
				НачалоАтомарных = Истина;
			КонецЕсли;

		Иначе

			Если Строка(Объявление.Тип) = "ОбъявлениеМетода" Тогда

				Для Каждого Оператор Из Объявление.Операторы Цикл
					Если Строка(Оператор.Тип) = "ОператорВызоваПроцедуры" Тогда

						ИмяПроцедуры = Оператор.Идентификатор.Голова.Имя;

						Если ИмяПроцедуры = ?(Язык = "ru", "Обработать", "Process") Тогда

							Аргументы = Оператор.Идентификатор.Аргументы;

							Библиотека = Аргументы[1]["Элементы"][0]["Значение"];
							Метод      = Аргументы[2]["Элементы"][0]["Значение"];

							Если Аргументы.Количество() > 3 Тогда
								Попытка
	
									Вариант = Аргументы[3]["Элементы"][0]["Значение"];
								Исключение

									Вариант = "";
								КонецПопытки;
							Иначе
								Вариант = "";
							КонецЕсли;

							Если ЗначениеЗаполнено(Вариант) Тогда
								Идентификатор = СтрШаблон("%1_%2_%3", Библиотека, Метод, Вариант);
							Иначе
								Идентификатор = СтрШаблон("%1_%2", Библиотека, Метод);
							КонецЕсли;

							Если СписокПроверки.НайтиПоЗначению(Идентификатор) = Неопределено Тогда

								СтруктураИмени = Новый Структура("lib,name,variant", Библиотека, Метод, Вариант);
								СписокВсехТестов.Добавить(СтруктураИмени);

								СписокПроверки.Добавить(Идентификатор);

							КонецЕсли;

						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Инструменты.ЗаписатьФайлJSON(СтрШаблон("./service/tests_%1.json", Язык), СписокВсехТестов);

КонецПроцедуры

//Языки = Новый Массив;
//Языки.Добавить("en");

//СформироватьИндексТестов("./src/", Языки);
