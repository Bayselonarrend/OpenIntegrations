#Использовать osparser

Перем ФайлСоставаОПИ;
Перем КаталогСписковСотава;
Перем МодульСоставаОПИ;
Перем СоответствиеМодулейКоманд;
Перем ТекущийМодуль;
Перем ТаблицаОписанийПараметров;
Перем ОбщийМассивМодулей;
Перем ТекущийФайлСостава;
Перем КаталогДополненийОпций;
Перем СоответствиеСлужебныхКлючей;

Процедура СформироватьCLI(Знач Корень, Знач Языки, Знач КаталогДополнений) Экспорт
    
    ЗаполнитьСоответствиеСлужебныхКлючей();
    
    Для Каждого Язык Из Языки Цикл
        
        Если Не Язык = "ru" Тогда
            СоздатьОснову(Язык, Корень);
        КонецЕсли;
        
        МодульСоставаОПИ       = Новый ТекстовыйДокумент();
        ФайлСоставаОПИ         = Корень + Язык + "/cli/data/Classes/LibraryComposition.os";
        КаталогСписковСотава   = Корень + Язык + "/cli/data/Classes/internal/Classes/";
        КаталогДополненийОпций = КаталогДополнений;
        
        ЗаписатьНачалоФайла(Язык);
        ЗаписатьФункциюОпределенияВерсии();
        ЗаписатьФункциюОпределенияКоманд();
        ЗаписатьВспомогательныеФункции(Язык);
        МодульСоставаОПИ.Записать(ФайлСоставаОПИ);
        
        ЗаполнитьТаблицыСостава();
        ВыолнитьДополнительныйПеревод(Язык);
        
    КонецЦикла;
    
КонецПроцедуры

Процедура СоздатьОснову(ТекущийЯзык, Корень)
    
    ПутьCLI  = Корень + ТекущийЯзык + "/cli";
    ПапкаCLI = Новый Файл(ПутьCLI);
    
    Если ПапкаCLI.Существует() Тогда
        УдалитьФайлы(ПапкаCLI.ПолноеИмя);
    КонецЕсли;
    
    ПутьОригинала  = "./src/ru/cli";
    ПапкаОригинала = Новый Файл(ПутьОригинала);
    СкопироватьФайлы(ПапкаОригинала.ПолноеИмя, ПапкаCLI.ПолноеИмя);
    
КонецПроцедуры

Процедура ЗаписатьНачалоФайла(ТекущийЯзык)
    
    Версия = ПолучитьВерсиюПакета();
    
    МодульСоставаОПИ.ДобавитьСтроку("#Использовать ""./internal""");
    МодульСоставаОПИ.ДобавитьСтроку("");
    МодульСоставаОПИ.ДобавитьСтроку("Перем СоответствиеКомандМодулей;");
    МодульСоставаОПИ.ДобавитьСтроку("Перем Версия;");
    МодульСоставаОПИ.ДобавитьСтроку("Перем КэшированиеИндексов;");
    МодульСоставаОПИ.ДобавитьСтроку("Перем ШаблонДоступа;");
    МодульСоставаОПИ.ДобавитьСтроку("Перем КаталогПакетов;");
    МодульСоставаОПИ.ДобавитьСтроку("");
    
    МодульСоставаОПИ.ДобавитьСтроку("
    |Процедура ПриСозданииОбъекта()
    |
    |    Версия = """ + Версия + """;
    |    ИнициализироватьОсновныеСписки();
    |
    |    ТекущийКаталог = ТекущийСценарий().Каталог;
    |    ШаблонДоступа  = ОбъединитьПути(ТекущийКаталог, ""internal"", ""Classes"", ""%1.os"");
    |
    |    КаталогПакетов = СтрЗаменить(ПолучитьЗначениеСистемнойНастройки(""lib.system""), ""\"", ""/"");
    |
    |КонецПроцедуры
    |
    |Процедура ИнициализироватьОсновныеСписки() Экспорт
    |
    |    КэшированиеИндексов       = Новый Соответствие();
    |    СоответствиеКомандМодулей = Новый Соответствие();
    |");
    
    ОпределитьСоответствиеМодулейКоманд(ТекущийЯзык);
    
    Для Каждого КомандаМодуля Из СоответствиеМодулейКоманд Цикл
        МодульСоставаОПИ.ДобавитьСтроку("    СоответствиеКомандМодулей.Вставить("""
        + КомандаМодуля.Значение
        + """, """
        + КомандаМодуля.Ключ
        + """);");
    КонецЦикла;
    
    МодульСоставаОПИ.ДобавитьСтроку("
    |КонецПроцедуры
    |
    |");
    
КонецПроцедуры

Процедура ЗаписатьФункциюОпределенияВерсии()
    
    МодульСоставаОПИ.ДобавитьСтроку("Функция ПолучитьВерсию() Экспорт");
    МодульСоставаОПИ.ДобавитьСтроку("  Возврат Версия;");
    МодульСоставаОПИ.ДобавитьСтроку("КонецФункции");
    МодульСоставаОПИ.ДобавитьСтроку("");
    
КонецПроцедуры

Процедура ЗаписатьФункциюОпределенияКоманд()
    
    МодульСоставаОПИ.ДобавитьСтроку("Функция ПолучитьСоответствиеКомандМодулей() Экспорт
    |    Возврат СоответствиеКомандМодулей;
    |КонецФункции
    |");
    
КонецПроцедуры

Процедура ЗаписатьВспомогательныеФункции(Язык)
        
    МодульСоставаОПИ.ДобавитьСтроку("
    |
    |Функция ПолучитьИнформациюИндекса(Знач Команда) Экспорт
    |
    |    ИнформацияИндекса = КэшированиеИндексов.Получить(Команда);
    |
    |    Если ИнформацияИндекса = Неопределено Тогда
    |
    |        Попытка
    |            ОбъектСостава = ЗагрузитьСценарий(СтрШаблон(ШаблонДоступа, Команда));
    |
    |            Состав            = ОбъектСостава.ПолучитьСостав();
    |            СтрокаПодключения = ОбъектСостава.ПолучитьСтрокуПодключения();
    |
    |            ИнформацияИндекса = Новый Структура;
    |            ИнформацияИндекса.Вставить(""Состав""           , Состав);
    |            ИнформацияИндекса.Вставить(""СтрокаПодключения"", СтрокаПодключения);
    |
    |            КэшированиеИндексов.Вставить(Команда, ИнформацияИндекса);
    |
    |        Исключение
    |            ВызватьИсключение СтрШаблон(""Некорректное имя команды: %1"", Команда)
    |        КонецПопытки;
    |
    |    КонецЕсли;
    |
    |    Возврат ИнформацияИндекса;
    |
    |КонецФункции
    |
    |Функция ПолучитьПолныйСостав() Экспорт
    |
    |    ОбщаяТаблица = Неопределено;
    |
    |    Для Каждого Команда Из СоответствиеКомандМодулей Цикл
    |
    |        ОбъектИндекса  = ПолучитьИнформациюИндекса(Команда.Ключ);
    |        ТекущаяТаблица = ОбъектИндекса[""Состав""];
    |        
    |        Если ОбщаяТаблица = Неопределено Тогда
    |            ОбщаяТаблица = ТекущаяТаблица;
    |        Иначе
    |            Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
    |                ЗаполнитьЗначенияСвойств(ОбщаяТаблица.Добавить(), СтрокаТаблицы);
    |            КонецЦикла;
    |        КонецЕсли;
    |
    |    КонецЦикла;
    |
    |    Возврат ОбщаяТаблица;
    |
    |КонецФункции
    |
    |
    |Функция СформироватьСтрокуВызоваМетода(Знач ПереданныеПараметры, Знач Команда, Знач Метод, Знач Динамически = Истина) Экспорт
    |
    |    Модуль             = ПолучитьСоответствиеКомандМодулей().Получить(Команда);
    |    ОбъектИндекса      = ПолучитьИнформациюИндекса(Команда);
    |    
    |    Если Не ЗначениеЗаполнено(Модуль) Тогда
    |        Возврат Новый Структура(""Ошибка,Результат"", Истина, ""Команда"");
    |    КонецЕсли;
    |    
    |    ОтборКоманды    = Новый Структура(""МетодПоиска"", вРег(Метод));
    |    ПараметрыМетода = ОбъектИндекса[""Состав""].НайтиСтроки(ОтборКоманды);
    |    
    |    Если Динамически Тогда
    |       ТекстВыполнения = СтрШаблон(ОбъектИндекса[""СтрокаПодключения""], КаталогПакетов);
    |    Иначе
    |       ТекстВыполнения = """";
    |    КонецЕсли;
    |    
    |    Если Не ЗначениеЗаполнено(ПараметрыМетода) Тогда
    |        Возврат Новый Структура(""Ошибка,Результат"", Истина, ""Метод"");
    |    КонецЕсли;
    |
    |    СтрокаВызова    = Модуль + ""."" + Метод + ""("";
    |    Счетчик         = 0;
    |
    |    Для Каждого НеобходимыйПараметр Из ПараметрыМетода Цикл
    |
    |        ИмяПараметра      = НеобходимыйПараметр.Параметр;
    |        ЗначениеПараметра = ПереданныеПараметры.Получить(ИмяПараметра);
    |
    |        Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
    |
    |            ИмяПараметра = ""Параметр"" + СтрЗаменить(ИмяПараметра, ""--"", ""_"");
    |
    |            ТекстВыполнения = ТекстВыполнения 
    |                + Символы.ПС 
    |                + ИмяПараметра
    |                + "" = """""" 
    |                + СтрЗаменить(ЗначениеПараметра, """""""", """""""""""")
    |                + """""";"";
    |
    |            Если ТребуетсяОбработкаУправляющихПоследовательностей(ИмяПараметра, ЗначениеПараметра) Тогда
    |                ТекстВыполнения = ТекстВыполнения 
    |                    + Символы.ПС 
    |                    + ""OPI_Инструменты.ЗаменитьУправляющиеПоследовательности("" + ИмяПараметра + "");"";
    |            КонецЕсли;
    |
    |            СтрокаВызова = СтрокаВызова + ИмяПараметра + "", "";
    |            Счетчик      = Счетчик + 1;
    |
    |        Иначе
    |            СтрокаВызова = СтрокаВызова + "" , "";
    |        КонецЕсли;
    |
    |    КонецЦикла;
    |
    |    ЛишниеСимволы   = 2;
    |    СтрокаВызова    = Лев(СтрокаВызова, СтрДлина(СтрокаВызова) - ЛишниеСимволы);
    |    СтрокаВызова    = СтрокаВызова + "");"";
    |    СтрокаВызова    = ""Ответ = "" + СтрокаВызова;
    |    ТекстВыполнения = ТекстВыполнения + Символы.ПС + СтрокаВызова;
    |
    |    СтруктураВозврата = Новый Структура(""Ошибка,Результат"", Ложь, ТекстВыполнения);
    |
    |    Возврат СтруктураВозврата;
    |
    |КонецФункции
    |
    |Процедура ДополнитьКэшСостава(Знач Библиотека, Знач ТаблицаПараметров, Команда = """") Экспорт
    |
    |   Команда           = ?(ЗначениеЗаполнено(Команда), Команда, Библиотека);
    |   СтрокаПодключения = """";
    |
    |   ИнформацияИндекса = Новый Структура;
    |   ИнформацияИндекса.Вставить(""Состав""           , ТаблицаПараметров);
    |   ИнформацияИндекса.Вставить(""СтрокаПодключения"", СтрокаПодключения);
    |
    |   КэшированиеИндексов.Вставить(Команда, ИнформацияИндекса);
    |   СоответствиеКомандМодулей.Вставить(Команда, Библиотека);
    |
    |КонецПроцедуры
    |
    |Функция ТребуетсяОбработкаУправляющихПоследовательностей(Знач ИмяПараметра, Знач ЗначениеПараметра)
    |
    |    ФайлПараметра         = Новый Файл(ЗначениеПараметра);
    |    ЗначениеПараметраСокр = СокрЛП(ЗначениеПараметра);
    |
    |    Возврат Не СтрНачинаетсяС(ЗначениеПараметраСокр, ""{"")
    |                И Не СтрНачинаетсяС(ЗначениеПараметраСокр, ""["") 
    |                И Не ФайлПараметра.Существует() 
    |                И Не ИмяПараметра = ""Параметр_out"";
    |
    |КонецФункции
    |");
    
КонецПроцедуры

Процедура ЗаполнитьТаблицыСостава()
    
    Для Каждого Модуль Из ОбщийМассивМодулей Цикл
        
        ТекущийМодуль = Модуль.ИмяБезРасширения;
        
        Если Не СоответствиеМодулейКоманд[ТекущийМодуль] = Неопределено Тогда    
            РазобратьМодуль(Модуль);
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура РазобратьМодуль(Модуль)
    
    ЗаписатьНачалоСоставаБиблиотеки();
    
    Парсер         = Новый ПарсерВстроенногоЯзыка;
    ДокументМодуля = Новый ТекстовыйДокумент;
    ДокументМодуля.Прочитать(Модуль.ПолноеИмя);
    ТекстМодуля = ДокументМодуля.ПолучитьТекст();
    
    СтруктураМодуля = Парсер.Разобрать(ТекстМодуля);
    ТекущаяОбласть  = "Основные методы";
    Для Каждого Метод Из СтруктураМодуля.Объявления Цикл
        
        Если Метод.Тип = "ИнструкцияПрепроцессораОбласть" Тогда
            ТекущаяОбласть = Синонимайзер(Метод.Имя);
        КонецЕсли;
        
        Если Метод.Тип = "ОбъявлениеМетода" И Метод.Сигнатура.Экспорт = Истина Тогда
            ТаблицаОписанийПараметров.Очистить();
            РазобратьКомментарийМетода(ДокументМодуля, Метод, Модуль, ТекущаяОбласть);	
            
        КонецЕсли;
        
    КонецЦикла;
    
    ЗаписатьОкончаниеСоставаБиблиотеки();

    Команда            = СоответствиеМодулейКоманд[Модуль.ИмяБезРасширения];
    СпсиокЗависимостей = Новый Структура;
    ОсновнойМодуль     = Новый Структура;

    ОпределитьСписокЗависимостей(ТекстМодуля, Модуль.ИмяБезРасширения, СпсиокЗависимостей, ОсновнойМодуль);
    ЗаписатьФункциюПолученияСтрокиПодключения(СпсиокЗависимостей, Команда, ОсновнойМодуль);

КонецПроцедуры

Процедура ОпределитьСписокЗависимостей(ТекстМодуля, ИмяМодуля, СтруктураЗависимостей, ОсновнойМодуль = Неопределено)

    
    Для Каждого Модуль Из ОбщийМассивМодулей Цикл

        ИскомаяЗависимость = Модуль.ИмяБезРасширения;

        ЭтоДополнительнаяЗависимость = СтрЧислоВхождений(ТекстМодуля, ИскомаяЗависимость) > 1;
        ЭтоОсновнойМодуль            = ИскомаяЗависимость = ИмяМодуля;

        Если Не ЭтоДополнительнаяЗависимость И Не ЭтоОсновнойМодуль Тогда
            Продолжить;
        КонецЕсли;

        АбсолютныйПуть = Модуль.ПолноеИмя;
        АбсолютныйПуть = СтрЗаменить(АбсолютныйПуть, "\", "/");
        ЧастиПути      = СтрРазделить(АбсолютныйПуть, "/");
        ЧислоЧастей    = ЧастиПути.ВГраница();

        НовыйПуть = Новый Массив;

        Для Н = 0 По ЧислоЧастей Цикл

            ОбратныйИндекс = ЧислоЧастей - Н;
            ТекущийЭлемент = ЧастиПути[ОбратныйИндекс];

            Если нРег(ТекущийЭлемент) = "oint" Тогда
                НовыйПуть.Вставить(0, "oint");
                НовыйПуть.Вставить(0, "%1");
                Прервать;
            Иначе
                НовыйПуть.Вставить(0, ТекущийЭлемент);
            КонецЕсли;

        КонецЦикла;

        НовыйПуть = СтрСоединить(НовыйПуть, "/");

        Если ЭтоОсновнойМодуль И Не ОсновнойМодуль = Неопределено Тогда
            ОсновнойМодуль.Вставить(ИскомаяЗависимость, НовыйПуть);
        КонецЕсли;
        
        Если ЭтоДополнительнаяЗависимость Тогда

            Если СтруктураЗависимостей.Свойство(ИскомаяЗависимость) Тогда
                Продолжить;
            КонецЕсли;
            
            СтруктураЗависимостей.Вставить(ИскомаяЗависимость, НовыйПуть);

            ТекстЗависимости = ПолучитьСтрокуИзДвоичныхДанных(Новый ДвоичныеДанные(Модуль.ПолноеИмя));
            ОпределитьСписокЗависимостей(ТекстЗависимости, "", СтруктураЗависимостей);
            
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьНачалоСоставаБиблиотеки()
    
    ТекущийФайлСостава = Новый ТекстовыйДокумент();
    
    ТекущийФайлСостава.ДобавитьСтроку("
    |Перем ТаблицаСостава;
    |
    |Функция ПолучитьСостав() Экспорт
    |
    |    Если ТаблицаСостава <> Неопределено Тогда
    |        Возврат ТаблицаСостава;
    |    КонецЕсли;
    |
    |    ТаблицаСостава = Новый ТаблицаЗначений();
    |    ТаблицаСостава.Колонки.Добавить(""Библиотека"");
    |    ТаблицаСостава.Колонки.Добавить(""Модуль"");
    |    ТаблицаСостава.Колонки.Добавить(""Метод"");
    |    ТаблицаСостава.Колонки.Добавить(""МетодПоиска"");
    |    ТаблицаСостава.Колонки.Добавить(""Параметр"");
    |    ТаблицаСостава.Колонки.Добавить(""Описание"");
    |    ТаблицаСостава.Колонки.Добавить(""ОписаниеМетода"");
    |    ТаблицаСостава.Колонки.Добавить(""Область"");
    |");
    
    ТаблицаОписанийПараметров = Новый ТаблицаЗначений;
    ТаблицаОписанийПараметров.Колонки.Добавить("Имя");
    ТаблицаОписанийПараметров.Колонки.Добавить("Типы");
    ТаблицаОписанийПараметров.Колонки.Добавить("Описание");
    ТаблицаОписанийПараметров.Колонки.Добавить("ЗначениеПоУмолчанию");
    
КонецПроцедуры

Процедура ЗаписатьОкончаниеСоставаБиблиотеки()
    
    ТекущийФайлСостава.ДобавитьСтроку("    Возврат ТаблицаСостава;");
    ТекущийФайлСостава.ДобавитьСтроку("КонецФункции");
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
        
КонецПроцедуры

Процедура ЗаписатьФункциюПолученияСтрокиПодключения(СпсиокЗависимостей, Библиотека, ОсновнойМодуль)

    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    ТекущийФайлСостава.ДобавитьСтроку("Функция ПолучитьСтрокуПодключения() Экспорт");
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    ТекущийФайлСостава.ДобавитьСтроку("    Возврат """);
    ТекущийФайлСостава.ДобавитьСтроку("        |Контекст = Новый Структура;");

    ШаблонКонтекста   = "        |Контекст.Вставить(""""%1"""", Неопределено);";
    ШаблонОсновного   = "        |%1 = ЗагрузитьСценарий(""""%2"""", Контекст);";
    ШаблонПодключения = "        |%1 = ЗагрузитьСценарий(""""%2"""", Контекст);
                        |        |Контекст.Вставить(""""%1"""", %1);";

    МассивКонтекста   = Новый Массив;
    МассивПодключений = Новый Массив;
    ТекстОсновного    = "";

    Для Каждого Зависимость Из СпсиокЗависимостей Цикл
        МассивКонтекста.Добавить(СтрШаблон(ШаблонКонтекста, Зависимость.Ключ));
        МассивПодключений.Добавить(СтрШаблон(ШаблонПодключения, Зависимость.Ключ, Зависимость.Значение));
    КонецЦикла;

    Для Каждого Информация Из ОсновнойМодуль Цикл
        ТекстОсновного = СтрШаблон(ШаблонОсновного, Информация.Ключ, Информация.Значение);
    КонецЦикла;

    ТекстКонтекста   = СтрСоединить(МассивКонтекста, Символы.ПС);
    ТекстПодключения = СтрСоединить(МассивПодключений, Символы.ПС);

     ТекущийФайлСостава.ДобавитьСтроку(ТекстКонтекста);
    ТекущийФайлСостава.ДобавитьСтроку("        |");
    ТекущийФайлСостава.ДобавитьСтроку(ТекстПодключения);
    ТекущийФайлСостава.ДобавитьСтроку("        |");
    ТекущийФайлСостава.ДобавитьСтроку(ТекстОсновного);
    ТекущийФайлСостава.ДобавитьСтроку("        |"" + Символы.ПС;");

    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    ТекущийФайлСостава.ДобавитьСтроку("КонецФункции ");

    ТекущийФайлСостава.Записать(КаталогСписковСотава + Библиотека + ".os");

КонецПроцедуры

Процедура РазобратьКомментарийМетода(ТекстовыйДокумент, Метод, Модуль, Область)
    
    НомерСтроки         = Метод.Начало.НомерСтроки;
    ИмяМетода           = Метод.Сигнатура.Имя;
    
    МассивКомментария = ПарсингКомментария(ТекстовыйДокумент, НомерСтроки);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    МассивПараметров  = Новый Массив;
    ОписаниеМетода    = "";
    
    СформироватьСтруктуруМетода(МассивКомментария, МассивПараметров, ОписаниеМетода);
    СформироватьТаблицуОписанийПараметров(МассивПараметров, Метод, Модуль);
    
    ДопОписание = "";
    ОпределитьДопОписание(ДопОписание, Модуль);
    
    ОписаниеМетода = СокрЛП(ОписаниеМетода) + ДопОписание;
    
    Для Каждого СтрокаПараметра Из ТаблицаОписанийПараметров Цикл
        
        ЗаписатьСозданиеПараметраСостава(СтрокаПараметра, ИмяМетода, Область, СокрЛП(ОписаниеМетода));
        ОписаниеМетода = "";
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПарсингКомментария(Знач ТекстовыйДокумент, Знач НомерСтроки)
    
    ТекущаяСтрока       = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - 1);
    ТекстКомментария    = ТекущаяСтрока;
    
    Счетчик	= 1;
    Пока СтрНайти(ТекущаяСтрока, "//") > 0 Цикл
        
        Счетчик = Счетчик + 1;
        
        ТекущаяСтрока    = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - Счетчик);
        ТекстКомментария = ТекущаяСтрока + Символы.ПС + ТекстКомментария;
        
    КонецЦикла;
    
    Если СтрНайти(ТекстКомментария, "!NOCLI") > 0 Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    МассивКомментария = СтрРазделить(ТекстКомментария, "//", Ложь);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Возврат Новый Массив;
    Иначе
        МассивКомментария.Удалить(0);
    КонецЕсли;
    
    Возврат МассивКомментария;
    
КонецФункции

Процедура СформироватьСтруктуруМетода(Знач МассивКомментария, МассивПараметров, ОписаниеМетода)
    
    ЗаписыватьПараметры = Ложь;
    ЗаписыватьОписание  = Истина;
    
    Счетчик = 0;
    Для Каждого СтрокаКомментария Из МассивКомментария Цикл
        
        Счетчик = Счетчик + 1;
        
        Если Не ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) Тогда
            ЗаписыватьОписание = Ложь;
        КонецЕсли;
        
        Если ЗаписыватьОписание = Истина И Счетчик > 1 Тогда
            ОписаниеМетода = ?(ЗначениеЗаполнено(ОписаниеМетода), ОписаниеМетода + "    |   ", ОписаниеМетода) 
            + СтрокаКомментария;
        КонецЕсли;
        
        Если СтрНайти(СтрокаКомментария, "Параметры:") > 0 Или СтрНайти(СтрокаКомментария, "Parameters:") > 0 Тогда
            ЗаписыватьПараметры = Истина;
            ЗаписыватьОписание  = Ложь;
            
        ИначеЕсли СтрНайти(СтрокаКомментария, "Возвращаемое значение:") > 0 Или СтрНайти(СтрокаКомментария, "Returns:") > 0 Тогда
            Прервать;
            
        ИначеЕсли ЗаписыватьПараметры = Истина 
            И ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) 
            И Не СтрНачинаетсяС(СокрЛП(СтрокаКомментария), "*") Тогда
            
            МассивПараметров.Добавить(СтрокаКомментария);
            
        Иначе
            Продолжить;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура СформироватьТаблицуОписанийПараметров(Знач МассивПараметров, Знач Метод, Знач Модуль = "")
    
    Разделитель = "-";
    
    Для Каждого ПараметрМетода Из МассивПараметров Цикл
        
        МассивЭлементовПараметра = СтрРазделить(ПараметрМетода, Разделитель, Ложь);
        КоличествоЭлементов      = МассивЭлементовПараметра.Количество();
        
        Для Н = 0 По МассивЭлементовПараметра.ВГраница() Цикл
            МассивЭлементовПараметра[Н] = СокрЛП(МассивЭлементовПараметра[Н]);
        КонецЦикла;
        
        Если КоличествоЭлементов < 4 Тогда
            Сообщить("Недостаточный набор данных в док. комментарии: " + Модуль.ИмяБезРасширения + " - " + Метод.Сигнатура.Имя);
            Возврат;
        КонецЕсли;
        
        
        Имя1С     = МассивЭлементовПараметра[0];
        Имя       = "--" + МассивЭлементовПараметра[3];
        Типы      = МассивЭлементовПараметра[1];
        Описание  = ?(КоличествоЭлементов >= 5, МассивЭлементовПараметра[4], МассивЭлементовПараметра[2]);
        
        Если КоличествоЭлементов > 5 Или СтрНайти(Имя, " ") > 0 Тогда
            ВызватьИсключение("Некоррентный документирующий комментарий в методе: " + Модуль.ИмяБезРасширения + " - " + Метод.Сигнатура.Имя);
        КонецЕсли;
        
        НоваяСтрокаТаблицы = ТаблицаОписанийПараметров.Добавить();
        НоваяСтрокаТаблицы.Имя      = Имя;
        НоваяСтрокаТаблицы.Типы     = Типы;
        НоваяСтрокаТаблицы.Описание = Описание;
        
        НоваяСтрокаТаблицы.ЗначениеПоУмолчанию = ПолучитьЗначениеПараметраПоУмолчанию(Имя1С, Метод);
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначениеПараметраПоУмолчанию(Знач Имя, Знач Метод)
    
    Значение = "";
    
    Для Каждого ПараметрМетода Из Метод.Сигнатура.Параметры Цикл
        
        Если ПараметрМетода.Имя = Имя Тогда
            
            ЗначениеПараметра = ПараметрМетода.Значение;
            Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
                Попытка
                    Значение = ЗначениеПараметра["Элементы"][0]["Значение"];
                Исключение 
                    Значение = ЗначениеПараметра.Значение;
                КонецПопытки;
                Значение = ?(ЗначениеЗаполнено(Значение), Значение, "Пустое значение");
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Значение;
    
КонецФункции

Процедура ОпределитьДопОписание(ДопОписание, Модуль)
    
    ЕстьМассив       = Ложь;
    ЕстьДата         = Ложь;
    ТекстДополнения  = "";
    ИмяМодуля        = Модуль.ИмяБезРасширения;
    
    ДЛя Каждого СтрокаПараметра Из ТаблицаОписанийПараметров Цикл
        
        Типы = СтрокаПараметра["Типы"];
        Имя  = СтрокаПараметра["Имя"];
        
        Если СтрНайти(Типы, "Массив") > 0 Тогда
            ЕстьМассив = Истина;
        КонецЕсли;
        
        Если СтрНайти(Типы, "Дата") > 0 Тогда
            ЕстьДата = Истина;
        КонецЕсли;
        
        ОпределитьДопОписаниеПоПараметру(ТекстДополнения, ИмяМодуля, Имя)
        
    КонецЦикла;
    
    Если ЕстьМассив Тогда
        ТекстДополнения =  
        "
        |
        |    Пример указания параметра типа массив:
        |    --param ""['Val1','Val2','Val3']""
        |" + ТекстДополнения;
        
    КонецЕсли;
    
    Если ЕстьДата Тогда
        ТекстДополнения =  
        "
        |
        |    Дата указывается в формате ISO 8601:
        |    ""2024-04-07""
        |    ""2024-04-07T13:34:42+00:00"" 
        |    ""2024-04-07T13:34:42Z""
        |" + ТекстДополнения;
    КонецЕсли;
    
    ТекстДополнения = СтрЗаменить(ТекстДополнения, Символы.ПС, Символы.ПС + "    |");
    ДопОписание     = ДопОписание +  СтрЗаменить(ТекстДополнения, """", """""");
    
КонецПроцедуры

Процедура ОпределитьДопОписаниеПоПараметру(ТекстДополнения, ИмяМодуля, ИмяПараметра)
    
    ИмяФайлаДополнения    = КаталогДополненийОпций 
    + СтрЗаменить(ИмяМодуля, "OPI_", "") 
    + "/"
    + СтрЗаменить(ИмяПараметра, "--", "")
    + ".txt";
    
    ОбъектФайлаДополнения = Новый Файл(ИмяФайлаДополнения);
    
    Если Не ОбъектФайлаДополнения.Существует() Тогда
        Возврат;
    КонецЕсли;
    
    ТекстовыйДокумент = Новый ТекстовыйДокумент();
    ТекстовыйДокумент.Прочитать(ИмяФайлаДополнения, "UTF-8");
    ТекстДополненияФайла = СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
    
    Если Не ЗначениеЗаполнено(ТекстДополненияФайла) Тогда
        Возврат;
    КонецЕсли;
    
    ЧислоСтрок          = СтрЧислоСтрок(ТекстДополненияФайла);
    ВставленоПримечание = Ложь;
    ТекстДополнения     = ТекстДополнения + Символы.ПС;
    
    Для Н = 1 По ЧислоСтрок Цикл
        
        ТекущаяСтрока = СтрПолучитьСтроку(ТекстДополненияФайла, Н);
        
        Если СтрНачинаетсяС(СокрЛ(ТекущаяСтрока), "{")
            И Не ВставленоПримечание Тогда
            
            ВставленоПримечание = Истина;
            ТекстДополнения = ТекстДополнения 
            + "    Структура заполнения опции "
            + ИмяПараметра
            + ":"
            + Символы.ПС;
            
        КонецЕсли;
        
        ТекстДополнения = ТекстДополнения 
        + "    "
        + ТекущаяСтрока 
        + Символы.ПС;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура ЗаписатьСозданиеПараметраСостава(СтрокаПараметра, ИмяМетода, Область, ОписаниеМетода = "") 
    
    Имя        = СтрокаПараметра["Имя"];
    Описание   = СтрокаПараметра["Описание"];
    Значение   = СтрокаПараметра["ЗначениеПоУмолчанию"];
    Библиотека = СоответствиеМодулейКоманд.Получить(ТекущийМодуль);
    
    Если ЗначениеЗаполнено(Значение) Тогда
        Описание = Описание + " (необяз. по ум. - " + Значение + ")";
    КонецЕсли;
    
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока = ТаблицаСостава.Добавить();");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Библиотека  = """ + Библиотека + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Модуль      = """ + ТекущийМодуль + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Метод       = """ + ИмяМетода + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.МетодПоиска = """ + вРег(ИмяМетода) + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Параметр    = """ + Имя + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Описание    = """ + Описание + """;");
    ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.Область     = """ + Область + """;");
    
    Если ЗначениеЗаполнено(ОписаниеМетода) Тогда
        ТекущийФайлСостава.ДобавитьСтроку("    НоваяСтрока.ОписаниеМетода   = """ + ОписаниеМетода + """;");
    КонецЕсли;
    
    ТекущийФайлСостава.ДобавитьСтроку(Символы.ПС);
    
КонецПроцедуры

Процедура ОпределитьСоответствиеМодулейКоманд(ТекущийЯзык)
    
    СоответствиеМодулейКоманд  = Новый Соответствие();
    
    ОбщийМассивМодулей  = Новый Массив;
    
    ФайлыМодулей = НайтиФайлы("./src/" + ТекущийЯзык + "/", "*.os", Истина);
    
    Для Каждого Модуль Из ФайлыМодулей Цикл
        
        КомандаCLI     = ОпределитьКомандуCLI(Модуль.ПолноеИмя);
        НазваниеМодуля = Модуль.ИмяБезРасширения;

        Если Не ЗначениеЗаполнено(КомандаCLI) Или СокрЛП(Строка(КомандаCLI)) = "none" Тогда
            Продолжить;
        КонецЕсли;
        
        СоответствиеМодулейКоманд.Вставить(Модуль.ИмяБезРасширения, КомандаCLI);
        ОбщийМассивМодулей.Добавить(Модуль);
        
    КонецЦикла;
    
КонецПроцедуры

Функция ОпределитьКомандуCLI(Знач ПутьКМодулю)
    
    КомандаCLI     = "";
    ДокументМодуля = Новый ТекстовыйДокумент();
    Признак        = "// CLI: ";
    ДокументМодуля.Прочитать(ПутьКМодулю);
    
    Для Н = 1 По ДокументМодуля.КоличествоСтрок() Цикл
        
        ТекущаяСтрока = СокрЛП(ДокументМодуля.ПолучитьСтроку(Н));
        
        Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
            Прервать;
        КонецЕсли;
        
        Если СтрНачинаетсяС(ТекущаяСтрока, Признак) Тогда
            КомандаCLI = СтрЗаменить(ТекущаяСтрока, Признак, "");
            КомандаCLI = СокрЛП(КомандаCLI);
            Прервать;
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат КомандаCLI;
    
КонецФункции

Функция ПолучитьВерсиюПакета()
    
    Версия     = "";
    Packagedef = "./src/ru/OInt/packagedef";
    Признак    = ".Версия(""";
    
    ТекстФайла = Новый ТекстовыйДокумент();
    ТекстФайла.Прочитать(Packagedef);
    
    Для Н = 1 По ТекстФайла.КоличествоСтрок() Цикл
        
        ТекущаяСтрока = СокрЛП(ТекстФайла.ПолучитьСтроку(Н));
        Если СтрНайти(ТекущаяСтрока, Признак) Тогда
            Версия = СтрЗаменить(ТекущаяСтрока, Признак, "");
            Версия = Лев(Версия, СтрДлина(Версия) - 2);
            Прервать;
        КонецЕсли;    
    КонецЦикла;
    
    Возврат Версия;
    
КонецФункции

Функция Синонимайзер(ИмяРеквизита)
    
    Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
    
    Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);
    Для ъ=2 По ДлинаСтроки Цикл
        Символ = Сред(ИмяРеквизита, ъ, 1);
        ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
        СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
        Прописная = Символ = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        // Варианты:
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + Символ;
        ИначеЕсли Прописная И НЕ СледПрописная Тогда
            Синоним = Синоним + " " + Символ;
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;
    КонецЦикла;
    
    Синоним = ВРег(Лев(Синоним,1)) + нРег(Сред(Синоним,2));
    
    Возврат Синоним;
    
КонецФункции

Процедура СкопироватьФайлы(Знач КаталогИсточник, Знач КаталогПриемник)
    
    СоздатьКаталог(КаталогПриемник);
    
    МассивФайлов = НайтиФайлы(КаталогИсточник, "*.*", Истина);
    
    Для Каждого Файл Из МассивФайлов Цикл
        
        ПолноеИмяИсточник = Файл.ПолноеИмя;
        ПолноеИмяПриемник = КаталогПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогИсточник, "");
        
        Если Файл.ЭтоКаталог() Тогда
            СоздатьКаталог(ПолноеИмяПриемник);	
        Иначе
            КопироватьФайл(ПолноеИмяИсточник, ПолноеИмяПриемник);
        КонецЕсли;
    КонецЦикла;	
    
КонецПроцедуры

Процедура ВыолнитьДополнительныйПеревод(ТекущийЯзык)
    
    ПутьСловаря = "./service/dictionaries/" + ТекущийЯзык + ".json";
    ФайлСловаря = Новый Файл(ПутьСловаря);
    
    Если Не ФайлСловаря.Существует() Тогда 
        Возврат;
    КонецЕсли;
    
    ЧтениеJSON = Новый ЧтениеJSON();
    ЧтениеJSON.ОткрытьФайл(ПутьСловаря);
    ДанныеПревода = ПрочитатьJSON(ЧтениеJSON, Истина);
    ЧтениеJSON.Закрыть();
    
    ТЗСловаря = Новый ТаблицаЗначений();
    ТЗСловаря.Колонки.Добавить("Ключ");
    ТЗСловаря.Колонки.Добавить("Значение");
    ТЗСловаря.Колонки.Добавить("Длина");
    
    Для Каждого Элемент Из ДанныеПревода Цикл
        НоваяСтрока = ТЗСловаря.Добавить();
        НоваяСтрока.Ключ = Элемент.Ключ;
        НоваяСтрока.Значение = Элемент.Значение;
        НоваяСтрока.Длина = СтрДлина(Элемент.Ключ);
    КонецЦикла;
    
    ТЗСловаря.Сортировать("Длина УБЫВ");
    
    МассивМодулейДляПеревода = НайтиФайлы("./src/" + ТекущийЯзык + "/cli", "*", Истина);
    
    Для Каждого ПереводимыйМодуль Из МассивМодулейДляПеревода Цикл
        
        Если ПереводимыйМодуль.ЭтоКаталог() Или СтрНайти(ПереводимыйМодуль.Имя, "packagedef") <> 0 Тогда
            Продолжить;
        КонецЕсли;
        
        ТекстовыйДокумент = Новый ТекстовыйДокумент();
        ТекстовыйДокумент.Прочитать(ПереводимыйМодуль.ПолноеИмя, "UTF-8");
        ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
        
        Для Каждого Элемент Из ТЗСловаря Цикл
            ТекстМодуля = СтрЗаменить(ТекстМодуля, Элемент.Ключ, Элемент.Значение);
        КонецЦикла;

        Для Каждого СлужебныйКлюч Из СоответствиеСлужебныхКлючей Цикл
            ТекстМодуля = СтрЗаменить(ТекстМодуля, "." + СлужебныйКлюч.Ключ, "." + СлужебныйКлюч.Значение);
            ТекстМодуля = СтрЗаменить(ТекстМодуля, "(""" + СлужебныйКлюч.Ключ + """)", "(""" + СлужебныйКлюч.Значение + """)");
            ТекстМодуля = СтрЗаменить(ТекстМодуля, СлужебныйКлюч.Ключ + "(", СлужебныйКлюч.Значение + "(");
        КонецЦикла;

        ТекстМодуля = СтрЗаменить(ТекстМодуля, "Console.", "Консоль.");
        
        ТекстовыйДокумент.УстановитьТекст(ТекстМодуля);
        ТекстовыйДокумент.Записать(ПереводимыйМодуль.ПолноеИмя);
        
    КонецЦикла;
        
КонецПроцедуры

Процедура ЗаполнитьСоответствиеСлужебныхКлючей()
    
    СоответствиеСлужебныхКлючей = Новый Соответствие();
    //СоответствиеСлужебныхКлючей.Вставить("ConcatBinaryData"                 , "ConcatenateBinaryData");
	СоответствиеСлужебныхКлючей.Вставить("ConcatBinaryData"                 , "СоединитьДвоичныеДанные"); // Исправлено в 2.0
	СоответствиеСлужебныхКлючей.Вставить("GetTestList"                      , "ПолучитьСписокТестов"); // Исправлено в 2.0
	СоответствиеСлужебныхКлючей.Вставить("Exists"                           , "Exist"); // Исправлено в 2.0
	СоответствиеСлужебныхКлючей.Вставить("SetBodyFromBinaryData"            , "SetBodyFromBinary"); // Исправлено в 2.0
	СоответствиеСлужебныхКлючей.Вставить("GetBodyAsBinaryData"              , "ПолучитьТелоКакДвоичныеДанные"); // Исправлено в 2.0
	СоответствиеСлужебныхКлючей.Вставить("FileCopy"                         , "CopyFile"); // Вопрос разных имен в 8.15 и более новых версиях
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataFromString"          , "ПолучитьДвоичныеДанныеИзСтроки"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetHexStringFromBinaryData"       , "ПолучитьHexСтрокуИзДвоичныхДанных");
	СоответствиеСлужебныхКлючей.Вставить("SplitBinaryData"                  , "РазделитьДвоичныеДанные"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetStringFromBinaryData"          , "ПолучитьСтрокуИзДвоичныхДанных"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataBufferFromString"    , "ПолучитьБуферДвоичныхДанныхИзСтроки"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataFromHexString"       , "ПолучитьДвоичныеДанныеИзHexСтроки"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataBufferFromBinaryData", "ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataBufferFromHexString" , "ПолучитьБуферДвоичныхДанныхИзHexСтроки"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("GetBinaryDataFromBinaryDataBuffer", "ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных"); // В ПР
	СоответствиеСлужебныхКлючей.Вставить("WeekDay"                          , "DayOfWeek"); // Не исправлено
	СоответствиеСлужебныхКлючей.Вставить("BinDir"                           , "ProgramDirectory");
	СоответствиеСлужебныхКлючей.Вставить("OutputEncoding"                   , "КодировкаВыходногоПотока");
	СоответствиеСлужебныхКлючей.Вставить("Console."                         , "Консоль.");
	СоответствиеСлужебныхКлючей.Вставить("ThisObject"                       , "ЭтотОбъект");
	СоответствиеСлужебныхКлючей.Вставить("PositionInStream"                 , "StreamPosition");

КонецПроцедуры
