#Использовать osparser

Перем СоставОПИ;
Перем ТекстТестов;
Перем ДокументТестов;
Перем ПутиСохраненияМодулейCLI;
Перем ИмяОбластиТестов;
Перем ПолныйСостав;

Процедура СформироватьТестыCLI(Знач Корень, Знач Языки) Экспорт

	Для Каждого Язык Из Языки Цикл

		ИмяМодуляТестов    = ?(Язык = "ru", "OPI_Тесты", "OPI_Tests");
		ИмяМодуляТестовCLI = ?(Язык = "ru", "OPI_ТестыCLI", "OPI_TestsCLI");
		ИмяОбластиТестов   = ?(Язык = "ru", "АтомарныеТесты", "AtomicTests");

		ФайлСоставаОПИ  = Корень + Язык + "/cli/data/Classes/LibraryComposition.os";

		МодульТестов    = Корень + Язык + "/OInt/tests/Modules/internal/" + ИмяМодуляТестов + ".os";

		ДокументТестов = Новый ТекстовыйДокумент();
		ДокументТестов.Прочитать(МодульТестов);

		ТекстТестов    = ДокументТестов.ПолучитьТекст();

		ПодключитьСценарий(ФайлСоставаОПИ, "СоставБиблиотек" + Язык);

		СоставОПИ    = Новый("СоставБиблиотек" + Язык);
		ПолныйСостав = СоставОПИ.ПолучитьПолныйСостав();

		ПутиСохраненияМодулейCLI = Новый Массив;
		ПутиСохраненияМодулейCLI.Добавить(Корень + Язык + "/OInt/tests/Modules/internal/" + ИмяМодуляТестовCLI + ".os");
		ПутиСохраненияМодулейCLI.Добавить(Корень + Язык + "/OPI/src/CommonModules/" + ИмяМодуляТестовCLI + "/Module.bsl");

		ПреобразоватьТестыВCLI(Язык);

	КонецЦикла;
	
КонецПроцедуры

Процедура ПреобразоватьТестыВCLI(Знач Язык)

	МассивЗамен = ПолучитьМассивЗаменЗаменСтрокОсновногоМодуля(Язык);

	Для Н = 0 По МассивЗамен.ВГраница() Цикл

		ТекущаяЗамена = МассивЗамен[МассивЗамен.ВГраница() - Н];

		Текст  = ТекущаяЗамена.ТекстЗамены;
		Начало = ТекущаяЗамена.Начало;
		Конец  = ТекущаяЗамена.Конец;

		Если Не Начало = Конец Тогда

			Пока Конец > Начало Цикл
				ДокументТестов.УдалитьСтроку(Конец);
				Конец = Конец - 1;
			КонецЦикла;

		КонецЕсли;

		ДокументТестов.ЗаменитьСтроку(Начало, Текст);

	КонецЦикла;

	ТекстМодуля = ДокументТестов.ПолучитьТекст();
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "CLITestsMark = 0;", "CLITestsMark = 1;");

	Если Язык = "ru" Тогда

		ТекстМодуля = СтрЗаменить(ТекстМодуля
			, "#Использовать oint"
			, "#Использовать ""../../../tools""" + Символы.ПС + "#Использовать ""../../../core""");

		ТекстМодуля = СтрЗаменить(ТекстМодуля, "СформироватьТестыЯкс()", "СформироватьТестыЯксCLI()");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "СформироватьТестыАссертс()", "СформироватьТестыАссертсCLI()");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "// OneScript: ./OInt/tests/Modules/internal/OPI_Тесты.os", "// OneScript: ./OInt/tests/Modules/internal/OPI_ТестыCLI.os");

	Иначе

		ТекстМодуля = СтрЗаменить(ТекстМодуля
			, "#Use oint"
			, "#Use ""../../../tools""" + Символы.ПС + "#Use ""../../../core""");

		ТекстМодуля = СтрЗаменить(ТекстМодуля, "FormYAXTests()", "FormYAXTestsCLI()");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "FormAssertsTests()", "FormAssertsTestsCLI()");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "// OneScript: ./OInt/tests/Modules/internal/OPI_Tests.os", "// OneScript: ./OInt/tests/Modules/internal/OPI_TestsCLI.os");

	КонецЕсли;

	ДокументТестов.УстановитьТекст(ТекстМодуля);

	ДокументТестов.Записать(ПутиСохраненияМодулейCLI[0]);

	Если Язык = "ru" Тогда

		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Использовать ""../../../tools""",  "// #Использовать ""../../../tools""");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Использовать ""../../../core""",  "// #Использовать ""../../../core""");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Использовать asserts",  "// #Использовать asserts");	
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "УстановитьПеременнуюСреды(""OINT_TESTS_CLI"", CLITestsMark);", "Константы.ЭтоТестыCLI.Установить(CLITestsMark);")	
		
	Иначе

		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Use ""../../../tools""",  "// #Use ""../../../tools""");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Use ""../../../core""",  "// #Use ""../../../core""");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Use asserts",  "// #Use asserts");
		ТекстМодуля = СтрЗаменить(ТекстМодуля, "SetEnvironmentVariable(""OINT_TESTS_CLI"", CLITestsMark);", "Constants.IsCLITests.Set(CLITestsMark);")	

	КонецЕсли;

	ДокументТестов.УстановитьТекст(ТекстМодуля);

	ДокументТестов.Записать(ПутиСохраненияМодулейCLI[1]);
	

КонецПроцедуры

Функция ПолучитьМассивЗаменЗаменСтрокОсновногоМодуля(Знач Язык)

	МассивЗамен = Новый Массив;

	Парсер           = Новый ПарсерВстроенногоЯзыка;
	СтруктураМодуля  = Парсер.Разобрать(ТекстТестов);
	НайденыАтомарные = Ложь;

	Для Каждого Объявление Из СтруктураМодуля.Объявления Цикл

		Если Не НайденыАтомарные Тогда

			Если Объявление.Тип = "ИнструкцияПрепроцессораОбласть" Тогда

				Если Объявление.Имя = ИмяОбластиТестов Тогда
					НайденыАтомарные = Истина;	
				КонецЕсли;

			КонецЕсли;

			Продолжить;

		КонецЕсли;

		Если Объявление.Тип = "ОбъявлениеМетода" Тогда

			Для Каждого Оператор Из Объявление.Операторы Цикл

				Если Оператор.Тип = "ОператорПрисваивания" Тогда
					
					ОбработатьОператор(Оператор, Язык, МассивЗамен);

				ИначеЕсли Оператор.Тип = "ОператорЕсли" Тогда

					Для Каждого ПодОператор Из Оператор.Тогда Цикл
						ОбработатьОператор(ПодОператор, Язык, МассивЗамен);
					КонецЦикла;

				ИначеЕсли Оператор.Тип = "ОператорЦикл" Тогда

					А = Истина;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Возврат МассивЗамен;

КонецФункции

Процедура ОбработатьОператор(Оператор, Язык, МассивЗамен)

	Если Не Оператор.Тип = "ОператорПрисваивания" Тогда
		Возврат;
	КонецЕсли;

	СтрокаОбъявления      = СокрЛП(ДокументТестов.ПолучитьСтроку(Оператор.Начало.НомерСтроки));
	Команда               = Неопределено;

	Для Каждого МодульБиблиотеки Из СоставОПИ.ПолучитьСоответствиеКомандМодулей() Цикл

		Если СтрНайти(СтрокаОбъявления, МодульБиблиотеки.Значение) <> 0 Тогда
			Команда = МодульБиблиотеки.Ключ;
		КонецЕсли;

	КонецЦикла;

	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Команда = "ftp" Тогда
		А = Истина;
	КонецЕсли;

	ПерваяСтрока    = Оператор.Начало.НомерСтроки;
	ПоследняяСтрока = ПерваяСтрока;

	СтрокаОбъявления = СтрЗаменить(СтрокаОбъявления, "//", "▛");
	Счетчик = 0;

	СтрокаОбъявления = СтрРазделить(СокрЛП(СтрокаОбъявления), "▛")[0];

	Пока СтрНайти(СтрокаОбъявления, ");") = 0 И Не СтрЗаканчиваетсяНа(СтрокаОбъявления, ";") Цикл

		Счетчик = Счетчик + 1;

		ПоследняяСтрока  = ПерваяСтрока + Счетчик;
		СтрокаОбъявления = СтрокаОбъявления + СокрЛП(ДокументТестов.ПолучитьСтроку(ПоследняяСтрока));

	КонецЦикла;

	Если Не СтрЗаканчиваетсяНа(СтрокаОбъявления, ");") Тогда
		Возврат;
	КонецЕсли;

	ИмяПеременной = Оператор.ЛевыйОперанд.Голова.Имя;

	Вызов = Оператор.ПравыйОперанд.Хвост[0];
	Метод = Вызов.Имя;

	Параметры = Новый Массив;

	Для Каждого Аргумент Из Вызов.Аргументы Цикл

		Если Не ЗначениеЗаполнено(Аргумент) Тогда

			Параметры.Добавить("");

		ИначеЕсли Аргумент.Тип = "ВыражениеИдентификатор" Тогда

			Параметры.Добавить(Аргумент.Голова.Имя);

		ИначеЕсли Аргумент.Тип = "ВыражениеСтроковое" Тогда

			Параметры.Добавить("""" + Аргумент.Элементы[0].Значение + """");

		ИначеЕсли Аргумент.Тип = "ВыражениеЛитерал" Тогда

			Если Аргумент.Вид = "Число" Тогда
				Параметры.Добавить(Аргумент.Значение);
			Иначе
				Параметры.Добавить(Аргумент.Вид);
			КонецЕсли;

		ИначеЕсли Аргумент.Тип = "ВыражениеНовый" Тогда

			Параметры.Добавить("Новый " + Аргумент.Имя);

		Иначе

			ВызватьИсключение "Неподдерживаемый тип параметра: " + Аргумент.Тип;

		КонецЕсли;

	КонецЦикла;

	Отбор            = ?(Язык = "ru", "Библиотека,МетодПоиска", "Library,SearchMethod");
	ОтборСостава     = Новый Структура(Отбор, Команда, вРег(Метод));
	СписокПараметров = ПолныйСостав.НайтиСтроки(ОтборСостава);

	Если СписокПараметров.Количество() = 0 Тогда
		Сообщить(СтрШаблон("Нет данных CLI для %1 %2", Команда, Метод));
		Возврат;
	КонецЕсли;

	ТекстЗамены = "    Опции = Новый Структура;";

	Для Н = 0 По Параметры.ВГраница() Цикл

		ЗначениеПараметра = СокрЛП(Параметры[Н]);

		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;

		Попытка
			ИмяПараметра      = СтрЗаменить(СписокПараметров[Н].Параметр, "--", "");
		Исключение
			А = 1;
		КонецПопытки;

		ТекстЗамены = ТекстЗамены + Символы.ПС + СтрШаблон("    Опции.Вставить(""%1"", %2);", ИмяПараметра, ЗначениеПараметра);

	КонецЦикла;

	ТекстЗамены = ТекстЗамены + Символы.ПС + Символы.ПС;
	ТекстЗамены = ТекстЗамены 
		+ СтрШаблон("    %1 = OPI_ПолучениеДанныхТестов.ВыполнитьТестCLI(""%2"", ""%3"", Опции);", ИмяПеременной, Команда, Метод)
		+ Символы.ПС;

	МассивЗамен.Добавить(Новый Структура("Начало,Конец,ТекстЗамены", ПерваяСтрока, ПоследняяСтрока, ТекстЗамены));

КонецПроцедуры


//Языки = Новый Массив;
//Языки.Добавить("ru");

//СформироватьТестыCLI("./src/", Языки);