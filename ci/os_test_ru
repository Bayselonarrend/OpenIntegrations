def runCommand(String command) {
    if (isUnix()) {
        sh(script: command)
    } else {
        bat(script: command)
    }
}

pipeline {
	agent {
		label 'windows'
	}
	stages {

        stage('Read stages config') {
            steps {
                script {
                    def configText = readFile './service/tests_config.json'
                    env.STAGES_CONFIG = configText
					echo "Config loaded: ${configText}"
                }
            }
        }

		stage('Remove OInt from OneScript Lib') {
			steps {
				script {
					try {
						// Удаление каталога C:\Program Files\OneScript\lib\oint, если существует
						powershell encoding: 'UTF-8', script: '''
							$dirPath = "C:\\Program Files\\OneScript\\lib\\oint"
							if (Test-Path $dirPath) {
								Write-Host "Каталог oint найден. Удаляем..."
								Remove-Item -Path $dirPath -Recurse -Force
								Write-Host "Каталог oint успешно удален."
							} else {
								Write-Host "Каталог oint не найден. Пропускаем удаление."
							}
						'''

						// Проверяем, что каталог действительно удален
						powershell encoding: 'UTF-8', script: '''
							$dirPath = "C:\\Program Files\\OneScript\\lib\\oint"
							if (Test-Path $dirPath) {
								Write-Error "Ошибка: Каталог oint всё ещё существует после попытки удаления!"
								exit 1
							} else {
								Write-Host "Проверка: Каталог oint отсутствует после удаления."
							}
						'''
					} catch (Exception e) {
						echo "Произошла ошибка при удалении каталога oint: ${e.getMessage()}"
						currentBuild.result = 'FAILURE'
						error("Удаление каталога oint завершено с ошибкой.")
					}
				}
			}
		}
      	stage('Build OInt from source and decrypt secret data'){
         		steps{
            		powershell encoding: 'UTF-8', script:'cd ./src/ru/OInt; opm build; opm install oint-1.28.0.ospx; del oint-1.28.0.ospx'
            		withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
              			bat encoding: 'UTF-8', script:'gpg --quiet --batch --yes --decrypt --passphrase="%GPGKEY%" --output ./data.json ./data.json.gpg'
            		}
         		}
      	}
		stage('Create ReportPortal launch'){
				steps{
					bat encoding: 'UTF-8', script:'chcp 65001 & oscript ./ci/os/rp_start.os'
				}
		}

		stage('Testing-Telegram') {
            when {
                expression { return shouldRunStage('Telegram') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ПолучитьИнформациюБота'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ПолучитьОбновления'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_УстановитьWebhook'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьТекстовоеСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьКартинку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьВидео'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьАудио'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьДокумент'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьГифку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьМедиагруппу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьМестоположение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьКонтакт'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ОтправитьОпрос'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ПереслатьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_БанРазбан'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_СоздатьСсылкуПриглашение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ЗакрепитьОткрепитьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ПолучитьЧислоУчастников'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ПолучитьСписокАватаровФорума'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_СоздатьУдалитьТемуФорума'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_ИзменитьИмяГлавнойТемы'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Телеграм_СкрытьПоказатьГлавнуюТему'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-VK') {
            when {
                expression { return shouldRunStage('VK') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьСсылкуТокена'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьУдалитьПост'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьСоставнойПост'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьОпрос'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СохранитьУдалитьКартинку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьИсторию'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_МетодыОбсуждений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ЛайкРепостКоммент'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСтатистику'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСтатистикуПостов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьРекламнуюКампанию'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ОтправитьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьКатегорииТоваров'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьТоварПодборку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_СоздатьТоварСоСвойствами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСписокТоваров'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСписокПодборок'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСписокСвойств'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ПолучитьСписокЗаказов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВК_ЗагрузитьВидео'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Viber') {
            when {
                expression { return shouldRunStage('Viber') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Вайбер_ПолучениеИнформации'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Вайбер_ОтправкаСообщений'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Twitter') {
            when {
                expression { return shouldRunStage('Twitter') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Твиттер_ДанныеАккаунта'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Твиттер_Твиты'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-FTP') {
            when {
                expression { return shouldRunStage('FTP') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'FT_РаботаСДиректориями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'FT_РаботаСФайлами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'FT_ОсновныеМетоды'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-SSH') {
            when {
                expression { return shouldRunStage('SSH') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SShell_ОсновныеМетоды'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-SFTP') {
            when {
                expression { return shouldRunStage('SFTP') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SF_ОсновныеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SF_РаботаСДиректориями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SF_РаботаСФайлами'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-PostgreSQL') {
            when {
                expression { return shouldRunStage('PostgreSQL') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Postgres_ОсновныеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Postgres_ORM'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-MySQL') {
            when {
                expression { return shouldRunStage('MySQL') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'MYS_ОсновныеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'MYS_ORM'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-MSSQL') {
            when {
                expression { return shouldRunStage('MSSQL') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'MSS_ОсновныеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'MSS_ORM'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-SQLite') {
            when {
                expression { return shouldRunStage('SQLite') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SQLL_ОсновныеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'SQLL_ORM'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-RCON') {
            when {
                expression { return shouldRunStage('RCON') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'RC_ВыполнениеКоманд'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-YandexDisk') {
            when {
                expression { return shouldRunStage('YandexDisk') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ПолучитьИнформациюОДиске'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_СоздатьПапку'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ЗагрузитьПоАдресуПолучитьОбъект'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ЗагрузитьУдалитьФайл'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_СоздатьКопиюОбъекта'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ПолучитьСсылкуНаСкачивание'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ПолучитьСписокФайлов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ПереместитьОбъект'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ДействияПубличныхОбъектов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯДиск_ПолучитьСписокОпубликованных'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GoogleWorkspace') {
            when {
                expression { return shouldRunStage('GoogleWorkspace') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГВ_Авторизация'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GoogleCalendar') {
            when {
                expression { return shouldRunStage('GoogleCalendar') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГВ_Авторизация'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГК_ПолучитьСписокКалендарей'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГК_СоздатьУдалитьКалендарь'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГК_СоздатьУдалитьСобытие'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GoogleDrive') {
            when {
                expression { return shouldRunStage('GoogleDrive') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГВ_Авторизация'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГД_ПолучитьСписокКаталогов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГД_ЗагрузитьУдалитьФайл'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГД_СоздатьУдалитьКомментарий'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГД_СоздатьКаталог'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GoogleSheets') {
            when {
                expression { return shouldRunStage('GoogleSheets') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГВ_Авторизация'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГТ_СоздатьТаблицу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ГТ_ЗаполнитьОчиститьЯчейки'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Notion') {
            when {
                expression { return shouldRunStage('Notion') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НоушнАпи_СоздатьСтраницу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НоушнАпи_СоздатьИзменитьБазу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НоушнАпи_СоздатьУдалитьБлок'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НоушнАпи_ПолучитьПользователей'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Slack') {
            when {
                expression { return shouldRunStage('Slack') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_ПолучитьИнформацию'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_ОтправитьУдалитьСообщение'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_СоздатьАрхивироватьКанал'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_ОткрытьЗакрытьДиалог'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_ЗагрузитьУдалитьФайл'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Слак_ЗагрузитьУдалитьВФ'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Airtable') {
            when {
                expression { return shouldRunStage('Airtable') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'АТ_СоздатьБазу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'АТ_СоздатьТаблицу'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'АТ_СоздатьПоле'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'АТ_СоздатьУдалитьЗаписи'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Dropbox') {
            when {
                expression { return shouldRunStage('Dropbox') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_ПолучитьОбновитьТокен'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_ЗагрузитьФайл'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_ЗагрузитьФайлПоURL'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_СоздатьКаталог'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_СоздатьУдалитьТег'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_ПолучитьАккаунт'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_РаботаСДоступами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ДропБокс_ПолучитьСписокФайловПапки'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Bitrix24') {
            when {
                expression { return shouldRunStage('Bitrix24') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСТокеном'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_СерверноеВремя'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСНовостями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСЗадачами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСКомментариями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСДиском'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_Канбан'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_УчетРабочегоВремени'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСЧатами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСУведомлениями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСПолямиЗадач'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_УправлениеПодразделениями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_УправлениеПользователями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСЛидами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСоСделками'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'Б24_РаботаСКалендарями'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-VkTeams') {
            when {
                expression { return shouldRunStage('VkTeams') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВКТ_ОтправкаСообщений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВКТ_ОбщиеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ВКТ_УправлениеЧатами'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Neocities') {
            when {
                expression { return shouldRunStage('Neocities') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НС_РаботаСФайлами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'НС_ПолучениеДанных'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-CDEK') {
            when {
                expression { return shouldRunStage('CDEK') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'СдэкАПИ_ОбщиеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'СдэкАПИ_РаботаСЗаказами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'СдэкАПИ_РаботаСЗаявкамиНаВызовКурьера'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-YandexMetrika') {
            when {
                expression { return shouldRunStage('YandexMetrika') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯМетрика_УправлениеМетками'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯМетрика_УправлениеСчетчиками'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'ЯМетрика_УправлениеОперациями'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-S3') {
            when {
                expression { return shouldRunStage('S3') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'AWS_ОбщиеМетоды'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'AWS_РаботаСБакетами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'AWS_РаботаСОбъектами'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-TCP') {
            when {
                expression { return shouldRunStage('TCP') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'TC_Клиент'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GreenAPI') {
            when {
                expression { return shouldRunStage('GreenAPI') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_УправлениеГруппами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_ОтправкаСообщений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_ПолучениеУведомлений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_ОчередьСообщений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_ЖурналыСообщений'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GAPI_Аккаунт'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-GreenMax') {
            when {
                expression { return shouldRunStage('GreenMax') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'GMax_Аккаунт'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-Ollama') {
            when {
                expression { return shouldRunStage('Ollama') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OLLM_ОбработкаЗапросов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OLLM_РаботаСМоделями'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OLLM_РаботаСBlob'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-HTTPКлиент') {
            when {
                expression { return shouldRunStage('HTTPКлиент') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_Инициализация'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_УстановкаТела'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_Настройки'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_УстановкаЗаголовков'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_Авторизация'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_ОбработкаЗапроса'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'HTTP_ПолучениеОтвета'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-OpenAI') {
            when {
                expression { return shouldRunStage('OpenAI') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OAI_ОбработкаЗапросов'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OAI_Ассистенты'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OAI_РаботаСФайлами'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OAI_РаботаСАудио'],
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'OAI_РаботаСМоделями'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}
		stage('Testing-ReportPortal') {
            when {
                expression { return shouldRunStage('ReportPortal') }
            }
			steps {
				script {
					def tests = [
						['./src/ru/OInt/tests/Modules/internal/OPI_Тесты.os', 'RPortal_Авторизация'],
					]
					for (test in tests) {
						catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
							runLibraryTest(test[0], test[1])
						}
					}
				}
			}
		}

	}
	post{
		always{
			script {
				catchError() {   
				    runCommand('oscript ./ci/os/rp_stop.os "ru"')
			    }
				withCredentials([string(credentialsId: 'gpgkey', variable: 'GPGKEY')]) {
					bat encoding: 'UTF-8', script:'del "./data.json.gpg"'
					bat encoding: 'UTF-8', script:'gpg --batch --symmetric --cipher-algo AES256 --passphrase="%GPGKEY%" ./data.json'
					bat encoding: 'UTF-8', script:'del "./data.json"'
				}
				withCredentials([gitUsernamePassword(credentialsId: 'gitmain', gitToolName: 'Default')]) {
					bat "git config user.email vitaly.the.alpaca@gmail.com"
					bat 'git config user.name "Vitaly the Alpaca (bot)"'
					bat "git config --global core.ignorecase true"
					bat "git add ."
					bat 'git commit -m "Test data update (Jenkins)"'
					bat "git push origin HEAD:main"
				}	
			}
		}
	}
}

def shouldRunStage(stageName) {
    try {
        if (!env.STAGES_CONFIG) {
            echo "[WARN] STAGES_CONFIG not set. Assuming stage '${stageName}' is ENABLED."
            return true
        }
        def config = readJSON text: env.STAGES_CONFIG
        def value = config[stageName]
        if (value == null) {
            echo "[WARN] Stage '${stageName}' not found in config. Defaulting to DISABLED."
            return false
        }
        return value == true
    } catch (Exception e) {
        echo "[ERROR] Failed to parse STAGES_CONFIG: ${e.message}"
        echo "Raw config: ${env.STAGES_CONFIG}"
        return true
    }
}

def runLibraryTest(String configPath, String libraryName) {
    try {
        echo "Executing: 1testrunner -run \"${configPath}\" \"${libraryName}\""
        runCommand("1testrunner -run \"${configPath}\" \"${libraryName}\"")
        echo "Test ${libraryName} completed successfully"
    } catch (Exception e) {
        echo "ERROR in test ${libraryName}: ${e.getMessage()}"
        throw e 
    }
}